
user_app_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007498  08007498  00008498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080076ac  080076ac  000086ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b8  080076b8  000086b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080076bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000060  0800771c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800771c  000095b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015593  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de4  00000000  00000000  0001e623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00021408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f64  00000000  00000000  00022760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017909  00000000  00000000  000236c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188e6  00000000  00000000  0003afcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000930e5  00000000  00000000  000538b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6998  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f8  00000000  00000000  000e69dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000ec2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800747c 	.word	0x0800747c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800747c 	.word	0x0800747c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000d5c:	b4b0      	push	{r4, r5, r7}
 8000d5e:	b08f      	sub	sp, #60	@ 0x3c
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000d64:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000d70:	2307      	movs	r3, #7
 8000d72:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d7c:	23ff      	movs	r3, #255	@ 0xff
 8000d7e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d82:	2364      	movs	r3, #100	@ 0x64
 8000d84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	461d      	mov	r5, r3
 8000d90:	f107 040c 	add.w	r4, r7, #12
 8000d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000da0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	373c      	adds	r7, #60	@ 0x3c
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bcb0      	pop	{r4, r5, r7}
 8000dac:	4770      	bx	lr

08000dae <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6898      	ldr	r0, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	899b      	ldrh	r3, [r3, #12]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f002 fe8f 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f002 f886 	bl	8002ed8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6898      	ldr	r0, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	899b      	ldrh	r3, [r3, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f002 fe84 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ddc:	2064      	movs	r0, #100	@ 0x64
 8000dde:	f002 f87b 	bl	8002ed8 <HAL_Delay>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000df4:	2101      	movs	r1, #1
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fa15 	bl	8001226 <LoRa_read>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e00:	7bbb      	ldrb	r3, [r7, #14]
 8000e02:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d107      	bne.n	8000e1a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	f023 0307 	bic.w	r3, r3, #7
 8000e10:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
 8000e18:	e049      	b.n	8000eae <LoRa_gotoMode+0xc4>
	}else if (mode == STNBY_MODE){
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d10c      	bne.n	8000e3a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e24:	f023 0307 	bic.w	r3, r3, #7
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	61da      	str	r2, [r3, #28]
 8000e38:	e039      	b.n	8000eae <LoRa_gotoMode+0xc4>
	}else if (mode == TRANSMIT_MODE){
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d10c      	bne.n	8000e5a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e44:	f023 0307 	bic.w	r3, r3, #7
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	f043 0303 	orr.w	r3, r3, #3
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2203      	movs	r2, #3
 8000e56:	61da      	str	r2, [r3, #28]
 8000e58:	e029      	b.n	8000eae <LoRa_gotoMode+0xc4>
	}else if (mode == RXCONTIN_MODE){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d10c      	bne.n	8000e7a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e64:	f023 0307 	bic.w	r3, r3, #7
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f043 0305 	orr.w	r3, r3, #5
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	61da      	str	r2, [r3, #28]
 8000e78:	e019      	b.n	8000eae <LoRa_gotoMode+0xc4>
	}else if (mode == RXSINGLE_MODE){
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b06      	cmp	r3, #6
 8000e7e:	d10c      	bne.n	8000e9a <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x06;
 8000e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e84:	f023 0307 	bic.w	r3, r3, #7
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f043 0306 	orr.w	r3, r3, #6
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2206      	movs	r2, #6
 8000e96:	61da      	str	r2, [r3, #28]
 8000e98:	e009      	b.n	8000eae <LoRa_gotoMode+0xc4>
	}else if (mode == CAD_MODE) {   // Thêm chế độ CAD
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	d106      	bne.n	8000eae <LoRa_gotoMode+0xc4>
        data = (read & 0xF8) | 0x07;
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	f043 0307 	orr.w	r3, r3, #7
 8000ea6:	73fb      	strb	r3, [r7, #15]
        _LoRa->current_mode = CAD_MODE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	61da      	str	r2, [r3, #28]
    }

	LoRa_write(_LoRa, RegOpMode, data);
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f9d3 	bl	8001260 <LoRa_write>
	//HAL_Delay(10);
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	889b      	ldrh	r3, [r3, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	f002 fe01 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6998      	ldr	r0, [r3, #24]
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	f003 fc82 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY){
 8000ef2:	bf00      	nop
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 f882 	bl	8005002 <HAL_SPI_GetState>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d1f7      	bne.n	8000ef4 <LoRa_readReg+0x32>
	}
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6998      	ldr	r0, [r3, #24]
 8000f08:	8b3a      	ldrh	r2, [r7, #24]
 8000f0a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	f003 fdb5 	bl	8004a7e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY){
 8000f14:	bf00      	nop
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f871 	bl	8005002 <HAL_SPI_GetState>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d1f7      	bne.n	8000f16 <LoRa_readReg+0x54>
	}
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	889b      	ldrh	r3, [r3, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	f002 fdd7 	bl	8003ae4 <HAL_GPIO_WritePin>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	889b      	ldrh	r3, [r3, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f002 fdc3 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f001 ffba 	bl	8002ed8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	889b      	ldrh	r3, [r3, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f002 fdb8 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6998      	ldr	r0, [r3, #24]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	f003 fc39 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f84:	bf00      	nop
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 f839 	bl	8005002 <HAL_SPI_GetState>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d1f7      	bne.n	8000f86 <LoRa_writeReg+0x48>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6998      	ldr	r0, [r3, #24]
 8000f9a:	8b3a      	ldrh	r2, [r7, #24]
 8000f9c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	f003 fc28 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fa6:	bf00      	nop
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 f828 	bl	8005002 <HAL_SPI_GetState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1f7      	bne.n	8000fa8 <LoRa_writeReg+0x6a>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f002 fd8e 	bl	8003ae4 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000fdc:	2126      	movs	r1, #38	@ 0x26
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f921 	bl	8001226 <LoRa_read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e003      	b.n	8001000 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	f023 0308 	bic.w	r3, r3, #8
 8000ffe:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	461a      	mov	r2, r3
 8001004:	2126      	movs	r1, #38	@ 0x26
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f92a 	bl	8001260 <LoRa_write>
	HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f001 ff63 	bl	8002ed8 <HAL_Delay>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800101c:	b580      	push	{r7, lr}
 800101e:	b096      	sub	sp, #88	@ 0x58
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001024:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <LoRa_setAutoLDO+0x68>)
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4611      	mov	r1, r2
 800102c:	2250      	movs	r2, #80	@ 0x50
 800102e:	4618      	mov	r0, r3
 8001030:	f005 fe96 	bl	8006d60 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800103a:	461a      	mov	r2, r3
 800103c:	2301      	movs	r3, #1
 800103e:	4093      	lsls	r3, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa6f 	bl	8000524 <__aeabi_i2d>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	3358      	adds	r3, #88	@ 0x58
 8001050:	443b      	add	r3, r7
 8001052:	3b50      	subs	r3, #80	@ 0x50
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fbf8 	bl	800084c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fcda 	bl	8000a1c <__aeabi_d2iz>
 8001068:	4603      	mov	r3, r0
 800106a:	2b10      	cmp	r3, #16
 800106c:	bfcc      	ite	gt
 800106e:	2301      	movgt	r3, #1
 8001070:	2300      	movle	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffaa 	bl	8000fd0 <LoRa_setLowDaraRateOptimization>
}
 800107c:	bf00      	nop
 800107e:	3758      	adds	r7, #88	@ 0x58
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	08007498 	.word	0x08007498

08001088 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	04db      	lsls	r3, r3, #19
 8001096:	115b      	asrs	r3, r3, #5
 8001098:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	0c1b      	lsrs	r3, r3, #16
 800109e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	461a      	mov	r2, r3
 80010a4:	2106      	movs	r1, #6
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f8da 	bl	8001260 <LoRa_write>
	HAL_Delay(5);
 80010ac:	2005      	movs	r0, #5
 80010ae:	f001 ff13 	bl	8002ed8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	461a      	mov	r2, r3
 80010bc:	2107      	movs	r1, #7
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f8ce 	bl	8001260 <LoRa_write>
	HAL_Delay(5);
 80010c4:	2005      	movs	r0, #5
 80010c6:	f001 ff07 	bl	8002ed8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	461a      	mov	r2, r3
 80010d2:	2108      	movs	r1, #8
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f8c3 	bl	8001260 <LoRa_write>
	HAL_Delay(5);
 80010da:	2005      	movs	r0, #5
 80010dc:	f001 fefc 	bl	8002ed8 <HAL_Delay>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b0c      	cmp	r3, #12
 80010f6:	dd01      	ble.n	80010fc <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80010f8:	230c      	movs	r3, #12
 80010fa:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b06      	cmp	r3, #6
 8001100:	dc01      	bgt.n	8001106 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001102:	2307      	movs	r3, #7
 8001104:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001106:	211e      	movs	r1, #30
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f88c 	bl	8001226 <LoRa_read>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001112:	200a      	movs	r0, #10
 8001114:	f001 fee0 	bl	8002ed8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	b2da      	uxtb	r2, r3
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4413      	add	r3, r2
 800112a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	461a      	mov	r2, r3
 8001130:	211e      	movs	r1, #30
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f894 	bl	8001260 <LoRa_write>
	HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f001 fecd 	bl	8002ed8 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff6c 	bl	800101c <LoRa_setAutoLDO>
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	461a      	mov	r2, r3
 800115c:	2109      	movs	r1, #9
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f87e 	bl	8001260 <LoRa_write>
	HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f001 feb7 	bl	8002ed8 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	2b2c      	cmp	r3, #44	@ 0x2c
 8001188:	d801      	bhi.n	800118e <LoRa_setOCP+0x1a>
		current = 45;
 800118a:	232d      	movs	r3, #45	@ 0x2d
 800118c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2bf0      	cmp	r3, #240	@ 0xf0
 8001192:	d901      	bls.n	8001198 <LoRa_setOCP+0x24>
		current = 240;
 8001194:	23f0      	movs	r3, #240	@ 0xf0
 8001196:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2b78      	cmp	r3, #120	@ 0x78
 800119c:	d809      	bhi.n	80011b2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	3b2d      	subs	r3, #45	@ 0x2d
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <LoRa_setOCP+0x78>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1052      	asrs	r2, r2, #1
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e00b      	b.n	80011ca <LoRa_setOCP+0x56>
	else if(current <= 240)
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	2bf0      	cmp	r3, #240	@ 0xf0
 80011b6:	d808      	bhi.n	80011ca <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	331e      	adds	r3, #30
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <LoRa_setOCP+0x78>)
 80011be:	fb82 1203 	smull	r1, r2, r2, r3
 80011c2:	1092      	asrs	r2, r2, #2
 80011c4:	17db      	asrs	r3, r3, #31
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	3320      	adds	r3, #32
 80011ce:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	461a      	mov	r2, r3
 80011d4:	210b      	movs	r1, #11
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f842 	bl	8001260 <LoRa_write>
	HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f001 fe7b 	bl	8002ed8 <HAL_Delay>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	66666667 	.word	0x66666667

080011f0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011f8:	211e      	movs	r1, #30
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f813 	bl	8001226 <LoRa_read>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	f043 0307 	orr.w	r3, r3, #7
 800120a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	461a      	mov	r2, r3
 8001210:	211e      	movs	r1, #30
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f824 	bl	8001260 <LoRa_write>
	HAL_Delay(10);
 8001218:	200a      	movs	r0, #10
 800121a:	f001 fe5d 	bl	8002ed8 <HAL_Delay>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af02      	add	r7, sp, #8
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001238:	b2db      	uxtb	r3, r3
 800123a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800123c:	f107 030f 	add.w	r3, r7, #15
 8001240:	f107 010e 	add.w	r1, r7, #14
 8001244:	2201      	movs	r2, #1
 8001246:	9200      	str	r2, [sp, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fe39 	bl	8000ec2 <LoRa_readReg>
	HAL_Delay(5);
 8001250:	2005      	movs	r0, #5
 8001252:	f001 fe41 	bl	8002ed8 <HAL_Delay>

	return read_data;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
 800126c:	4613      	mov	r3, r2
 800126e:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001276:	b2db      	uxtb	r3, r3
 8001278:	73bb      	strb	r3, [r7, #14]
	data = value;
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800127e:	f107 030f 	add.w	r3, r7, #15
 8001282:	f107 010e 	add.w	r1, r7, #14
 8001286:	2201      	movs	r2, #1
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fe56 	bl	8000f3e <LoRa_writeReg>
	HAL_Delay(5);
 8001292:	2005      	movs	r0, #5
 8001294:	f001 fe20 	bl	8002ed8 <HAL_Delay>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	72fb      	strb	r3, [r7, #11]
 80012b0:	4613      	mov	r3, r2
 80012b2:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	889b      	ldrh	r3, [r3, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	f002 fc0b 	bl	8003ae4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6998      	ldr	r0, [r3, #24]
 80012d2:	f107 0117 	add.w	r1, r7, #23
 80012d6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80012da:	2201      	movs	r2, #1
 80012dc:	f003 fa8b 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012e0:	bf00      	nop
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fe8b 	bl	8005002 <HAL_SPI_GetState>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d1f7      	bne.n	80012e2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6998      	ldr	r0, [r3, #24]
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f003 fa79 	bl	80047f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001304:	bf00      	nop
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fe79 	bl	8005002 <HAL_SPI_GetState>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d1f7      	bne.n	8001306 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	HAL_Delay(5);
 8001316:	2005      	movs	r0, #5
 8001318:	f001 fdde 	bl	8002ed8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	889b      	ldrh	r3, [r3, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f002 fbdc 	bl	8003ae4 <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

	return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	4611      	mov	r1, r2
 8001356:	461a      	mov	r2, r3
 8001358:	460b      	mov	r3, r1
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001366:	2101      	movs	r1, #1
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff fd3e 	bl	8000dea <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800136e:	210e      	movs	r1, #14
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff ff58 	bl	8001226 <LoRa_read>
 8001376:	4603      	mov	r3, r0
 8001378:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	461a      	mov	r2, r3
 800137e:	210d      	movs	r1, #13
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff ff6d 	bl	8001260 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	461a      	mov	r2, r3
 800138a:	2122      	movs	r1, #34	@ 0x22
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff ff67 	bl	8001260 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	2100      	movs	r1, #0
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff ff81 	bl	80012a0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800139e:	2103      	movs	r1, #3
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff fd22 	bl	8000dea <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013a6:	2112      	movs	r1, #18
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff3c 	bl	8001226 <LoRa_read>
 80013ae:	4603      	mov	r3, r0
 80013b0:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80013b2:	7cfb      	ldrb	r3, [r7, #19]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00a      	beq.n	80013d2 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013bc:	22ff      	movs	r2, #255	@ 0xff
 80013be:	2112      	movs	r1, #18
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff ff4d 	bl	8001260 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80013c6:	6979      	ldr	r1, [r7, #20]
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fd0e 	bl	8000dea <LoRa_gotoMode>
			return 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	80bb      	strh	r3, [r7, #4]
 80013d8:	88bb      	ldrh	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d105      	bne.n	80013ea <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80013de:	6979      	ldr	r1, [r7, #20]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff fd02 	bl	8000dea <LoRa_gotoMode>
				return 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e003      	b.n	80013f2 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f001 fd74 	bl	8002ed8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013f0:	e7d9      	b.n	80013a6 <LoRa_transmit+0x5c>
	}
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001402:	2105      	movs	r1, #5
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fcf0 	bl	8000dea <LoRa_gotoMode>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <LoRa_startCAD>:

// Channel Activity Detection
void LoRa_startCAD(LoRa* _LoRa){
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, CAD_MODE);
 800141a:	2107      	movs	r1, #7
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fce4 	bl	8000dea <LoRa_gotoMode>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800142a:	b590      	push	{r4, r7, lr}
 800142c:	b089      	sub	sp, #36	@ 0x24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	4613      	mov	r3, r2
 8001436:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	e007      	b.n	8001452 <LoRa_receive+0x28>
		data[i]=0;
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	3301      	adds	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	429a      	cmp	r2, r3
 8001458:	dbf3      	blt.n	8001442 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800145a:	2101      	movs	r1, #1
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fcc4 	bl	8000dea <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001462:	2112      	movs	r1, #18
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fede 	bl	8001226 <LoRa_read>
 800146a:	4603      	mov	r3, r0
 800146c:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d02f      	beq.n	80014d8 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001478:	22ff      	movs	r2, #255	@ 0xff
 800147a:	2112      	movs	r1, #18
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff feef 	bl	8001260 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001482:	2113      	movs	r1, #19
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fece 	bl	8001226 <LoRa_read>
 800148a:	4603      	mov	r3, r0
 800148c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800148e:	2110      	movs	r1, #16
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff fec8 	bl	8001226 <LoRa_read>
 8001496:	4603      	mov	r3, r0
 8001498:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	461a      	mov	r2, r3
 800149e:	210d      	movs	r1, #13
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff fedd 	bl	8001260 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80014a6:	7cba      	ldrb	r2, [r7, #18]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4293      	cmp	r3, r2
 80014ac:	bf28      	it	cs
 80014ae:	4613      	movcs	r3, r2
 80014b0:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e00b      	b.n	80014d0 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	18d4      	adds	r4, r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff feb0 	bl	8001226 <LoRa_read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	7ffb      	ldrb	r3, [r7, #31]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbef      	blt.n	80014b8 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80014d8:	2105      	movs	r1, #5
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fc85 	bl	8000dea <LoRa_gotoMode>
    return min;
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}

080014ea <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff1e 	bl	8001334 <LoRa_isvalid>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8096 	beq.w	800162c <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fc71 	bl	8000dea <LoRa_gotoMode>
			HAL_Delay(10);
 8001508:	200a      	movs	r0, #10
 800150a:	f001 fce5 	bl	8002ed8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800150e:	2101      	movs	r1, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fe88 	bl	8001226 <LoRa_read>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800151a:	200a      	movs	r0, #10
 800151c:	f001 fcdc 	bl	8002ed8 <HAL_Delay>
			data = read | 0x80;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001526:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	461a      	mov	r2, r3
 800152c:	2101      	movs	r1, #1
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fe96 	bl	8001260 <LoRa_write>
			HAL_Delay(100);
 8001534:	2064      	movs	r0, #100	@ 0x64
 8001536:	f001 fccf 	bl	8002ed8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fda1 	bl	8001088 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fdfc 	bl	800114c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe09 	bl	8001174 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001562:	2223      	movs	r2, #35	@ 0x23
 8001564:	210c      	movs	r1, #12
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fe7a 	bl	8001260 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fe3f 	bl	80011f0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fdb4 	bl	80010e8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001580:	22ff      	movs	r2, #255	@ 0xff
 8001582:	211f      	movs	r1, #31
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fe6b 	bl	8001260 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	461a      	mov	r2, r3
 80015aa:	211d      	movs	r1, #29
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fe57 	bl	8001260 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fd32 	bl	800101c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	2120      	movs	r1, #32
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fe4a 	bl	8001260 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	2121      	movs	r1, #33	@ 0x21
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fe42 	bl	8001260 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80015dc:	2140      	movs	r1, #64	@ 0x40
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe21 	bl	8001226 <LoRa_read>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80015ee:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
 80015f2:	461a      	mov	r2, r3
 80015f4:	2140      	movs	r1, #64	@ 0x40
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fe32 	bl	8001260 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015fc:	2101      	movs	r1, #1
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fbf3 	bl	8000dea <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800160a:	200a      	movs	r0, #10
 800160c:	f001 fc64 	bl	8002ed8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001610:	2142      	movs	r1, #66	@ 0x42
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe07 	bl	8001226 <LoRa_read>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b12      	cmp	r3, #18
 8001620:	d101      	bne.n	8001626 <LoRa_init+0x13c>
				return LORA_OK;
 8001622:	23c8      	movs	r3, #200	@ 0xc8
 8001624:	e004      	b.n	8001630 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001626:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800162a:	e001      	b.n	8001630 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800162c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4907      	ldr	r1, [pc, #28]	@ (8001670 <__NVIC_EnableIRQ+0x38>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db12      	blt.n	80016ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	490a      	ldr	r1, [pc, #40]	@ (80016b8 <__NVIC_DisableIRQ+0x44>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	3320      	adds	r3, #32
 800169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016a0:	f3bf 8f4f 	dsb	sy
}
 80016a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016a6:	f3bf 8f6f 	isb	sy
}
 80016aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100

080016bc <bsp_lora_enter_safe_mode>:

lora_packet_t lora_receive_packet[NUMBER_OF_LORA_PACKET_BUFFER];
lora_packet_t lora_send_packet[NUMBER_OF_LORA_PACKET_BUFFER];


void bsp_lora_enter_safe_mode(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	//NVIC_DisableIRQ(OTG_FS_IRQn);
	NVIC_DisableIRQ(EXTI0_IRQn);
 80016c0:	2006      	movs	r0, #6
 80016c2:	f7ff ffd7 	bl	8001674 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI1_IRQn);
 80016c6:	2007      	movs	r0, #7
 80016c8:	f7ff ffd4 	bl	8001674 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI2_IRQn);
 80016cc:	2008      	movs	r0, #8
 80016ce:	f7ff ffd1 	bl	8001674 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI3_IRQn);
 80016d2:	2009      	movs	r0, #9
 80016d4:	f7ff ffce 	bl	8001674 <__NVIC_DisableIRQ>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <bsp_lora_exit_safe_mode>:

void bsp_lora_exit_safe_mode(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	//NVIC_EnableIRQ(OTG_FS_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 80016e0:	2006      	movs	r0, #6
 80016e2:	f7ff ffa9 	bl	8001638 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f7ff ffa6 	bl	8001638 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 80016ec:	2008      	movs	r0, #8
 80016ee:	f7ff ffa3 	bl	8001638 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 80016f2:	2009      	movs	r0, #9
 80016f4:	f7ff ffa0 	bl	8001638 <__NVIC_EnableIRQ>
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <STM_LOG>:


void STM_LOG(char *str, int c, uint8_t size){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
	char *buf = (char *)malloc(size * sizeof(char));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f005 fa05 	bl	8006b1c <malloc>
 8001712:	4603      	mov	r3, r0
 8001714:	617b      	str	r3, [r7, #20]
	sprintf(buf, str, c);
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f005 fabc 	bl	8006c98 <siprintf>
	HAL_UART_Transmit(&huart2, buf, size, 1000);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	b29a      	uxth	r2, r3
 8001724:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001728:	6979      	ldr	r1, [r7, #20]
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <STM_LOG+0x44>)
 800172c:	f004 fa44 	bl	8005bb8 <HAL_UART_Transmit>
	free(buf);
 8001730:	6978      	ldr	r0, [r7, #20]
 8001732:	f005 f9fb 	bl	8006b2c <free>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000370 	.word	0x20000370

08001744 <bsp_lora_set_receive_mode>:
		return 1;
	return 0;
}


void bsp_lora_set_receive_mode(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	bsp_lora_enter_safe_mode();
 8001748:	f7ff ffb8 	bl	80016bc <bsp_lora_enter_safe_mode>
	LoRa_startReceiving(&myLoRa);
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <bsp_lora_set_receive_mode+0x18>)
 800174e:	f7ff fe54 	bl	80013fa <LoRa_startReceiving>
	bsp_lora_exit_safe_mode();
 8001752:	f7ff ffc3 	bl	80016dc <bsp_lora_exit_safe_mode>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000007c 	.word	0x2000007c

08001760 <bsp_lora_set_cad_mode>:

void bsp_lora_set_cad_mode(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	bsp_lora_enter_safe_mode();
 8001764:	f7ff ffaa 	bl	80016bc <bsp_lora_enter_safe_mode>
	LoRa_startCAD(&myLoRa);
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <bsp_lora_set_cad_mode+0x18>)
 800176a:	f7ff fe52 	bl	8001412 <LoRa_startCAD>
	bsp_lora_exit_safe_mode();
 800176e:	f7ff ffb5 	bl	80016dc <bsp_lora_exit_safe_mode>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000007c 	.word	0x2000007c

0800177c <bsp_lora_check_cad>:
/**
 * check if the bus is free or busy
 * @return: 1-bus is busy
 * 			0-bus is free
 * **/
uint8_t bsp_lora_check_cad() {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	bsp_lora_set_cad_mode();
 8001782:	f7ff ffed 	bl	8001760 <bsp_lora_set_cad_mode>
	uint32_t startTime = HAL_GetTick();
 8001786:	f001 fb9b 	bl	8002ec0 <HAL_GetTick>
 800178a:	6078      	str	r0, [r7, #4]
    while (!(LoRa_read(&myLoRa, RegIrqFlags) & 0x04)){
 800178c:	e009      	b.n	80017a2 <bsp_lora_check_cad+0x26>
    	if (HAL_GetTick() - startTime > 500) {
 800178e:	f001 fb97 	bl	8002ec0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800179c:	d901      	bls.n	80017a2 <bsp_lora_check_cad+0x26>
    		return 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	e016      	b.n	80017d0 <bsp_lora_check_cad+0x54>
    while (!(LoRa_read(&myLoRa, RegIrqFlags) & 0x04)){
 80017a2:	2112      	movs	r1, #18
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <bsp_lora_check_cad+0x5c>)
 80017a6:	f7ff fd3e 	bl	8001226 <LoRa_read>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ec      	beq.n	800178e <bsp_lora_check_cad+0x12>
    	}
    } // Chờ CAD hoàn thành
    uint8_t cadDetected = LoRa_read(&myLoRa, RegIrqFlags) & 0x01;
 80017b4:	2112      	movs	r1, #18
 80017b6:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <bsp_lora_check_cad+0x5c>)
 80017b8:	f7ff fd35 	bl	8001226 <LoRa_read>
 80017bc:	4603      	mov	r3, r0
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	70fb      	strb	r3, [r7, #3]
    LoRa_write(&myLoRa, RegIrqFlags, 0xFF); // Xóa cờ ngắt
 80017c4:	22ff      	movs	r2, #255	@ 0xff
 80017c6:	2112      	movs	r1, #18
 80017c8:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <bsp_lora_check_cad+0x5c>)
 80017ca:	f7ff fd49 	bl	8001260 <LoRa_write>
    return cadDetected;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000007c 	.word	0x2000007c

080017dc <bsp_lora_init>:

void bsp_lora_init(){
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b08c      	sub	sp, #48	@ 0x30
 80017e0:	af00      	add	r7, sp, #0
	// Initiate lora gateway object
	myLoRa = newLoRa();
 80017e2:	4c2f      	ldr	r4, [pc, #188]	@ (80018a0 <bsp_lora_init+0xc4>)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fab8 	bl	8000d5c <newLoRa>
 80017ec:	4625      	mov	r5, r4
 80017ee:	463c      	mov	r4, r7
 80017f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001802:	4a28      	ldr	r2, [pc, #160]	@ (80018a4 <bsp_lora_init+0xc8>)
 8001804:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = LORA_NSS_Pin;
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180c:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = LORA_RST_GPIO_Port;
 800180e:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001810:	4a24      	ldr	r2, [pc, #144]	@ (80018a4 <bsp_lora_init+0xc8>)
 8001812:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = LORA_RST_Pin;
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001816:	2210      	movs	r2, #16
 8001818:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <bsp_lora_init+0xc4>)
 800181c:	4a22      	ldr	r2, [pc, #136]	@ (80018a8 <bsp_lora_init+0xcc>)
 800181e:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001822:	2201      	movs	r2, #1
 8001824:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx           = &hspi1;
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001828:	4a20      	ldr	r2, [pc, #128]	@ (80018ac <bsp_lora_init+0xd0>)
 800182a:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = 433;
 800182c:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <bsp_lora_init+0xc4>)
 800182e:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001832:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001836:	2207      	movs	r2, #7
 8001838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	myLoRa.bandWidth             = BW_250KHz;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <bsp_lora_init+0xc4>)
 800183e:	2208      	movs	r2, #8
 8001840:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate               = CR_4_5;
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.power                 = POWER_17db;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <bsp_lora_init+0xc4>)
 800184e:	22fc      	movs	r2, #252	@ 0xfc
 8001850:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	myLoRa.overCurrentProtection = 150;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001856:	2296      	movs	r2, #150	@ 0x96
 8001858:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	myLoRa.preamble              = 10;
 800185c:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <bsp_lora_init+0xc4>)
 800185e:	220a      	movs	r2, #10
 8001860:	851a      	strh	r2, [r3, #40]	@ 0x28



	LoRa_reset(&myLoRa);
 8001862:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001864:	f7ff faa3 	bl	8000dae <LoRa_reset>
	if(LoRa_init(&myLoRa)==LORA_OK){
 8001868:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <bsp_lora_init+0xc4>)
 800186a:	f7ff fe3e 	bl	80014ea <LoRa_init>
 800186e:	4603      	mov	r3, r0
 8001870:	2bc8      	cmp	r3, #200	@ 0xc8
 8001872:	d107      	bne.n	8001884 <bsp_lora_init+0xa8>
		HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa Init Success\n", 18, 2000);
 8001874:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001878:	2212      	movs	r2, #18
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <bsp_lora_init+0xd4>)
 800187c:	480d      	ldr	r0, [pc, #52]	@ (80018b4 <bsp_lora_init+0xd8>)
 800187e:	f004 f99b 	bl	8005bb8 <HAL_UART_Transmit>
 8001882:	e006      	b.n	8001892 <bsp_lora_init+0xb6>
	}

	else{
		HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa Init Failed\n", 18, 2000);
 8001884:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001888:	2212      	movs	r2, #18
 800188a:	490b      	ldr	r1, [pc, #44]	@ (80018b8 <bsp_lora_init+0xdc>)
 800188c:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <bsp_lora_init+0xd8>)
 800188e:	f004 f993 	bl	8005bb8 <HAL_UART_Transmit>
	}

	LoRa_startReceiving(&myLoRa);
 8001892:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <bsp_lora_init+0xc4>)
 8001894:	f7ff fdb1 	bl	80013fa <LoRa_startReceiving>
}
 8001898:	bf00      	nop
 800189a:	3730      	adds	r7, #48	@ 0x30
 800189c:	46bd      	mov	sp, r7
 800189e:	bdb0      	pop	{r4, r5, r7, pc}
 80018a0:	2000007c 	.word	0x2000007c
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	20000288 	.word	0x20000288
 80018b0:	080074e8 	.word	0x080074e8
 80018b4:	20000370 	.word	0x20000370
 80018b8:	080074fc 	.word	0x080074fc

080018bc <checksum_calculate>:

uint32_t checksum_calculate(uint8_t *data, uint8_t len){
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	if(data != NULL){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <checksum_calculate+0x3e>
		uint32_t checksum = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < len; i++){
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	e00a      	b.n	80018ee <checksum_calculate+0x32>
			checksum += *(data + i);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < len; i++){
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dbf0      	blt.n	80018d8 <checksum_calculate+0x1c>
		}
		return checksum;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	e000      	b.n	80018fc <checksum_calculate+0x40>
	}
	return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <bsp_lora_send_packet>:
 * @param des_id: destination id
 * @param cmd: command send to destination
 * @param data: pointer to the sending data
 * @param len: data's length
 */
void bsp_lora_send_packet(uint8_t source_id, uint8_t des_id, uint8_t packet_id, uint8_t cmd, uint32_t mem_addr, uint8_t *data, uint8_t len, uint8_t ttl, uint8_t responsed){
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	4603      	mov	r3, r0
 800191c:	71bb      	strb	r3, [r7, #6]
 800191e:	460b      	mov	r3, r1
 8001920:	717b      	strb	r3, [r7, #5]
 8001922:	4613      	mov	r3, r2
 8001924:	713b      	strb	r3, [r7, #4]
	bsp_lora_enter_safe_mode();
 8001926:	f7ff fec9 	bl	80016bc <bsp_lora_enter_safe_mode>

	lora_send_packet_buffer.packet_id = packet_id;
 800192a:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 800192c:	797b      	ldrb	r3, [r7, #5]
 800192e:	7013      	strb	r3, [r2, #0]
	lora_send_packet_buffer.source_id = source_id;
 8001930:	4a1f      	ldr	r2, [pc, #124]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	7053      	strb	r3, [r2, #1]
	lora_send_packet_buffer.destination_id = des_id;
 8001936:	4a1e      	ldr	r2, [pc, #120]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	7093      	strb	r3, [r2, #2]
	lora_send_packet_buffer.ttl = ttl;
 800193c:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 800193e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001942:	70d3      	strb	r3, [r2, #3]
	lora_send_packet_buffer.responsed = responsed;
 8001944:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 8001946:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800194a:	7113      	strb	r3, [r2, #4]
	lora_send_packet_buffer.cmd = cmd;
 800194c:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 800194e:	793b      	ldrb	r3, [r7, #4]
 8001950:	7153      	strb	r3, [r2, #5]
	lora_send_packet_buffer.payload_length = len;
 8001952:	4a17      	ldr	r2, [pc, #92]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 8001954:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001958:	7393      	strb	r3, [r2, #14]
	lora_send_packet_buffer.mem_addr = mem_addr;
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f8c2 3006 	str.w	r3, [r2, #6]
	lora_send_packet_buffer.checksum = checksum_calculate(data, len);
 8001962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001966:	4619      	mov	r1, r3
 8001968:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800196a:	f7ff ffa7 	bl	80018bc <checksum_calculate>
 800196e:	4603      	mov	r3, r0
 8001970:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 8001972:	f8c2 300a 	str.w	r3, [r2, #10]

	memcpy(lora_send_packet_buffer.payload, data, len);
 8001976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800197a:	461a      	mov	r2, r3
 800197c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800197e:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <bsp_lora_send_packet+0xac>)
 8001980:	f005 f9ee 	bl	8006d60 <memcpy>

	uint8_t *buffer = (uint8_t *) (&lora_send_packet_buffer);
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <bsp_lora_send_packet+0xa8>)
 8001986:	60fb      	str	r3, [r7, #12]

	LoRa_transmit(&myLoRa, buffer, sizeof(lora_packet_t), 4000);
 8001988:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800198c:	222f      	movs	r2, #47	@ 0x2f
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <bsp_lora_send_packet+0xb0>)
 8001992:	f7ff fcda 	bl	800134a <LoRa_transmit>

	STM_LOG("pid: %3d\n", packet_id, 9);
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	2209      	movs	r2, #9
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	@ (80019bc <bsp_lora_send_packet+0xb4>)
 800199e:	f7ff fead 	bl	80016fc <STM_LOG>

	bsp_lora_exit_safe_mode();
 80019a2:	f7ff fe9b 	bl	80016dc <bsp_lora_exit_safe_mode>
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200000a8 	.word	0x200000a8
 80019b4:	200000b7 	.word	0x200000b7
 80019b8:	2000007c 	.word	0x2000007c
 80019bc:	08007510 	.word	0x08007510

080019c0 <lora_network_get_index_of_receive_packet>:

int lora_network_get_index_of_receive_packet(){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	e00f      	b.n	80019ec <lora_network_get_index_of_receive_packet+0x2c>
		if(lora_receive_packet[i].packet_id == 0)
 80019cc:	79fa      	ldrb	r2, [r7, #7]
 80019ce:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <lora_network_get_index_of_receive_packet+0x44>)
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <lora_network_get_index_of_receive_packet+0x26>
			return i;
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	e007      	b.n	80019f6 <lora_network_get_index_of_receive_packet+0x36>
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	3301      	adds	r3, #1
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d9ec      	bls.n	80019cc <lora_network_get_index_of_receive_packet+0xc>
	}
	return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000108 	.word	0x20000108

08001a08 <lora_network_check_cmd_in_receive_packet>:

int lora_network_check_cmd_in_receive_packet(uint8_t cmd){
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	e011      	b.n	8001a3c <lora_network_check_cmd_in_receive_packet+0x34>
		if(lora_receive_packet[i].cmd == cmd)
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	490e      	ldr	r1, [pc, #56]	@ (8001a54 <lora_network_check_cmd_in_receive_packet+0x4c>)
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	3305      	adds	r3, #5
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	79fa      	ldrb	r2, [r7, #7]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d101      	bne.n	8001a36 <lora_network_check_cmd_in_receive_packet+0x2e>
			return i;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	e007      	b.n	8001a46 <lora_network_check_cmd_in_receive_packet+0x3e>
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d9ea      	bls.n	8001a18 <lora_network_check_cmd_in_receive_packet+0x10>
	}
	return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000108 	.word	0x20000108

08001a58 <lora_network_check_id_in_receive_packet>:

int lora_network_check_id_in_receive_packet(uint8_t id){
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e010      	b.n	8001a8a <lora_network_check_id_in_receive_packet+0x32>
		if(lora_receive_packet[i].packet_id == id)
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <lora_network_check_id_in_receive_packet+0x48>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d101      	bne.n	8001a84 <lora_network_check_id_in_receive_packet+0x2c>
			return i;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	e007      	b.n	8001a94 <lora_network_check_id_in_receive_packet+0x3c>
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	3301      	adds	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d9eb      	bls.n	8001a68 <lora_network_check_id_in_receive_packet+0x10>
	}
	return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	20000108 	.word	0x20000108

08001aa4 <lora_network_get_index_of_send_packet>:

int lora_network_get_index_of_send_packet(){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	e00f      	b.n	8001ad0 <lora_network_get_index_of_send_packet+0x2c>
		if(lora_send_packet[i].packet_id != 0)
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	490d      	ldr	r1, [pc, #52]	@ (8001ae8 <lora_network_get_index_of_send_packet+0x44>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <lora_network_get_index_of_send_packet+0x26>
			return i;
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	e007      	b.n	8001ada <lora_network_get_index_of_send_packet+0x36>
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	3301      	adds	r3, #1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d9ec      	bls.n	8001ab0 <lora_network_get_index_of_send_packet+0xc>
	}
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000198 	.word	0x20000198

08001aec <lora_network_check_id_in_send_packet>:
			return i;
	}
	return -1;
}

int lora_network_check_id_in_send_packet(uint8_t id){
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e010      	b.n	8001b1e <lora_network_check_id_in_send_packet+0x32>
		if(lora_send_packet[i].packet_id == id)
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	490d      	ldr	r1, [pc, #52]	@ (8001b34 <lora_network_check_id_in_send_packet+0x48>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	79fa      	ldrb	r2, [r7, #7]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d101      	bne.n	8001b18 <lora_network_check_id_in_send_packet+0x2c>
			return i;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	e007      	b.n	8001b28 <lora_network_check_id_in_send_packet+0x3c>
	for(uint8_t i = 0; i < NUMBER_OF_LORA_PACKET_BUFFER; i++){
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d9eb      	bls.n	8001afc <lora_network_check_id_in_send_packet+0x10>
	}
	return -1;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	20000198 	.word	0x20000198

08001b38 <lora_network_remove_packet_in_send_packet>:

void lora_network_remove_packet_in_send_packet(uint8_t packet_index){
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = packet_index; i < NUMBER_OF_LORA_PACKET_BUFFER - 1; i++){
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e017      	b.n	8001b78 <lora_network_remove_packet_in_send_packet+0x40>
		memcpy(&lora_send_packet[i], &lora_send_packet[i + 1], sizeof(lora_packet_t));
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <lora_network_remove_packet_in_send_packet+0x88>)
 8001b56:	1898      	adds	r0, r3, r2
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <lora_network_remove_packet_in_send_packet+0x88>)
 8001b68:	4413      	add	r3, r2
 8001b6a:	222f      	movs	r2, #47	@ 0x2f
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f005 f8f7 	bl	8006d60 <memcpy>
	for(uint8_t i = packet_index; i < NUMBER_OF_LORA_PACKET_BUFFER - 1; i++){
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d9e4      	bls.n	8001b48 <lora_network_remove_packet_in_send_packet+0x10>
	}
	memcpy(&lora_send_packet[NUMBER_OF_LORA_PACKET_BUFFER - 1], 0, sizeof(lora_packet_t));
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <lora_network_remove_packet_in_send_packet+0x88>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	4615      	mov	r5, r2
 8001b84:	f103 0c5e 	add.w	ip, r3, #94	@ 0x5e
 8001b88:	f105 0e20 	add.w	lr, r5, #32
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	462e      	mov	r6, r5
 8001b90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b92:	6020      	str	r0, [r4, #0]
 8001b94:	6061      	str	r1, [r4, #4]
 8001b96:	60a2      	str	r2, [r4, #8]
 8001b98:	60e3      	str	r3, [r4, #12]
 8001b9a:	3510      	adds	r5, #16
 8001b9c:	f10c 0c10 	add.w	ip, ip, #16
 8001ba0:	4575      	cmp	r5, lr
 8001ba2:	d1f3      	bne.n	8001b8c <lora_network_remove_packet_in_send_packet+0x54>
 8001ba4:	4664      	mov	r4, ip
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001baa:	6020      	str	r0, [r4, #0]
 8001bac:	6061      	str	r1, [r4, #4]
 8001bae:	60a2      	str	r2, [r4, #8]
 8001bb0:	881a      	ldrh	r2, [r3, #0]
 8001bb2:	789b      	ldrb	r3, [r3, #2]
 8001bb4:	81a2      	strh	r2, [r4, #12]
 8001bb6:	73a3      	strb	r3, [r4, #14]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc0:	20000198 	.word	0x20000198

08001bc4 <bsp_lora_send_packet_to_device>:

int bsp_lora_send_packet_to_device(uint8_t des_id, uint8_t cmd, uint32_t mem_addr, uint8_t *data, uint8_t len, uint8_t ttl, uint8_t responsed){
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b08d      	sub	sp, #52	@ 0x34
 8001bc8:	af06      	add	r7, sp, #24
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	73bb      	strb	r3, [r7, #14]
	if(lora_network_check_id_in_send_packet(lora_send_packet_buffer.packet_id % MAX_PACKET_ID + 1) == -1){
 8001bd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <bsp_lora_send_packet_to_device+0xe0>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <bsp_lora_send_packet_to_device+0xe4>)
 8001bdc:	fba2 1203 	umull	r1, r2, r2, r3
 8001be0:	0912      	lsrs	r2, r2, #4
 8001be2:	21fa      	movs	r1, #250	@ 0xfa
 8001be4:	fb01 f202 	mul.w	r2, r1, r2
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff7b 	bl	8001aec <lora_network_check_id_in_send_packet>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d14b      	bne.n	8001c96 <bsp_lora_send_packet_to_device+0xd2>
		int packet_index = lora_network_get_index_of_send_packet();
 8001bfe:	f7ff ff51 	bl	8001aa4 <lora_network_get_index_of_send_packet>
 8001c02:	6178      	str	r0, [r7, #20]
		if(packet_index != -1){
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d044      	beq.n	8001c96 <bsp_lora_send_packet_to_device+0xd2>
			bsp_lora_send_packet(DEVICE_ID, des_id, (lora_send_packet_buffer.packet_id % MAX_PACKET_ID + 1), cmd,
 8001c0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <bsp_lora_send_packet_to_device+0xe0>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <bsp_lora_send_packet_to_device+0xe4>)
 8001c12:	fba2 1203 	umull	r1, r2, r2, r3
 8001c16:	0912      	lsrs	r2, r2, #4
 8001c18:	21fa      	movs	r1, #250	@ 0xfa
 8001c1a:	fb01 f202 	mul.w	r2, r1, r2
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	7bb8      	ldrb	r0, [r7, #14]
 8001c28:	7bf9      	ldrb	r1, [r7, #15]
 8001c2a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001c2e:	9304      	str	r3, [sp, #16]
 8001c30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c34:	9303      	str	r3, [sp, #12]
 8001c36:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4603      	mov	r3, r0
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff fe5e 	bl	8001908 <bsp_lora_send_packet>
					mem_addr, data, len, ttl, responsed);
			memcpy(&lora_send_packet[packet_index], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <bsp_lora_send_packet_to_device+0xe8>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <bsp_lora_send_packet_to_device+0xe0>)
 8001c5e:	4615      	mov	r5, r2
 8001c60:	469c      	mov	ip, r3
 8001c62:	f105 0e20 	add.w	lr, r5, #32
 8001c66:	4664      	mov	r4, ip
 8001c68:	462e      	mov	r6, r5
 8001c6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c6c:	6020      	str	r0, [r4, #0]
 8001c6e:	6061      	str	r1, [r4, #4]
 8001c70:	60a2      	str	r2, [r4, #8]
 8001c72:	60e3      	str	r3, [r4, #12]
 8001c74:	3510      	adds	r5, #16
 8001c76:	f10c 0c10 	add.w	ip, ip, #16
 8001c7a:	4575      	cmp	r5, lr
 8001c7c:	d1f3      	bne.n	8001c66 <bsp_lora_send_packet_to_device+0xa2>
 8001c7e:	4664      	mov	r4, ip
 8001c80:	462b      	mov	r3, r5
 8001c82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c84:	6020      	str	r0, [r4, #0]
 8001c86:	6061      	str	r1, [r4, #4]
 8001c88:	60a2      	str	r2, [r4, #8]
 8001c8a:	881a      	ldrh	r2, [r3, #0]
 8001c8c:	789b      	ldrb	r3, [r3, #2]
 8001c8e:	81a2      	strh	r2, [r4, #12]
 8001c90:	73a3      	strb	r3, [r4, #14]
			return packet_index;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	e001      	b.n	8001c9a <bsp_lora_send_packet_to_device+0xd6>
		}
	}
	return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200000a8 	.word	0x200000a8
 8001ca8:	10624dd3 	.word	0x10624dd3
 8001cac:	20000198 	.word	0x20000198

08001cb0 <bsp_lora_resend_packet>:


/**
 * Resend a specific lora packet
 * **/
void bsp_lora_resend_packet(lora_packet_t *lora_packet){
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af06      	add	r7, sp, #24
 8001cb6:	6078      	str	r0, [r7, #4]
	if(lora_packet->ttl > 0){
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	78db      	ldrb	r3, [r3, #3]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d022      	beq.n	8001d06 <bsp_lora_resend_packet+0x56>
		bsp_lora_send_packet(GATEWAY_ID, lora_packet->destination_id, lora_packet->packet_id, lora_packet->cmd,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	789d      	ldrb	r5, [r3, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781e      	ldrb	r6, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 c005 	ldrb.w	ip, [r3, #5]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8d3 3006 	ldr.w	r3, [r3, #6]
				lora_packet->mem_addr, lora_packet->payload, lora_packet->payload_length, lora_packet->ttl, lora_packet->responsed);
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	320f      	adds	r2, #15
		bsp_lora_send_packet(GATEWAY_ID, lora_packet->destination_id, lora_packet->packet_id, lora_packet->cmd,
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	7b89      	ldrb	r1, [r1, #14]
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	78c0      	ldrb	r0, [r0, #3]
 8001ce0:	687c      	ldr	r4, [r7, #4]
 8001ce2:	7924      	ldrb	r4, [r4, #4]
 8001ce4:	9404      	str	r4, [sp, #16]
 8001ce6:	9003      	str	r0, [sp, #12]
 8001ce8:	9102      	str	r1, [sp, #8]
 8001cea:	9201      	str	r2, [sp, #4]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4663      	mov	r3, ip
 8001cf0:	4632      	mov	r2, r6
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fe07 	bl	8001908 <bsp_lora_send_packet>
		lora_packet->ttl--;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	78db      	ldrb	r3, [r3, #3]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	70da      	strb	r2, [r3, #3]
	}
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d10 <bsp_lora_receive_packet>:


/**
 * A function used to receive packet from other devices
 */
void bsp_lora_receive_packet(){
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b0b2      	sub	sp, #200	@ 0xc8
 8001d14:	af00      	add	r7, sp, #0
	uint8_t u8lora_receive_packet_buffer[MAX_PACKET_LENGTH] = {0};
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	22c4      	movs	r2, #196	@ 0xc4
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 ffd9 	bl	8006cd8 <memset>
	LoRa_receive(&myLoRa, u8lora_receive_packet_buffer, MAX_PACKET_LENGTH);
 8001d26:	463b      	mov	r3, r7
 8001d28:	22c8      	movs	r2, #200	@ 0xc8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480a      	ldr	r0, [pc, #40]	@ (8001d58 <bsp_lora_receive_packet+0x48>)
 8001d2e:	f7ff fb7c 	bl	800142a <LoRa_receive>
	memcpy(&lora_receive_packet_buffer, u8lora_receive_packet_buffer, sizeof(lora_packet_t));
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <bsp_lora_receive_packet+0x4c>)
 8001d34:	461c      	mov	r4, r3
 8001d36:	463d      	mov	r5, r7
 8001d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d44:	c407      	stmia	r4!, {r0, r1, r2}
 8001d46:	8023      	strh	r3, [r4, #0]
 8001d48:	3402      	adds	r4, #2
 8001d4a:	0c1b      	lsrs	r3, r3, #16
 8001d4c:	7023      	strb	r3, [r4, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	37c8      	adds	r7, #200	@ 0xc8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000007c 	.word	0x2000007c
 8001d5c:	200000d8 	.word	0x200000d8

08001d60 <lora_network_init>:

extern UART_HandleTypeDef huart2;
extern lora_packet_t lora_receive_packet_buffer;
extern LoRa myLoRa;

void lora_network_init(){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	bsp_lora_init();
 8001d64:	f7ff fd3a 	bl	80017dc <bsp_lora_init>
	/*if(bsp_sim_init_mqtt()){
		STM_LOG("Sim mqtt init success\n", 0, 22);
	}*/
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <lora_network_send_warning>:

void lora_network_send_warning(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af04      	add	r7, sp, #16
	uint32_t last_tick = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
	int packet_index;
	uint8_t send_warning_success = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
	while(send_warning_done == 0){
 8001d7a:	e084      	b.n	8001e86 <lora_network_send_warning+0x11a>
		if(start_send_warning == 1){
 8001d7c:	4b57      	ldr	r3, [pc, #348]	@ (8001edc <lora_network_send_warning+0x170>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d134      	bne.n	8001df0 <lora_network_send_warning+0x84>
			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8001d86:	bf00      	nop
 8001d88:	4b55      	ldr	r3, [pc, #340]	@ (8001ee0 <lora_network_send_warning+0x174>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 f938 	bl	8005002 <HAL_SPI_GetState>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d1f7      	bne.n	8001d88 <lora_network_send_warning+0x1c>
			while(bsp_lora_check_cad() == 1);
 8001d98:	bf00      	nop
 8001d9a:	f7ff fcef 	bl	800177c <bsp_lora_check_cad>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d0fa      	beq.n	8001d9a <lora_network_send_warning+0x2e>
			bsp_lora_set_receive_mode();
 8001da4:	f7ff fcce 	bl	8001744 <bsp_lora_set_receive_mode>
			uint8_t len_test = 10;
 8001da8:	230a      	movs	r3, #10
 8001daa:	73bb      	strb	r3, [r7, #14]
			uint8_t data_test[10] = {2, 1, 1, 0, 0, 1, 1, 1, 1, 1};
 8001dac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <lora_network_send_warning+0x178>)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db2:	c303      	stmia	r3!, {r0, r1}
 8001db4:	801a      	strh	r2, [r3, #0]
			STM_LOG("Start send warning\n", 0, 19);
 8001db6:	2213      	movs	r2, #19
 8001db8:	2100      	movs	r1, #0
 8001dba:	484b      	ldr	r0, [pc, #300]	@ (8001ee8 <lora_network_send_warning+0x17c>)
 8001dbc:	f7ff fc9e 	bl	80016fc <STM_LOG>
			packet_index = bsp_lora_send_packet_to_device(GATEWAY_ID, LORA_CMD_WARNING, 0, data_test, len_test, 3, 0);
 8001dc0:	1d3a      	adds	r2, r7, #4
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2107      	movs	r1, #7
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff fef5 	bl	8001bc4 <bsp_lora_send_packet_to_device>
 8001dda:	6138      	str	r0, [r7, #16]

			continue_send_warning = 1;
 8001ddc:	4b43      	ldr	r3, [pc, #268]	@ (8001eec <lora_network_send_warning+0x180>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
			start_send_warning = 0;
 8001de2:	4b3e      	ldr	r3, [pc, #248]	@ (8001edc <lora_network_send_warning+0x170>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
			last_tick = HAL_GetTick();
 8001de8:	f001 f86a 	bl	8002ec0 <HAL_GetTick>
 8001dec:	6178      	str	r0, [r7, #20]
 8001dee:	e04a      	b.n	8001e86 <lora_network_send_warning+0x11a>
		}

		else if(continue_send_warning == 1){
 8001df0:	4b3e      	ldr	r3, [pc, #248]	@ (8001eec <lora_network_send_warning+0x180>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d146      	bne.n	8001e86 <lora_network_send_warning+0x11a>
			if(HAL_GetTick() - last_tick >= 2000 || send_warning_nak == 1){
 8001df8:	f001 f862 	bl	8002ec0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e06:	d204      	bcs.n	8001e12 <lora_network_send_warning+0xa6>
 8001e08:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <lora_network_send_warning+0x184>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d139      	bne.n	8001e86 <lora_network_send_warning+0x11a>
				STM_LOG("Send warning timeout\n", 0, 22);
 8001e12:	2216      	movs	r2, #22
 8001e14:	2100      	movs	r1, #0
 8001e16:	4837      	ldr	r0, [pc, #220]	@ (8001ef4 <lora_network_send_warning+0x188>)
 8001e18:	f7ff fc70 	bl	80016fc <STM_LOG>
				if(lora_send_packet[packet_index].ttl > 0){
 8001e1c:	4936      	ldr	r1, [pc, #216]	@ (8001ef8 <lora_network_send_warning+0x18c>)
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <lora_network_send_warning+0xea>
					STM_LOG("Continue send warning\n", 0, 22);
 8001e34:	2216      	movs	r2, #22
 8001e36:	2100      	movs	r1, #0
 8001e38:	4830      	ldr	r0, [pc, #192]	@ (8001efc <lora_network_send_warning+0x190>)
 8001e3a:	f7ff fc5f 	bl	80016fc <STM_LOG>
					bsp_lora_resend_packet(&lora_send_packet[packet_index]);
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <lora_network_send_warning+0x18c>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff2e 	bl	8001cb0 <bsp_lora_resend_packet>
 8001e54:	e00c      	b.n	8001e70 <lora_network_send_warning+0x104>
				}
				else{
					STM_LOG("Cann't send warning\n", 0, 20);
 8001e56:	2214      	movs	r2, #20
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4829      	ldr	r0, [pc, #164]	@ (8001f00 <lora_network_send_warning+0x194>)
 8001e5c:	f7ff fc4e 	bl	80016fc <STM_LOG>
					send_warning_success = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
					continue_send_warning = 0;
 8001e64:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <lora_network_send_warning+0x180>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
					send_warning_done = 1;
 8001e6a:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <lora_network_send_warning+0x198>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
				}
				last_tick = HAL_GetTick();
 8001e70:	f001 f826 	bl	8002ec0 <HAL_GetTick>
 8001e74:	6178      	str	r0, [r7, #20]
				if(send_warning_nak == 1)
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <lora_network_send_warning+0x184>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <lora_network_send_warning+0x11a>
					send_warning_nak = 0;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <lora_network_send_warning+0x184>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	while(send_warning_done == 0){
 8001e86:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <lora_network_send_warning+0x198>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f43f af75 	beq.w	8001d7c <lora_network_send_warning+0x10>
			}
		}
	}

	if(send_warning_done == 1 && send_warning_success == 1){
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <lora_network_send_warning+0x198>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <lora_network_send_warning+0x142>
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <lora_network_send_warning+0x142>
		STM_LOG("Send warning sucessfully\n", 0, 25);
 8001ea2:	2219      	movs	r2, #25
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4818      	ldr	r0, [pc, #96]	@ (8001f08 <lora_network_send_warning+0x19c>)
 8001ea8:	f7ff fc28 	bl	80016fc <STM_LOG>
 8001eac:	e004      	b.n	8001eb8 <lora_network_send_warning+0x14c>
	}
	else{
		STM_LOG("Send warning failed\n", 0, 25);
 8001eae:	2219      	movs	r2, #25
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4816      	ldr	r0, [pc, #88]	@ (8001f0c <lora_network_send_warning+0x1a0>)
 8001eb4:	f7ff fc22 	bl	80016fc <STM_LOG>
	}
	send_warning_done = 0;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <lora_network_send_warning+0x198>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
	send_warning_success = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]

	if(packet_index != -1)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d004      	beq.n	8001ed4 <lora_network_send_warning+0x168>
		lora_network_remove_packet_in_send_packet(packet_index);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fe32 	bl	8001b38 <lora_network_remove_packet_in_send_packet>
}
 8001ed4:	bf00      	nop
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000229 	.word	0x20000229
 8001ee0:	2000007c 	.word	0x2000007c
 8001ee4:	080075ac 	.word	0x080075ac
 8001ee8:	0800751c 	.word	0x0800751c
 8001eec:	2000022a 	.word	0x2000022a
 8001ef0:	2000022c 	.word	0x2000022c
 8001ef4:	08007530 	.word	0x08007530
 8001ef8:	20000198 	.word	0x20000198
 8001efc:	08007548 	.word	0x08007548
 8001f00:	08007560 	.word	0x08007560
 8001f04:	2000022b 	.word	0x2000022b
 8001f08:	08007578 	.word	0x08007578
 8001f0c:	08007594 	.word	0x08007594

08001f10 <lora_network_send_response>:

void lora_network_send_response(uint8_t cmd){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af06      	add	r7, sp, #24
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8001f1a:	bf00      	nop
 8001f1c:	4b65      	ldr	r3, [pc, #404]	@ (80020b4 <lora_network_send_response+0x1a4>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 f86e 	bl	8005002 <HAL_SPI_GetState>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d1f7      	bne.n	8001f1c <lora_network_send_response+0xc>
	//while(bsp_lora_check_cad() == 1);
	bsp_lora_set_receive_mode();
 8001f2c:	f7ff fc0a 	bl	8001744 <bsp_lora_set_receive_mode>
	lr_nw_packet_id = (lr_nw_packet_id % (MAX_PACKET_ID)) + 1;
 8001f30:	4b61      	ldr	r3, [pc, #388]	@ (80020b8 <lora_network_send_response+0x1a8>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4a61      	ldr	r2, [pc, #388]	@ (80020bc <lora_network_send_response+0x1ac>)
 8001f36:	fba2 1203 	umull	r1, r2, r2, r3
 8001f3a:	0912      	lsrs	r2, r2, #4
 8001f3c:	21fa      	movs	r1, #250	@ 0xfa
 8001f3e:	fb01 f202 	mul.w	r2, r1, r2
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80020b8 <lora_network_send_response+0x1a8>)
 8001f4c:	701a      	strb	r2, [r3, #0]
	int packet_index = -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	617b      	str	r3, [r7, #20]

	switch(cmd){
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d046      	beq.n	8001fe8 <lora_network_send_response+0xd8>
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	dc6d      	bgt.n	800203a <lora_network_send_response+0x12a>
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <lora_network_send_response+0x58>
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d020      	beq.n	8001fa8 <lora_network_send_response+0x98>
 8001f66:	e068      	b.n	800203a <lora_network_send_response+0x12a>
	case LORA_CMD_CONNECT:
		bsp_lora_send_packet(DEVICE_ID, GATEWAY_ID, lr_nw_packet_id, LORA_CMD_ACK, 0, NULL, 0, 3,
 8001f68:	4b53      	ldr	r3, [pc, #332]	@ (80020b8 <lora_network_send_response+0x1a8>)
 8001f6a:	7819      	ldrb	r1, [r3, #0]
 8001f6c:	4b54      	ldr	r3, [pc, #336]	@ (80020c0 <lora_network_send_response+0x1b0>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4854      	ldr	r0, [pc, #336]	@ (80020c4 <lora_network_send_response+0x1b4>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	4403      	add	r3, r0
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	9304      	str	r3, [sp, #16]
 8001f84:	2303      	movs	r3, #3
 8001f86:	9303      	str	r3, [sp, #12]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	2300      	movs	r3, #0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2305      	movs	r3, #5
 8001f96:	460a      	mov	r2, r1
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff fcb4 	bl	8001908 <bsp_lora_send_packet>
				lora_receive_packet[connect_packet_index].packet_id);
		packet_index = connect_packet_index;
 8001fa0:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <lora_network_send_response+0x1b0>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	617b      	str	r3, [r7, #20]
		break;
 8001fa6:	e048      	b.n	800203a <lora_network_send_response+0x12a>
	case LORA_CMD_DISCONNECT:
		bsp_lora_send_packet(DEVICE_ID, GATEWAY_ID, lr_nw_packet_id, LORA_CMD_ACK, 0, NULL, 0, 3,
 8001fa8:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <lora_network_send_response+0x1a8>)
 8001faa:	7819      	ldrb	r1, [r3, #0]
 8001fac:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <lora_network_send_response+0x1b8>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4844      	ldr	r0, [pc, #272]	@ (80020c4 <lora_network_send_response+0x1b4>)
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	4403      	add	r3, r0
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	9304      	str	r3, [sp, #16]
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	9303      	str	r3, [sp, #12]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7ff fc94 	bl	8001908 <bsp_lora_send_packet>
				lora_receive_packet[disconnect_packet_index].packet_id);
		packet_index = disconnect_packet_index;
 8001fe0:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <lora_network_send_response+0x1b8>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	617b      	str	r3, [r7, #20]
		break;
 8001fe6:	e028      	b.n	800203a <lora_network_send_response+0x12a>
	case LORA_CMD_READ_DATA:
		uint8_t len_test = 10;
 8001fe8:	230a      	movs	r3, #10
 8001fea:	74bb      	strb	r3, [r7, #18]
		uint8_t data_test[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 8001fec:	4a37      	ldr	r2, [pc, #220]	@ (80020cc <lora_network_send_response+0x1bc>)
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ff4:	c303      	stmia	r3!, {r0, r1}
 8001ff6:	801a      	strh	r2, [r3, #0]

		bsp_lora_send_packet(DEVICE_ID, GATEWAY_ID, lr_nw_packet_id, LORA_CMD_ACK, 0, data_test, len_test, 3,
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <lora_network_send_response+0x1a8>)
 8001ffa:	7819      	ldrb	r1, [r3, #0]
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <lora_network_send_response+0x1c0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4830      	ldr	r0, [pc, #192]	@ (80020c4 <lora_network_send_response+0x1b4>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	4403      	add	r3, r0
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	9304      	str	r3, [sp, #16]
 8002014:	2303      	movs	r3, #3
 8002016:	9303      	str	r3, [sp, #12]
 8002018:	7cbb      	ldrb	r3, [r7, #18]
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2305      	movs	r3, #5
 8002028:	460a      	mov	r2, r1
 800202a:	2100      	movs	r1, #0
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff fc6b 	bl	8001908 <bsp_lora_send_packet>
				lora_receive_packet[read_packet_index].packet_id);
		packet_index = read_packet_index;
 8002032:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <lora_network_send_response+0x1c0>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	617b      	str	r3, [r7, #20]
		break;
 8002038:	bf00      	nop
	}

	if(packet_index != -1){
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d034      	beq.n	80020ac <lora_network_send_response+0x19c>
		for(uint8_t i = packet_index; i < NUMBER_OF_LORA_PACKET_BUFFER - 1; i++){
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	74fb      	strb	r3, [r7, #19]
 8002046:	e022      	b.n	800208e <lora_network_send_response+0x17e>
			if(lora_receive_packet[i].packet_id == 0)
 8002048:	7cfa      	ldrb	r2, [r7, #19]
 800204a:	491e      	ldr	r1, [pc, #120]	@ (80020c4 <lora_network_send_response+0x1b4>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	440b      	add	r3, r1
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01b      	beq.n	8002096 <lora_network_send_response+0x186>
				break;
			memcpy(&lora_receive_packet[i], &lora_receive_packet[i + 1], sizeof(lora_packet_t));
 800205e:	7cfa      	ldrb	r2, [r7, #19]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <lora_network_send_response+0x1b4>)
 800206c:	1898      	adds	r0, r3, r2
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <lora_network_send_response+0x1b4>)
 800207e:	4413      	add	r3, r2
 8002080:	222f      	movs	r2, #47	@ 0x2f
 8002082:	4619      	mov	r1, r3
 8002084:	f004 fe6c 	bl	8006d60 <memcpy>
		for(uint8_t i = packet_index; i < NUMBER_OF_LORA_PACKET_BUFFER - 1; i++){
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	3301      	adds	r3, #1
 800208c:	74fb      	strb	r3, [r7, #19]
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d9d9      	bls.n	8002048 <lora_network_send_response+0x138>
 8002094:	e000      	b.n	8002098 <lora_network_send_response+0x188>
				break;
 8002096:	bf00      	nop
		}

		if(lora_receive_packet[NUMBER_OF_LORA_PACKET_BUFFER - 1].packet_id != 0)
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <lora_network_send_response+0x1b4>)
 800209a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <lora_network_send_response+0x19c>
			memset(&lora_receive_packet[NUMBER_OF_LORA_PACKET_BUFFER - 1], 0, sizeof(lora_packet_t));
 80020a2:	222f      	movs	r2, #47	@ 0x2f
 80020a4:	2100      	movs	r1, #0
 80020a6:	480b      	ldr	r0, [pc, #44]	@ (80020d4 <lora_network_send_response+0x1c4>)
 80020a8:	f004 fe16 	bl	8006cd8 <memset>
	}

}
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2000007c 	.word	0x2000007c
 80020b8:	20000000 	.word	0x20000000
 80020bc:	10624dd3 	.word	0x10624dd3
 80020c0:	2000022d 	.word	0x2000022d
 80020c4:	20000108 	.word	0x20000108
 80020c8:	2000022e 	.word	0x2000022e
 80020cc:	080075b8 	.word	0x080075b8
 80020d0:	2000022f 	.word	0x2000022f
 80020d4:	20000166 	.word	0x20000166

080020d8 <lora_network_ack_cmd_handle>:

void lora_network_ack_cmd_handle(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
	uint8_t responsed = lora_receive_packet_buffer.responsed;
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <lora_network_ack_cmd_handle+0x4c>)
 80020e0:	791b      	ldrb	r3, [r3, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
	int packet_index = lora_network_check_id_in_send_packet(responsed);
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fd00 	bl	8001aec <lora_network_check_id_in_send_packet>
 80020ec:	60b8      	str	r0, [r7, #8]

	if(packet_index != -1){
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d011      	beq.n	800211a <lora_network_ack_cmd_handle+0x42>
		uint8_t cmd = lora_receive_packet[packet_index].cmd;
 80020f6:	490c      	ldr	r1, [pc, #48]	@ (8002128 <lora_network_ack_cmd_handle+0x50>)
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	440b      	add	r3, r1
 8002106:	3305      	adds	r3, #5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
		switch(cmd){
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2b07      	cmp	r3, #7
 8002110:	d103      	bne.n	800211a <lora_network_ack_cmd_handle+0x42>
		case LORA_CMD_WARNING:
			send_warning_done = 1;
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <lora_network_ack_cmd_handle+0x54>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
			break;
 8002118:	bf00      	nop
		}
	}
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000d8 	.word	0x200000d8
 8002128:	20000108 	.word	0x20000108
 800212c:	2000022b 	.word	0x2000022b

08002130 <lora_network_irq_handle>:

void lora_network_irq_handle(){
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
	STM_LOG("DIO0\n", 0, 5);
 8002136:	2205      	movs	r2, #5
 8002138:	2100      	movs	r1, #0
 800213a:	486a      	ldr	r0, [pc, #424]	@ (80022e4 <lora_network_irq_handle+0x1b4>)
 800213c:	f7ff fade 	bl	80016fc <STM_LOG>
	while (HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002140:	bf00      	nop
 8002142:	4b69      	ldr	r3, [pc, #420]	@ (80022e8 <lora_network_irq_handle+0x1b8>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 ff5b 	bl	8005002 <HAL_SPI_GetState>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d1f7      	bne.n	8002142 <lora_network_irq_handle+0x12>
	uint8_t irqFlags = LoRa_read(&myLoRa, RegIrqFlags);
 8002152:	2112      	movs	r1, #18
 8002154:	4864      	ldr	r0, [pc, #400]	@ (80022e8 <lora_network_irq_handle+0x1b8>)
 8002156:	f7ff f866 	bl	8001226 <LoRa_read>
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
	if(irqFlags & 0x40) {
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80b8 	beq.w	80022da <lora_network_irq_handle+0x1aa>
		STM_LOG("irq\n", 0, 4);
 800216a:	2204      	movs	r2, #4
 800216c:	2100      	movs	r1, #0
 800216e:	485f      	ldr	r0, [pc, #380]	@ (80022ec <lora_network_irq_handle+0x1bc>)
 8002170:	f7ff fac4 	bl	80016fc <STM_LOG>
		bsp_lora_receive_packet();
 8002174:	f7ff fdcc 	bl	8001d10 <bsp_lora_receive_packet>
		uint8_t packet_id = lora_receive_packet_buffer.packet_id;
 8002178:	4b5d      	ldr	r3, [pc, #372]	@ (80022f0 <lora_network_irq_handle+0x1c0>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	71bb      	strb	r3, [r7, #6]
		uint8_t cmd = lora_receive_packet_buffer.cmd;
 800217e:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <lora_network_irq_handle+0x1c0>)
 8002180:	795b      	ldrb	r3, [r3, #5]
 8002182:	717b      	strb	r3, [r7, #5]
		uint8_t device_id = lora_receive_packet_buffer.destination_id;
 8002184:	4b5a      	ldr	r3, [pc, #360]	@ (80022f0 <lora_network_irq_handle+0x1c0>)
 8002186:	789b      	ldrb	r3, [r3, #2]
 8002188:	713b      	strb	r3, [r7, #4]
		STM_LOG("pid:%3d\n", packet_id, 8);
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	2208      	movs	r2, #8
 800218e:	4619      	mov	r1, r3
 8002190:	4858      	ldr	r0, [pc, #352]	@ (80022f4 <lora_network_irq_handle+0x1c4>)
 8002192:	f7ff fab3 	bl	80016fc <STM_LOG>
		// if there is no packet has the same pid or cmd field with recent received packet
		if((device_id == DEVICE_ID) &&
 8002196:	793b      	ldrb	r3, [r7, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	f040 809e 	bne.w	80022da <lora_network_irq_handle+0x1aa>
		(lora_network_check_id_in_receive_packet(packet_id) == -1 || lora_network_check_cmd_in_receive_packet(cmd) == -1)){
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc59 	bl	8001a58 <lora_network_check_id_in_receive_packet>
 80021a6:	4603      	mov	r3, r0
		if((device_id == DEVICE_ID) &&
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d008      	beq.n	80021c0 <lora_network_irq_handle+0x90>
		(lora_network_check_id_in_receive_packet(packet_id) == -1 || lora_network_check_cmd_in_receive_packet(cmd) == -1)){
 80021ae:	797b      	ldrb	r3, [r7, #5]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fc29 	bl	8001a08 <lora_network_check_cmd_in_receive_packet>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	f040 808d 	bne.w	80022da <lora_network_irq_handle+0x1aa>
			int packet_index = lora_network_get_index_of_receive_packet();
 80021c0:	f7ff fbfe 	bl	80019c0 <lora_network_get_index_of_receive_packet>
 80021c4:	6038      	str	r0, [r7, #0]
			if(packet_index != -1){
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d07e      	beq.n	80022cc <lora_network_irq_handle+0x19c>
				memcpy(&lora_receive_packet[packet_index], &lora_receive_packet_buffer, sizeof(lora_packet_t));
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	4a47      	ldr	r2, [pc, #284]	@ (80022f8 <lora_network_irq_handle+0x1c8>)
 80021dc:	4413      	add	r3, r2
 80021de:	4a44      	ldr	r2, [pc, #272]	@ (80022f0 <lora_network_irq_handle+0x1c0>)
 80021e0:	4618      	mov	r0, r3
 80021e2:	f102 0420 	add.w	r4, r2, #32
 80021e6:	4603      	mov	r3, r0
 80021e8:	4611      	mov	r1, r2
 80021ea:	f8d1 c000 	ldr.w	ip, [r1]
 80021ee:	684e      	ldr	r6, [r1, #4]
 80021f0:	688d      	ldr	r5, [r1, #8]
 80021f2:	68c9      	ldr	r1, [r1, #12]
 80021f4:	f8c3 c000 	str.w	ip, [r3]
 80021f8:	605e      	str	r6, [r3, #4]
 80021fa:	609d      	str	r5, [r3, #8]
 80021fc:	60d9      	str	r1, [r3, #12]
 80021fe:	3210      	adds	r2, #16
 8002200:	3010      	adds	r0, #16
 8002202:	42a2      	cmp	r2, r4
 8002204:	d1ef      	bne.n	80021e6 <lora_network_irq_handle+0xb6>
 8002206:	4603      	mov	r3, r0
 8002208:	6814      	ldr	r4, [r2, #0]
 800220a:	6850      	ldr	r0, [r2, #4]
 800220c:	6891      	ldr	r1, [r2, #8]
 800220e:	601c      	str	r4, [r3, #0]
 8002210:	6058      	str	r0, [r3, #4]
 8002212:	6099      	str	r1, [r3, #8]
 8002214:	8991      	ldrh	r1, [r2, #12]
 8002216:	7b92      	ldrb	r2, [r2, #14]
 8002218:	8199      	strh	r1, [r3, #12]
 800221a:	739a      	strb	r2, [r3, #14]

				switch(cmd){
 800221c:	797b      	ldrb	r3, [r7, #5]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d84c      	bhi.n	80022bc <lora_network_irq_handle+0x18c>
 8002222:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <lora_network_irq_handle+0xf8>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	08002241 	.word	0x08002241
 800222c:	08002265 	.word	0x08002265
 8002230:	080022bd 	.word	0x080022bd
 8002234:	08002289 	.word	0x08002289
 8002238:	080022bd 	.word	0x080022bd
 800223c:	080022ad 	.word	0x080022ad
				case LORA_CMD_CONNECT:
					if(connect_request_receive_flag == 0){
 8002240:	4b2e      	ldr	r3, [pc, #184]	@ (80022fc <lora_network_irq_handle+0x1cc>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d133      	bne.n	80022b2 <lora_network_irq_handle+0x182>
						STM_LOG("Set connect request flag\n", 0, 25);
 800224a:	2219      	movs	r2, #25
 800224c:	2100      	movs	r1, #0
 800224e:	482c      	ldr	r0, [pc, #176]	@ (8002300 <lora_network_irq_handle+0x1d0>)
 8002250:	f7ff fa54 	bl	80016fc <STM_LOG>
						connect_request_receive_flag = 1;
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <lora_network_irq_handle+0x1cc>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
						connect_packet_index = packet_index;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <lora_network_irq_handle+0x1d4>)
 8002260:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002262:	e026      	b.n	80022b2 <lora_network_irq_handle+0x182>

				case LORA_CMD_DISCONNECT:
					if(disconnect_request_receive_flag == 0){
 8002264:	4b28      	ldr	r3, [pc, #160]	@ (8002308 <lora_network_irq_handle+0x1d8>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d123      	bne.n	80022b6 <lora_network_irq_handle+0x186>
						STM_LOG("Set disconnect request flag\n", 0, 28);
 800226e:	221c      	movs	r2, #28
 8002270:	2100      	movs	r1, #0
 8002272:	4826      	ldr	r0, [pc, #152]	@ (800230c <lora_network_irq_handle+0x1dc>)
 8002274:	f7ff fa42 	bl	80016fc <STM_LOG>
						disconnect_request_receive_flag = 1;
 8002278:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <lora_network_irq_handle+0x1d8>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
						disconnect_packet_index = packet_index;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b23      	ldr	r3, [pc, #140]	@ (8002310 <lora_network_irq_handle+0x1e0>)
 8002284:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002286:	e016      	b.n	80022b6 <lora_network_irq_handle+0x186>

				case LORA_CMD_READ_DATA:
					if(read_request_receive_flag == 0){
 8002288:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <lora_network_irq_handle+0x1e4>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d113      	bne.n	80022ba <lora_network_irq_handle+0x18a>
						STM_LOG("Set read request flag\n", 0, 22);
 8002292:	2216      	movs	r2, #22
 8002294:	2100      	movs	r1, #0
 8002296:	4820      	ldr	r0, [pc, #128]	@ (8002318 <lora_network_irq_handle+0x1e8>)
 8002298:	f7ff fa30 	bl	80016fc <STM_LOG>
						read_request_receive_flag = 1;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <lora_network_irq_handle+0x1e4>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
						read_packet_index = packet_index;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <lora_network_irq_handle+0x1ec>)
 80022a8:	701a      	strb	r2, [r3, #0]
					}
					break;
 80022aa:	e006      	b.n	80022ba <lora_network_irq_handle+0x18a>

				case LORA_CMD_ACK:
					lora_network_ack_cmd_handle();
 80022ac:	f7ff ff14 	bl	80020d8 <lora_network_ack_cmd_handle>
 80022b0:	e004      	b.n	80022bc <lora_network_irq_handle+0x18c>
					break;
 80022b2:	bf00      	nop
 80022b4:	e002      	b.n	80022bc <lora_network_irq_handle+0x18c>
					break;
 80022b6:	bf00      	nop
 80022b8:	e000      	b.n	80022bc <lora_network_irq_handle+0x18c>
					break;
 80022ba:	bf00      	nop
				}
				packet_received_count++;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <lora_network_irq_handle+0x1f0>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <lora_network_irq_handle+0x1f0>)
 80022c8:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_UART_Transmit(&huart2, "lora_receive packet buffer full\n", 33, 2000);
			}
		}
	}
}
 80022ca:	e006      	b.n	80022da <lora_network_irq_handle+0x1aa>
				HAL_UART_Transmit(&huart2, "lora_receive packet buffer full\n", 33, 2000);
 80022cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80022d0:	2221      	movs	r2, #33	@ 0x21
 80022d2:	4914      	ldr	r1, [pc, #80]	@ (8002324 <lora_network_irq_handle+0x1f4>)
 80022d4:	4814      	ldr	r0, [pc, #80]	@ (8002328 <lora_network_irq_handle+0x1f8>)
 80022d6:	f003 fc6f 	bl	8005bb8 <HAL_UART_Transmit>
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	bf00      	nop
 80022e4:	080075c4 	.word	0x080075c4
 80022e8:	2000007c 	.word	0x2000007c
 80022ec:	080075cc 	.word	0x080075cc
 80022f0:	200000d8 	.word	0x200000d8
 80022f4:	080075d4 	.word	0x080075d4
 80022f8:	20000108 	.word	0x20000108
 80022fc:	20000226 	.word	0x20000226
 8002300:	080075e0 	.word	0x080075e0
 8002304:	2000022d 	.word	0x2000022d
 8002308:	20000227 	.word	0x20000227
 800230c:	080075fc 	.word	0x080075fc
 8002310:	2000022e 	.word	0x2000022e
 8002314:	20000228 	.word	0x20000228
 8002318:	0800761c 	.word	0x0800761c
 800231c:	2000022f 	.word	0x2000022f
 8002320:	20000225 	.word	0x20000225
 8002324:	08007634 	.word	0x08007634
 8002328:	20000370 	.word	0x20000370

0800232c <lora_network_process>:

void lora_network_process(){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	if(connect_request_receive_flag == 1){
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <lora_network_process+0x60>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <lora_network_process+0x1a>
		lora_network_send_response(LORA_CMD_CONNECT);
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff fde8 	bl	8001f10 <lora_network_send_response>
		connect_request_receive_flag = 0;
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <lora_network_process+0x60>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
	}

	if(disconnect_request_receive_flag == 1){
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <lora_network_process+0x64>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <lora_network_process+0x30>
		lora_network_send_response(LORA_CMD_DISCONNECT);
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff fddd 	bl	8001f10 <lora_network_send_response>
		disconnect_request_receive_flag = 0;
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <lora_network_process+0x64>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
	}

	if(read_request_receive_flag == 1){
 800235c:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <lora_network_process+0x68>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <lora_network_process+0x46>
		lora_network_send_response(LORA_CMD_READ_DATA);
 8002366:	2003      	movs	r0, #3
 8002368:	f7ff fdd2 	bl	8001f10 <lora_network_send_response>
		read_request_receive_flag = 0;
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <lora_network_process+0x68>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
	}

	if(test_warning_flag == 1){
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <lora_network_process+0x6c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d104      	bne.n	8002386 <lora_network_process+0x5a>
		test_warning_flag = 0;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <lora_network_process+0x6c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
		lora_network_send_warning();
 8002382:	f7ff fcf3 	bl	8001d6c <lora_network_send_warning>
	}
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000226 	.word	0x20000226
 8002390:	20000227 	.word	0x20000227
 8002394:	20000228 	.word	0x20000228
 8002398:	20000230 	.word	0x20000230

0800239c <HAL_GPIO_EXTI_Callback>:
	SIMTransmit("AT+CMQTTSTOP\r\n"); // Stop MQTT Service
  }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button1_Pin){
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d103      	bne.n	80023b4 <HAL_GPIO_EXTI_Callback+0x18>
		test_warning_flag = 1;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]

	else if(GPIO_Pin == LORA_DIO0_Pin){
		lora_network_irq_handle();
	}

}
 80023b2:	e004      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x22>
	else if(GPIO_Pin == LORA_DIO0_Pin){
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_GPIO_EXTI_Callback+0x22>
		lora_network_irq_handle();
 80023ba:	f7ff feb9 	bl	8002130 <lora_network_irq_handle>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000230 	.word	0x20000230

080023cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d0:	f000 fd40 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d4:	f000 f814 	bl	8002400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d8:	f000 f996 	bl	8002708 <MX_GPIO_Init>
  MX_DMA_Init();
 80023dc:	f000 f974 	bl	80026c8 <MX_DMA_Init>
  MX_SPI1_Init();
 80023e0:	f000 f89a 	bl	8002518 <MX_SPI1_Init>
  MX_I2C1_Init();
 80023e4:	f000 f86a 	bl	80024bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80023e8:	f000 f91a 	bl	8002620 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023ec:	f000 f942 	bl	8002674 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80023f0:	f000 f8c8 	bl	8002584 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //bsp_sim_init_mqtt();

  //HAL_Delay(60000);
  lora_network_init();
 80023f4:	f7ff fcb4 	bl	8001d60 <lora_network_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lora_network_process();
 80023f8:	f7ff ff98 	bl	800232c <lora_network_process>
 80023fc:	e7fc      	b.n	80023f8 <main+0x2c>
	...

08002400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b094      	sub	sp, #80	@ 0x50
 8002404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002406:	f107 0320 	add.w	r3, r7, #32
 800240a:	2230      	movs	r2, #48	@ 0x30
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fc62 	bl	8006cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <SystemClock_Config+0xb4>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	4a21      	ldr	r2, [pc, #132]	@ (80024b4 <SystemClock_Config+0xb4>)
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002432:	6413      	str	r3, [r2, #64]	@ 0x40
 8002434:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <SystemClock_Config+0xb4>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <SystemClock_Config+0xb8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1b      	ldr	r2, [pc, #108]	@ (80024b8 <SystemClock_Config+0xb8>)
 800244a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <SystemClock_Config+0xb8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002460:	2301      	movs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002464:	2310      	movs	r3, #16
 8002466:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002468:	2300      	movs	r3, #0
 800246a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800246c:	f107 0320 	add.w	r3, r7, #32
 8002470:	4618      	mov	r0, r3
 8002472:	f001 fcad 	bl	8003dd0 <HAL_RCC_OscConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800247c:	f000 f9ec 	bl	8002858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002480:	230f      	movs	r3, #15
 8002482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f001 ff10 	bl	80042c0 <HAL_RCC_ClockConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80024a6:	f000 f9d7 	bl	8002858 <Error_Handler>
  }
}
 80024aa:	bf00      	nop
 80024ac:	3750      	adds	r7, #80	@ 0x50
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40007000 	.word	0x40007000

080024bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <MX_I2C1_Init+0x50>)
 80024c2:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <MX_I2C1_Init+0x54>)
 80024c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_I2C1_Init+0x50>)
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <MX_I2C1_Init+0x58>)
 80024ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <MX_I2C1_Init+0x50>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_I2C1_Init+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_I2C1_Init+0x50>)
 80024da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <MX_I2C1_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_I2C1_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <MX_I2C1_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_I2C1_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <MX_I2C1_Init+0x50>)
 80024fa:	f001 fb25 	bl	8003b48 <HAL_I2C_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002504:	f000 f9a8 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000234 	.word	0x20000234
 8002510:	40005400 	.word	0x40005400
 8002514:	000186a0 	.word	0x000186a0

08002518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_SPI1_Init+0x64>)
 800251e:	4a18      	ldr	r2, [pc, #96]	@ (8002580 <MX_SPI1_Init+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <MX_SPI1_Init+0x64>)
 8002524:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800252a:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_SPI1_Init+0x64>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002530:	4b12      	ldr	r3, [pc, #72]	@ (800257c <MX_SPI1_Init+0x64>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002536:	4b11      	ldr	r3, [pc, #68]	@ (800257c <MX_SPI1_Init+0x64>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <MX_SPI1_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002542:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <MX_SPI1_Init+0x64>)
 8002544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002548:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800254a:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <MX_SPI1_Init+0x64>)
 800254c:	2210      	movs	r2, #16
 800254e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002550:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <MX_SPI1_Init+0x64>)
 8002552:	2200      	movs	r2, #0
 8002554:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <MX_SPI1_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800255c:	4b07      	ldr	r3, [pc, #28]	@ (800257c <MX_SPI1_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <MX_SPI1_Init+0x64>)
 8002564:	220a      	movs	r2, #10
 8002566:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	@ (800257c <MX_SPI1_Init+0x64>)
 800256a:	f002 f8bb 	bl	80046e4 <HAL_SPI_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002574:	f000 f970 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000288 	.word	0x20000288
 8002580:	40013000 	.word	0x40013000

08002584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	463b      	mov	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025a2:	4a1e      	ldr	r2, [pc, #120]	@ (800261c <MX_TIM3_Init+0x98>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025a8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80025ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30-1;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025b6:	221d      	movs	r2, #29
 80025b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ba:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025c6:	4814      	ldr	r0, [pc, #80]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025c8:	f002 fe6c 	bl	80052a4 <HAL_TIM_Base_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025d2:	f000 f941 	bl	8002858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	@ (8002618 <MX_TIM3_Init+0x94>)
 80025e4:	f003 f800 	bl	80055e8 <HAL_TIM_ConfigClockSource>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025ee:	f000 f933 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025fa:	463b      	mov	r3, r7
 80025fc:	4619      	mov	r1, r3
 80025fe:	4806      	ldr	r0, [pc, #24]	@ (8002618 <MX_TIM3_Init+0x94>)
 8002600:	f003 fa08 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800260a:	f000 f925 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200002e0 	.word	0x200002e0
 800261c:	40000400 	.word	0x40000400

08002620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002624:	4b11      	ldr	r3, [pc, #68]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 8002626:	4a12      	ldr	r2, [pc, #72]	@ (8002670 <MX_USART1_UART_Init+0x50>)
 8002628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 800262c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002644:	4b09      	ldr	r3, [pc, #36]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 8002646:	220c      	movs	r2, #12
 8002648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	@ (800266c <MX_USART1_UART_Init+0x4c>)
 8002658:	f003 fa5e 	bl	8005b18 <HAL_UART_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002662:	f000 f8f9 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000328 	.word	0x20000328
 8002670:	40011000 	.word	0x40011000

08002674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002678:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 800267a:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <MX_USART2_UART_Init+0x50>)
 800267c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800267e:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 8002680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002686:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002698:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 800269a:	220c      	movs	r2, #12
 800269c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269e:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026aa:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <MX_USART2_UART_Init+0x4c>)
 80026ac:	f003 fa34 	bl	8005b18 <HAL_UART_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026b6:	f000 f8cf 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000370 	.word	0x20000370
 80026c4:	40004400 	.word	0x40004400

080026c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <MX_DMA_Init+0x3c>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002704 <MX_DMA_Init+0x3c>)
 80026d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <MX_DMA_Init+0x3c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2104      	movs	r1, #4
 80026ee:	203a      	movs	r0, #58	@ 0x3a
 80026f0:	f000 fcce 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80026f4:	203a      	movs	r0, #58	@ 0x3a
 80026f6:	f000 fce7 	bl	80030c8 <HAL_NVIC_EnableIRQ>

}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800

08002708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b41      	ldr	r3, [pc, #260]	@ (8002828 <MX_GPIO_Init+0x120>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a40      	ldr	r2, [pc, #256]	@ (8002828 <MX_GPIO_Init+0x120>)
 8002728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b3e      	ldr	r3, [pc, #248]	@ (8002828 <MX_GPIO_Init+0x120>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b3a      	ldr	r3, [pc, #232]	@ (8002828 <MX_GPIO_Init+0x120>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a39      	ldr	r2, [pc, #228]	@ (8002828 <MX_GPIO_Init+0x120>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <MX_GPIO_Init+0x120>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b33      	ldr	r3, [pc, #204]	@ (8002828 <MX_GPIO_Init+0x120>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	4a32      	ldr	r2, [pc, #200]	@ (8002828 <MX_GPIO_Init+0x120>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6313      	str	r3, [r2, #48]	@ 0x30
 8002766:	4b30      	ldr	r3, [pc, #192]	@ (8002828 <MX_GPIO_Init+0x120>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002778:	482c      	ldr	r0, [pc, #176]	@ (800282c <MX_GPIO_Init+0x124>)
 800277a:	f001 f9b3 	bl	8003ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Connect_Led_Pin|Transfer_Led_Pin|Machine_Led_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8002784:	482a      	ldr	r0, [pc, #168]	@ (8002830 <MX_GPIO_Init+0x128>)
 8002786:	f001 f9ad 	bl	8003ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 800278a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800278e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002790:	2301      	movs	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	4619      	mov	r1, r3
 80027a2:	4822      	ldr	r0, [pc, #136]	@ (800282c <MX_GPIO_Init+0x124>)
 80027a4:	f001 f81a 	bl	80037dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO0_Pin Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin|Button1_Pin|Button2_Pin|Button3_Pin;
 80027a8:	230f      	movs	r3, #15
 80027aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4619      	mov	r1, r3
 80027bc:	481c      	ldr	r0, [pc, #112]	@ (8002830 <MX_GPIO_Init+0x128>)
 80027be:	f001 f80d 	bl	80037dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Connect_Led_Pin Transfer_Led_Pin Machine_Led_Pin */
  GPIO_InitStruct.Pin = Connect_Led_Pin|Transfer_Led_Pin|Machine_Led_Pin;
 80027c2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80027c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	4619      	mov	r1, r3
 80027da:	4815      	ldr	r0, [pc, #84]	@ (8002830 <MX_GPIO_Init+0x128>)
 80027dc:	f000 fffe 	bl	80037dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2103      	movs	r1, #3
 80027e4:	2006      	movs	r0, #6
 80027e6:	f000 fc53 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027ea:	2006      	movs	r0, #6
 80027ec:	f000 fc6c 	bl	80030c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2105      	movs	r1, #5
 80027f4:	2007      	movs	r0, #7
 80027f6:	f000 fc4b 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80027fa:	2007      	movs	r0, #7
 80027fc:	f000 fc64 	bl	80030c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2105      	movs	r1, #5
 8002804:	2008      	movs	r0, #8
 8002806:	f000 fc43 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800280a:	2008      	movs	r0, #8
 800280c:	f000 fc5c 	bl	80030c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2105      	movs	r1, #5
 8002814:	2009      	movs	r0, #9
 8002816:	f000 fc3b 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800281a:	2009      	movs	r0, #9
 800281c:	f000 fc54 	bl	80030c8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002820:	bf00      	nop
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400

08002834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002846:	f000 fb27 	bl	8002e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40000800 	.word	0x40000800

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <Error_Handler+0x8>

08002864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	4a0f      	ldr	r2, [pc, #60]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002878:	6453      	str	r3, [r2, #68]	@ 0x44
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_MspInit+0x4c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_MspInit+0x4c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	@ 0x40
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_MspInit+0x4c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800

080028b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	@ 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	@ (8002938 <HAL_I2C_MspInit+0x84>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d12b      	bne.n	800292e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_I2C_MspInit+0x88>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a17      	ldr	r2, [pc, #92]	@ (800293c <HAL_I2C_MspInit+0x88>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_I2C_MspInit+0x88>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028f2:	23c0      	movs	r3, #192	@ 0xc0
 80028f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f6:	2312      	movs	r3, #18
 80028f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002902:	2304      	movs	r3, #4
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	480c      	ldr	r0, [pc, #48]	@ (8002940 <HAL_I2C_MspInit+0x8c>)
 800290e:	f000 ff65 	bl	80037dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_I2C_MspInit+0x88>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_I2C_MspInit+0x88>)
 800291c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_I2C_MspInit+0x88>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	@ 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40005400 	.word	0x40005400
 800293c:	40023800 	.word	0x40023800
 8002940:	40020400 	.word	0x40020400

08002944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	@ (80029c8 <HAL_SPI_MspInit+0x84>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12b      	bne.n	80029be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_SPI_MspInit+0x88>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <HAL_SPI_MspInit+0x88>)
 8002970:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002974:	6453      	str	r3, [r2, #68]	@ 0x44
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_SPI_MspInit+0x88>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_SPI_MspInit+0x88>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a10      	ldr	r2, [pc, #64]	@ (80029cc <HAL_SPI_MspInit+0x88>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_SPI_MspInit+0x88>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800299e:	23e0      	movs	r3, #224	@ 0xe0
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ae:	2305      	movs	r3, #5
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <HAL_SPI_MspInit+0x8c>)
 80029ba:	f000 ff0f 	bl	80037dc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	@ 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40013000 	.word	0x40013000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000

080029d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a1c <HAL_TIM_Base_MspInit+0x48>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d115      	bne.n	8002a12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_TIM_Base_MspInit+0x4c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002a20 <HAL_TIM_Base_MspInit+0x4c>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_TIM_Base_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2103      	movs	r1, #3
 8002a06:	201d      	movs	r0, #29
 8002a08:	f000 fb42 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a0c:	201d      	movs	r0, #29
 8002a0e:	f000 fb5b 	bl	80030c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	@ 0x30
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4d      	ldr	r2, [pc, #308]	@ (8002b78 <HAL_UART_MspInit+0x154>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d163      	bne.n	8002b0e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	4a4b      	ldr	r2, [pc, #300]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002a50:	f043 0310 	orr.w	r3, r3, #16
 8002a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a56:	4b49      	ldr	r3, [pc, #292]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	4b45      	ldr	r3, [pc, #276]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a44      	ldr	r2, [pc, #272]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b42      	ldr	r3, [pc, #264]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a90:	2307      	movs	r3, #7
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4839      	ldr	r0, [pc, #228]	@ (8002b80 <HAL_UART_MspInit+0x15c>)
 8002a9c:	f000 fe9e 	bl	80037dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002aa0:	4b38      	ldr	r3, [pc, #224]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002aa2:	4a39      	ldr	r2, [pc, #228]	@ (8002b88 <HAL_UART_MspInit+0x164>)
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002aa6:	4b37      	ldr	r3, [pc, #220]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002aa8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002aac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aae:	4b35      	ldr	r3, [pc, #212]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab4:	4b33      	ldr	r3, [pc, #204]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aba:	4b32      	ldr	r3, [pc, #200]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002abc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac2:	4b30      	ldr	r3, [pc, #192]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ace:	4b2d      	ldr	r3, [pc, #180]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ada:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ae0:	4828      	ldr	r0, [pc, #160]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002ae2:	f000 faff 	bl	80030e4 <HAL_DMA_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002aec:	f7ff feb4 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a24      	ldr	r2, [pc, #144]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002af6:	4a23      	ldr	r2, [pc, #140]	@ (8002b84 <HAL_UART_MspInit+0x160>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2104      	movs	r1, #4
 8002b00:	2025      	movs	r0, #37	@ 0x25
 8002b02:	f000 fac5 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b06:	2025      	movs	r0, #37	@ 0x25
 8002b08:	f000 fade 	bl	80030c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b0c:	e030      	b.n	8002b70 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1e      	ldr	r2, [pc, #120]	@ (8002b8c <HAL_UART_MspInit+0x168>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d12b      	bne.n	8002b70 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b44:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_UART_MspInit+0x158>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b50:	230c      	movs	r3, #12
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b60:	2307      	movs	r3, #7
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <HAL_UART_MspInit+0x15c>)
 8002b6c:	f000 fe36 	bl	80037dc <HAL_GPIO_Init>
}
 8002b70:	bf00      	nop
 8002b72:	3730      	adds	r7, #48	@ 0x30
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	200003b8 	.word	0x200003b8
 8002b88:	40026440 	.word	0x40026440
 8002b8c:	40004400 	.word	0x40004400

08002b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08e      	sub	sp, #56	@ 0x38
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <HAL_InitTick+0xe4>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	4a32      	ldr	r2, [pc, #200]	@ (8002c74 <HAL_InitTick+0xe4>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb0:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <HAL_InitTick+0xe4>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bbc:	f107 0210 	add.w	r2, r7, #16
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 fd5a 	bl	8004680 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bd6:	f001 fd2b 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 8002bda:	6378      	str	r0, [r7, #52]	@ 0x34
 8002bdc:	e004      	b.n	8002be8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bde:	f001 fd27 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 8002be2:	4603      	mov	r3, r0
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bea:	4a23      	ldr	r2, [pc, #140]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0c9b      	lsrs	r3, r3, #18
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002bf6:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_InitTick+0xec>)
 8002bf8:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <HAL_InitTick+0xf0>)
 8002bfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c7c <HAL_InitTick+0xec>)
 8002bfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c02:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002c04:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <HAL_InitTick+0xec>)
 8002c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c08:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <HAL_InitTick+0xec>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b1a      	ldr	r3, [pc, #104]	@ (8002c7c <HAL_InitTick+0xec>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_InitTick+0xec>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002c1c:	4817      	ldr	r0, [pc, #92]	@ (8002c7c <HAL_InitTick+0xec>)
 8002c1e:	f002 fb41 	bl	80052a4 <HAL_TIM_Base_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11b      	bne.n	8002c68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002c30:	4812      	ldr	r0, [pc, #72]	@ (8002c7c <HAL_InitTick+0xec>)
 8002c32:	f002 fb87 	bl	8005344 <HAL_TIM_Base_Start_IT>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d111      	bne.n	8002c68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c44:	201e      	movs	r0, #30
 8002c46:	f000 fa3f 	bl	80030c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d808      	bhi.n	8002c62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002c50:	2200      	movs	r2, #0
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	201e      	movs	r0, #30
 8002c56:	f000 fa1b 	bl	8003090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <HAL_InitTick+0xf4>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e002      	b.n	8002c68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3738      	adds	r7, #56	@ 0x38
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	431bde83 	.word	0x431bde83
 8002c7c:	20000418 	.word	0x20000418
 8002c80:	40000800 	.word	0x40000800
 8002c84:	20000008 	.word	0x20000008

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <NMI_Handler+0x4>

08002c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <HardFault_Handler+0x4>

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <MemManage_Handler+0x4>

08002ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <BusFault_Handler+0x4>

08002ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <UsageFault_Handler+0x4>

08002cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8002cec:	2001      	movs	r0, #1
 8002cee:	f000 ff13 	bl	8003b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	f000 ff0c 	bl	8003b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8002d08:	2004      	movs	r0, #4
 8002d0a:	f000 ff05 	bl	8003b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8002d16:	2008      	movs	r0, #8
 8002d18:	f000 fefe 	bl	8003b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d24:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <TIM3_IRQHandler+0x10>)
 8002d26:	f002 fb6f 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200002e0 	.word	0x200002e0

08002d34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <TIM4_IRQHandler+0x10>)
 8002d3a:	f002 fb65 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000418 	.word	0x20000418

08002d48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d4c:	4802      	ldr	r0, [pc, #8]	@ (8002d58 <USART1_IRQHandler+0x10>)
 8002d4e:	f002 ffbf 	bl	8005cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000328 	.word	0x20000328

08002d5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d60:	4802      	ldr	r0, [pc, #8]	@ (8002d6c <DMA2_Stream2_IRQHandler+0x10>)
 8002d62:	f000 faff 	bl	8003364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200003b8 	.word	0x200003b8

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	@ (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f003 ffb2 	bl	8006d08 <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	@ (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20020000 	.word	0x20020000
 8002dd0:	00000400 	.word	0x00000400
 8002dd4:	20000460 	.word	0x20000460
 8002dd8:	200005b0 	.word	0x200005b0

08002ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <SystemInit+0x20>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <SystemInit+0x20>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e04:	f7ff ffea 	bl	8002ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e08:	480c      	ldr	r0, [pc, #48]	@ (8002e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e0a:	490d      	ldr	r1, [pc, #52]	@ (8002e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e10:	e002      	b.n	8002e18 <LoopCopyDataInit>

08002e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e16:	3304      	adds	r3, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e1c:	d3f9      	bcc.n	8002e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e20:	4c0a      	ldr	r4, [pc, #40]	@ (8002e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e24:	e001      	b.n	8002e2a <LoopFillZerobss>

08002e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e28:	3204      	adds	r2, #4

08002e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e2c:	d3fb      	bcc.n	8002e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f003 ff71 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e32:	f7ff facb 	bl	80023cc <main>
  bx  lr    
 8002e36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e40:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002e44:	080076bc 	.word	0x080076bc
  ldr r2, =_sbss
 8002e48:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002e4c:	200005b0 	.word	0x200005b0

08002e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC_IRQHandler>
	...

08002e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e58:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e94 <HAL_Init+0x40>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <HAL_Init+0x40>)
 8002e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <HAL_Init+0x40>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f000 f8fc 	bl	800307a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7ff fe84 	bl	8002b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e88:	f7ff fcec 	bl	8002864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_IncTick+0x20>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_IncTick+0x24>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <HAL_IncTick+0x24>)
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000000c 	.word	0x2000000c
 8002ebc:	20000464 	.word	0x20000464

08002ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_GetTick+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000464 	.word	0x20000464

08002ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff ffee 	bl	8002ec0 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d005      	beq.n	8002efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_Delay+0x44>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002efe:	bf00      	nop
 8002f00:	f7ff ffde 	bl	8002ec0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d8f7      	bhi.n	8002f00 <HAL_Delay+0x28>
  {
  }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <__NVIC_SetPriorityGrouping>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	@ (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff4c 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a2:	f7ff ff61 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f7ff ffb1 	bl	8003014 <NVIC_EncodePriority>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff80 	bl	8002fc0 <__NVIC_SetPriority>
}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff54 	bl	8002f84 <__NVIC_EnableIRQ>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff fee6 	bl	8002ec0 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e099      	b.n	8003234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003120:	e00f      	b.n	8003142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003122:	f7ff fecd 	bl	8002ec0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b05      	cmp	r3, #5
 800312e:	d908      	bls.n	8003142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e078      	b.n	8003234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e8      	bne.n	8003122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4b38      	ldr	r3, [pc, #224]	@ (800323c <HAL_DMA_Init+0x158>)
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d117      	bne.n	8003206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa7b 	bl	80036e4 <DMA_CheckFifoParam>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2240      	movs	r2, #64	@ 0x40
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003202:	2301      	movs	r3, #1
 8003204:	e016      	b.n	8003234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa32 	bl	8003678 <DMA_CalcBaseAndBitshift>
 8003214:	4603      	mov	r3, r0
 8003216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321c:	223f      	movs	r2, #63	@ 0x3f
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	f010803f 	.word	0xf010803f

08003240 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800324e:	f7ff fe37 	bl	8002ec0 <HAL_GetTick>
 8003252:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d008      	beq.n	8003272 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2280      	movs	r2, #128	@ 0x80
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e052      	b.n	8003318 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0216 	bic.w	r2, r2, #22
 8003280:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003290:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_DMA_Abort+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0208 	bic.w	r2, r2, #8
 80032b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c2:	e013      	b.n	80032ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032c4:	f7ff fdfc 	bl	8002ec0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d90c      	bls.n	80032ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2203      	movs	r2, #3
 80032dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e015      	b.n	8003318 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e4      	bne.n	80032c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	223f      	movs	r2, #63	@ 0x3f
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d004      	beq.n	800333e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	@ 0x80
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00c      	b.n	8003358 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2205      	movs	r2, #5
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003370:	4b8e      	ldr	r3, [pc, #568]	@ (80035ac <HAL_DMA_IRQHandler+0x248>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a8e      	ldr	r2, [pc, #568]	@ (80035b0 <HAL_DMA_IRQHandler+0x24c>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	2208      	movs	r2, #8
 8003390:	409a      	lsls	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01a      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	2208      	movs	r2, #8
 80033be:	409a      	lsls	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d012      	beq.n	8003406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	2201      	movs	r2, #1
 80033f4:	409a      	lsls	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fe:	f043 0202 	orr.w	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	2204      	movs	r2, #4
 800340c:	409a      	lsls	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d012      	beq.n	800343c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	2204      	movs	r2, #4
 800342a:	409a      	lsls	r2, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003440:	2210      	movs	r2, #16
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d043      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d03c      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	2210      	movs	r2, #16
 8003460:	409a      	lsls	r2, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d018      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d024      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
 8003492:	e01f      	b.n	80034d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01b      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
 80034a4:	e016      	b.n	80034d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0208 	bic.w	r2, r2, #8
 80034c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	2220      	movs	r2, #32
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 808f 	beq.w	8003604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8087 	beq.w	8003604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fa:	2220      	movs	r2, #32
 80034fc:	409a      	lsls	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b05      	cmp	r3, #5
 800350c:	d136      	bne.n	800357c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0216 	bic.w	r2, r2, #22
 800351c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800352c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <HAL_DMA_IRQHandler+0x1da>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0208 	bic.w	r2, r2, #8
 800354c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003552:	223f      	movs	r2, #63	@ 0x3f
 8003554:	409a      	lsls	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356e:	2b00      	cmp	r3, #0
 8003570:	d07e      	beq.n	8003670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
        }
        return;
 800357a:	e079      	b.n	8003670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01d      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359c:	2b00      	cmp	r3, #0
 800359e:	d031      	beq.n	8003604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
 80035a8:	e02c      	b.n	8003604 <HAL_DMA_IRQHandler+0x2a0>
 80035aa:	bf00      	nop
 80035ac:	20000004 	.word	0x20000004
 80035b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d023      	beq.n	8003604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
 80035c4:	e01e      	b.n	8003604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10f      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0210 	bic.w	r2, r2, #16
 80035e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003608:	2b00      	cmp	r3, #0
 800360a:	d032      	beq.n	8003672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d022      	beq.n	800365e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2205      	movs	r2, #5
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3301      	adds	r3, #1
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	d307      	bcc.n	800364c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f2      	bne.n	8003630 <HAL_DMA_IRQHandler+0x2cc>
 800364a:	e000      	b.n	800364e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800364c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
 800366e:	e000      	b.n	8003672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003670:	bf00      	nop
    }
  }
}
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3b10      	subs	r3, #16
 8003688:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <DMA_CalcBaseAndBitshift+0x64>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003692:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d909      	bls.n	80036ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80036b8:	e007      	b.n	80036ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	aaaaaaab 	.word	0xaaaaaaab
 80036e0:	08007670 	.word	0x08007670

080036e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d856      	bhi.n	80037b2 <DMA_CheckFifoParam+0xce>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <DMA_CheckFifoParam+0x28>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	0800371d 	.word	0x0800371d
 8003710:	0800372f 	.word	0x0800372f
 8003714:	0800371d 	.word	0x0800371d
 8003718:	080037b3 	.word	0x080037b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d046      	beq.n	80037b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e043      	b.n	80037b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003736:	d140      	bne.n	80037ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373c:	e03d      	b.n	80037ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003746:	d121      	bne.n	800378c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d837      	bhi.n	80037be <DMA_CheckFifoParam+0xda>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <DMA_CheckFifoParam+0x70>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	0800376b 	.word	0x0800376b
 800375c:	08003765 	.word	0x08003765
 8003760:	0800377d 	.word	0x0800377d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e030      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d025      	beq.n	80037c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377a:	e022      	b.n	80037c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003784:	d11f      	bne.n	80037c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800378a:	e01c      	b.n	80037c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d903      	bls.n	800379a <DMA_CheckFifoParam+0xb6>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d003      	beq.n	80037a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003798:	e018      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      break;
 800379e:	e015      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e00b      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037b2:	bf00      	nop
 80037b4:	e00a      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e008      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e006      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e004      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;   
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
    }
  } 
  
  return status; 
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	@ 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e159      	b.n	8003aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f8:	2201      	movs	r2, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	429a      	cmp	r2, r3
 8003812:	f040 8148 	bne.w	8003aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d005      	beq.n	800382e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	2b02      	cmp	r3, #2
 800382c:	d130      	bne.n	8003890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003864:	2201      	movs	r2, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 0201 	and.w	r2, r3, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b03      	cmp	r3, #3
 800389a:	d017      	beq.n	80038cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d123      	bne.n	8003920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	08da      	lsrs	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3208      	adds	r2, #8
 80038e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	220f      	movs	r2, #15
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	08da      	lsrs	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3208      	adds	r2, #8
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0203 	and.w	r2, r3, #3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a2 	beq.w	8003aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b57      	ldr	r3, [pc, #348]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	4a56      	ldr	r2, [pc, #344]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 800396c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003970:	6453      	str	r3, [r2, #68]	@ 0x44
 8003972:	4b54      	ldr	r3, [pc, #336]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800397e:	4a52      	ldr	r2, [pc, #328]	@ (8003ac8 <HAL_GPIO_Init+0x2ec>)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	220f      	movs	r2, #15
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a49      	ldr	r2, [pc, #292]	@ (8003acc <HAL_GPIO_Init+0x2f0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d019      	beq.n	80039de <HAL_GPIO_Init+0x202>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a48      	ldr	r2, [pc, #288]	@ (8003ad0 <HAL_GPIO_Init+0x2f4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_GPIO_Init+0x1fe>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a47      	ldr	r2, [pc, #284]	@ (8003ad4 <HAL_GPIO_Init+0x2f8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00d      	beq.n	80039d6 <HAL_GPIO_Init+0x1fa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a46      	ldr	r2, [pc, #280]	@ (8003ad8 <HAL_GPIO_Init+0x2fc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x1f6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a45      	ldr	r2, [pc, #276]	@ (8003adc <HAL_GPIO_Init+0x300>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x1f2>
 80039ca:	2304      	movs	r3, #4
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039ce:	2307      	movs	r3, #7
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039de:	2300      	movs	r3, #0
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f0:	4935      	ldr	r1, [pc, #212]	@ (8003ac8 <HAL_GPIO_Init+0x2ec>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fe:	4b38      	ldr	r3, [pc, #224]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a52:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a76:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f aea2 	bls.w	80037f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3724      	adds	r7, #36	@ 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40013c00 	.word	0x40013c00

08003ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
 8003af0:	4613      	mov	r3, r2
 8003af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af4:	787b      	ldrb	r3, [r7, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b00:	e003      	b.n	8003b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	041a      	lsls	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	619a      	str	r2, [r3, #24]
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b2e:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fc30 	bl	800239c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40013c00 	.word	0x40013c00

08003b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e12b      	b.n	8003db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fea0 	bl	80028b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	@ 0x24
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bac:	f000 fd40 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a81      	ldr	r2, [pc, #516]	@ (8003dbc <HAL_I2C_Init+0x274>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d807      	bhi.n	8003bcc <HAL_I2C_Init+0x84>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4a80      	ldr	r2, [pc, #512]	@ (8003dc0 <HAL_I2C_Init+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	bf94      	ite	ls
 8003bc4:	2301      	movls	r3, #1
 8003bc6:	2300      	movhi	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e006      	b.n	8003bda <HAL_I2C_Init+0x92>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a7d      	ldr	r2, [pc, #500]	@ (8003dc4 <HAL_I2C_Init+0x27c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bf94      	ite	ls
 8003bd4:	2301      	movls	r3, #1
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0e7      	b.n	8003db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a78      	ldr	r2, [pc, #480]	@ (8003dc8 <HAL_I2C_Init+0x280>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0c9b      	lsrs	r3, r3, #18
 8003bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a6a      	ldr	r2, [pc, #424]	@ (8003dbc <HAL_I2C_Init+0x274>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d802      	bhi.n	8003c1c <HAL_I2C_Init+0xd4>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	e009      	b.n	8003c30 <HAL_I2C_Init+0xe8>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	4a69      	ldr	r2, [pc, #420]	@ (8003dcc <HAL_I2C_Init+0x284>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	099b      	lsrs	r3, r3, #6
 8003c2e:	3301      	adds	r3, #1
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	495c      	ldr	r1, [pc, #368]	@ (8003dbc <HAL_I2C_Init+0x274>)
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	d819      	bhi.n	8003c84 <HAL_I2C_Init+0x13c>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1e59      	subs	r1, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c5e:	1c59      	adds	r1, r3, #1
 8003c60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c64:	400b      	ands	r3, r1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_I2C_Init+0x138>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1e59      	subs	r1, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7e:	e051      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003c80:	2304      	movs	r3, #4
 8003c82:	e04f      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d111      	bne.n	8003cb0 <HAL_I2C_Init+0x168>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e012      	b.n	8003cd6 <HAL_I2C_Init+0x18e>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	0099      	lsls	r1, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Init+0x196>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e022      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10e      	bne.n	8003d04 <HAL_I2C_Init+0x1bc>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1e58      	subs	r0, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	440b      	add	r3, r1
 8003cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d02:	e00f      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e58      	subs	r0, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	0099      	lsls	r1, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	6809      	ldr	r1, [r1, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6911      	ldr	r1, [r2, #16]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	4311      	orrs	r1, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	000186a0 	.word	0x000186a0
 8003dc0:	001e847f 	.word	0x001e847f
 8003dc4:	003d08ff 	.word	0x003d08ff
 8003dc8:	431bde83 	.word	0x431bde83
 8003dcc:	10624dd3 	.word	0x10624dd3

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e267      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dee:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b85      	ldr	r3, [pc, #532]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b82      	ldr	r3, [pc, #520]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b7e      	ldr	r3, [pc, #504]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e242      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b76      	ldr	r3, [pc, #472]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a75      	ldr	r2, [pc, #468]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b70      	ldr	r3, [pc, #448]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6f      	ldr	r2, [pc, #444]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6c      	ldr	r2, [pc, #432]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b69      	ldr	r3, [pc, #420]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a68      	ldr	r2, [pc, #416]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b66      	ldr	r3, [pc, #408]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a65      	ldr	r2, [pc, #404]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7ff f81a 	bl	8002ec0 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7ff f816 	bl	8002ec0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e207      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7ff f806 	bl	8002ec0 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7ff f802 	bl	8002ec0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	@ 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1f3      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b51      	ldr	r3, [pc, #324]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b44      	ldr	r3, [pc, #272]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1c7      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b3b      	ldr	r3, [pc, #236]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4937      	ldr	r1, [pc, #220]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b34      	ldr	r3, [pc, #208]	@ (8004014 <HAL_RCC_OscConfig+0x244>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fe ffbb 	bl	8002ec0 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fe ffb7 	bl	8002ec0 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1a8      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b2b      	ldr	r3, [pc, #172]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b28      	ldr	r3, [pc, #160]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4925      	ldr	r1, [pc, #148]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <HAL_RCC_OscConfig+0x244>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe ff9a 	bl	8002ec0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fe ff96 	bl	8002ec0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e187      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d036      	beq.n	8004028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b15      	ldr	r3, [pc, #84]	@ (8004018 <HAL_RCC_OscConfig+0x248>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe ff7a 	bl	8002ec0 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fe ff76 	bl	8002ec0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e167      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
 8003fee:	e01b      	b.n	8004028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_OscConfig+0x248>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe ff63 	bl	8002ec0 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e00e      	b.n	800401c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fe ff5f 	bl	8002ec0 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d907      	bls.n	800401c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e150      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
 8004010:	40023800 	.word	0x40023800
 8004014:	42470000 	.word	0x42470000
 8004018:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4b88      	ldr	r3, [pc, #544]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 800401e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ea      	bne.n	8003ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8097 	beq.w	8004164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b81      	ldr	r3, [pc, #516]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	4b7d      	ldr	r3, [pc, #500]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	4a7c      	ldr	r2, [pc, #496]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004054:	6413      	str	r3, [r2, #64]	@ 0x40
 8004056:	4b7a      	ldr	r3, [pc, #488]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004066:	4b77      	ldr	r3, [pc, #476]	@ (8004244 <HAL_RCC_OscConfig+0x474>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d118      	bne.n	80040a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004072:	4b74      	ldr	r3, [pc, #464]	@ (8004244 <HAL_RCC_OscConfig+0x474>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a73      	ldr	r2, [pc, #460]	@ (8004244 <HAL_RCC_OscConfig+0x474>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407e:	f7fe ff1f 	bl	8002ec0 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7fe ff1b 	bl	8002ec0 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e10c      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	4b6a      	ldr	r3, [pc, #424]	@ (8004244 <HAL_RCC_OscConfig+0x474>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x2ea>
 80040ac:	4b64      	ldr	r3, [pc, #400]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b0:	4a63      	ldr	r2, [pc, #396]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b8:	e01c      	b.n	80040f4 <HAL_RCC_OscConfig+0x324>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x30c>
 80040c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0x324>
 80040dc:	4b58      	ldr	r3, [pc, #352]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	4a57      	ldr	r2, [pc, #348]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e8:	4b55      	ldr	r3, [pc, #340]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a54      	ldr	r2, [pc, #336]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80040ee:	f023 0304 	bic.w	r3, r3, #4
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fe fee0 	bl	8002ec0 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	e00a      	b.n	800411a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fe fedc 	bl	8002ec0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0cb      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	4b49      	ldr	r3, [pc, #292]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ee      	beq.n	8004104 <HAL_RCC_OscConfig+0x334>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fe feca 	bl	8002ec0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe fec6 	bl	8002ec0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0b5      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	4b3e      	ldr	r3, [pc, #248]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ee      	bne.n	8004130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d105      	bne.n	8004164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004158:	4b39      	ldr	r3, [pc, #228]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	4a38      	ldr	r2, [pc, #224]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 800415e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004162:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a1 	beq.w	80042b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416e:	4b34      	ldr	r3, [pc, #208]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d05c      	beq.n	8004234 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d141      	bne.n	8004206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <HAL_RCC_OscConfig+0x478>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fe fe9a 	bl	8002ec0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe fe96 	bl	8002ec0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e087      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	4b27      	ldr	r3, [pc, #156]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	019b      	lsls	r3, r3, #6
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	491b      	ldr	r1, [pc, #108]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <HAL_RCC_OscConfig+0x478>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fe fe6f 	bl	8002ec0 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fe fe6b 	bl	8002ec0 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e05c      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f8:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x416>
 8004204:	e054      	b.n	80042b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <HAL_RCC_OscConfig+0x478>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fe fe58 	bl	8002ec0 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004214:	f7fe fe54 	bl	8002ec0 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e045      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_RCC_OscConfig+0x470>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x444>
 8004232:	e03d      	b.n	80042b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d107      	bne.n	800424c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e038      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
 8004240:	40023800 	.word	0x40023800
 8004244:	40007000 	.word	0x40007000
 8004248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800424c:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <HAL_RCC_OscConfig+0x4ec>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d028      	beq.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d121      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d11a      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004284:	4293      	cmp	r3, r2
 8004286:	d111      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	3b01      	subs	r3, #1
 8004296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800

080042c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0cc      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b68      	ldr	r3, [pc, #416]	@ (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d90c      	bls.n	80042fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b65      	ldr	r3, [pc, #404]	@ (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b63      	ldr	r3, [pc, #396]	@ (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b8      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004314:	4b59      	ldr	r3, [pc, #356]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a58      	ldr	r2, [pc, #352]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800431e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800432c:	4b53      	ldr	r3, [pc, #332]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a52      	ldr	r2, [pc, #328]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b50      	ldr	r3, [pc, #320]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	494d      	ldr	r1, [pc, #308]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d044      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b47      	ldr	r3, [pc, #284]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d119      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d003      	beq.n	800437e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437a:	2b03      	cmp	r3, #3
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b3f      	ldr	r3, [pc, #252]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	4b3b      	ldr	r3, [pc, #236]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e067      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b37      	ldr	r3, [pc, #220]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4934      	ldr	r1, [pc, #208]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fe fd86 	bl	8002ec0 <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fe fd82 	bl	8002ec0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e04f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2b      	ldr	r3, [pc, #172]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d20c      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b20      	ldr	r3, [pc, #128]	@ (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4916      	ldr	r1, [pc, #88]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004432:	4b12      	ldr	r3, [pc, #72]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490e      	ldr	r1, [pc, #56]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004446:	f000 f821 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490a      	ldr	r1, [pc, #40]	@ (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	fa22 f303 	lsr.w	r3, r2, r3
 800445e:	4a09      	ldr	r2, [pc, #36]	@ (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004462:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fb92 	bl	8002b90 <HAL_InitTick>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023c00 	.word	0x40023c00
 800447c:	40023800 	.word	0x40023800
 8004480:	08007658 	.word	0x08007658
 8004484:	20000004 	.word	0x20000004
 8004488:	20000008 	.word	0x20000008

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b090      	sub	sp, #64	@ 0x40
 8004492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a4:	4b59      	ldr	r3, [pc, #356]	@ (800460c <HAL_RCC_GetSysClockFreq+0x180>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d00d      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x40>
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	f200 80a1 	bhi.w	80045f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044be:	e09b      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x184>)
 80044c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044c4:	e09b      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c6:	4b53      	ldr	r3, [pc, #332]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ca:	e098      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044cc:	4b4f      	ldr	r3, [pc, #316]	@ (800460c <HAL_RCC_GetSysClockFreq+0x180>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d6:	4b4d      	ldr	r3, [pc, #308]	@ (800460c <HAL_RCC_GetSysClockFreq+0x180>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d028      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b4a      	ldr	r3, [pc, #296]	@ (800460c <HAL_RCC_GetSysClockFreq+0x180>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	623b      	str	r3, [r7, #32]
 80044ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044f4:	2100      	movs	r1, #0
 80044f6:	4b47      	ldr	r3, [pc, #284]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x188>)
 80044f8:	fb03 f201 	mul.w	r2, r3, r1
 80044fc:	2300      	movs	r3, #0
 80044fe:	fb00 f303 	mul.w	r3, r0, r3
 8004502:	4413      	add	r3, r2
 8004504:	4a43      	ldr	r2, [pc, #268]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x188>)
 8004506:	fba0 1202 	umull	r1, r2, r0, r2
 800450a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800450c:	460a      	mov	r2, r1
 800450e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004512:	4413      	add	r3, r2
 8004514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	2200      	movs	r2, #0
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	61fa      	str	r2, [r7, #28]
 800451e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004522:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004526:	f7fc faa1 	bl	8000a6c <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4613      	mov	r3, r2
 8004530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004532:	e053      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004534:	4b35      	ldr	r3, [pc, #212]	@ (800460c <HAL_RCC_GetSysClockFreq+0x180>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	2200      	movs	r2, #0
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	617a      	str	r2, [r7, #20]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004546:	f04f 0b00 	mov.w	fp, #0
 800454a:	4652      	mov	r2, sl
 800454c:	465b      	mov	r3, fp
 800454e:	f04f 0000 	mov.w	r0, #0
 8004552:	f04f 0100 	mov.w	r1, #0
 8004556:	0159      	lsls	r1, r3, #5
 8004558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800455c:	0150      	lsls	r0, r2, #5
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	ebb2 080a 	subs.w	r8, r2, sl
 8004566:	eb63 090b 	sbc.w	r9, r3, fp
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004576:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800457a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800457e:	ebb2 0408 	subs.w	r4, r2, r8
 8004582:	eb63 0509 	sbc.w	r5, r3, r9
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	00eb      	lsls	r3, r5, #3
 8004590:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004594:	00e2      	lsls	r2, r4, #3
 8004596:	4614      	mov	r4, r2
 8004598:	461d      	mov	r5, r3
 800459a:	eb14 030a 	adds.w	r3, r4, sl
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	eb45 030b 	adc.w	r3, r5, fp
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045b2:	4629      	mov	r1, r5
 80045b4:	028b      	lsls	r3, r1, #10
 80045b6:	4621      	mov	r1, r4
 80045b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045bc:	4621      	mov	r1, r4
 80045be:	028a      	lsls	r2, r1, #10
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c6:	2200      	movs	r2, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	60fa      	str	r2, [r7, #12]
 80045cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d0:	f7fc fa4c 	bl	8000a6c <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4613      	mov	r3, r2
 80045da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045dc:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	3301      	adds	r3, #1
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f6:	e002      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x184>)
 80045fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004600:	4618      	mov	r0, r3
 8004602:	3740      	adds	r7, #64	@ 0x40
 8004604:	46bd      	mov	sp, r7
 8004606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800
 8004610:	00f42400 	.word	0x00f42400
 8004614:	017d7840 	.word	0x017d7840

08004618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800461c:	4b03      	ldr	r3, [pc, #12]	@ (800462c <HAL_RCC_GetHCLKFreq+0x14>)
 800461e:	681b      	ldr	r3, [r3, #0]
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000004 	.word	0x20000004

08004630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004634:	f7ff fff0 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	0a9b      	lsrs	r3, r3, #10
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	4903      	ldr	r1, [pc, #12]	@ (8004654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004646:	5ccb      	ldrb	r3, [r1, r3]
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40023800 	.word	0x40023800
 8004654:	08007668 	.word	0x08007668

08004658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800465c:	f7ff ffdc 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	0b5b      	lsrs	r3, r3, #13
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4903      	ldr	r1, [pc, #12]	@ (800467c <HAL_RCC_GetPCLK2Freq+0x24>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	08007668 	.word	0x08007668

08004680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	220f      	movs	r2, #15
 800468e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004690:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0203 	and.w	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800469c:	4b0f      	ldr	r3, [pc, #60]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046a8:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046b4:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <HAL_RCC_GetClockConfig+0x5c>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	08db      	lsrs	r3, r3, #3
 80046ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046c2:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <HAL_RCC_GetClockConfig+0x60>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0207 	and.w	r2, r3, #7
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	601a      	str	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40023c00 	.word	0x40023c00

080046e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07b      	b.n	80047ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004706:	d009      	beq.n	800471c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	61da      	str	r2, [r3, #28]
 800470e:	e005      	b.n	800471c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fe f904 	bl	8002944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a0:	ea42 0103 	orr.w	r1, r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	0c1b      	lsrs	r3, r3, #16
 80047ba:	f003 0104 	and.w	r1, r3, #4
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0210 	and.w	r2, r3, #16
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b088      	sub	sp, #32
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004806:	f7fe fb5b 	bl	8002ec0 <HAL_GetTick>
 800480a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	e12a      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_Transmit+0x36>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e122      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_SPI_Transmit+0x48>
 800483a:	2302      	movs	r3, #2
 800483c:	e11b      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2203      	movs	r2, #3
 800484a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488c:	d10f      	bne.n	80048ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d007      	beq.n	80048cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d4:	d152      	bne.n	800497c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_SPI_Transmit+0xee>
 80048de:	8b7b      	ldrh	r3, [r7, #26]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d145      	bne.n	8004970 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	881a      	ldrh	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004908:	e032      	b.n	8004970 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	d112      	bne.n	800493e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	1c9a      	adds	r2, r3, #2
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800493c:	e018      	b.n	8004970 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800493e:	f7fe fabf 	bl	8002ec0 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d803      	bhi.n	8004956 <HAL_SPI_Transmit+0x160>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d102      	bne.n	800495c <HAL_SPI_Transmit+0x166>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e082      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1c7      	bne.n	800490a <HAL_SPI_Transmit+0x114>
 800497a:	e053      	b.n	8004a24 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SPI_Transmit+0x194>
 8004984:	8b7b      	ldrh	r3, [r7, #26]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d147      	bne.n	8004a1a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049b0:	e033      	b.n	8004a1a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d113      	bne.n	80049e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	330c      	adds	r3, #12
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049e6:	e018      	b.n	8004a1a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e8:	f7fe fa6a 	bl	8002ec0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d803      	bhi.n	8004a00 <HAL_SPI_Transmit+0x20a>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d102      	bne.n	8004a06 <HAL_SPI_Transmit+0x210>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e02d      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c6      	bne.n	80049b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fbe7 	bl	80051fc <SPI_EndRxTxTransaction>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b088      	sub	sp, #32
 8004a82:	af02      	add	r7, sp, #8
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e104      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa6:	d112      	bne.n	8004ace <HAL_SPI_Receive+0x50>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10e      	bne.n	8004ace <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f8f3 	bl	8004cb0 <HAL_SPI_TransmitReceive>
 8004aca:	4603      	mov	r3, r0
 8004acc:	e0ec      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ace:	f7fe f9f7 	bl	8002ec0 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Receive+0x62>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0e1      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_SPI_Receive+0x74>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0da      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b40:	d10f      	bne.n	8004b62 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b40      	cmp	r3, #64	@ 0x40
 8004b6e:	d007      	beq.n	8004b80 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d170      	bne.n	8004c6a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b88:	e035      	b.n	8004bf6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d115      	bne.n	8004bc4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f103 020c 	add.w	r2, r3, #12
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bc2:	e018      	b.n	8004bf6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc4:	f7fe f97c 	bl	8002ec0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d803      	bhi.n	8004bdc <HAL_SPI_Receive+0x15e>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d102      	bne.n	8004be2 <HAL_SPI_Receive+0x164>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e058      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1c4      	bne.n	8004b8a <HAL_SPI_Receive+0x10c>
 8004c00:	e038      	b.n	8004c74 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d113      	bne.n	8004c38 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c36:	e018      	b.n	8004c6a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c38:	f7fe f942 	bl	8002ec0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d803      	bhi.n	8004c50 <HAL_SPI_Receive+0x1d2>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_Receive+0x1d8>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e01e      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1c6      	bne.n	8004c02 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fa59 	bl	8005130 <SPI_EndRxTransaction>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	@ 0x28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc2:	f7fe f8fd 	bl	8002ec0 <HAL_GetTick>
 8004cc6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cda:	7ffb      	ldrb	r3, [r7, #31]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d00c      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x4a>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ce6:	d106      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x46>
 8004cf0:	7ffb      	ldrb	r3, [r7, #31]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d001      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e17f      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x5c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x5c>
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e174      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x6e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e16d      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d003      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2205      	movs	r2, #5
 8004d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	887a      	ldrh	r2, [r7, #2]
 8004d62:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b40      	cmp	r3, #64	@ 0x40
 8004d7c:	d007      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d96:	d17e      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0xf6>
 8004da0:	8afb      	ldrh	r3, [r7, #22]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d16c      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dca:	e059      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d11b      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x162>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d016      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x162>
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d113      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	881a      	ldrh	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d119      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x1a4>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d014      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	b292      	uxth	r2, r2
 8004e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	1c9a      	adds	r2, r3, #2
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e54:	f7fe f834 	bl	8002ec0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d80d      	bhi.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d009      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0bc      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1a0      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x11c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d19b      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x11c>
 8004e94:	e082      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x1f4>
 8004e9e:	8afb      	ldrh	r3, [r7, #22]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d171      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eca:	e05d      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d11c      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x264>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x264>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d114      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d119      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x2a6>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d014      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f56:	f7fd ffb3 	bl	8002ec0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d803      	bhi.n	8004f6e <HAL_SPI_TransmitReceive+0x2be>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d102      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x2c4>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e038      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d19c      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x21c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d197      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f92b 	bl	80051fc <SPI_EndRxTxTransaction>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e01d      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3728      	adds	r7, #40	@ 0x28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005010:	b2db      	uxtb	r3, r3
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005030:	f7fd ff46 	bl	8002ec0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	4413      	add	r3, r2
 800503e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005040:	f7fd ff3e 	bl	8002ec0 <HAL_GetTick>
 8005044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005046:	4b39      	ldr	r3, [pc, #228]	@ (800512c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	015b      	lsls	r3, r3, #5
 800504c:	0d1b      	lsrs	r3, r3, #20
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005056:	e054      	b.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d050      	beq.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005060:	f7fd ff2e 	bl	8002ec0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	429a      	cmp	r2, r3
 800506e:	d902      	bls.n	8005076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d13d      	bne.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800508e:	d111      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005098:	d004      	beq.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a2:	d107      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050bc:	d10f      	bne.n	80050de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e017      	b.n	8005122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3b01      	subs	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	429a      	cmp	r2, r3
 800511e:	d19b      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000004 	.word	0x20000004

08005130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005144:	d111      	bne.n	800516a <SPI_EndRxTransaction+0x3a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800514e:	d004      	beq.n	800515a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005158:	d107      	bne.n	800516a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005168:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005172:	d12a      	bne.n	80051ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517c:	d012      	beq.n	80051a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff ff49 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d02d      	beq.n	80051f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e026      	b.n	80051f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2101      	movs	r1, #1
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ff36 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01a      	beq.n	80051f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e013      	b.n	80051f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2101      	movs	r1, #1
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff ff23 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e000      	b.n	80051f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2201      	movs	r2, #1
 8005210:	2102      	movs	r1, #2
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff ff04 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e032      	b.n	8005294 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800522e:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <SPI_EndRxTxTransaction+0xa0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1b      	ldr	r2, [pc, #108]	@ (80052a0 <SPI_EndRxTxTransaction+0xa4>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	0d5b      	lsrs	r3, r3, #21
 800523a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800524c:	d112      	bne.n	8005274 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	2180      	movs	r1, #128	@ 0x80
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fee1 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d016      	beq.n	8005292 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e00f      	b.n	8005294 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	3b01      	subs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d0f2      	beq.n	8005274 <SPI_EndRxTxTransaction+0x78>
 800528e:	e000      	b.n	8005292 <SPI_EndRxTxTransaction+0x96>
        break;
 8005290:	bf00      	nop
  }

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000004 	.word	0x20000004
 80052a0:	165e9f81 	.word	0x165e9f81

080052a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e041      	b.n	800533a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fd fb82 	bl	80029d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f000 fa70 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d001      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e044      	b.n	80053e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1e      	ldr	r2, [pc, #120]	@ (80053f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x6c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	d013      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x6c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x6c>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <HAL_TIM_Base_Start_IT+0xb8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x6c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a17      	ldr	r2, [pc, #92]	@ (8005400 <HAL_TIM_Base_Start_IT+0xbc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x6c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <HAL_TIM_Base_Start_IT+0xc0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d111      	bne.n	80053d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d010      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	e007      	b.n	80053e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	40014000 	.word	0x40014000

08005408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0202 	mvn.w	r2, #2
 800543c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f999 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f98b 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f99c 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d020      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0204 	mvn.w	r2, #4
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f973 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f965 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f976 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d020      	beq.n	8005504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0208 	mvn.w	r2, #8
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2204      	movs	r2, #4
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f94d 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f93f 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f950 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b00      	cmp	r3, #0
 800550c:	d020      	beq.n	8005550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0210 	mvn.w	r2, #16
 8005520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2208      	movs	r2, #8
 8005526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f927 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f919 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f92a 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fd f960 	bl	8002834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fab6 	bl	8005b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00c      	beq.n	80055bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8fb 	bl	80057b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0220 	mvn.w	r2, #32
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa88 	bl	8005af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_TIM_ConfigClockSource+0x1c>
 8005600:	2302      	movs	r3, #2
 8005602:	e0b4      	b.n	800576e <HAL_TIM_ConfigClockSource+0x186>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800562a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563c:	d03e      	beq.n	80056bc <HAL_TIM_ConfigClockSource+0xd4>
 800563e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005642:	f200 8087 	bhi.w	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564a:	f000 8086 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x172>
 800564e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005652:	d87f      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b70      	cmp	r3, #112	@ 0x70
 8005656:	d01a      	beq.n	800568e <HAL_TIM_ConfigClockSource+0xa6>
 8005658:	2b70      	cmp	r3, #112	@ 0x70
 800565a:	d87b      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b60      	cmp	r3, #96	@ 0x60
 800565e:	d050      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x11a>
 8005660:	2b60      	cmp	r3, #96	@ 0x60
 8005662:	d877      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b50      	cmp	r3, #80	@ 0x50
 8005666:	d03c      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005668:	2b50      	cmp	r3, #80	@ 0x50
 800566a:	d873      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b40      	cmp	r3, #64	@ 0x40
 800566e:	d058      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x13a>
 8005670:	2b40      	cmp	r3, #64	@ 0x40
 8005672:	d86f      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b30      	cmp	r3, #48	@ 0x30
 8005676:	d064      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	2b30      	cmp	r3, #48	@ 0x30
 800567a:	d86b      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d060      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 8005680:	2b20      	cmp	r3, #32
 8005682:	d867      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d05c      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 8005688:	2b10      	cmp	r3, #16
 800568a:	d05a      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x15a>
 800568c:	e062      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800569e:	f000 f999 	bl	80059d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	609a      	str	r2, [r3, #8]
      break;
 80056ba:	e04f      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056cc:	f000 f982 	bl	80059d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056de:	609a      	str	r2, [r3, #8]
      break;
 80056e0:	e03c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 f8f6 	bl	80058e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2150      	movs	r1, #80	@ 0x50
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f94f 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005700:	e02c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800570e:	461a      	mov	r2, r3
 8005710:	f000 f915 	bl	800593e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2160      	movs	r1, #96	@ 0x60
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f93f 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005720:	e01c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	461a      	mov	r2, r3
 8005730:	f000 f8d6 	bl	80058e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2140      	movs	r1, #64	@ 0x40
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f92f 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005740:	e00c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f000 f926 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005752:	e003      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
      break;
 8005758:	e000      	b.n	800575c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800575a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3a      	ldr	r2, [pc, #232]	@ (80058c4 <TIM_Base_SetConfig+0xfc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e6:	d00b      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a37      	ldr	r2, [pc, #220]	@ (80058c8 <TIM_Base_SetConfig+0x100>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a36      	ldr	r2, [pc, #216]	@ (80058cc <TIM_Base_SetConfig+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a35      	ldr	r2, [pc, #212]	@ (80058d0 <TIM_Base_SetConfig+0x108>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d108      	bne.n	8005812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2b      	ldr	r2, [pc, #172]	@ (80058c4 <TIM_Base_SetConfig+0xfc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01b      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005820:	d017      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a28      	ldr	r2, [pc, #160]	@ (80058c8 <TIM_Base_SetConfig+0x100>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a27      	ldr	r2, [pc, #156]	@ (80058cc <TIM_Base_SetConfig+0x104>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00f      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a26      	ldr	r2, [pc, #152]	@ (80058d0 <TIM_Base_SetConfig+0x108>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00b      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a25      	ldr	r2, [pc, #148]	@ (80058d4 <TIM_Base_SetConfig+0x10c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a24      	ldr	r2, [pc, #144]	@ (80058d8 <TIM_Base_SetConfig+0x110>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a23      	ldr	r2, [pc, #140]	@ (80058dc <TIM_Base_SetConfig+0x114>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d108      	bne.n	8005864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a0e      	ldr	r2, [pc, #56]	@ (80058c4 <TIM_Base_SetConfig+0xfc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d105      	bne.n	80058b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	611a      	str	r2, [r3, #16]
  }
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0201 	bic.w	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800590a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f023 030a 	bic.w	r3, r3, #10
 800591c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f023 0210 	bic.w	r2, r3, #16
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	031b      	lsls	r3, r3, #12
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800597a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 0307 	orr.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e050      	b.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a16      	ldr	r2, [pc, #88]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a15      	ldr	r2, [pc, #84]	@ (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	@ (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10c      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40014000 	.word	0x40014000

08005af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e042      	b.n	8005bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc ff70 	bl	8002a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	@ 0x24
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fd69 	bl	8006634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	@ 0x28
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d175      	bne.n	8005cc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Transmit+0x2c>
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e06e      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2221      	movs	r2, #33	@ 0x21
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf6:	f7fd f963 	bl	8002ec0 <HAL_GetTick>
 8005bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c10:	d108      	bne.n	8005c24 <HAL_UART_Transmit+0x6c>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e003      	b.n	8005c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c2c:	e02e      	b.n	8005c8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2180      	movs	r1, #128	@ 0x80
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fb05 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e03a      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e007      	b.n	8005c7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1cb      	bne.n	8005c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2140      	movs	r1, #64	@ 0x40
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fad1 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e006      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10f      	bne.n	8005d36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_UART_IRQHandler+0x66>
 8005d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fbc2 	bl	80064b8 <UART_Receive_IT>
      return;
 8005d34:	e25b      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80de 	beq.w	8005efc <HAL_UART_IRQHandler+0x22c>
 8005d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80d1 	beq.w	8005efc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_UART_IRQHandler+0xae>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d76:	f043 0201 	orr.w	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <HAL_UART_IRQHandler+0xd2>
 8005d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	f043 0202 	orr.w	r2, r3, #2
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xf6>
 8005dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dbe:	f043 0204 	orr.w	r2, r3, #4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_UART_IRQHandler+0x126>
 8005dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d105      	bne.n	8005dea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f043 0208 	orr.w	r2, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 81f2 	beq.w	80061e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_UART_IRQHandler+0x14e>
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fb4d 	bl	80064b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <HAL_UART_IRQHandler+0x17a>
 8005e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04f      	beq.n	8005eea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa55 	bl	80062fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5a:	2b40      	cmp	r3, #64	@ 0x40
 8005e5c:	d141      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1d9      	bne.n	8005e5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d013      	beq.n	8005eda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80060b0 <HAL_UART_IRQHandler+0x3e0>)
 8005eb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd fa2e 	bl	8003320 <HAL_DMA_Abort_IT>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	e00e      	b.n	8005ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f99e 	bl	800621c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	e00a      	b.n	8005ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f99a 	bl	800621c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	e006      	b.n	8005ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f996 	bl	800621c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005ef6:	e175      	b.n	80061e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef8:	bf00      	nop
    return;
 8005efa:	e173      	b.n	80061e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	f040 814f 	bne.w	80061a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8148 	beq.w	80061a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8141 	beq.w	80061a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f22:	2300      	movs	r3, #0
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f42:	2b40      	cmp	r3, #64	@ 0x40
 8005f44:	f040 80b6 	bne.w	80060b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8145 	beq.w	80061e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f66:	429a      	cmp	r2, r3
 8005f68:	f080 813e 	bcs.w	80061e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7e:	f000 8088 	beq.w	8006092 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005fae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1d9      	bne.n	8005f82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ff2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e1      	bne.n	8005fce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800601a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800601c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3314      	adds	r3, #20
 800602a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800602e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800603c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e3      	bne.n	800600a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006062:	f023 0310 	bic.w	r3, r3, #16
 8006066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006074:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006076:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800607a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e3      	bne.n	8006050 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608c:	4618      	mov	r0, r3
 800608e:	f7fd f8d7 	bl	8003240 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8c1 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060ae:	e09b      	b.n	80061e8 <HAL_UART_IRQHandler+0x518>
 80060b0:	080063c1 	.word	0x080063c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 808e 	beq.w	80061ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80060d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8089 	beq.w	80061ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80060fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006104:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800610c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e3      	bne.n	80060da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	623b      	str	r3, [r7, #32]
   return(result);
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3314      	adds	r3, #20
 8006132:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006136:	633a      	str	r2, [r7, #48]	@ 0x30
 8006138:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800613c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e3      	bne.n	8006112 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	60fb      	str	r3, [r7, #12]
   return(result);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0310 	bic.w	r3, r3, #16
 800616e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800617c:	61fa      	str	r2, [r7, #28]
 800617e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	69b9      	ldr	r1, [r7, #24]
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	617b      	str	r3, [r7, #20]
   return(result);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e3      	bne.n	8006158 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f847 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a2:	e023      	b.n	80061ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_UART_IRQHandler+0x4f4>
 80061b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f913 	bl	80063e8 <UART_Transmit_IT>
    return;
 80061c2:	e014      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <HAL_UART_IRQHandler+0x51e>
 80061d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f953 	bl	8006488 <UART_EndTransmit_IT>
    return;
 80061e2:	e004      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
    return;
 80061e4:	bf00      	nop
 80061e6:	e002      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
      return;
 80061e8:	bf00      	nop
 80061ea:	e000      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
      return;
 80061ec:	bf00      	nop
  }
}
 80061ee:	37e8      	adds	r7, #232	@ 0xe8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006258:	e03b      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d037      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006262:	f7fc fe2d 	bl	8002ec0 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <UART_WaitOnFlagUntilTimeout+0x30>
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e03a      	b.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d023      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b80      	cmp	r3, #128	@ 0x80
 800628e:	d020      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b40      	cmp	r3, #64	@ 0x40
 8006294:	d01d      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d116      	bne.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f81d 	bl	80062fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2208      	movs	r2, #8
 80062c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e00f      	b.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4013      	ands	r3, r2
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	429a      	cmp	r2, r3
 80062e0:	bf0c      	ite	eq
 80062e2:	2301      	moveq	r3, #1
 80062e4:	2300      	movne	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d0b4      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b095      	sub	sp, #84	@ 0x54
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006322:	643a      	str	r2, [r7, #64]	@ 0x40
 8006324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006328:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e5      	bne.n	8006302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	61fb      	str	r3, [r7, #28]
   return(result);
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3314      	adds	r3, #20
 8006354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006356:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006358:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800635c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636e:	2b01      	cmp	r3, #1
 8006370:	d119      	bne.n	80063a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60bb      	str	r3, [r7, #8]
   return(result);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 0310 	bic.w	r3, r3, #16
 8006388:	647b      	str	r3, [r7, #68]	@ 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006392:	61ba      	str	r2, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	613b      	str	r3, [r7, #16]
   return(result);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063b4:	bf00      	nop
 80063b6:	3754      	adds	r7, #84	@ 0x54
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff ff1e 	bl	800621c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b21      	cmp	r3, #33	@ 0x21
 80063fa:	d13e      	bne.n	800647a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006404:	d114      	bne.n	8006430 <UART_Transmit_IT+0x48>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d110      	bne.n	8006430 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006422:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	1c9a      	adds	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	621a      	str	r2, [r3, #32]
 800642e:	e008      	b.n	8006442 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6211      	str	r1, [r2, #32]
 800643a:	781a      	ldrb	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29b      	uxth	r3, r3
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4619      	mov	r1, r3
 8006450:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10f      	bne.n	8006476 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006464:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006474:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800647a:	2302      	movs	r3, #2
  }
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800649e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fea3 	bl	80061f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	@ 0x30
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b22      	cmp	r3, #34	@ 0x22
 80064ca:	f040 80ae 	bne.w	800662a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d6:	d117      	bne.n	8006508 <UART_Receive_IT+0x50>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d113      	bne.n	8006508 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	629a      	str	r2, [r3, #40]	@ 0x28
 8006506:	e026      	b.n	8006556 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651a:	d007      	beq.n	800652c <UART_Receive_IT+0x74>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <UART_Receive_IT+0x82>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	b2da      	uxtb	r2, r3
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	e008      	b.n	800654c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29b      	uxth	r3, r3
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4619      	mov	r1, r3
 8006564:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006566:	2b00      	cmp	r3, #0
 8006568:	d15d      	bne.n	8006626 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0220 	bic.w	r2, r2, #32
 8006578:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006588:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695a      	ldr	r2, [r3, #20]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d135      	bne.n	800661c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	613b      	str	r3, [r7, #16]
   return(result);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f023 0310 	bic.w	r3, r3, #16
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d6:	623a      	str	r2, [r7, #32]
 80065d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	69f9      	ldr	r1, [r7, #28]
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e5      	bne.n	80065b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d10a      	bne.n	800660e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fe0b 	bl	8006230 <HAL_UARTEx_RxEventCallback>
 800661a:	e002      	b.n	8006622 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fdf3 	bl	8006208 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e002      	b.n	800662c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e000      	b.n	800662c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3730      	adds	r7, #48	@ 0x30
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006638:	b0c0      	sub	sp, #256	@ 0x100
 800663a:	af00      	add	r7, sp, #0
 800663c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006650:	68d9      	ldr	r1, [r3, #12]
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	ea40 0301 	orr.w	r3, r0, r1
 800665c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	431a      	orrs	r2, r3
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800668c:	f021 010c 	bic.w	r1, r1, #12
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800669a:	430b      	orrs	r3, r1
 800669c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800669e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ae:	6999      	ldr	r1, [r3, #24]
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	ea40 0301 	orr.w	r3, r0, r1
 80066ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006900 <UART_SetConfig+0x2cc>)
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d005      	beq.n	80066d4 <UART_SetConfig+0xa0>
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006904 <UART_SetConfig+0x2d0>)
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d104      	bne.n	80066de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d4:	f7fd ffc0 	bl	8004658 <HAL_RCC_GetPCLK2Freq>
 80066d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066dc:	e003      	b.n	80066e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066de:	f7fd ffa7 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 80066e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066f0:	f040 810c 	bne.w	800690c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006706:	4622      	mov	r2, r4
 8006708:	462b      	mov	r3, r5
 800670a:	1891      	adds	r1, r2, r2
 800670c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800670e:	415b      	adcs	r3, r3
 8006710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006716:	4621      	mov	r1, r4
 8006718:	eb12 0801 	adds.w	r8, r2, r1
 800671c:	4629      	mov	r1, r5
 800671e:	eb43 0901 	adc.w	r9, r3, r1
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800672e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006736:	4690      	mov	r8, r2
 8006738:	4699      	mov	r9, r3
 800673a:	4623      	mov	r3, r4
 800673c:	eb18 0303 	adds.w	r3, r8, r3
 8006740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006744:	462b      	mov	r3, r5
 8006746:	eb49 0303 	adc.w	r3, r9, r3
 800674a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800674e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800675a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800675e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006762:	460b      	mov	r3, r1
 8006764:	18db      	adds	r3, r3, r3
 8006766:	653b      	str	r3, [r7, #80]	@ 0x50
 8006768:	4613      	mov	r3, r2
 800676a:	eb42 0303 	adc.w	r3, r2, r3
 800676e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006778:	f7fa f978 	bl	8000a6c <__aeabi_uldivmod>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4b61      	ldr	r3, [pc, #388]	@ (8006908 <UART_SetConfig+0x2d4>)
 8006782:	fba3 2302 	umull	r2, r3, r3, r2
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	011c      	lsls	r4, r3, #4
 800678a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800678e:	2200      	movs	r2, #0
 8006790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006794:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	1891      	adds	r1, r2, r2
 80067a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067a4:	415b      	adcs	r3, r3
 80067a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067ac:	4641      	mov	r1, r8
 80067ae:	eb12 0a01 	adds.w	sl, r2, r1
 80067b2:	4649      	mov	r1, r9
 80067b4:	eb43 0b01 	adc.w	fp, r3, r1
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067cc:	4692      	mov	sl, r2
 80067ce:	469b      	mov	fp, r3
 80067d0:	4643      	mov	r3, r8
 80067d2:	eb1a 0303 	adds.w	r3, sl, r3
 80067d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067da:	464b      	mov	r3, r9
 80067dc:	eb4b 0303 	adc.w	r3, fp, r3
 80067e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067f8:	460b      	mov	r3, r1
 80067fa:	18db      	adds	r3, r3, r3
 80067fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80067fe:	4613      	mov	r3, r2
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	647b      	str	r3, [r7, #68]	@ 0x44
 8006806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800680a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800680e:	f7fa f92d 	bl	8000a6c <__aeabi_uldivmod>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4611      	mov	r1, r2
 8006818:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <UART_SetConfig+0x2d4>)
 800681a:	fba3 2301 	umull	r2, r3, r3, r1
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	2264      	movs	r2, #100	@ 0x64
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	1acb      	subs	r3, r1, r3
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800682e:	4b36      	ldr	r3, [pc, #216]	@ (8006908 <UART_SetConfig+0x2d4>)
 8006830:	fba3 2302 	umull	r2, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800683c:	441c      	add	r4, r3
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006848:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800684c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006858:	415b      	adcs	r3, r3
 800685a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800685c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006860:	4641      	mov	r1, r8
 8006862:	1851      	adds	r1, r2, r1
 8006864:	6339      	str	r1, [r7, #48]	@ 0x30
 8006866:	4649      	mov	r1, r9
 8006868:	414b      	adcs	r3, r1
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006878:	4659      	mov	r1, fp
 800687a:	00cb      	lsls	r3, r1, #3
 800687c:	4651      	mov	r1, sl
 800687e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006882:	4651      	mov	r1, sl
 8006884:	00ca      	lsls	r2, r1, #3
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	4603      	mov	r3, r0
 800688c:	4642      	mov	r2, r8
 800688e:	189b      	adds	r3, r3, r2
 8006890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006894:	464b      	mov	r3, r9
 8006896:	460a      	mov	r2, r1
 8006898:	eb42 0303 	adc.w	r3, r2, r3
 800689c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068b4:	460b      	mov	r3, r1
 80068b6:	18db      	adds	r3, r3, r3
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ba:	4613      	mov	r3, r2
 80068bc:	eb42 0303 	adc.w	r3, r2, r3
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068ca:	f7fa f8cf 	bl	8000a6c <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <UART_SetConfig+0x2d4>)
 80068d4:	fba3 1302 	umull	r1, r3, r3, r2
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	2164      	movs	r1, #100	@ 0x64
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	3332      	adds	r3, #50	@ 0x32
 80068e6:	4a08      	ldr	r2, [pc, #32]	@ (8006908 <UART_SetConfig+0x2d4>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	f003 0207 	and.w	r2, r3, #7
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4422      	add	r2, r4
 80068fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068fc:	e106      	b.n	8006b0c <UART_SetConfig+0x4d8>
 80068fe:	bf00      	nop
 8006900:	40011000 	.word	0x40011000
 8006904:	40011400 	.word	0x40011400
 8006908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800690c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006910:	2200      	movs	r2, #0
 8006912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006916:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800691a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800691e:	4642      	mov	r2, r8
 8006920:	464b      	mov	r3, r9
 8006922:	1891      	adds	r1, r2, r2
 8006924:	6239      	str	r1, [r7, #32]
 8006926:	415b      	adcs	r3, r3
 8006928:	627b      	str	r3, [r7, #36]	@ 0x24
 800692a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800692e:	4641      	mov	r1, r8
 8006930:	1854      	adds	r4, r2, r1
 8006932:	4649      	mov	r1, r9
 8006934:	eb43 0501 	adc.w	r5, r3, r1
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	00eb      	lsls	r3, r5, #3
 8006942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006946:	00e2      	lsls	r2, r4, #3
 8006948:	4614      	mov	r4, r2
 800694a:	461d      	mov	r5, r3
 800694c:	4643      	mov	r3, r8
 800694e:	18e3      	adds	r3, r4, r3
 8006950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006954:	464b      	mov	r3, r9
 8006956:	eb45 0303 	adc.w	r3, r5, r3
 800695a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800696a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	f04f 0300 	mov.w	r3, #0
 8006976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800697a:	4629      	mov	r1, r5
 800697c:	008b      	lsls	r3, r1, #2
 800697e:	4621      	mov	r1, r4
 8006980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006984:	4621      	mov	r1, r4
 8006986:	008a      	lsls	r2, r1, #2
 8006988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800698c:	f7fa f86e 	bl	8000a6c <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4b60      	ldr	r3, [pc, #384]	@ (8006b18 <UART_SetConfig+0x4e4>)
 8006996:	fba3 2302 	umull	r2, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	011c      	lsls	r4, r3, #4
 800699e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	1891      	adds	r1, r2, r2
 80069b6:	61b9      	str	r1, [r7, #24]
 80069b8:	415b      	adcs	r3, r3
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069c0:	4641      	mov	r1, r8
 80069c2:	1851      	adds	r1, r2, r1
 80069c4:	6139      	str	r1, [r7, #16]
 80069c6:	4649      	mov	r1, r9
 80069c8:	414b      	adcs	r3, r1
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069d8:	4659      	mov	r1, fp
 80069da:	00cb      	lsls	r3, r1, #3
 80069dc:	4651      	mov	r1, sl
 80069de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e2:	4651      	mov	r1, sl
 80069e4:	00ca      	lsls	r2, r1, #3
 80069e6:	4610      	mov	r0, r2
 80069e8:	4619      	mov	r1, r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	4642      	mov	r2, r8
 80069ee:	189b      	adds	r3, r3, r2
 80069f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069f4:	464b      	mov	r3, r9
 80069f6:	460a      	mov	r2, r1
 80069f8:	eb42 0303 	adc.w	r3, r2, r3
 80069fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a18:	4649      	mov	r1, r9
 8006a1a:	008b      	lsls	r3, r1, #2
 8006a1c:	4641      	mov	r1, r8
 8006a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a22:	4641      	mov	r1, r8
 8006a24:	008a      	lsls	r2, r1, #2
 8006a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a2a:	f7fa f81f 	bl	8000a6c <__aeabi_uldivmod>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	4b38      	ldr	r3, [pc, #224]	@ (8006b18 <UART_SetConfig+0x4e4>)
 8006a36:	fba3 2301 	umull	r2, r3, r3, r1
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2264      	movs	r2, #100	@ 0x64
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	1acb      	subs	r3, r1, r3
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	3332      	adds	r3, #50	@ 0x32
 8006a48:	4a33      	ldr	r2, [pc, #204]	@ (8006b18 <UART_SetConfig+0x4e4>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a54:	441c      	add	r4, r3
 8006a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	1891      	adds	r1, r2, r2
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	415b      	adcs	r3, r3
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a74:	4641      	mov	r1, r8
 8006a76:	1851      	adds	r1, r2, r1
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	414b      	adcs	r3, r1
 8006a7e:	607b      	str	r3, [r7, #4]
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	00cb      	lsls	r3, r1, #3
 8006a90:	4651      	mov	r1, sl
 8006a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a96:	4651      	mov	r1, sl
 8006a98:	00ca      	lsls	r2, r1, #3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	460a      	mov	r2, r1
 8006aaa:	eb42 0303 	adc.w	r3, r2, r3
 8006aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aba:	667a      	str	r2, [r7, #100]	@ 0x64
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ac8:	4649      	mov	r1, r9
 8006aca:	008b      	lsls	r3, r1, #2
 8006acc:	4641      	mov	r1, r8
 8006ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	008a      	lsls	r2, r1, #2
 8006ad6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ada:	f7f9 ffc7 	bl	8000a6c <__aeabi_uldivmod>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b18 <UART_SetConfig+0x4e4>)
 8006ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	2164      	movs	r1, #100	@ 0x64
 8006aec:	fb01 f303 	mul.w	r3, r1, r3
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	3332      	adds	r3, #50	@ 0x32
 8006af6:	4a08      	ldr	r2, [pc, #32]	@ (8006b18 <UART_SetConfig+0x4e4>)
 8006af8:	fba2 2303 	umull	r2, r3, r2, r3
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	f003 020f 	and.w	r2, r3, #15
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4422      	add	r2, r4
 8006b0a:	609a      	str	r2, [r3, #8]
}
 8006b0c:	bf00      	nop
 8006b0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b12:	46bd      	mov	sp, r7
 8006b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b18:	51eb851f 	.word	0x51eb851f

08006b1c <malloc>:
 8006b1c:	4b02      	ldr	r3, [pc, #8]	@ (8006b28 <malloc+0xc>)
 8006b1e:	4601      	mov	r1, r0
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	f000 b82d 	b.w	8006b80 <_malloc_r>
 8006b26:	bf00      	nop
 8006b28:	20000010 	.word	0x20000010

08006b2c <free>:
 8006b2c:	4b02      	ldr	r3, [pc, #8]	@ (8006b38 <free+0xc>)
 8006b2e:	4601      	mov	r1, r0
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	f000 b923 	b.w	8006d7c <_free_r>
 8006b36:	bf00      	nop
 8006b38:	20000010 	.word	0x20000010

08006b3c <sbrk_aligned>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006b7c <sbrk_aligned+0x40>)
 8006b40:	460c      	mov	r4, r1
 8006b42:	6831      	ldr	r1, [r6, #0]
 8006b44:	4605      	mov	r5, r0
 8006b46:	b911      	cbnz	r1, 8006b4e <sbrk_aligned+0x12>
 8006b48:	f000 f8ce 	bl	8006ce8 <_sbrk_r>
 8006b4c:	6030      	str	r0, [r6, #0]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4628      	mov	r0, r5
 8006b52:	f000 f8c9 	bl	8006ce8 <_sbrk_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d103      	bne.n	8006b62 <sbrk_aligned+0x26>
 8006b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b5e:	4620      	mov	r0, r4
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	1cc4      	adds	r4, r0, #3
 8006b64:	f024 0403 	bic.w	r4, r4, #3
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d0f8      	beq.n	8006b5e <sbrk_aligned+0x22>
 8006b6c:	1a21      	subs	r1, r4, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 f8ba 	bl	8006ce8 <_sbrk_r>
 8006b74:	3001      	adds	r0, #1
 8006b76:	d1f2      	bne.n	8006b5e <sbrk_aligned+0x22>
 8006b78:	e7ef      	b.n	8006b5a <sbrk_aligned+0x1e>
 8006b7a:	bf00      	nop
 8006b7c:	20000468 	.word	0x20000468

08006b80 <_malloc_r>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	1ccd      	adds	r5, r1, #3
 8006b86:	f025 0503 	bic.w	r5, r5, #3
 8006b8a:	3508      	adds	r5, #8
 8006b8c:	2d0c      	cmp	r5, #12
 8006b8e:	bf38      	it	cc
 8006b90:	250c      	movcc	r5, #12
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	4606      	mov	r6, r0
 8006b96:	db01      	blt.n	8006b9c <_malloc_r+0x1c>
 8006b98:	42a9      	cmp	r1, r5
 8006b9a:	d904      	bls.n	8006ba6 <_malloc_r+0x26>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	6033      	str	r3, [r6, #0]
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c7c <_malloc_r+0xfc>
 8006baa:	f000 f869 	bl	8006c80 <__malloc_lock>
 8006bae:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb2:	461c      	mov	r4, r3
 8006bb4:	bb44      	cbnz	r4, 8006c08 <_malloc_r+0x88>
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff ffbf 	bl	8006b3c <sbrk_aligned>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	d158      	bne.n	8006c76 <_malloc_r+0xf6>
 8006bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8006bc8:	4627      	mov	r7, r4
 8006bca:	2f00      	cmp	r7, #0
 8006bcc:	d143      	bne.n	8006c56 <_malloc_r+0xd6>
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	d04b      	beq.n	8006c6a <_malloc_r+0xea>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	eb04 0903 	add.w	r9, r4, r3
 8006bdc:	f000 f884 	bl	8006ce8 <_sbrk_r>
 8006be0:	4581      	cmp	r9, r0
 8006be2:	d142      	bne.n	8006c6a <_malloc_r+0xea>
 8006be4:	6821      	ldr	r1, [r4, #0]
 8006be6:	1a6d      	subs	r5, r5, r1
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ffa6 	bl	8006b3c <sbrk_aligned>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d03a      	beq.n	8006c6a <_malloc_r+0xea>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	442b      	add	r3, r5
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	bb62      	cbnz	r2, 8006c5c <_malloc_r+0xdc>
 8006c02:	f8c8 7000 	str.w	r7, [r8]
 8006c06:	e00f      	b.n	8006c28 <_malloc_r+0xa8>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	1b52      	subs	r2, r2, r5
 8006c0c:	d420      	bmi.n	8006c50 <_malloc_r+0xd0>
 8006c0e:	2a0b      	cmp	r2, #11
 8006c10:	d917      	bls.n	8006c42 <_malloc_r+0xc2>
 8006c12:	1961      	adds	r1, r4, r5
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	6025      	str	r5, [r4, #0]
 8006c18:	bf18      	it	ne
 8006c1a:	6059      	strne	r1, [r3, #4]
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	bf08      	it	eq
 8006c20:	f8c8 1000 	streq.w	r1, [r8]
 8006c24:	5162      	str	r2, [r4, r5]
 8006c26:	604b      	str	r3, [r1, #4]
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f82f 	bl	8006c8c <__malloc_unlock>
 8006c2e:	f104 000b 	add.w	r0, r4, #11
 8006c32:	1d23      	adds	r3, r4, #4
 8006c34:	f020 0007 	bic.w	r0, r0, #7
 8006c38:	1ac2      	subs	r2, r0, r3
 8006c3a:	bf1c      	itt	ne
 8006c3c:	1a1b      	subne	r3, r3, r0
 8006c3e:	50a3      	strne	r3, [r4, r2]
 8006c40:	e7af      	b.n	8006ba2 <_malloc_r+0x22>
 8006c42:	6862      	ldr	r2, [r4, #4]
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	bf0c      	ite	eq
 8006c48:	f8c8 2000 	streq.w	r2, [r8]
 8006c4c:	605a      	strne	r2, [r3, #4]
 8006c4e:	e7eb      	b.n	8006c28 <_malloc_r+0xa8>
 8006c50:	4623      	mov	r3, r4
 8006c52:	6864      	ldr	r4, [r4, #4]
 8006c54:	e7ae      	b.n	8006bb4 <_malloc_r+0x34>
 8006c56:	463c      	mov	r4, r7
 8006c58:	687f      	ldr	r7, [r7, #4]
 8006c5a:	e7b6      	b.n	8006bca <_malloc_r+0x4a>
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d1fb      	bne.n	8006c5c <_malloc_r+0xdc>
 8006c64:	2300      	movs	r3, #0
 8006c66:	6053      	str	r3, [r2, #4]
 8006c68:	e7de      	b.n	8006c28 <_malloc_r+0xa8>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	6033      	str	r3, [r6, #0]
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f000 f80c 	bl	8006c8c <__malloc_unlock>
 8006c74:	e794      	b.n	8006ba0 <_malloc_r+0x20>
 8006c76:	6005      	str	r5, [r0, #0]
 8006c78:	e7d6      	b.n	8006c28 <_malloc_r+0xa8>
 8006c7a:	bf00      	nop
 8006c7c:	2000046c 	.word	0x2000046c

08006c80 <__malloc_lock>:
 8006c80:	4801      	ldr	r0, [pc, #4]	@ (8006c88 <__malloc_lock+0x8>)
 8006c82:	f000 b86b 	b.w	8006d5c <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	200005ac 	.word	0x200005ac

08006c8c <__malloc_unlock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	@ (8006c94 <__malloc_unlock+0x8>)
 8006c8e:	f000 b866 	b.w	8006d5e <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	200005ac 	.word	0x200005ac

08006c98 <siprintf>:
 8006c98:	b40e      	push	{r1, r2, r3}
 8006c9a:	b500      	push	{lr}
 8006c9c:	b09c      	sub	sp, #112	@ 0x70
 8006c9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ca0:	9002      	str	r0, [sp, #8]
 8006ca2:	9006      	str	r0, [sp, #24]
 8006ca4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ca8:	4809      	ldr	r0, [pc, #36]	@ (8006cd0 <siprintf+0x38>)
 8006caa:	9107      	str	r1, [sp, #28]
 8006cac:	9104      	str	r1, [sp, #16]
 8006cae:	4909      	ldr	r1, [pc, #36]	@ (8006cd4 <siprintf+0x3c>)
 8006cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb4:	9105      	str	r1, [sp, #20]
 8006cb6:	6800      	ldr	r0, [r0, #0]
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	a902      	add	r1, sp, #8
 8006cbc:	f000 f904 	bl	8006ec8 <_svfiprintf_r>
 8006cc0:	9b02      	ldr	r3, [sp, #8]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	b01c      	add	sp, #112	@ 0x70
 8006cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ccc:	b003      	add	sp, #12
 8006cce:	4770      	bx	lr
 8006cd0:	20000010 	.word	0x20000010
 8006cd4:	ffff0208 	.word	0xffff0208

08006cd8 <memset>:
 8006cd8:	4402      	add	r2, r0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d100      	bne.n	8006ce2 <memset+0xa>
 8006ce0:	4770      	bx	lr
 8006ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce6:	e7f9      	b.n	8006cdc <memset+0x4>

08006ce8 <_sbrk_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4d06      	ldr	r5, [pc, #24]	@ (8006d04 <_sbrk_r+0x1c>)
 8006cec:	2300      	movs	r3, #0
 8006cee:	4604      	mov	r4, r0
 8006cf0:	4608      	mov	r0, r1
 8006cf2:	602b      	str	r3, [r5, #0]
 8006cf4:	f7fc f83c 	bl	8002d70 <_sbrk>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d102      	bne.n	8006d02 <_sbrk_r+0x1a>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	b103      	cbz	r3, 8006d02 <_sbrk_r+0x1a>
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	200005a8 	.word	0x200005a8

08006d08 <__errno>:
 8006d08:	4b01      	ldr	r3, [pc, #4]	@ (8006d10 <__errno+0x8>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000010 	.word	0x20000010

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4d0d      	ldr	r5, [pc, #52]	@ (8006d4c <__libc_init_array+0x38>)
 8006d18:	4c0d      	ldr	r4, [pc, #52]	@ (8006d50 <__libc_init_array+0x3c>)
 8006d1a:	1b64      	subs	r4, r4, r5
 8006d1c:	10a4      	asrs	r4, r4, #2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	4d0b      	ldr	r5, [pc, #44]	@ (8006d54 <__libc_init_array+0x40>)
 8006d26:	4c0c      	ldr	r4, [pc, #48]	@ (8006d58 <__libc_init_array+0x44>)
 8006d28:	f000 fba8 	bl	800747c <_init>
 8006d2c:	1b64      	subs	r4, r4, r5
 8006d2e:	10a4      	asrs	r4, r4, #2
 8006d30:	2600      	movs	r6, #0
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	080076b4 	.word	0x080076b4
 8006d50:	080076b4 	.word	0x080076b4
 8006d54:	080076b4 	.word	0x080076b4
 8006d58:	080076b8 	.word	0x080076b8

08006d5c <__retarget_lock_acquire_recursive>:
 8006d5c:	4770      	bx	lr

08006d5e <__retarget_lock_release_recursive>:
 8006d5e:	4770      	bx	lr

08006d60 <memcpy>:
 8006d60:	440a      	add	r2, r1
 8006d62:	4291      	cmp	r1, r2
 8006d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d68:	d100      	bne.n	8006d6c <memcpy+0xc>
 8006d6a:	4770      	bx	lr
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d76:	4291      	cmp	r1, r2
 8006d78:	d1f9      	bne.n	8006d6e <memcpy+0xe>
 8006d7a:	bd10      	pop	{r4, pc}

08006d7c <_free_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4605      	mov	r5, r0
 8006d80:	2900      	cmp	r1, #0
 8006d82:	d041      	beq.n	8006e08 <_free_r+0x8c>
 8006d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d88:	1f0c      	subs	r4, r1, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bfb8      	it	lt
 8006d8e:	18e4      	addlt	r4, r4, r3
 8006d90:	f7ff ff76 	bl	8006c80 <__malloc_lock>
 8006d94:	4a1d      	ldr	r2, [pc, #116]	@ (8006e0c <_free_r+0x90>)
 8006d96:	6813      	ldr	r3, [r2, #0]
 8006d98:	b933      	cbnz	r3, 8006da8 <_free_r+0x2c>
 8006d9a:	6063      	str	r3, [r4, #4]
 8006d9c:	6014      	str	r4, [r2, #0]
 8006d9e:	4628      	mov	r0, r5
 8006da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da4:	f7ff bf72 	b.w	8006c8c <__malloc_unlock>
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	d908      	bls.n	8006dbe <_free_r+0x42>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	1821      	adds	r1, r4, r0
 8006db0:	428b      	cmp	r3, r1
 8006db2:	bf01      	itttt	eq
 8006db4:	6819      	ldreq	r1, [r3, #0]
 8006db6:	685b      	ldreq	r3, [r3, #4]
 8006db8:	1809      	addeq	r1, r1, r0
 8006dba:	6021      	streq	r1, [r4, #0]
 8006dbc:	e7ed      	b.n	8006d9a <_free_r+0x1e>
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	b10b      	cbz	r3, 8006dc8 <_free_r+0x4c>
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	d9fa      	bls.n	8006dbe <_free_r+0x42>
 8006dc8:	6811      	ldr	r1, [r2, #0]
 8006dca:	1850      	adds	r0, r2, r1
 8006dcc:	42a0      	cmp	r0, r4
 8006dce:	d10b      	bne.n	8006de8 <_free_r+0x6c>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	4401      	add	r1, r0
 8006dd4:	1850      	adds	r0, r2, r1
 8006dd6:	4283      	cmp	r3, r0
 8006dd8:	6011      	str	r1, [r2, #0]
 8006dda:	d1e0      	bne.n	8006d9e <_free_r+0x22>
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	6053      	str	r3, [r2, #4]
 8006de2:	4408      	add	r0, r1
 8006de4:	6010      	str	r0, [r2, #0]
 8006de6:	e7da      	b.n	8006d9e <_free_r+0x22>
 8006de8:	d902      	bls.n	8006df0 <_free_r+0x74>
 8006dea:	230c      	movs	r3, #12
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	e7d6      	b.n	8006d9e <_free_r+0x22>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	1821      	adds	r1, r4, r0
 8006df4:	428b      	cmp	r3, r1
 8006df6:	bf04      	itt	eq
 8006df8:	6819      	ldreq	r1, [r3, #0]
 8006dfa:	685b      	ldreq	r3, [r3, #4]
 8006dfc:	6063      	str	r3, [r4, #4]
 8006dfe:	bf04      	itt	eq
 8006e00:	1809      	addeq	r1, r1, r0
 8006e02:	6021      	streq	r1, [r4, #0]
 8006e04:	6054      	str	r4, [r2, #4]
 8006e06:	e7ca      	b.n	8006d9e <_free_r+0x22>
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2000046c 	.word	0x2000046c

08006e10 <__ssputs_r>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	688e      	ldr	r6, [r1, #8]
 8006e16:	461f      	mov	r7, r3
 8006e18:	42be      	cmp	r6, r7
 8006e1a:	680b      	ldr	r3, [r1, #0]
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4690      	mov	r8, r2
 8006e22:	d82d      	bhi.n	8006e80 <__ssputs_r+0x70>
 8006e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e2c:	d026      	beq.n	8006e7c <__ssputs_r+0x6c>
 8006e2e:	6965      	ldr	r5, [r4, #20]
 8006e30:	6909      	ldr	r1, [r1, #16]
 8006e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e36:	eba3 0901 	sub.w	r9, r3, r1
 8006e3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e3e:	1c7b      	adds	r3, r7, #1
 8006e40:	444b      	add	r3, r9
 8006e42:	106d      	asrs	r5, r5, #1
 8006e44:	429d      	cmp	r5, r3
 8006e46:	bf38      	it	cc
 8006e48:	461d      	movcc	r5, r3
 8006e4a:	0553      	lsls	r3, r2, #21
 8006e4c:	d527      	bpl.n	8006e9e <__ssputs_r+0x8e>
 8006e4e:	4629      	mov	r1, r5
 8006e50:	f7ff fe96 	bl	8006b80 <_malloc_r>
 8006e54:	4606      	mov	r6, r0
 8006e56:	b360      	cbz	r0, 8006eb2 <__ssputs_r+0xa2>
 8006e58:	6921      	ldr	r1, [r4, #16]
 8006e5a:	464a      	mov	r2, r9
 8006e5c:	f7ff ff80 	bl	8006d60 <memcpy>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	6126      	str	r6, [r4, #16]
 8006e6e:	6165      	str	r5, [r4, #20]
 8006e70:	444e      	add	r6, r9
 8006e72:	eba5 0509 	sub.w	r5, r5, r9
 8006e76:	6026      	str	r6, [r4, #0]
 8006e78:	60a5      	str	r5, [r4, #8]
 8006e7a:	463e      	mov	r6, r7
 8006e7c:	42be      	cmp	r6, r7
 8006e7e:	d900      	bls.n	8006e82 <__ssputs_r+0x72>
 8006e80:	463e      	mov	r6, r7
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	4632      	mov	r2, r6
 8006e86:	4641      	mov	r1, r8
 8006e88:	f000 faa8 	bl	80073dc <memmove>
 8006e8c:	68a3      	ldr	r3, [r4, #8]
 8006e8e:	1b9b      	subs	r3, r3, r6
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4433      	add	r3, r6
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	f000 fab6 	bl	8007410 <_realloc_r>
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d1e0      	bne.n	8006e6c <__ssputs_r+0x5c>
 8006eaa:	6921      	ldr	r1, [r4, #16]
 8006eac:	4650      	mov	r0, sl
 8006eae:	f7ff ff65 	bl	8006d7c <_free_r>
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	f8ca 3000 	str.w	r3, [sl]
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	e7e9      	b.n	8006e9a <__ssputs_r+0x8a>
	...

08006ec8 <_svfiprintf_r>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	4698      	mov	r8, r3
 8006ece:	898b      	ldrh	r3, [r1, #12]
 8006ed0:	061b      	lsls	r3, r3, #24
 8006ed2:	b09d      	sub	sp, #116	@ 0x74
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	d510      	bpl.n	8006efe <_svfiprintf_r+0x36>
 8006edc:	690b      	ldr	r3, [r1, #16]
 8006ede:	b973      	cbnz	r3, 8006efe <_svfiprintf_r+0x36>
 8006ee0:	2140      	movs	r1, #64	@ 0x40
 8006ee2:	f7ff fe4d 	bl	8006b80 <_malloc_r>
 8006ee6:	6028      	str	r0, [r5, #0]
 8006ee8:	6128      	str	r0, [r5, #16]
 8006eea:	b930      	cbnz	r0, 8006efa <_svfiprintf_r+0x32>
 8006eec:	230c      	movs	r3, #12
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	b01d      	add	sp, #116	@ 0x74
 8006ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efa:	2340      	movs	r3, #64	@ 0x40
 8006efc:	616b      	str	r3, [r5, #20]
 8006efe:	2300      	movs	r3, #0
 8006f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f02:	2320      	movs	r3, #32
 8006f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f0c:	2330      	movs	r3, #48	@ 0x30
 8006f0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80070ac <_svfiprintf_r+0x1e4>
 8006f12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f16:	f04f 0901 	mov.w	r9, #1
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	469a      	mov	sl, r3
 8006f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f22:	b10a      	cbz	r2, 8006f28 <_svfiprintf_r+0x60>
 8006f24:	2a25      	cmp	r2, #37	@ 0x25
 8006f26:	d1f9      	bne.n	8006f1c <_svfiprintf_r+0x54>
 8006f28:	ebba 0b04 	subs.w	fp, sl, r4
 8006f2c:	d00b      	beq.n	8006f46 <_svfiprintf_r+0x7e>
 8006f2e:	465b      	mov	r3, fp
 8006f30:	4622      	mov	r2, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	4638      	mov	r0, r7
 8006f36:	f7ff ff6b 	bl	8006e10 <__ssputs_r>
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f000 80a7 	beq.w	800708e <_svfiprintf_r+0x1c6>
 8006f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f42:	445a      	add	r2, fp
 8006f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f46:	f89a 3000 	ldrb.w	r3, [sl]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 809f 	beq.w	800708e <_svfiprintf_r+0x1c6>
 8006f50:	2300      	movs	r3, #0
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295
 8006f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f5a:	f10a 0a01 	add.w	sl, sl, #1
 8006f5e:	9304      	str	r3, [sp, #16]
 8006f60:	9307      	str	r3, [sp, #28]
 8006f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f68:	4654      	mov	r4, sl
 8006f6a:	2205      	movs	r2, #5
 8006f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f70:	484e      	ldr	r0, [pc, #312]	@ (80070ac <_svfiprintf_r+0x1e4>)
 8006f72:	f7f9 f935 	bl	80001e0 <memchr>
 8006f76:	9a04      	ldr	r2, [sp, #16]
 8006f78:	b9d8      	cbnz	r0, 8006fb2 <_svfiprintf_r+0xea>
 8006f7a:	06d0      	lsls	r0, r2, #27
 8006f7c:	bf44      	itt	mi
 8006f7e:	2320      	movmi	r3, #32
 8006f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f84:	0711      	lsls	r1, r2, #28
 8006f86:	bf44      	itt	mi
 8006f88:	232b      	movmi	r3, #43	@ 0x2b
 8006f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f94:	d015      	beq.n	8006fc2 <_svfiprintf_r+0xfa>
 8006f96:	9a07      	ldr	r2, [sp, #28]
 8006f98:	4654      	mov	r4, sl
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f04f 0c0a 	mov.w	ip, #10
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa6:	3b30      	subs	r3, #48	@ 0x30
 8006fa8:	2b09      	cmp	r3, #9
 8006faa:	d94b      	bls.n	8007044 <_svfiprintf_r+0x17c>
 8006fac:	b1b0      	cbz	r0, 8006fdc <_svfiprintf_r+0x114>
 8006fae:	9207      	str	r2, [sp, #28]
 8006fb0:	e014      	b.n	8006fdc <_svfiprintf_r+0x114>
 8006fb2:	eba0 0308 	sub.w	r3, r0, r8
 8006fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	9304      	str	r3, [sp, #16]
 8006fbe:	46a2      	mov	sl, r4
 8006fc0:	e7d2      	b.n	8006f68 <_svfiprintf_r+0xa0>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	1d19      	adds	r1, r3, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	9103      	str	r1, [sp, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bfbb      	ittet	lt
 8006fce:	425b      	neglt	r3, r3
 8006fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8006fd4:	9307      	strge	r3, [sp, #28]
 8006fd6:	9307      	strlt	r3, [sp, #28]
 8006fd8:	bfb8      	it	lt
 8006fda:	9204      	strlt	r2, [sp, #16]
 8006fdc:	7823      	ldrb	r3, [r4, #0]
 8006fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fe0:	d10a      	bne.n	8006ff8 <_svfiprintf_r+0x130>
 8006fe2:	7863      	ldrb	r3, [r4, #1]
 8006fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe6:	d132      	bne.n	800704e <_svfiprintf_r+0x186>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	1d1a      	adds	r2, r3, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	9203      	str	r2, [sp, #12]
 8006ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ff4:	3402      	adds	r4, #2
 8006ff6:	9305      	str	r3, [sp, #20]
 8006ff8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80070bc <_svfiprintf_r+0x1f4>
 8006ffc:	7821      	ldrb	r1, [r4, #0]
 8006ffe:	2203      	movs	r2, #3
 8007000:	4650      	mov	r0, sl
 8007002:	f7f9 f8ed 	bl	80001e0 <memchr>
 8007006:	b138      	cbz	r0, 8007018 <_svfiprintf_r+0x150>
 8007008:	9b04      	ldr	r3, [sp, #16]
 800700a:	eba0 000a 	sub.w	r0, r0, sl
 800700e:	2240      	movs	r2, #64	@ 0x40
 8007010:	4082      	lsls	r2, r0
 8007012:	4313      	orrs	r3, r2
 8007014:	3401      	adds	r4, #1
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701c:	4824      	ldr	r0, [pc, #144]	@ (80070b0 <_svfiprintf_r+0x1e8>)
 800701e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007022:	2206      	movs	r2, #6
 8007024:	f7f9 f8dc 	bl	80001e0 <memchr>
 8007028:	2800      	cmp	r0, #0
 800702a:	d036      	beq.n	800709a <_svfiprintf_r+0x1d2>
 800702c:	4b21      	ldr	r3, [pc, #132]	@ (80070b4 <_svfiprintf_r+0x1ec>)
 800702e:	bb1b      	cbnz	r3, 8007078 <_svfiprintf_r+0x1b0>
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	3307      	adds	r3, #7
 8007034:	f023 0307 	bic.w	r3, r3, #7
 8007038:	3308      	adds	r3, #8
 800703a:	9303      	str	r3, [sp, #12]
 800703c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703e:	4433      	add	r3, r6
 8007040:	9309      	str	r3, [sp, #36]	@ 0x24
 8007042:	e76a      	b.n	8006f1a <_svfiprintf_r+0x52>
 8007044:	fb0c 3202 	mla	r2, ip, r2, r3
 8007048:	460c      	mov	r4, r1
 800704a:	2001      	movs	r0, #1
 800704c:	e7a8      	b.n	8006fa0 <_svfiprintf_r+0xd8>
 800704e:	2300      	movs	r3, #0
 8007050:	3401      	adds	r4, #1
 8007052:	9305      	str	r3, [sp, #20]
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 0c0a 	mov.w	ip, #10
 800705a:	4620      	mov	r0, r4
 800705c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007060:	3a30      	subs	r2, #48	@ 0x30
 8007062:	2a09      	cmp	r2, #9
 8007064:	d903      	bls.n	800706e <_svfiprintf_r+0x1a6>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0c6      	beq.n	8006ff8 <_svfiprintf_r+0x130>
 800706a:	9105      	str	r1, [sp, #20]
 800706c:	e7c4      	b.n	8006ff8 <_svfiprintf_r+0x130>
 800706e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007072:	4604      	mov	r4, r0
 8007074:	2301      	movs	r3, #1
 8007076:	e7f0      	b.n	800705a <_svfiprintf_r+0x192>
 8007078:	ab03      	add	r3, sp, #12
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	462a      	mov	r2, r5
 800707e:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <_svfiprintf_r+0x1f0>)
 8007080:	a904      	add	r1, sp, #16
 8007082:	4638      	mov	r0, r7
 8007084:	f3af 8000 	nop.w
 8007088:	1c42      	adds	r2, r0, #1
 800708a:	4606      	mov	r6, r0
 800708c:	d1d6      	bne.n	800703c <_svfiprintf_r+0x174>
 800708e:	89ab      	ldrh	r3, [r5, #12]
 8007090:	065b      	lsls	r3, r3, #25
 8007092:	f53f af2d 	bmi.w	8006ef0 <_svfiprintf_r+0x28>
 8007096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007098:	e72c      	b.n	8006ef4 <_svfiprintf_r+0x2c>
 800709a:	ab03      	add	r3, sp, #12
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	462a      	mov	r2, r5
 80070a0:	4b05      	ldr	r3, [pc, #20]	@ (80070b8 <_svfiprintf_r+0x1f0>)
 80070a2:	a904      	add	r1, sp, #16
 80070a4:	4638      	mov	r0, r7
 80070a6:	f000 f879 	bl	800719c <_printf_i>
 80070aa:	e7ed      	b.n	8007088 <_svfiprintf_r+0x1c0>
 80070ac:	08007678 	.word	0x08007678
 80070b0:	08007682 	.word	0x08007682
 80070b4:	00000000 	.word	0x00000000
 80070b8:	08006e11 	.word	0x08006e11
 80070bc:	0800767e 	.word	0x0800767e

080070c0 <_printf_common>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	4616      	mov	r6, r2
 80070c6:	4698      	mov	r8, r3
 80070c8:	688a      	ldr	r2, [r1, #8]
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	bfb8      	it	lt
 80070d4:	4613      	movlt	r3, r2
 80070d6:	6033      	str	r3, [r6, #0]
 80070d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070dc:	4607      	mov	r7, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	b10a      	cbz	r2, 80070e6 <_printf_common+0x26>
 80070e2:	3301      	adds	r3, #1
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	0699      	lsls	r1, r3, #26
 80070ea:	bf42      	ittt	mi
 80070ec:	6833      	ldrmi	r3, [r6, #0]
 80070ee:	3302      	addmi	r3, #2
 80070f0:	6033      	strmi	r3, [r6, #0]
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	f015 0506 	ands.w	r5, r5, #6
 80070f8:	d106      	bne.n	8007108 <_printf_common+0x48>
 80070fa:	f104 0a19 	add.w	sl, r4, #25
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	6832      	ldr	r2, [r6, #0]
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	42ab      	cmp	r3, r5
 8007106:	dc26      	bgt.n	8007156 <_printf_common+0x96>
 8007108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	3b00      	subs	r3, #0
 8007110:	bf18      	it	ne
 8007112:	2301      	movne	r3, #1
 8007114:	0692      	lsls	r2, r2, #26
 8007116:	d42b      	bmi.n	8007170 <_printf_common+0xb0>
 8007118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800711c:	4641      	mov	r1, r8
 800711e:	4638      	mov	r0, r7
 8007120:	47c8      	blx	r9
 8007122:	3001      	adds	r0, #1
 8007124:	d01e      	beq.n	8007164 <_printf_common+0xa4>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	6922      	ldr	r2, [r4, #16]
 800712a:	f003 0306 	and.w	r3, r3, #6
 800712e:	2b04      	cmp	r3, #4
 8007130:	bf02      	ittt	eq
 8007132:	68e5      	ldreq	r5, [r4, #12]
 8007134:	6833      	ldreq	r3, [r6, #0]
 8007136:	1aed      	subeq	r5, r5, r3
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	bf0c      	ite	eq
 800713c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007140:	2500      	movne	r5, #0
 8007142:	4293      	cmp	r3, r2
 8007144:	bfc4      	itt	gt
 8007146:	1a9b      	subgt	r3, r3, r2
 8007148:	18ed      	addgt	r5, r5, r3
 800714a:	2600      	movs	r6, #0
 800714c:	341a      	adds	r4, #26
 800714e:	42b5      	cmp	r5, r6
 8007150:	d11a      	bne.n	8007188 <_printf_common+0xc8>
 8007152:	2000      	movs	r0, #0
 8007154:	e008      	b.n	8007168 <_printf_common+0xa8>
 8007156:	2301      	movs	r3, #1
 8007158:	4652      	mov	r2, sl
 800715a:	4641      	mov	r1, r8
 800715c:	4638      	mov	r0, r7
 800715e:	47c8      	blx	r9
 8007160:	3001      	adds	r0, #1
 8007162:	d103      	bne.n	800716c <_printf_common+0xac>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716c:	3501      	adds	r5, #1
 800716e:	e7c6      	b.n	80070fe <_printf_common+0x3e>
 8007170:	18e1      	adds	r1, r4, r3
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	2030      	movs	r0, #48	@ 0x30
 8007176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800717a:	4422      	add	r2, r4
 800717c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007184:	3302      	adds	r3, #2
 8007186:	e7c7      	b.n	8007118 <_printf_common+0x58>
 8007188:	2301      	movs	r3, #1
 800718a:	4622      	mov	r2, r4
 800718c:	4641      	mov	r1, r8
 800718e:	4638      	mov	r0, r7
 8007190:	47c8      	blx	r9
 8007192:	3001      	adds	r0, #1
 8007194:	d0e6      	beq.n	8007164 <_printf_common+0xa4>
 8007196:	3601      	adds	r6, #1
 8007198:	e7d9      	b.n	800714e <_printf_common+0x8e>
	...

0800719c <_printf_i>:
 800719c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	7e0f      	ldrb	r7, [r1, #24]
 80071a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071a4:	2f78      	cmp	r7, #120	@ 0x78
 80071a6:	4691      	mov	r9, r2
 80071a8:	4680      	mov	r8, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	469a      	mov	sl, r3
 80071ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071b2:	d807      	bhi.n	80071c4 <_printf_i+0x28>
 80071b4:	2f62      	cmp	r7, #98	@ 0x62
 80071b6:	d80a      	bhi.n	80071ce <_printf_i+0x32>
 80071b8:	2f00      	cmp	r7, #0
 80071ba:	f000 80d2 	beq.w	8007362 <_printf_i+0x1c6>
 80071be:	2f58      	cmp	r7, #88	@ 0x58
 80071c0:	f000 80b9 	beq.w	8007336 <_printf_i+0x19a>
 80071c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071cc:	e03a      	b.n	8007244 <_printf_i+0xa8>
 80071ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071d2:	2b15      	cmp	r3, #21
 80071d4:	d8f6      	bhi.n	80071c4 <_printf_i+0x28>
 80071d6:	a101      	add	r1, pc, #4	@ (adr r1, 80071dc <_printf_i+0x40>)
 80071d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007249 	.word	0x08007249
 80071e4:	080071c5 	.word	0x080071c5
 80071e8:	080071c5 	.word	0x080071c5
 80071ec:	080071c5 	.word	0x080071c5
 80071f0:	080071c5 	.word	0x080071c5
 80071f4:	08007249 	.word	0x08007249
 80071f8:	080071c5 	.word	0x080071c5
 80071fc:	080071c5 	.word	0x080071c5
 8007200:	080071c5 	.word	0x080071c5
 8007204:	080071c5 	.word	0x080071c5
 8007208:	08007349 	.word	0x08007349
 800720c:	08007273 	.word	0x08007273
 8007210:	08007303 	.word	0x08007303
 8007214:	080071c5 	.word	0x080071c5
 8007218:	080071c5 	.word	0x080071c5
 800721c:	0800736b 	.word	0x0800736b
 8007220:	080071c5 	.word	0x080071c5
 8007224:	08007273 	.word	0x08007273
 8007228:	080071c5 	.word	0x080071c5
 800722c:	080071c5 	.word	0x080071c5
 8007230:	0800730b 	.word	0x0800730b
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6032      	str	r2, [r6, #0]
 800723c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007244:	2301      	movs	r3, #1
 8007246:	e09d      	b.n	8007384 <_printf_i+0x1e8>
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	6820      	ldr	r0, [r4, #0]
 800724c:	1d19      	adds	r1, r3, #4
 800724e:	6031      	str	r1, [r6, #0]
 8007250:	0606      	lsls	r6, r0, #24
 8007252:	d501      	bpl.n	8007258 <_printf_i+0xbc>
 8007254:	681d      	ldr	r5, [r3, #0]
 8007256:	e003      	b.n	8007260 <_printf_i+0xc4>
 8007258:	0645      	lsls	r5, r0, #25
 800725a:	d5fb      	bpl.n	8007254 <_printf_i+0xb8>
 800725c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007260:	2d00      	cmp	r5, #0
 8007262:	da03      	bge.n	800726c <_printf_i+0xd0>
 8007264:	232d      	movs	r3, #45	@ 0x2d
 8007266:	426d      	negs	r5, r5
 8007268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800726c:	4859      	ldr	r0, [pc, #356]	@ (80073d4 <_printf_i+0x238>)
 800726e:	230a      	movs	r3, #10
 8007270:	e011      	b.n	8007296 <_printf_i+0xfa>
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	0608      	lsls	r0, r1, #24
 8007278:	f853 5b04 	ldr.w	r5, [r3], #4
 800727c:	d402      	bmi.n	8007284 <_printf_i+0xe8>
 800727e:	0649      	lsls	r1, r1, #25
 8007280:	bf48      	it	mi
 8007282:	b2ad      	uxthmi	r5, r5
 8007284:	2f6f      	cmp	r7, #111	@ 0x6f
 8007286:	4853      	ldr	r0, [pc, #332]	@ (80073d4 <_printf_i+0x238>)
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	bf14      	ite	ne
 800728c:	230a      	movne	r3, #10
 800728e:	2308      	moveq	r3, #8
 8007290:	2100      	movs	r1, #0
 8007292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007296:	6866      	ldr	r6, [r4, #4]
 8007298:	60a6      	str	r6, [r4, #8]
 800729a:	2e00      	cmp	r6, #0
 800729c:	bfa2      	ittt	ge
 800729e:	6821      	ldrge	r1, [r4, #0]
 80072a0:	f021 0104 	bicge.w	r1, r1, #4
 80072a4:	6021      	strge	r1, [r4, #0]
 80072a6:	b90d      	cbnz	r5, 80072ac <_printf_i+0x110>
 80072a8:	2e00      	cmp	r6, #0
 80072aa:	d04b      	beq.n	8007344 <_printf_i+0x1a8>
 80072ac:	4616      	mov	r6, r2
 80072ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80072b2:	fb03 5711 	mls	r7, r3, r1, r5
 80072b6:	5dc7      	ldrb	r7, [r0, r7]
 80072b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072bc:	462f      	mov	r7, r5
 80072be:	42bb      	cmp	r3, r7
 80072c0:	460d      	mov	r5, r1
 80072c2:	d9f4      	bls.n	80072ae <_printf_i+0x112>
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d10b      	bne.n	80072e0 <_printf_i+0x144>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	07df      	lsls	r7, r3, #31
 80072cc:	d508      	bpl.n	80072e0 <_printf_i+0x144>
 80072ce:	6923      	ldr	r3, [r4, #16]
 80072d0:	6861      	ldr	r1, [r4, #4]
 80072d2:	4299      	cmp	r1, r3
 80072d4:	bfde      	ittt	le
 80072d6:	2330      	movle	r3, #48	@ 0x30
 80072d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072e0:	1b92      	subs	r2, r2, r6
 80072e2:	6122      	str	r2, [r4, #16]
 80072e4:	f8cd a000 	str.w	sl, [sp]
 80072e8:	464b      	mov	r3, r9
 80072ea:	aa03      	add	r2, sp, #12
 80072ec:	4621      	mov	r1, r4
 80072ee:	4640      	mov	r0, r8
 80072f0:	f7ff fee6 	bl	80070c0 <_printf_common>
 80072f4:	3001      	adds	r0, #1
 80072f6:	d14a      	bne.n	800738e <_printf_i+0x1f2>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	b004      	add	sp, #16
 80072fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	f043 0320 	orr.w	r3, r3, #32
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	4833      	ldr	r0, [pc, #204]	@ (80073d8 <_printf_i+0x23c>)
 800730c:	2778      	movs	r7, #120	@ 0x78
 800730e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	6831      	ldr	r1, [r6, #0]
 8007316:	061f      	lsls	r7, r3, #24
 8007318:	f851 5b04 	ldr.w	r5, [r1], #4
 800731c:	d402      	bmi.n	8007324 <_printf_i+0x188>
 800731e:	065f      	lsls	r7, r3, #25
 8007320:	bf48      	it	mi
 8007322:	b2ad      	uxthmi	r5, r5
 8007324:	6031      	str	r1, [r6, #0]
 8007326:	07d9      	lsls	r1, r3, #31
 8007328:	bf44      	itt	mi
 800732a:	f043 0320 	orrmi.w	r3, r3, #32
 800732e:	6023      	strmi	r3, [r4, #0]
 8007330:	b11d      	cbz	r5, 800733a <_printf_i+0x19e>
 8007332:	2310      	movs	r3, #16
 8007334:	e7ac      	b.n	8007290 <_printf_i+0xf4>
 8007336:	4827      	ldr	r0, [pc, #156]	@ (80073d4 <_printf_i+0x238>)
 8007338:	e7e9      	b.n	800730e <_printf_i+0x172>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f023 0320 	bic.w	r3, r3, #32
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	e7f6      	b.n	8007332 <_printf_i+0x196>
 8007344:	4616      	mov	r6, r2
 8007346:	e7bd      	b.n	80072c4 <_printf_i+0x128>
 8007348:	6833      	ldr	r3, [r6, #0]
 800734a:	6825      	ldr	r5, [r4, #0]
 800734c:	6961      	ldr	r1, [r4, #20]
 800734e:	1d18      	adds	r0, r3, #4
 8007350:	6030      	str	r0, [r6, #0]
 8007352:	062e      	lsls	r6, r5, #24
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	d501      	bpl.n	800735c <_printf_i+0x1c0>
 8007358:	6019      	str	r1, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0x1c6>
 800735c:	0668      	lsls	r0, r5, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0x1bc>
 8007360:	8019      	strh	r1, [r3, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	4616      	mov	r6, r2
 8007368:	e7bc      	b.n	80072e4 <_printf_i+0x148>
 800736a:	6833      	ldr	r3, [r6, #0]
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	6032      	str	r2, [r6, #0]
 8007370:	681e      	ldr	r6, [r3, #0]
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	2100      	movs	r1, #0
 8007376:	4630      	mov	r0, r6
 8007378:	f7f8 ff32 	bl	80001e0 <memchr>
 800737c:	b108      	cbz	r0, 8007382 <_printf_i+0x1e6>
 800737e:	1b80      	subs	r0, r0, r6
 8007380:	6060      	str	r0, [r4, #4]
 8007382:	6863      	ldr	r3, [r4, #4]
 8007384:	6123      	str	r3, [r4, #16]
 8007386:	2300      	movs	r3, #0
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800738c:	e7aa      	b.n	80072e4 <_printf_i+0x148>
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	4632      	mov	r2, r6
 8007392:	4649      	mov	r1, r9
 8007394:	4640      	mov	r0, r8
 8007396:	47d0      	blx	sl
 8007398:	3001      	adds	r0, #1
 800739a:	d0ad      	beq.n	80072f8 <_printf_i+0x15c>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	079b      	lsls	r3, r3, #30
 80073a0:	d413      	bmi.n	80073ca <_printf_i+0x22e>
 80073a2:	68e0      	ldr	r0, [r4, #12]
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	4298      	cmp	r0, r3
 80073a8:	bfb8      	it	lt
 80073aa:	4618      	movlt	r0, r3
 80073ac:	e7a6      	b.n	80072fc <_printf_i+0x160>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4632      	mov	r2, r6
 80073b2:	4649      	mov	r1, r9
 80073b4:	4640      	mov	r0, r8
 80073b6:	47d0      	blx	sl
 80073b8:	3001      	adds	r0, #1
 80073ba:	d09d      	beq.n	80072f8 <_printf_i+0x15c>
 80073bc:	3501      	adds	r5, #1
 80073be:	68e3      	ldr	r3, [r4, #12]
 80073c0:	9903      	ldr	r1, [sp, #12]
 80073c2:	1a5b      	subs	r3, r3, r1
 80073c4:	42ab      	cmp	r3, r5
 80073c6:	dcf2      	bgt.n	80073ae <_printf_i+0x212>
 80073c8:	e7eb      	b.n	80073a2 <_printf_i+0x206>
 80073ca:	2500      	movs	r5, #0
 80073cc:	f104 0619 	add.w	r6, r4, #25
 80073d0:	e7f5      	b.n	80073be <_printf_i+0x222>
 80073d2:	bf00      	nop
 80073d4:	08007689 	.word	0x08007689
 80073d8:	0800769a 	.word	0x0800769a

080073dc <memmove>:
 80073dc:	4288      	cmp	r0, r1
 80073de:	b510      	push	{r4, lr}
 80073e0:	eb01 0402 	add.w	r4, r1, r2
 80073e4:	d902      	bls.n	80073ec <memmove+0x10>
 80073e6:	4284      	cmp	r4, r0
 80073e8:	4623      	mov	r3, r4
 80073ea:	d807      	bhi.n	80073fc <memmove+0x20>
 80073ec:	1e43      	subs	r3, r0, #1
 80073ee:	42a1      	cmp	r1, r4
 80073f0:	d008      	beq.n	8007404 <memmove+0x28>
 80073f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073fa:	e7f8      	b.n	80073ee <memmove+0x12>
 80073fc:	4402      	add	r2, r0
 80073fe:	4601      	mov	r1, r0
 8007400:	428a      	cmp	r2, r1
 8007402:	d100      	bne.n	8007406 <memmove+0x2a>
 8007404:	bd10      	pop	{r4, pc}
 8007406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800740a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800740e:	e7f7      	b.n	8007400 <memmove+0x24>

08007410 <_realloc_r>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	4680      	mov	r8, r0
 8007416:	4615      	mov	r5, r2
 8007418:	460c      	mov	r4, r1
 800741a:	b921      	cbnz	r1, 8007426 <_realloc_r+0x16>
 800741c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007420:	4611      	mov	r1, r2
 8007422:	f7ff bbad 	b.w	8006b80 <_malloc_r>
 8007426:	b92a      	cbnz	r2, 8007434 <_realloc_r+0x24>
 8007428:	f7ff fca8 	bl	8006d7c <_free_r>
 800742c:	2400      	movs	r4, #0
 800742e:	4620      	mov	r0, r4
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	f000 f81a 	bl	800746c <_malloc_usable_size_r>
 8007438:	4285      	cmp	r5, r0
 800743a:	4606      	mov	r6, r0
 800743c:	d802      	bhi.n	8007444 <_realloc_r+0x34>
 800743e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007442:	d8f4      	bhi.n	800742e <_realloc_r+0x1e>
 8007444:	4629      	mov	r1, r5
 8007446:	4640      	mov	r0, r8
 8007448:	f7ff fb9a 	bl	8006b80 <_malloc_r>
 800744c:	4607      	mov	r7, r0
 800744e:	2800      	cmp	r0, #0
 8007450:	d0ec      	beq.n	800742c <_realloc_r+0x1c>
 8007452:	42b5      	cmp	r5, r6
 8007454:	462a      	mov	r2, r5
 8007456:	4621      	mov	r1, r4
 8007458:	bf28      	it	cs
 800745a:	4632      	movcs	r2, r6
 800745c:	f7ff fc80 	bl	8006d60 <memcpy>
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fc8a 	bl	8006d7c <_free_r>
 8007468:	463c      	mov	r4, r7
 800746a:	e7e0      	b.n	800742e <_realloc_r+0x1e>

0800746c <_malloc_usable_size_r>:
 800746c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007470:	1f18      	subs	r0, r3, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfbc      	itt	lt
 8007476:	580b      	ldrlt	r3, [r1, r0]
 8007478:	18c0      	addlt	r0, r0, r3
 800747a:	4770      	bx	lr

0800747c <_init>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr

08007488 <_fini>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr
