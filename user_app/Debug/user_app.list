
user_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011378  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08011518  08011518  00012518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ccc  08011ccc  00013150  2**0
                  CONTENTS
  4 .ARM          00000008  08011ccc  08011ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cd4  08011cd4  00013150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cd4  08011cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011cd8  08011cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08011cdc  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca54  20000150  08011e2c  00013150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cba4  08011e2c  00013ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025477  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005823  00000000  00000000  000385f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fe0  00000000  00000000  0003de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001968  00000000  00000000  0003fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc54  00000000  00000000  00041768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb0b  00000000  00000000  0005e3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1153  00000000  00000000  00089ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b01a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c7c  00000000  00000000  0012b060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  00133cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011500 	.word	0x08011500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	08011500 	.word	0x08011500

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000d6c:	b4b0      	push	{r4, r5, r7}
 8000d6e:	b08f      	sub	sp, #60	@ 0x3c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000d74:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d8c:	23ff      	movs	r3, #255	@ 0xff
 8000d8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d92:	2364      	movs	r3, #100	@ 0x64
 8000d94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	461d      	mov	r5, r3
 8000da0:	f107 040c 	add.w	r4, r7, #12
 8000da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000db0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	373c      	adds	r7, #60	@ 0x3c
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bcb0      	pop	{r4, r5, r7}
 8000dbc:	4770      	bx	lr

08000dbe <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6898      	ldr	r0, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	899b      	ldrh	r3, [r3, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f005 f861 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f004 fdbc 	bl	8005954 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6898      	ldr	r0, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	899b      	ldrh	r3, [r3, #12]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4619      	mov	r1, r3
 8000de8:	f005 f856 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000dec:	2064      	movs	r0, #100	@ 0x64
 8000dee:	f004 fdb1 	bl	8005954 <HAL_Delay>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000e04:	2101      	movs	r1, #1
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 fa15 	bl	8001236 <LoRa_read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d107      	bne.n	8000e2a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	f023 0307 	bic.w	r3, r3, #7
 8000e20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
 8000e28:	e049      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == STNBY_MODE){
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10c      	bne.n	8000e4a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e34:	f023 0307 	bic.w	r3, r3, #7
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	61da      	str	r2, [r3, #28]
 8000e48:	e039      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == TRANSMIT_MODE){
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d10c      	bne.n	8000e6a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e54:	f023 0307 	bic.w	r3, r3, #7
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f043 0303 	orr.w	r3, r3, #3
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2203      	movs	r2, #3
 8000e66:	61da      	str	r2, [r3, #28]
 8000e68:	e029      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == RXCONTIN_MODE){
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d10c      	bne.n	8000e8a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e74:	f023 0307 	bic.w	r3, r3, #7
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	f043 0305 	orr.w	r3, r3, #5
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2205      	movs	r2, #5
 8000e86:	61da      	str	r2, [r3, #28]
 8000e88:	e019      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == RXSINGLE_MODE){
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b06      	cmp	r3, #6
 8000e8e:	d10c      	bne.n	8000eaa <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x06;
 8000e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e94:	f023 0307 	bic.w	r3, r3, #7
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	f043 0306 	orr.w	r3, r3, #6
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	61da      	str	r2, [r3, #28]
 8000ea8:	e009      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == CAD_MODE) {   // Thêm chế độ CAD
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	d106      	bne.n	8000ebe <LoRa_gotoMode+0xc4>
        data = (read & 0xF8) | 0x07;
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	f043 0307 	orr.w	r3, r3, #7
 8000eb6:	73fb      	strb	r3, [r7, #15]
        _LoRa->current_mode = CAD_MODE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2207      	movs	r2, #7
 8000ebc:	61da      	str	r2, [r3, #28]
    }

	LoRa_write(_LoRa, RegOpMode, data);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f9d3 	bl	8001270 <LoRa_write>
	//HAL_Delay(10);
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	889b      	ldrh	r3, [r3, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	4619      	mov	r1, r3
 8000eee:	f004 ffd3 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	f007 f8a6 	bl	800804e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY){
 8000f02:	bf00      	nop
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 fca6 	bl	800885a <HAL_SPI_GetState>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1f7      	bne.n	8000f04 <LoRa_readReg+0x32>
	}
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6998      	ldr	r0, [r3, #24]
 8000f18:	8b3a      	ldrh	r2, [r7, #24]
 8000f1a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000f1e:	6839      	ldr	r1, [r7, #0]
 8000f20:	f007 f9d9 	bl	80082d6 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY){
 8000f24:	bf00      	nop
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f007 fc95 	bl	800885a <HAL_SPI_GetState>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d1f7      	bne.n	8000f26 <LoRa_readReg+0x54>
	}
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	889b      	ldrh	r3, [r3, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	f004 ffa9 	bl	8005e98 <HAL_GPIO_WritePin>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	889b      	ldrh	r3, [r3, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f004 ff95 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f004 fcf0 	bl	8005954 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	889b      	ldrh	r3, [r3, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f004 ff8a 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6998      	ldr	r0, [r3, #24]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	f007 f85d 	bl	800804e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f94:	bf00      	nop
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 fc5d 	bl	800885a <HAL_SPI_GetState>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d1f7      	bne.n	8000f96 <LoRa_writeReg+0x48>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6998      	ldr	r0, [r3, #24]
 8000faa:	8b3a      	ldrh	r2, [r7, #24]
 8000fac:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	f007 f84c 	bl	800804e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fb6:	bf00      	nop
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fc4c 	bl	800885a <HAL_SPI_GetState>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1f7      	bne.n	8000fb8 <LoRa_writeReg+0x6a>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	889b      	ldrh	r3, [r3, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f004 ff60 	bl	8005e98 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000fec:	2126      	movs	r1, #38	@ 0x26
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f921 	bl	8001236 <LoRa_read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e003      	b.n	8001010 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	f023 0308 	bic.w	r3, r3, #8
 800100e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	461a      	mov	r2, r3
 8001014:	2126      	movs	r1, #38	@ 0x26
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f92a 	bl	8001270 <LoRa_write>
	HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f004 fc99 	bl	8005954 <HAL_Delay>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800102c:	b580      	push	{r7, lr}
 800102e:	b096      	sub	sp, #88	@ 0x58
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <LoRa_setAutoLDO+0x68>)
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4611      	mov	r1, r2
 800103c:	2250      	movs	r2, #80	@ 0x50
 800103e:	4618      	mov	r0, r3
 8001040:	f00f fed0 	bl	8010de4 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	4093      	lsls	r3, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa6f 	bl	8000534 <__aeabi_i2d>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	3358      	adds	r3, #88	@ 0x58
 8001060:	443b      	add	r3, r7
 8001062:	3b50      	subs	r3, #80	@ 0x50
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fbf8 	bl	800085c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fcda 	bl	8000a2c <__aeabi_d2iz>
 8001078:	4603      	mov	r3, r0
 800107a:	2b10      	cmp	r3, #16
 800107c:	bfcc      	ite	gt
 800107e:	2301      	movgt	r3, #1
 8001080:	2300      	movle	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffaa 	bl	8000fe0 <LoRa_setLowDaraRateOptimization>
}
 800108c:	bf00      	nop
 800108e:	3758      	adds	r7, #88	@ 0x58
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08011518 	.word	0x08011518

08001098 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	04db      	lsls	r3, r3, #19
 80010a6:	115b      	asrs	r3, r3, #5
 80010a8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c1b      	lsrs	r3, r3, #16
 80010ae:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2106      	movs	r1, #6
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f8da 	bl	8001270 <LoRa_write>
	HAL_Delay(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f004 fc49 	bl	8005954 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2107      	movs	r1, #7
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f8ce 	bl	8001270 <LoRa_write>
	HAL_Delay(5);
 80010d4:	2005      	movs	r0, #5
 80010d6:	f004 fc3d 	bl	8005954 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	461a      	mov	r2, r3
 80010e2:	2108      	movs	r1, #8
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f8c3 	bl	8001270 <LoRa_write>
	HAL_Delay(5);
 80010ea:	2005      	movs	r0, #5
 80010ec:	f004 fc32 	bl	8005954 <HAL_Delay>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b0c      	cmp	r3, #12
 8001106:	dd01      	ble.n	800110c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001108:	230c      	movs	r3, #12
 800110a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b06      	cmp	r3, #6
 8001110:	dc01      	bgt.n	8001116 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001112:	2307      	movs	r3, #7
 8001114:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001116:	211e      	movs	r1, #30
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f88c 	bl	8001236 <LoRa_read>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f004 fc16 	bl	8005954 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	461a      	mov	r2, r3
 8001140:	211e      	movs	r1, #30
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f894 	bl	8001270 <LoRa_write>
	HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f004 fc03 	bl	8005954 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff6c 	bl	800102c <LoRa_setAutoLDO>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	461a      	mov	r2, r3
 800116c:	2109      	movs	r1, #9
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f87e 	bl	8001270 <LoRa_write>
	HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f004 fbed 	bl	8005954 <HAL_Delay>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b2c      	cmp	r3, #44	@ 0x2c
 8001198:	d801      	bhi.n	800119e <LoRa_setOCP+0x1a>
		current = 45;
 800119a:	232d      	movs	r3, #45	@ 0x2d
 800119c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80011a2:	d901      	bls.n	80011a8 <LoRa_setOCP+0x24>
		current = 240;
 80011a4:	23f0      	movs	r3, #240	@ 0xf0
 80011a6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b78      	cmp	r3, #120	@ 0x78
 80011ac:	d809      	bhi.n	80011c2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	3b2d      	subs	r3, #45	@ 0x2d
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <LoRa_setOCP+0x78>)
 80011b4:	fb82 1203 	smull	r1, r2, r2, r3
 80011b8:	1052      	asrs	r2, r2, #1
 80011ba:	17db      	asrs	r3, r3, #31
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e00b      	b.n	80011da <LoRa_setOCP+0x56>
	else if(current <= 240)
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80011c6:	d808      	bhi.n	80011da <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	331e      	adds	r3, #30
 80011cc:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <LoRa_setOCP+0x78>)
 80011ce:	fb82 1203 	smull	r1, r2, r2, r3
 80011d2:	1092      	asrs	r2, r2, #2
 80011d4:	17db      	asrs	r3, r3, #31
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3320      	adds	r3, #32
 80011de:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	461a      	mov	r2, r3
 80011e4:	210b      	movs	r1, #11
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f842 	bl	8001270 <LoRa_write>
	HAL_Delay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f004 fbb1 	bl	8005954 <HAL_Delay>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	66666667 	.word	0x66666667

08001200 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001208:	211e      	movs	r1, #30
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f813 	bl	8001236 <LoRa_read>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f043 0307 	orr.w	r3, r3, #7
 800121a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	461a      	mov	r2, r3
 8001220:	211e      	movs	r1, #30
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f824 	bl	8001270 <LoRa_write>
	HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f004 fb93 	bl	8005954 <HAL_Delay>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af02      	add	r7, sp, #8
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800124c:	f107 030f 	add.w	r3, r7, #15
 8001250:	f107 010e 	add.w	r1, r7, #14
 8001254:	2201      	movs	r2, #1
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe39 	bl	8000ed2 <LoRa_readReg>
	HAL_Delay(10);
 8001260:	200a      	movs	r0, #10
 8001262:	f004 fb77 	bl	8005954 <HAL_Delay>

	return read_data;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	4613      	mov	r3, r2
 800127e:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001286:	b2db      	uxtb	r3, r3
 8001288:	73bb      	strb	r3, [r7, #14]
	data = value;
 800128a:	78bb      	ldrb	r3, [r7, #2]
 800128c:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800128e:	f107 030f 	add.w	r3, r7, #15
 8001292:	f107 010e 	add.w	r1, r7, #14
 8001296:	2201      	movs	r2, #1
 8001298:	9200      	str	r2, [sp, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fe56 	bl	8000f4e <LoRa_writeReg>
	HAL_Delay(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f004 fb56 	bl	8005954 <HAL_Delay>
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	461a      	mov	r2, r3
 80012bc:	460b      	mov	r3, r1
 80012be:	72fb      	strb	r3, [r7, #11]
 80012c0:	4613      	mov	r3, r2
 80012c2:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	889b      	ldrh	r3, [r3, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	f004 fddd 	bl	8005e98 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6998      	ldr	r0, [r3, #24]
 80012e2:	f107 0117 	add.w	r1, r7, #23
 80012e6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80012ea:	2201      	movs	r2, #1
 80012ec:	f006 feaf 	bl	800804e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012f0:	bf00      	nop
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 faaf 	bl	800885a <HAL_SPI_GetState>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d1f7      	bne.n	80012f2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6998      	ldr	r0, [r3, #24]
 8001306:	7abb      	ldrb	r3, [r7, #10]
 8001308:	b29a      	uxth	r2, r3
 800130a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f006 fe9d 	bl	800804e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001314:	bf00      	nop
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4618      	mov	r0, r3
 800131c:	f007 fa9d 	bl	800885a <HAL_SPI_GetState>
 8001320:	4603      	mov	r3, r0
 8001322:	2b01      	cmp	r3, #1
 8001324:	d1f7      	bne.n	8001316 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	HAL_Delay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f004 fb14 	bl	8005954 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	889b      	ldrh	r3, [r3, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	4619      	mov	r1, r3
 8001338:	f004 fdae 	bl	8005e98 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

	return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	4611      	mov	r1, r2
 8001366:	461a      	mov	r2, r3
 8001368:	460b      	mov	r3, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001376:	2101      	movs	r1, #1
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fd3e 	bl	8000dfa <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800137e:	210e      	movs	r1, #14
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff ff58 	bl	8001236 <LoRa_read>
 8001386:	4603      	mov	r3, r0
 8001388:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800138a:	7cfb      	ldrb	r3, [r7, #19]
 800138c:	461a      	mov	r2, r3
 800138e:	210d      	movs	r1, #13
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff ff6d 	bl	8001270 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	461a      	mov	r2, r3
 800139a:	2122      	movs	r1, #34	@ 0x22
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff ff67 	bl	8001270 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	2100      	movs	r1, #0
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff81 	bl	80012b0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80013ae:	2103      	movs	r1, #3
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff fd22 	bl	8000dfa <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013b6:	2112      	movs	r1, #18
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7ff ff3c 	bl	8001236 <LoRa_read>
 80013be:	4603      	mov	r3, r0
 80013c0:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00a      	beq.n	80013e2 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013cc:	22ff      	movs	r2, #255	@ 0xff
 80013ce:	2112      	movs	r1, #18
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff ff4d 	bl	8001270 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80013d6:	6979      	ldr	r1, [r7, #20]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff fd0e 	bl	8000dfa <LoRa_gotoMode>
			return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80013e2:	88bb      	ldrh	r3, [r7, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	80bb      	strh	r3, [r7, #4]
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80013ee:	6979      	ldr	r1, [r7, #20]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff fd02 	bl	8000dfa <LoRa_gotoMode>
				return 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e003      	b.n	8001402 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f004 faaa 	bl	8005954 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001400:	e7d9      	b.n	80013b6 <LoRa_transmit+0x5c>
	}
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001412:	2105      	movs	r1, #5
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fcf0 	bl	8000dfa <LoRa_gotoMode>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <LoRa_startCAD>:

// Channel Activity Detection
void LoRa_startCAD(LoRa* _LoRa){
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, CAD_MODE);
 800142a:	2107      	movs	r1, #7
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fce4 	bl	8000dfa <LoRa_gotoMode>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b089      	sub	sp, #36	@ 0x24
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	4613      	mov	r3, r2
 8001446:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	e007      	b.n	8001462 <LoRa_receive+0x28>
		data[i]=0;
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3301      	adds	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	429a      	cmp	r2, r3
 8001468:	dbf3      	blt.n	8001452 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800146a:	2101      	movs	r1, #1
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff fcc4 	bl	8000dfa <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001472:	2112      	movs	r1, #18
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff fede 	bl	8001236 <LoRa_read>
 800147a:	4603      	mov	r3, r0
 800147c:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d02f      	beq.n	80014e8 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001488:	22ff      	movs	r2, #255	@ 0xff
 800148a:	2112      	movs	r1, #18
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff feef 	bl	8001270 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001492:	2113      	movs	r1, #19
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fece 	bl	8001236 <LoRa_read>
 800149a:	4603      	mov	r3, r0
 800149c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800149e:	2110      	movs	r1, #16
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff fec8 	bl	8001236 <LoRa_read>
 80014a6:	4603      	mov	r3, r0
 80014a8:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80014aa:	7cfb      	ldrb	r3, [r7, #19]
 80014ac:	461a      	mov	r2, r3
 80014ae:	210d      	movs	r1, #13
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff fedd 	bl	8001270 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80014b6:	7cba      	ldrb	r2, [r7, #18]
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4293      	cmp	r3, r2
 80014bc:	bf28      	it	cs
 80014be:	4613      	movcs	r3, r2
 80014c0:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e00b      	b.n	80014e0 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	18d4      	adds	r4, r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff feb0 	bl	8001236 <LoRa_read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbef      	blt.n	80014c8 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80014e8:	2105      	movs	r1, #5
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff fc85 	bl	8000dfa <LoRa_gotoMode>
    return min;
 80014f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	@ 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}

080014fa <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff1e 	bl	8001344 <LoRa_isvalid>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8096 	beq.w	800163c <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001510:	2100      	movs	r1, #0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fc71 	bl	8000dfa <LoRa_gotoMode>
			HAL_Delay(10);
 8001518:	200a      	movs	r0, #10
 800151a:	f004 fa1b 	bl	8005954 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800151e:	2101      	movs	r1, #1
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fe88 	bl	8001236 <LoRa_read>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800152a:	200a      	movs	r0, #10
 800152c:	f004 fa12 	bl	8005954 <HAL_Delay>
			data = read | 0x80;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001536:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	461a      	mov	r2, r3
 800153c:	2101      	movs	r1, #1
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe96 	bl	8001270 <LoRa_write>
			HAL_Delay(100);
 8001544:	2064      	movs	r0, #100	@ 0x64
 8001546:	f004 fa05 	bl	8005954 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fda1 	bl	8001098 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fdfc 	bl	800115c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800156a:	4619      	mov	r1, r3
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fe09 	bl	8001184 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001572:	2223      	movs	r2, #35	@ 0x23
 8001574:	210c      	movs	r1, #12
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fe7a 	bl	8001270 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fe3f 	bl	8001200 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fdb4 	bl	80010f8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001590:	22ff      	movs	r2, #255	@ 0xff
 8001592:	211f      	movs	r1, #31
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fe6b 	bl	8001270 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	461a      	mov	r2, r3
 80015ba:	211d      	movs	r1, #29
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fe57 	bl	8001270 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fd32 	bl	800102c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	2120      	movs	r1, #32
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fe4a 	bl	8001270 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	2121      	movs	r1, #33	@ 0x21
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fe42 	bl	8001270 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80015ec:	2140      	movs	r1, #64	@ 0x40
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe21 	bl	8001236 <LoRa_read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80015fe:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	461a      	mov	r2, r3
 8001604:	2140      	movs	r1, #64	@ 0x40
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fe32 	bl	8001270 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800160c:	2101      	movs	r1, #1
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fbf3 	bl	8000dfa <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800161a:	200a      	movs	r0, #10
 800161c:	f004 f99a 	bl	8005954 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001620:	2142      	movs	r1, #66	@ 0x42
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fe07 	bl	8001236 <LoRa_read>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2b12      	cmp	r3, #18
 8001630:	d101      	bne.n	8001636 <LoRa_init+0x13c>
				return LORA_OK;
 8001632:	23c8      	movs	r3, #200	@ 0xc8
 8001634:	e004      	b.n	8001640 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001636:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800163a:	e001      	b.n	8001640 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800163c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db12      	blt.n	80016bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	490a      	ldr	r1, [pc, #40]	@ (80016c8 <__NVIC_DisableIRQ+0x44>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	3320      	adds	r3, #32
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016b0:	f3bf 8f4f 	dsb	sy
}
 80016b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b6:	f3bf 8f6f 	isb	sy
}
 80016ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100

080016cc <bsp_lora_enter_safe_mode>:

lora_packet_t lora_send_packet_buffer = {0};
lora_packet_t lora_receive_packet_buffer = {0};


void bsp_lora_enter_safe_mode(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	//NVIC_DisableIRQ(OTG_FS_IRQn);
	NVIC_DisableIRQ(EXTI0_IRQn);
 80016d0:	2006      	movs	r0, #6
 80016d2:	f7ff ffd7 	bl	8001684 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI1_IRQn);
 80016d6:	2007      	movs	r0, #7
 80016d8:	f7ff ffd4 	bl	8001684 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI2_IRQn);
 80016dc:	2008      	movs	r0, #8
 80016de:	f7ff ffd1 	bl	8001684 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI3_IRQn);
 80016e2:	2009      	movs	r0, #9
 80016e4:	f7ff ffce 	bl	8001684 <__NVIC_DisableIRQ>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <bsp_lora_exit_safe_mode>:

void bsp_lora_exit_safe_mode(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	//NVIC_EnableIRQ(OTG_FS_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 80016f0:	2006      	movs	r0, #6
 80016f2:	f7ff ffa9 	bl	8001648 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 80016f6:	2007      	movs	r0, #7
 80016f8:	f7ff ffa6 	bl	8001648 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 80016fc:	2008      	movs	r0, #8
 80016fe:	f7ff ffa3 	bl	8001648 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8001702:	2009      	movs	r0, #9
 8001704:	f7ff ffa0 	bl	8001648 <__NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <bsp_pc_user_enter_safe_mode>:

void bsp_pc_user_enter_safe_mode(){
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	//NVIC_DisableIRQ(OTG_FS_IRQn);
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <bsp_pc_user_exit_safe_mode>:

void bsp_pc_user_exit_safe_mode(){
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
	//NVIC_EnableIRQ(OTG_FS_IRQn);
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <STM_LOG>:


void STM_LOG(char *str, int c, uint8_t size){
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	4613      	mov	r3, r2
 8001734:	71fb      	strb	r3, [r7, #7]
	char *buf = (char *)malloc(size * sizeof(char));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f00f fa31 	bl	8010ba0 <malloc>
 800173e:	4603      	mov	r3, r0
 8001740:	617b      	str	r3, [r7, #20]
	sprintf(buf, str, c);
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f00f fae8 	bl	8010d1c <siprintf>
	HAL_UART_Transmit(&huart2, buf, size, 1000);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	b29a      	uxth	r2, r3
 8001750:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001754:	6979      	ldr	r1, [r7, #20]
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <STM_LOG+0x44>)
 8001758:	f007 fe88 	bl	800946c <HAL_UART_Transmit>
	free(buf);
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f00f fa27 	bl	8010bb0 <free>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20001ad0 	.word	0x20001ad0

08001770 <bsp_lora_set_receive_mode>:
		return 1;
	return 0;
}


void bsp_lora_set_receive_mode(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	LoRa_startReceiving(&myLoRa);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <bsp_lora_set_receive_mode+0x10>)
 8001776:	f7ff fe48 	bl	800140a <LoRa_startReceiving>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000016c 	.word	0x2000016c

08001784 <bsp_lora_set_cad_mode>:

void bsp_lora_set_cad_mode(){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	bsp_lora_enter_safe_mode();
 8001788:	f7ff ffa0 	bl	80016cc <bsp_lora_enter_safe_mode>
	LoRa_startCAD(&myLoRa);
 800178c:	4803      	ldr	r0, [pc, #12]	@ (800179c <bsp_lora_set_cad_mode+0x18>)
 800178e:	f7ff fe48 	bl	8001422 <LoRa_startCAD>
	bsp_lora_exit_safe_mode();
 8001792:	f7ff ffab 	bl	80016ec <bsp_lora_exit_safe_mode>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000016c 	.word	0x2000016c

080017a0 <bsp_lora_check_cad>:
/**
 * check if the bus is free or busy
 * @return: 1-bus is busy
 * 			0-bus is free
 * **/
uint8_t bsp_lora_check_cad() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	bsp_lora_set_cad_mode();
 80017a6:	f7ff ffed 	bl	8001784 <bsp_lora_set_cad_mode>
	uint32_t startTime = HAL_GetTick();
 80017aa:	f004 f8c7 	bl	800593c <HAL_GetTick>
 80017ae:	6078      	str	r0, [r7, #4]
    while (!(LoRa_read(&myLoRa, RegIrqFlags) & 0x04)){
 80017b0:	e009      	b.n	80017c6 <bsp_lora_check_cad+0x26>
    	if (HAL_GetTick() - startTime > 1000) { // Timeout sau 500ms
 80017b2:	f004 f8c3 	bl	800593c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017c0:	d901      	bls.n	80017c6 <bsp_lora_check_cad+0x26>
    		return 0; // Không phát hiện tín hiệu LoRa
 80017c2:	2300      	movs	r3, #0
 80017c4:	e016      	b.n	80017f4 <bsp_lora_check_cad+0x54>
    while (!(LoRa_read(&myLoRa, RegIrqFlags) & 0x04)){
 80017c6:	2112      	movs	r1, #18
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <bsp_lora_check_cad+0x5c>)
 80017ca:	f7ff fd34 	bl	8001236 <LoRa_read>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ec      	beq.n	80017b2 <bsp_lora_check_cad+0x12>
    	}
    } // Chờ CAD hoàn thành
    uint8_t cadDetected = LoRa_read(&myLoRa, RegIrqFlags) & 0x01;
 80017d8:	2112      	movs	r1, #18
 80017da:	4808      	ldr	r0, [pc, #32]	@ (80017fc <bsp_lora_check_cad+0x5c>)
 80017dc:	f7ff fd2b 	bl	8001236 <LoRa_read>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	70fb      	strb	r3, [r7, #3]
    LoRa_write(&myLoRa, RegIrqFlags, 0xFF); // Xóa cờ ngắt
 80017e8:	22ff      	movs	r2, #255	@ 0xff
 80017ea:	2112      	movs	r1, #18
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <bsp_lora_check_cad+0x5c>)
 80017ee:	f7ff fd3f 	bl	8001270 <LoRa_write>
    return cadDetected;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000016c 	.word	0x2000016c

08001800 <bsp_lora_init>:

void bsp_lora_init(){
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b08c      	sub	sp, #48	@ 0x30
 8001804:	af00      	add	r7, sp, #0
	// Initiate lora gateway object
	myLoRa = newLoRa();
 8001806:	4c2f      	ldr	r4, [pc, #188]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001808:	463b      	mov	r3, r7
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff faae 	bl	8000d6c <newLoRa>
 8001810:	4625      	mov	r5, r4
 8001812:	463c      	mov	r4, r7
 8001814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001820:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port         = SPI1_NSS_GPIO_Port;
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001826:	4a28      	ldr	r2, [pc, #160]	@ (80018c8 <bsp_lora_init+0xc8>)
 8001828:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = SPI1_NSS_Pin;
 800182a:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <bsp_lora_init+0xc4>)
 800182c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001830:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001832:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001834:	4a24      	ldr	r2, [pc, #144]	@ (80018c8 <bsp_lora_init+0xc8>)
 8001836:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = LORA_RST_Pin;
 8001838:	4b22      	ldr	r3, [pc, #136]	@ (80018c4 <bsp_lora_init+0xc4>)
 800183a:	2210      	movs	r2, #16
 800183c:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001840:	4a22      	ldr	r2, [pc, #136]	@ (80018cc <bsp_lora_init+0xcc>)
 8001842:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001844:	4b1f      	ldr	r3, [pc, #124]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001846:	2201      	movs	r2, #1
 8001848:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx           = &hspi1;
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <bsp_lora_init+0xc4>)
 800184c:	4a20      	ldr	r2, [pc, #128]	@ (80018d0 <bsp_lora_init+0xd0>)
 800184e:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = 433;
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001852:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001856:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;
 8001858:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <bsp_lora_init+0xc4>)
 800185a:	2207      	movs	r2, #7
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	myLoRa.bandWidth             = BW_250KHz;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001862:	2208      	movs	r2, #8
 8001864:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate               = CR_4_5;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <bsp_lora_init+0xc4>)
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.power                 = POWER_17db;
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001872:	22fc      	movs	r2, #252	@ 0xfc
 8001874:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	myLoRa.overCurrentProtection = 150;
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <bsp_lora_init+0xc4>)
 800187a:	2296      	movs	r2, #150	@ 0x96
 800187c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	myLoRa.preamble              = 10;
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001882:	220a      	movs	r2, #10
 8001884:	851a      	strh	r2, [r3, #40]	@ 0x28



	LoRa_reset(&myLoRa);
 8001886:	480f      	ldr	r0, [pc, #60]	@ (80018c4 <bsp_lora_init+0xc4>)
 8001888:	f7ff fa99 	bl	8000dbe <LoRa_reset>
	if(LoRa_init(&myLoRa)==LORA_OK){
 800188c:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <bsp_lora_init+0xc4>)
 800188e:	f7ff fe34 	bl	80014fa <LoRa_init>
 8001892:	4603      	mov	r3, r0
 8001894:	2bc8      	cmp	r3, #200	@ 0xc8
 8001896:	d107      	bne.n	80018a8 <bsp_lora_init+0xa8>
		HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa Init Success\n", 18, 2000);
 8001898:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800189c:	2212      	movs	r2, #18
 800189e:	490d      	ldr	r1, [pc, #52]	@ (80018d4 <bsp_lora_init+0xd4>)
 80018a0:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <bsp_lora_init+0xd8>)
 80018a2:	f007 fde3 	bl	800946c <HAL_UART_Transmit>
 80018a6:	e006      	b.n	80018b6 <bsp_lora_init+0xb6>
	}

	else{
		HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa Init Failed\n", 18, 2000);
 80018a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018ac:	2212      	movs	r2, #18
 80018ae:	490b      	ldr	r1, [pc, #44]	@ (80018dc <bsp_lora_init+0xdc>)
 80018b0:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <bsp_lora_init+0xd8>)
 80018b2:	f007 fddb 	bl	800946c <HAL_UART_Transmit>
	}

	LoRa_startReceiving(&myLoRa);
 80018b6:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <bsp_lora_init+0xc4>)
 80018b8:	f7ff fda7 	bl	800140a <LoRa_startReceiving>
	lora_node2.id = DEVICE2_ID;
	memset(&lora_node1.last_lora_send_packet, 0, sizeof(lora_packet_t));
	memset(&lora_node2.last_lora_send_packet, 0, sizeof(lora_packet_t));
	memset(&lora_node1.last_lora_receive_packet, 0, sizeof(lora_packet_t));
	memset(&lora_node2.last_lora_receive_packet, 0, sizeof(lora_packet_t));*/
}
 80018bc:	bf00      	nop
 80018be:	3730      	adds	r7, #48	@ 0x30
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdb0      	pop	{r4, r5, r7, pc}
 80018c4:	2000016c 	.word	0x2000016c
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	200019a0 	.word	0x200019a0
 80018d4:	08011568 	.word	0x08011568
 80018d8:	20001ad0 	.word	0x20001ad0
 80018dc:	0801157c 	.word	0x0801157c

080018e0 <checksum_calculate>:

uint32_t checksum_calculate(uint8_t *data, uint8_t len){
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
	if(data != NULL){
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d015      	beq.n	800191e <checksum_calculate+0x3e>
		uint32_t checksum = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < len; i++){
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	e00a      	b.n	8001912 <checksum_calculate+0x32>
			checksum += *(data + i);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < len; i++){
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	3301      	adds	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbf0      	blt.n	80018fc <checksum_calculate+0x1c>
		}
		return checksum;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	e000      	b.n	8001920 <checksum_calculate+0x40>
	}
	return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <bsp_lora_send_packet>:
 * @param des_id: destination id
 * @param cmd: command send to destination
 * @param data: pointer to the sending data
 * @param len: data's length
 */
void bsp_lora_send_packet(uint8_t source_id, uint8_t des_id, uint8_t packet_id, uint8_t cmd, uint32_t mem_addr, uint8_t *data, uint8_t len, uint8_t ttl){
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	4604      	mov	r4, r0
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	4603      	mov	r3, r0
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	460b      	mov	r3, r1
 8001944:	717b      	strb	r3, [r7, #5]
 8001946:	4613      	mov	r3, r2
 8001948:	713b      	strb	r3, [r7, #4]
	bsp_lora_enter_safe_mode();
 800194a:	f7ff febf 	bl	80016cc <bsp_lora_enter_safe_mode>

	lora_send_packet_buffer.packet_id = packet_id;
 800194e:	4a20      	ldr	r2, [pc, #128]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 8001950:	797b      	ldrb	r3, [r7, #5]
 8001952:	7013      	strb	r3, [r2, #0]
	lora_send_packet_buffer.source_id = source_id;
 8001954:	4a1e      	ldr	r2, [pc, #120]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	7053      	strb	r3, [r2, #1]
	lora_send_packet_buffer.destination_id = des_id;
 800195a:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	7093      	strb	r3, [r2, #2]
	lora_send_packet_buffer.ttl = ttl;
 8001960:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 8001962:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001966:	70d3      	strb	r3, [r2, #3]
	lora_send_packet_buffer.responsed = 0;
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 800196a:	2200      	movs	r2, #0
 800196c:	711a      	strb	r2, [r3, #4]
	lora_send_packet_buffer.cmd = cmd;
 800196e:	4a18      	ldr	r2, [pc, #96]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 8001970:	793b      	ldrb	r3, [r7, #4]
 8001972:	7153      	strb	r3, [r2, #5]
	lora_send_packet_buffer.payload_length = len;
 8001974:	4a16      	ldr	r2, [pc, #88]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 8001976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800197a:	7393      	strb	r3, [r2, #14]
	lora_send_packet_buffer.mem_addr = mem_addr;
 800197c:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f8c2 3006 	str.w	r3, [r2, #6]
	lora_send_packet_buffer.checksum = checksum_calculate(data, len);
 8001984:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001988:	4619      	mov	r1, r3
 800198a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800198c:	f7ff ffa8 	bl	80018e0 <checksum_calculate>
 8001990:	4603      	mov	r3, r0
 8001992:	4a0f      	ldr	r2, [pc, #60]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 8001994:	f8c2 300a 	str.w	r3, [r2, #10]

	memcpy(lora_send_packet_buffer.payload, data, len);
 8001998:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800199c:	461a      	mov	r2, r3
 800199e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <bsp_lora_send_packet+0xa8>)
 80019a2:	f00f fa1f 	bl	8010de4 <memcpy>

	uint8_t *buffer = (uint8_t *) (&lora_send_packet_buffer);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <bsp_lora_send_packet+0xa4>)
 80019a8:	60fb      	str	r3, [r7, #12]

	LoRa_transmit(&myLoRa, buffer, sizeof(lora_packet_t), 4000);
 80019aa:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80019ae:	222f      	movs	r2, #47	@ 0x2f
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <bsp_lora_send_packet+0xac>)
 80019b4:	f7ff fcd1 	bl	800135a <LoRa_transmit>

	STM_LOG("pid: %3d\n", packet_id, 9);
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	2209      	movs	r2, #9
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <bsp_lora_send_packet+0xb0>)
 80019c0:	f7ff feb2 	bl	8001728 <STM_LOG>

	bsp_lora_exit_safe_mode();
 80019c4:	f7ff fe92 	bl	80016ec <bsp_lora_exit_safe_mode>
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	20000198 	.word	0x20000198
 80019d4:	200001a7 	.word	0x200001a7
 80019d8:	2000016c 	.word	0x2000016c
 80019dc:	08011590 	.word	0x08011590

080019e0 <bsp_lora_get_node_send_packet_index>:

int bsp_lora_get_node_send_packet_index(lora_node_t *lora_node){
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e010      	b.n	8001a10 <bsp_lora_get_node_send_packet_index+0x30>
		if(lora_node->last_lora_send_packet[i].packet_id == 0)
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	3305      	adds	r3, #5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <bsp_lora_get_node_send_packet_index+0x2a>
			return i;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	e007      	b.n	8001a1a <bsp_lora_get_node_send_packet_index+0x3a>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d9eb      	bls.n	80019ee <bsp_lora_get_node_send_packet_index+0xe>
	}
	return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <bsp_lora_check_cmd_in_node_send_packets>:

int bsp_lora_check_cmd_in_node_send_packets(lora_node_t *lora_node, uint8_t lora_cmd){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e01d      	b.n	8001a76 <bsp_lora_check_cmd_in_node_send_packets+0x4e>
		if(lora_node->last_lora_send_packet[i].packet_id != 0 && lora_node->last_lora_send_packet[i].cmd == lora_cmd)
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3305      	adds	r3, #5
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00e      	beq.n	8001a70 <bsp_lora_check_cmd_in_node_send_packets+0x48>
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	330a      	adds	r3, #10
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d101      	bne.n	8001a70 <bsp_lora_check_cmd_in_node_send_packets+0x48>
			return i;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	e014      	b.n	8001a9a <bsp_lora_check_cmd_in_node_send_packets+0x72>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	3301      	adds	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d9de      	bls.n	8001a3a <bsp_lora_check_cmd_in_node_send_packets+0x12>
	}
	STM_LOG("Send buffer not contain cmd %2d", lora_node->id, 30);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	221e      	movs	r2, #30
 8001a82:	4619      	mov	r1, r3
 8001a84:	4807      	ldr	r0, [pc, #28]	@ (8001aa4 <bsp_lora_check_cmd_in_node_send_packets+0x7c>)
 8001a86:	f7ff fe4f 	bl	8001728 <STM_LOG>
	STM_LOG(" cmd: %2d\n", lora_cmd,9);
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	2209      	movs	r2, #9
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <bsp_lora_check_cmd_in_node_send_packets+0x80>)
 8001a92:	f7ff fe49 	bl	8001728 <STM_LOG>
	return -1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	0801159c 	.word	0x0801159c
 8001aa8:	080115bc 	.word	0x080115bc

08001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>:

int bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node_t *lora_node, uint8_t lora_cmd, uint8_t packet_id){
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	e01e      	b.n	8001b00 <bsp_lora_check_cmd_and_id_in_node_send_packets+0x54>
		if(lora_node->last_lora_send_packet[i].packet_id == packet_id && lora_node->last_lora_send_packet[i].cmd == lora_cmd)
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3305      	adds	r3, #5
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	78ba      	ldrb	r2, [r7, #2]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10e      	bne.n	8001afa <bsp_lora_check_cmd_and_id_in_node_send_packets+0x4e>
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	330a      	adds	r3, #10
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d101      	bne.n	8001afa <bsp_lora_check_cmd_and_id_in_node_send_packets+0x4e>
			return i;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	e007      	b.n	8001b0a <bsp_lora_check_cmd_and_id_in_node_send_packets+0x5e>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	3301      	adds	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d9dd      	bls.n	8001ac2 <bsp_lora_check_cmd_and_id_in_node_send_packets+0x16>
	}
	return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <bsp_lora_remove_packet_from_node_send_packets>:

void bsp_lora_remove_packet_from_node_send_packets(lora_node_t *lora_node, uint8_t index){
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = index; i < MAX_NODE_PACKET_ITEMS - 1; i++){
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	e019      	b.n	8001b5c <bsp_lora_remove_packet_from_node_send_packets+0x46>
		memcpy(&lora_node->last_lora_send_packet[i], &lora_node->last_lora_send_packet[i + 1], sizeof(lora_packet_t));
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	1d58      	adds	r0, r3, #5
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3305      	adds	r3, #5
 8001b4e:	222f      	movs	r2, #47	@ 0x2f
 8001b50:	4619      	mov	r1, r3
 8001b52:	f00f f947 	bl	8010de4 <memcpy>
	for(uint8_t i = index; i < MAX_NODE_PACKET_ITEMS - 1; i++){
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d9e2      	bls.n	8001b28 <bsp_lora_remove_packet_from_node_send_packets+0x12>
	}
	memset(&lora_node->last_lora_send_packet[MAX_NODE_PACKET_ITEMS - 1], 0, sizeof(lora_packet_t));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3363      	adds	r3, #99	@ 0x63
 8001b66:	222f      	movs	r2, #47	@ 0x2f
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00f f8f6 	bl	8010d5c <memset>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <bsp_lora_get_node_receive_packet_index>:

int bsp_lora_get_node_receive_packet_index(lora_node_t *lora_node){
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e010      	b.n	8001ba8 <bsp_lora_get_node_receive_packet_index+0x30>
		if(lora_node->last_lora_receive_packet[i].packet_id == 0)
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	3392      	adds	r3, #146	@ 0x92
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <bsp_lora_get_node_receive_packet_index+0x2a>
			return i;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	e007      	b.n	8001bb2 <bsp_lora_get_node_receive_packet_index+0x3a>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d9eb      	bls.n	8001b86 <bsp_lora_get_node_receive_packet_index+0xe>
	}
	return -1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <bsp_lora_get_id_in_node_receive_packets>:

int bsp_lora_get_id_in_node_receive_packets(lora_node_t *lora_node, uint8_t packet_id){
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	e011      	b.n	8001bf4 <bsp_lora_get_id_in_node_receive_packets+0x36>
		if(lora_node->last_lora_receive_packet[i].packet_id == packet_id)
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	3392      	adds	r3, #146	@ 0x92
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d101      	bne.n	8001bee <bsp_lora_get_id_in_node_receive_packets+0x30>
			return i;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	e007      	b.n	8001bfe <bsp_lora_get_id_in_node_receive_packets+0x40>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d9ea      	bls.n	8001bd0 <bsp_lora_get_id_in_node_receive_packets+0x12>
	}
	return -1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <bsp_lora_check_cmd_in_node_receive_packets>:

int bsp_lora_check_cmd_in_node_receive_packets(lora_node_t *lora_node, uint8_t lora_cmd){
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e01d      	b.n	8001c58 <bsp_lora_check_cmd_in_node_receive_packets+0x4e>
		if(lora_node->last_lora_receive_packet[i].packet_id != 0 && lora_node->last_lora_receive_packet[i].cmd == lora_cmd)
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3392      	adds	r3, #146	@ 0x92
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00e      	beq.n	8001c52 <bsp_lora_check_cmd_in_node_receive_packets+0x48>
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	3397      	adds	r3, #151	@ 0x97
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d101      	bne.n	8001c52 <bsp_lora_check_cmd_in_node_receive_packets+0x48>
			return i;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	e007      	b.n	8001c62 <bsp_lora_check_cmd_in_node_receive_packets+0x58>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	3301      	adds	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d9de      	bls.n	8001c1c <bsp_lora_check_cmd_in_node_receive_packets+0x12>
	}
	return -1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <bsp_lora_remove_packet_from_node_receive_packets>:

void bsp_lora_remove_packet_from_node_receive_packets(lora_node_t *lora_node, uint8_t index){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
	STM_LOG("Remove receive buffer[%d]\n", index, 25);
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	2219      	movs	r2, #25
 8001c80:	4619      	mov	r1, r3
 8001c82:	4829      	ldr	r0, [pc, #164]	@ (8001d28 <bsp_lora_remove_packet_from_node_receive_packets+0xb8>)
 8001c84:	f7ff fd50 	bl	8001728 <STM_LOG>
	for(uint8_t i = index; i < MAX_NODE_PACKET_ITEMS - 1; i++){
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e01b      	b.n	8001cc6 <bsp_lora_remove_packet_from_node_receive_packets+0x56>
		memcpy(&lora_node->last_lora_receive_packet[i], &lora_node->last_lora_receive_packet[i + 1], sizeof(lora_packet_t));
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	3390      	adds	r3, #144	@ 0x90
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	1c98      	adds	r0, r3, #2
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	3390      	adds	r3, #144	@ 0x90
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	222f      	movs	r2, #47	@ 0x2f
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f00f f892 	bl	8010de4 <memcpy>
	for(uint8_t i = index; i < MAX_NODE_PACKET_ITEMS - 1; i++){
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d9e0      	bls.n	8001c8e <bsp_lora_remove_packet_from_node_receive_packets+0x1e>
	}
	memset(&lora_node->last_lora_receive_packet[MAX_NODE_PACKET_ITEMS - 1], 0, sizeof(lora_packet_t));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	33f0      	adds	r3, #240	@ 0xf0
 8001cd0:	222f      	movs	r2, #47	@ 0x2f
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00f f841 	bl	8010d5c <memset>

	uint8_t buffer_qtt = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001cde:	2300      	movs	r3, #0
 8001ce0:	737b      	strb	r3, [r7, #13]
 8001ce2:	e011      	b.n	8001d08 <bsp_lora_remove_packet_from_node_receive_packets+0x98>
		if(lora_node->last_lora_receive_packet[i].packet_id != 0){
 8001ce4:	7b7a      	ldrb	r2, [r7, #13]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3392      	adds	r3, #146	@ 0x92
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <bsp_lora_remove_packet_from_node_receive_packets+0xa0>
			buffer_qtt++;
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001d02:	7b7b      	ldrb	r3, [r7, #13]
 8001d04:	3301      	adds	r3, #1
 8001d06:	737b      	strb	r3, [r7, #13]
 8001d08:	7b7b      	ldrb	r3, [r7, #13]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d9ea      	bls.n	8001ce4 <bsp_lora_remove_packet_from_node_receive_packets+0x74>
 8001d0e:	e000      	b.n	8001d12 <bsp_lora_remove_packet_from_node_receive_packets+0xa2>
		}
		else{
			break;
 8001d10:	bf00      	nop
		}
	}
	STM_LOG("Receive buffer qtt: %d\n", buffer_qtt, 23);
 8001d12:	7bbb      	ldrb	r3, [r7, #14]
 8001d14:	2217      	movs	r2, #23
 8001d16:	4619      	mov	r1, r3
 8001d18:	4804      	ldr	r0, [pc, #16]	@ (8001d2c <bsp_lora_remove_packet_from_node_receive_packets+0xbc>)
 8001d1a:	f7ff fd05 	bl	8001728 <STM_LOG>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	080115c8 	.word	0x080115c8
 8001d2c:	080115e4 	.word	0x080115e4

08001d30 <bsp_lora_send_packet_to_node>:

/**
 * Send packet to a specific node
 * **/
void bsp_lora_send_packet_to_node(lora_node_t *des_node, uint8_t cmd, uint32_t mem_addr, uint8_t *data, uint8_t len, uint8_t ttl){
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b08b      	sub	sp, #44	@ 0x2c
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	72fb      	strb	r3, [r7, #11]
	if(cmd == LORA_CMD_CONNECT){
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d135      	bne.n	8001db2 <bsp_lora_send_packet_to_node+0x82>
		if(des_node->connected == 0){
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	789b      	ldrb	r3, [r3, #2]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d129      	bne.n	8001da2 <bsp_lora_send_packet_to_node+0x72>
			HAL_UART_Transmit(&huart2, (uint8_t *)"connecting\n", 12, 2000);
 8001d4e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d52:	220c      	movs	r2, #12
 8001d54:	496f      	ldr	r1, [pc, #444]	@ (8001f14 <bsp_lora_send_packet_to_node+0x1e4>)
 8001d56:	4870      	ldr	r0, [pc, #448]	@ (8001f18 <bsp_lora_send_packet_to_node+0x1e8>)
 8001d58:	f007 fb88 	bl	800946c <HAL_UART_Transmit>
			bsp_lora_send_packet(GATEWAY_ID, des_node->id, (lora_send_packet_buffer.packet_id % MAX_PACKET_ID) + 1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	7819      	ldrb	r1, [r3, #0]
 8001d60:	4b6e      	ldr	r3, [pc, #440]	@ (8001f1c <bsp_lora_send_packet_to_node+0x1ec>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4a6e      	ldr	r2, [pc, #440]	@ (8001f20 <bsp_lora_send_packet_to_node+0x1f0>)
 8001d66:	fba2 0203 	umull	r0, r2, r2, r3
 8001d6a:	0912      	lsrs	r2, r2, #4
 8001d6c:	20fa      	movs	r0, #250	@ 0xfa
 8001d6e:	fb00 f202 	mul.w	r2, r0, r2
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2300      	movs	r3, #0
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fdcd 	bl	800192c <bsp_lora_send_packet>
							, LORA_CMD_CONNECT, 0, NULL, 0, 3);
			HAL_UART_Transmit(&huart2, (uint8_t *)"sendcn\n", 7, 2000);
 8001d92:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d96:	2207      	movs	r2, #7
 8001d98:	4962      	ldr	r1, [pc, #392]	@ (8001f24 <bsp_lora_send_packet_to_node+0x1f4>)
 8001d9a:	485f      	ldr	r0, [pc, #380]	@ (8001f18 <bsp_lora_send_packet_to_node+0x1e8>)
 8001d9c:	f007 fb66 	bl	800946c <HAL_UART_Transmit>
 8001da0:	e065      	b.n	8001e6e <bsp_lora_send_packet_to_node+0x13e>
		}
		else{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Node is connected\n", 19, 2000);
 8001da2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001da6:	2213      	movs	r2, #19
 8001da8:	495f      	ldr	r1, [pc, #380]	@ (8001f28 <bsp_lora_send_packet_to_node+0x1f8>)
 8001daa:	485b      	ldr	r0, [pc, #364]	@ (8001f18 <bsp_lora_send_packet_to_node+0x1e8>)
 8001dac:	f007 fb5e 	bl	800946c <HAL_UART_Transmit>
 8001db0:	e05d      	b.n	8001e6e <bsp_lora_send_packet_to_node+0x13e>
		}
	}

	else if(cmd == LORA_CMD_DISCONNECT){
 8001db2:	7afb      	ldrb	r3, [r7, #11]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d12e      	bne.n	8001e16 <bsp_lora_send_packet_to_node+0xe6>
		if(des_node->connected == 1){
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	789b      	ldrb	r3, [r3, #2]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d122      	bne.n	8001e06 <bsp_lora_send_packet_to_node+0xd6>
			bsp_lora_send_packet(GATEWAY_ID, des_node->id, ((lora_send_packet_buffer.packet_id + 1) % (MAX_PACKET_ID + 1)) + 1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	7818      	ldrb	r0, [r3, #0]
 8001dc4:	4b55      	ldr	r3, [pc, #340]	@ (8001f1c <bsp_lora_send_packet_to_node+0x1ec>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4b58      	ldr	r3, [pc, #352]	@ (8001f2c <bsp_lora_send_packet_to_node+0x1fc>)
 8001dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	11d9      	asrs	r1, r3, #7
 8001dd4:	17d3      	asrs	r3, r2, #31
 8001dd6:	1ac9      	subs	r1, r1, r3
 8001dd8:	460b      	mov	r3, r1
 8001dda:	019b      	lsls	r3, r3, #6
 8001ddc:	1a5b      	subs	r3, r3, r1
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	1a5b      	subs	r3, r3, r1
 8001de2:	1ad1      	subs	r1, r2, r3
 8001de4:	b2cb      	uxtb	r3, r1
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	2303      	movs	r3, #3
 8001dec:	9303      	str	r3, [sp, #12]
 8001dee:	2300      	movs	r3, #0
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2300      	movs	r3, #0
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	2300      	movs	r3, #0
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fd94 	bl	800192c <bsp_lora_send_packet>
 8001e04:	e033      	b.n	8001e6e <bsp_lora_send_packet_to_node+0x13e>
										, LORA_CMD_DISCONNECT, 0, NULL, 0, 3);
		}
		else{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Node is disconnected\n", 21, 2000);
 8001e06:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e0a:	2215      	movs	r2, #21
 8001e0c:	4948      	ldr	r1, [pc, #288]	@ (8001f30 <bsp_lora_send_packet_to_node+0x200>)
 8001e0e:	4842      	ldr	r0, [pc, #264]	@ (8001f18 <bsp_lora_send_packet_to_node+0x1e8>)
 8001e10:	f007 fb2c 	bl	800946c <HAL_UART_Transmit>
 8001e14:	e02b      	b.n	8001e6e <bsp_lora_send_packet_to_node+0x13e>
		}
	}

	else{
		HAL_UART_Transmit(&huart2, (uint8_t *)"read request\n", 13, 2000);
 8001e16:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e1a:	220d      	movs	r2, #13
 8001e1c:	4945      	ldr	r1, [pc, #276]	@ (8001f34 <bsp_lora_send_packet_to_node+0x204>)
 8001e1e:	483e      	ldr	r0, [pc, #248]	@ (8001f18 <bsp_lora_send_packet_to_node+0x1e8>)
 8001e20:	f007 fb24 	bl	800946c <HAL_UART_Transmit>
		bsp_lora_send_packet(GATEWAY_ID, des_node->id, ((lora_send_packet_buffer.packet_id + 1) % (MAX_PACKET_ID + 1)) + 1,
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	7818      	ldrb	r0, [r3, #0]
 8001e28:	4b3c      	ldr	r3, [pc, #240]	@ (8001f1c <bsp_lora_send_packet_to_node+0x1ec>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f2c <bsp_lora_send_packet_to_node+0x1fc>)
 8001e30:	fb83 1302 	smull	r1, r3, r3, r2
 8001e34:	4413      	add	r3, r2
 8001e36:	11d9      	asrs	r1, r3, #7
 8001e38:	17d3      	asrs	r3, r2, #31
 8001e3a:	1ac9      	subs	r1, r1, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	019b      	lsls	r3, r3, #6
 8001e40:	1a5b      	subs	r3, r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	1a5b      	subs	r3, r3, r1
 8001e46:	1ad1      	subs	r1, r2, r3
 8001e48:	b2cb      	uxtb	r3, r1
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	7af9      	ldrb	r1, [r7, #11]
 8001e50:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e54:	9303      	str	r3, [sp, #12]
 8001e56:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	460b      	mov	r3, r1
 8001e66:	4601      	mov	r1, r0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fd5f 	bl	800192c <bsp_lora_send_packet>
				cmd, mem_addr, data, len, ttl);
	}

	if(bsp_lora_get_node_send_packet_index(des_node) != -1){
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff fdb6 	bl	80019e0 <bsp_lora_get_node_send_packet_index>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7a:	d03f      	beq.n	8001efc <bsp_lora_send_packet_to_node+0x1cc>
		uint8_t i = bsp_lora_get_node_send_packet_index(des_node);
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7ff fdaf 	bl	80019e0 <bsp_lora_get_node_send_packet_index>
 8001e82:	4603      	mov	r3, r0
 8001e84:	75fb      	strb	r3, [r7, #23]
		memcpy(&des_node->last_lora_send_packet[i], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8001e86:	7dfa      	ldrb	r2, [r7, #23]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4413      	add	r3, r2
 8001e96:	3305      	adds	r3, #5
 8001e98:	4a20      	ldr	r2, [pc, #128]	@ (8001f1c <bsp_lora_send_packet_to_node+0x1ec>)
 8001e9a:	4615      	mov	r5, r2
 8001e9c:	469c      	mov	ip, r3
 8001e9e:	f105 0e20 	add.w	lr, r5, #32
 8001ea2:	4664      	mov	r4, ip
 8001ea4:	462e      	mov	r6, r5
 8001ea6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ea8:	6020      	str	r0, [r4, #0]
 8001eaa:	6061      	str	r1, [r4, #4]
 8001eac:	60a2      	str	r2, [r4, #8]
 8001eae:	60e3      	str	r3, [r4, #12]
 8001eb0:	3510      	adds	r5, #16
 8001eb2:	f10c 0c10 	add.w	ip, ip, #16
 8001eb6:	4575      	cmp	r5, lr
 8001eb8:	d1f3      	bne.n	8001ea2 <bsp_lora_send_packet_to_node+0x172>
 8001eba:	4664      	mov	r4, ip
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ec0:	6020      	str	r0, [r4, #0]
 8001ec2:	6061      	str	r1, [r4, #4]
 8001ec4:	60a2      	str	r2, [r4, #8]
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	789b      	ldrb	r3, [r3, #2]
 8001eca:	81a2      	strh	r2, [r4, #12]
 8001ecc:	73a3      	strb	r3, [r4, #14]
		des_node->last_lora_send_packet[i].ttl--;
 8001ece:	7dfa      	ldrb	r2, [r7, #23]
 8001ed0:	68f9      	ldr	r1, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	3308      	adds	r3, #8
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b2d8      	uxtb	r0, r3
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	701a      	strb	r2, [r3, #0]
	}
	else{
		STM_LOG("Send buffer of node %2d is full\n", des_node->id, 31);
	}
}
 8001efa:	e006      	b.n	8001f0a <bsp_lora_send_packet_to_node+0x1da>
		STM_LOG("Send buffer of node %2d is full\n", des_node->id, 31);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	221f      	movs	r2, #31
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <bsp_lora_send_packet_to_node+0x208>)
 8001f06:	f7ff fc0f 	bl	8001728 <STM_LOG>
}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	080115fc 	.word	0x080115fc
 8001f18:	20001ad0 	.word	0x20001ad0
 8001f1c:	20000198 	.word	0x20000198
 8001f20:	10624dd3 	.word	0x10624dd3
 8001f24:	08011608 	.word	0x08011608
 8001f28:	08011610 	.word	0x08011610
 8001f2c:	828cbfbf 	.word	0x828cbfbf
 8001f30:	08011624 	.word	0x08011624
 8001f34:	0801163c 	.word	0x0801163c
 8001f38:	0801164c 	.word	0x0801164c

08001f3c <bsp_lora_resend_packet>:

/**
 * Resend a specific lora packet
 * **/
void bsp_lora_resend_packet(lora_packet_t *lora_packet){
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	6078      	str	r0, [r7, #4]
	if(lora_packet->ttl > 0){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	78db      	ldrb	r3, [r3, #3]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01e      	beq.n	8001f8a <bsp_lora_resend_packet+0x4e>
		bsp_lora_send_packet(GATEWAY_ID, lora_packet->destination_id, lora_packet->packet_id, lora_packet->cmd,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	789c      	ldrb	r4, [r3, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781d      	ldrb	r5, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	795e      	ldrb	r6, [r3, #5]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 3006 	ldr.w	r3, [r3, #6]
				lora_packet->mem_addr, lora_packet->payload, lora_packet->payload_length, lora_packet->ttl);
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	320f      	adds	r2, #15
		bsp_lora_send_packet(GATEWAY_ID, lora_packet->destination_id, lora_packet->packet_id, lora_packet->cmd,
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	7b89      	ldrb	r1, [r1, #14]
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	78c0      	ldrb	r0, [r0, #3]
 8001f6a:	9003      	str	r0, [sp, #12]
 8001f6c:	9102      	str	r1, [sp, #8]
 8001f6e:	9201      	str	r2, [sp, #4]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4633      	mov	r3, r6
 8001f74:	462a      	mov	r2, r5
 8001f76:	4621      	mov	r1, r4
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fcd7 	bl	800192c <bsp_lora_send_packet>
		lora_packet->ttl--;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	78db      	ldrb	r3, [r3, #3]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	70da      	strb	r2, [r3, #3]
	}
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f94 <bsp_lora_receive_packet>:


/**
 * A function used to receive packet from other devices
 */
void bsp_lora_receive_packet(){
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b0b2      	sub	sp, #200	@ 0xc8
 8001f98:	af00      	add	r7, sp, #0
	uint8_t u8lora_receive_packet_buffer[MAX_PACKET_LENGTH] = {0};
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	22c4      	movs	r2, #196	@ 0xc4
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00e fed9 	bl	8010d5c <memset>
	LoRa_receive(&myLoRa, u8lora_receive_packet_buffer, MAX_PACKET_LENGTH);
 8001faa:	463b      	mov	r3, r7
 8001fac:	22c8      	movs	r2, #200	@ 0xc8
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480a      	ldr	r0, [pc, #40]	@ (8001fdc <bsp_lora_receive_packet+0x48>)
 8001fb2:	f7ff fa42 	bl	800143a <LoRa_receive>
	memcpy(&lora_receive_packet_buffer, u8lora_receive_packet_buffer, sizeof(lora_packet_t));
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <bsp_lora_receive_packet+0x4c>)
 8001fb8:	461c      	mov	r4, r3
 8001fba:	463d      	mov	r5, r7
 8001fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fc8:	c407      	stmia	r4!, {r0, r1, r2}
 8001fca:	8023      	strh	r3, [r4, #0]
 8001fcc:	3402      	adds	r4, #2
 8001fce:	0c1b      	lsrs	r3, r3, #16
 8001fd0:	7023      	strb	r3, [r4, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	37c8      	adds	r7, #200	@ 0xc8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000016c 	.word	0x2000016c
 8001fe0:	200001c8 	.word	0x200001c8

08001fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a06      	ldr	r2, [pc, #24]	@ (8002014 <vApplicationGetIdleTaskMemory+0x30>)
 8001ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200001f8 	.word	0x200001f8
 8002014:	2000024c 	.word	0x2000024c

08002018 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <vApplicationGetTimerTaskMemory+0x2c>)
 8002028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <vApplicationGetTimerTaskMemory+0x30>)
 800202e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002036:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	2000044c 	.word	0x2000044c
 8002048:	200004a0 	.word	0x200004a0

0800204c <lora_network_connection_processing>:
	else if(lora_node->class == DEVICE_CLASS_C)
		return DEVICE_CLASS_C_TIME_PERIOD;
	return -1;
}

uint8_t lora_network_connection_processing(){
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	if(lr_nw_connect_mode != LORA_STATUS_IDLE || lr_nw_disconnect_mode != LORA_STATUS_IDLE){
 8002050:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <lora_network_connection_processing+0x24>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d103      	bne.n	8002060 <lora_network_connection_processing+0x14>
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <lora_network_connection_processing+0x28>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <lora_network_connection_processing+0x18>
		return 1;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <lora_network_connection_processing+0x1a>
	}
	return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	200008a6 	.word	0x200008a6
 8002074:	200008a7 	.word	0x200008a7

08002078 <lora_network_init>:

void lora_network_init(uint8_t node_quantity){
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af02      	add	r7, sp, #8
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	bsp_lora_init();
 8002082:	f7ff fbbd 	bl	8001800 <bsp_lora_init>
	lr_nw_node_quantity = node_quantity;
 8002086:	4a5e      	ldr	r2, [pc, #376]	@ (8002200 <lora_network_init+0x188>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	7013      	strb	r3, [r2, #0]
	STM_LOG("node numbers: %d\n", lr_nw_node_quantity, 17);
 800208c:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <lora_network_init+0x188>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2211      	movs	r2, #17
 8002092:	4619      	mov	r1, r3
 8002094:	485b      	ldr	r0, [pc, #364]	@ (8002204 <lora_network_init+0x18c>)
 8002096:	f7ff fb47 	bl	8001728 <STM_LOG>

	for(int i = 0; i < lr_nw_node_quantity; i++){
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e02a      	b.n	80020f6 <lora_network_init+0x7e>
		NODE_DEVICE[i].id = i + 1;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2d8      	uxtb	r0, r3
 80020a8:	4957      	ldr	r1, [pc, #348]	@ (8002208 <lora_network_init+0x190>)
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	015b      	lsls	r3, r3, #5
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	4602      	mov	r2, r0
 80020ba:	701a      	strb	r2, [r3, #0]
		NODE_DEVICE[i].class = NODE_DEVICE_CLASS[i];
 80020bc:	4a53      	ldr	r2, [pc, #332]	@ (800220c <lora_network_init+0x194>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	7818      	ldrb	r0, [r3, #0]
 80020c4:	4950      	ldr	r1, [pc, #320]	@ (8002208 <lora_network_init+0x190>)
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	3301      	adds	r3, #1
 80020d6:	4602      	mov	r2, r0
 80020d8:	701a      	strb	r2, [r3, #0]
		NODE_DEVICE[i].connected = 0;
 80020da:	494b      	ldr	r1, [pc, #300]	@ (8002208 <lora_network_init+0x190>)
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	3302      	adds	r3, #2
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < lr_nw_node_quantity; i++){
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b42      	ldr	r3, [pc, #264]	@ (8002200 <lora_network_init+0x188>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4293      	cmp	r3, r2
 8002100:	dbce      	blt.n	80020a0 <lora_network_init+0x28>
	}

	spi_mutex = xSemaphoreCreateMutex();
 8002102:	2001      	movs	r0, #1
 8002104:	f00b fa97 	bl	800d636 <xQueueCreateMutex>
 8002108:	4603      	mov	r3, r0
 800210a:	4a41      	ldr	r2, [pc, #260]	@ (8002210 <lora_network_init+0x198>)
 800210c:	6013      	str	r3, [r2, #0]
	usb_mutex = xSemaphoreCreateMutex();
 800210e:	2001      	movs	r0, #1
 8002110:	f00b fa91 	bl	800d636 <xQueueCreateMutex>
 8002114:	4603      	mov	r3, r0
 8002116:	4a3f      	ldr	r2, [pc, #252]	@ (8002214 <lora_network_init+0x19c>)
 8002118:	6013      	str	r3, [r2, #0]
	last_lora_send_packet_counting_semaphore = xSemaphoreCreateCounting(NUMBER_OF_LAST_LORA_SEND_PACKET, 0);
 800211a:	2100      	movs	r1, #0
 800211c:	2003      	movs	r0, #3
 800211e:	f00b faa2 	bl	800d666 <xQueueCreateCountingSemaphore>
 8002122:	4603      	mov	r3, r0
 8002124:	4a3c      	ldr	r2, [pc, #240]	@ (8002218 <lora_network_init+0x1a0>)
 8002126:	6013      	str	r3, [r2, #0]

	xTaskCreate(lora_network_connect_to_all_nodes_task, "connect_all_nodes", 2048, NULL, 5, &connect_to_all_nodes_task_handle);
 8002128:	4b3c      	ldr	r3, [pc, #240]	@ (800221c <lora_network_init+0x1a4>)
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	2305      	movs	r3, #5
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2300      	movs	r3, #0
 8002132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002136:	493a      	ldr	r1, [pc, #232]	@ (8002220 <lora_network_init+0x1a8>)
 8002138:	483a      	ldr	r0, [pc, #232]	@ (8002224 <lora_network_init+0x1ac>)
 800213a:	f00c f8f1 	bl	800e320 <xTaskCreate>
	xTaskCreate(lora_network_disconnect_to_all_nodes_task, "disconnect_all_nodes", 2048, NULL, 5, &disconnect_to_all_nodes_task_handle);
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <lora_network_init+0x1b0>)
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2305      	movs	r3, #5
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800214c:	4937      	ldr	r1, [pc, #220]	@ (800222c <lora_network_init+0x1b4>)
 800214e:	4838      	ldr	r0, [pc, #224]	@ (8002230 <lora_network_init+0x1b8>)
 8002150:	f00c f8e6 	bl	800e320 <xTaskCreate>
	xTaskCreate(lora_network_send_read_request_to_all_nodes_task, "send_request_all_nodes", 4096, NULL, 3, &send_read_request_to_all_nodes_task_handle);
 8002154:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <lora_network_init+0x1bc>)
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	2303      	movs	r3, #3
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2300      	movs	r3, #0
 800215e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002162:	4935      	ldr	r1, [pc, #212]	@ (8002238 <lora_network_init+0x1c0>)
 8002164:	4835      	ldr	r0, [pc, #212]	@ (800223c <lora_network_init+0x1c4>)
 8002166:	f00c f8db 	bl	800e320 <xTaskCreate>
	//xTaskCreate(lora_network_handle_last_lora_send_packets_task, "handle_last_packets", 512, NULL, 4, &handle_last_lora_send_packets_handle);
	xTaskCreate(lora_network_response_warning_nodes_task, "warning_response", 512, NULL, 6, &response_warning_nodes_task_handle);
 800216a:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <lora_network_init+0x1c8>)
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2306      	movs	r3, #6
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002178:	4932      	ldr	r1, [pc, #200]	@ (8002244 <lora_network_init+0x1cc>)
 800217a:	4833      	ldr	r0, [pc, #204]	@ (8002248 <lora_network_init+0x1d0>)
 800217c:	f00c f8d0 	bl	800e320 <xTaskCreate>
	xTaskCreate(pc_user_send_data_to_pc_task, "pc_send_data", 512, NULL, 6, &send_data_to_pc_task_handle);
 8002180:	4b32      	ldr	r3, [pc, #200]	@ (800224c <lora_network_init+0x1d4>)
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2306      	movs	r3, #6
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2300      	movs	r3, #0
 800218a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800218e:	4930      	ldr	r1, [pc, #192]	@ (8002250 <lora_network_init+0x1d8>)
 8002190:	4830      	ldr	r0, [pc, #192]	@ (8002254 <lora_network_init+0x1dc>)
 8002192:	f00c f8c5 	bl	800e320 <xTaskCreate>

	all_connect_queue = xQueueCreate(3, sizeof(connection_task_notification_value_t));
 8002196:	2200      	movs	r2, #0
 8002198:	2103      	movs	r1, #3
 800219a:	2003      	movs	r0, #3
 800219c:	f00b f9d7 	bl	800d54e <xQueueGenericCreate>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002258 <lora_network_init+0x1e0>)
 80021a4:	6013      	str	r3, [r2, #0]
	all_disconnect_queue = xQueueCreate(3, sizeof(connection_task_notification_value_t));
 80021a6:	2200      	movs	r2, #0
 80021a8:	2103      	movs	r1, #3
 80021aa:	2003      	movs	r0, #3
 80021ac:	f00b f9cf 	bl	800d54e <xQueueGenericCreate>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a2a      	ldr	r2, [pc, #168]	@ (800225c <lora_network_init+0x1e4>)
 80021b4:	6013      	str	r3, [r2, #0]
	send_request_queue = xQueueCreate(3, sizeof(connection_task_notification_value_t));
 80021b6:	2200      	movs	r2, #0
 80021b8:	2103      	movs	r1, #3
 80021ba:	2003      	movs	r0, #3
 80021bc:	f00b f9c7 	bl	800d54e <xQueueGenericCreate>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a27      	ldr	r2, [pc, #156]	@ (8002260 <lora_network_init+0x1e8>)
 80021c4:	6013      	str	r3, [r2, #0]
	warning_queue = xQueueCreate(3, sizeof(connection_task_notification_value_t));
 80021c6:	2200      	movs	r2, #0
 80021c8:	2103      	movs	r1, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	f00b f9bf 	bl	800d54e <xQueueGenericCreate>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <lora_network_init+0x1ec>)
 80021d4:	6013      	str	r3, [r2, #0]
	pc_send_queue = xQueueCreate(3, sizeof(pc_send_queue_t));
 80021d6:	2200      	movs	r2, #0
 80021d8:	212c      	movs	r1, #44	@ 0x2c
 80021da:	2003      	movs	r0, #3
 80021dc:	f00b f9b7 	bl	800d54e <xQueueGenericCreate>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a21      	ldr	r2, [pc, #132]	@ (8002268 <lora_network_init+0x1f0>)
 80021e4:	6013      	str	r3, [r2, #0]


	lr_nw_connect_mode = LORA_STATUS_IDLE;
 80021e6:	4b21      	ldr	r3, [pc, #132]	@ (800226c <lora_network_init+0x1f4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
	lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 80021ec:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <lora_network_init+0x1f8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim4);
 80021f2:	4820      	ldr	r0, [pc, #128]	@ (8002274 <lora_network_init+0x1fc>)
 80021f4:	f006 fcd2 	bl	8008b9c <HAL_TIM_Base_Start_IT>
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200008a0 	.word	0x200008a0
 8002204:	08011670 	.word	0x08011670
 8002208:	200008c0 	.word	0x200008c0
 800220c:	200008b8 	.word	0x200008b8
 8002210:	200018ac 	.word	0x200018ac
 8002214:	200018b0 	.word	0x200018b0
 8002218:	200018b4 	.word	0x200018b4
 800221c:	20001878 	.word	0x20001878
 8002220:	08011684 	.word	0x08011684
 8002224:	08002acd 	.word	0x08002acd
 8002228:	2000187c 	.word	0x2000187c
 800222c:	08011698 	.word	0x08011698
 8002230:	080024ed 	.word	0x080024ed
 8002234:	20001880 	.word	0x20001880
 8002238:	080116b0 	.word	0x080116b0
 800223c:	08003029 	.word	0x08003029
 8002240:	20001884 	.word	0x20001884
 8002244:	080116c8 	.word	0x080116c8
 8002248:	08003635 	.word	0x08003635
 800224c:	20001888 	.word	0x20001888
 8002250:	080116dc 	.word	0x080116dc
 8002254:	080023e5 	.word	0x080023e5
 8002258:	20001898 	.word	0x20001898
 800225c:	2000189c 	.word	0x2000189c
 8002260:	200018a0 	.word	0x200018a0
 8002264:	200018a4 	.word	0x200018a4
 8002268:	200018a8 	.word	0x200018a8
 800226c:	200008a6 	.word	0x200008a6
 8002270:	200008a7 	.word	0x200008a7
 8002274:	20001a40 	.word	0x20001a40

08002278 <lora_network_start_connect_timer>:

void lora_network_start_connect_timer(){
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	lr_nw_connect_timer_enable = 1;
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <lora_network_start_connect_timer+0x1c>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
	lr_nw_connect_timer_count = 0;
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <lora_network_start_connect_timer+0x20>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	200008a8 	.word	0x200008a8
 8002298:	200008ac 	.word	0x200008ac

0800229c <lora_network_stop_connect_timer>:

void lora_network_stop_connect_timer(){
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
	lr_nw_connect_timer_enable = 0;
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <lora_network_stop_connect_timer+0x1c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
	lr_nw_connect_timer_count = 0;
 80022a6:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <lora_network_stop_connect_timer+0x20>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200008a8 	.word	0x200008a8
 80022bc:	200008ac 	.word	0x200008ac

080022c0 <lora_network_start_disconnect_timer>:

void lora_network_start_disconnect_timer(){
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	lr_nw_disconnect_timer_enable = 1;
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <lora_network_start_disconnect_timer+0x1c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
	lr_nw_disconnect_timer_count = 0;
 80022ca:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <lora_network_start_disconnect_timer+0x20>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200008a9 	.word	0x200008a9
 80022e0:	200008b0 	.word	0x200008b0

080022e4 <lora_network_stop_disconnect_timer>:

void lora_network_stop_disconnect_timer(){
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	lr_nw_disconnect_timer_enable = 0;
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <lora_network_stop_disconnect_timer+0x1c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
	lr_nw_disconnect_timer_count = 0;
 80022ee:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <lora_network_stop_disconnect_timer+0x20>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200008a9 	.word	0x200008a9
 8002304:	200008b0 	.word	0x200008b0

08002308 <lora_network_start_read_request_timer>:

void lora_network_start_read_request_timer(){
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
	lr_nw_read_request_timer_enable = 1;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <lora_network_start_read_request_timer+0x1c>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
	lr_nw_read_request_timer_count = 0;
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <lora_network_start_read_request_timer+0x20>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200008aa 	.word	0x200008aa
 8002328:	200008b4 	.word	0x200008b4

0800232c <lora_network_stop_read_request_timer>:

void lora_network_stop_read_request_timer(){
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	lr_nw_read_request_timer_enable = 0;
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <lora_network_stop_read_request_timer+0x1c>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
	lr_nw_read_request_timer_count = 0;
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <lora_network_stop_read_request_timer+0x20>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200008aa 	.word	0x200008aa
 800234c:	200008b4 	.word	0x200008b4

08002350 <pc_user_ack_response>:

void pc_user_ack_response(){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	buffer[0] = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	713b      	strb	r3, [r7, #4]
	buffer[1] = PC_CMD_ACK;
 800235a:	2305      	movs	r3, #5
 800235c:	717b      	strb	r3, [r7, #5]
	CDC_Transmit_FS(buffer, 2);
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f00d ffca 	bl	80102fc <CDC_Transmit_FS>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <pc_user_ack_response_connected_node_quantity>:

void pc_user_ack_response_connected_node_quantity(){
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	@ 0x30
 8002374:	af00      	add	r7, sp, #0
		buffer[i + 3] = CONNECTED_NODE[i].id;
	}
	CDC_Transmit_FS(buffer, lr_nw_connected_node_quantity + 3);*/
	//xSemaphoreGive(usb_mutex);
	pc_send_queue_t NotificationValue;
	NotificationValue.NotificationValue = PC_SEND_CONNECTED_NODE_QUANTITY;
 8002376:	230a      	movs	r3, #10
 8002378:	713b      	strb	r3, [r7, #4]
	xQueueSend(pc_send_queue, &NotificationValue, portMAX_DELAY);
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <pc_user_ack_response_connected_node_quantity+0x24>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	1d39      	adds	r1, r7, #4
 8002380:	2300      	movs	r3, #0
 8002382:	f04f 32ff 	mov.w	r2, #4294967295
 8002386:	f00b f9a3 	bl	800d6d0 <xQueueGenericSend>
}
 800238a:	bf00      	nop
 800238c:	3730      	adds	r7, #48	@ 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200018a8 	.word	0x200018a8

08002398 <pc_user_send_node_data_to_pc>:

void pc_user_send_node_data_to_pc(uint8_t len, uint8_t node_id, uint8_t *data){
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	@ 0x38
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	603a      	str	r2, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	460b      	mov	r3, r1
 80023a6:	71bb      	strb	r3, [r7, #6]

	memcpy((buffer + 3), data, len);
	CDC_Transmit_FS(buffer, len + 3);
	xSemaphoreGive(usb_mutex);*/
	pc_send_queue_t NotificationValue;
	NotificationValue.NotificationValue = PC_SEND_NODE_DATA;
 80023a8:	230b      	movs	r3, #11
 80023aa:	733b      	strb	r3, [r7, #12]
	NotificationValue.usb_data.node_id = node_id;
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	73fb      	strb	r3, [r7, #15]
	NotificationValue.usb_data.len = len;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	737b      	strb	r3, [r7, #13]
	memcpy(NotificationValue.usb_data.data, data, len);
 80023b4:	79fa      	ldrb	r2, [r7, #7]
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	3304      	adds	r3, #4
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f00e fd10 	bl	8010de4 <memcpy>
	xQueueSend(pc_send_queue, &NotificationValue, portMAX_DELAY);
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <pc_user_send_node_data_to_pc+0x48>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	f107 010c 	add.w	r1, r7, #12
 80023cc:	2300      	movs	r3, #0
 80023ce:	f04f 32ff 	mov.w	r2, #4294967295
 80023d2:	f00b f97d 	bl	800d6d0 <xQueueGenericSend>
}
 80023d6:	bf00      	nop
 80023d8:	3738      	adds	r7, #56	@ 0x38
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200018a8 	.word	0x200018a8

080023e4 <pc_user_send_data_to_pc_task>:

void pc_user_send_data_to_pc_task(void *param){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0a0      	sub	sp, #128	@ 0x80
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	pc_send_queue_t NotificationValue;
	while(1){
		if(xQueueReceive(pc_send_queue, &NotificationValue, portMAX_DELAY)){
 80023ec:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <pc_user_send_data_to_pc_task+0xf4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	4618      	mov	r0, r3
 80023fa:	f00b fb99 	bl	800db30 <xQueueReceive>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f3      	beq.n	80023ec <pc_user_send_data_to_pc_task+0x8>
			STM_LOG("send data to pc\n", 0, 16);
 8002404:	2210      	movs	r2, #16
 8002406:	2100      	movs	r1, #0
 8002408:	4834      	ldr	r0, [pc, #208]	@ (80024dc <pc_user_send_data_to_pc_task+0xf8>)
 800240a:	f7ff f98d 	bl	8001728 <STM_LOG>
			if(NotificationValue.NotificationValue == PC_SEND_CONNECTED_NODE_QUANTITY){
 800240e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002412:	2b0a      	cmp	r3, #10
 8002414:	d136      	bne.n	8002484 <pc_user_send_data_to_pc_task+0xa0>
				uint8_t buffer[20];
				buffer[0] = lr_nw_connected_node_quantity;
 8002416:	4b32      	ldr	r3, [pc, #200]	@ (80024e0 <pc_user_send_data_to_pc_task+0xfc>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				buffer[1] = PC_CMD_RESPONSE_CONNECTED_NODE_QUANTITY;
 800241e:	2306      	movs	r3, #6
 8002420:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				buffer[2] = lr_nw_connected_node_quantity;
 8002424:	4b2e      	ldr	r3, [pc, #184]	@ (80024e0 <pc_user_send_data_to_pc_task+0xfc>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
				for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 800242c:	2300      	movs	r3, #0
 800242e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002432:	e016      	b.n	8002462 <pc_user_send_data_to_pc_task+0x7e>
					buffer[i + 3] = CONNECTED_NODE[i].id;
 8002434:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8002438:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800243c:	1cd9      	adds	r1, r3, #3
 800243e:	4829      	ldr	r0, [pc, #164]	@ (80024e4 <pc_user_send_data_to_pc_task+0x100>)
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	4403      	add	r3, r0
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	f101 0380 	add.w	r3, r1, #128	@ 0x80
 8002452:	443b      	add	r3, r7
 8002454:	f803 2c44 	strb.w	r2, [r3, #-68]
				for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8002458:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800245c:	3301      	adds	r3, #1
 800245e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002462:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <pc_user_send_data_to_pc_task+0xfc>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800246a:	429a      	cmp	r2, r3
 800246c:	d3e2      	bcc.n	8002434 <pc_user_send_data_to_pc_task+0x50>
				}
				CDC_Transmit_FS(buffer, lr_nw_connected_node_quantity + 3);
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <pc_user_send_data_to_pc_task+0xfc>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3303      	adds	r3, #3
 8002474:	b29a      	uxth	r2, r3
 8002476:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f00d ff3d 	bl	80102fc <CDC_Transmit_FS>
 8002482:	e7b3      	b.n	80023ec <pc_user_send_data_to_pc_task+0x8>
			}
			else if(NotificationValue.NotificationValue == PC_SEND_NODE_DATA){
 8002484:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002488:	2b0b      	cmp	r3, #11
 800248a:	d1af      	bne.n	80023ec <pc_user_send_data_to_pc_task+0x8>
				uint8_t buffer[45];
				buffer[0] = NotificationValue.usb_data.len;
 800248c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8002490:	733b      	strb	r3, [r7, #12]
				buffer[1] = PC_CMD_SEND_NODE_DATA;
 8002492:	2307      	movs	r3, #7
 8002494:	737b      	strb	r3, [r7, #13]
				buffer[2] = NotificationValue.usb_data.node_id;
 8002496:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800249a:	73bb      	strb	r3, [r7, #14]

				memcpy(&buffer[3], NotificationValue.usb_data.data, NotificationValue.usb_data.len);
 800249c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80024a0:	461a      	mov	r2, r3
 80024a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024a6:	1d19      	adds	r1, r3, #4
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	3303      	adds	r3, #3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f00e fc98 	bl	8010de4 <memcpy>
				CDC_Transmit_FS(buffer, NotificationValue.usb_data.len + 3);
 80024b4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80024b8:	3303      	adds	r3, #3
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00d ff1a 	bl	80102fc <CDC_Transmit_FS>
				STM_LOG("Motor1 status: %2d\n", buffer[12], 17);
 80024c8:	7e3b      	ldrb	r3, [r7, #24]
 80024ca:	2211      	movs	r2, #17
 80024cc:	4619      	mov	r1, r3
 80024ce:	4806      	ldr	r0, [pc, #24]	@ (80024e8 <pc_user_send_data_to_pc_task+0x104>)
 80024d0:	f7ff f92a 	bl	8001728 <STM_LOG>
		if(xQueueReceive(pc_send_queue, &NotificationValue, portMAX_DELAY)){
 80024d4:	e78a      	b.n	80023ec <pc_user_send_data_to_pc_task+0x8>
 80024d6:	bf00      	nop
 80024d8:	200018a8 	.word	0x200018a8
 80024dc:	080116ec 	.word	0x080116ec
 80024e0:	200008a1 	.word	0x200008a1
 80024e4:	2000109c 	.word	0x2000109c
 80024e8:	08011700 	.word	0x08011700

080024ec <lora_network_disconnect_to_all_nodes_task>:
			}
		}
	}
}

void lora_network_disconnect_to_all_nodes_task(void *param){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b090      	sub	sp, #64	@ 0x40
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	//all_disconnect_timer = xTimerCreate("disconnect_all", pdMS_TO_TICKS(1000), pdTRUE, (void *)SW_TIMER_DISCONNECT_ALL, lora_network_timer_disconnect_task);
	//vTimerSetTimerID(all_disconnect_timer, (void *)SW_TIMER_DISCONNECT_ALL);

	while(1){
		if(xQueueReceive(all_disconnect_queue, &NotificationValue, portMAX_DELAY)){
 80024f4:	4bb7      	ldr	r3, [pc, #732]	@ (80027d4 <lora_network_disconnect_to_all_nodes_task+0x2e8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	4618      	mov	r0, r3
 8002502:	f00b fb15 	bl	800db30 <xQueueReceive>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f3      	beq.n	80024f4 <lora_network_disconnect_to_all_nodes_task+0x8>
			/* get spi key and enter to safe mode to avoid the situation when lora's data's conflicted */
			xSemaphoreTake(spi_mutex, portMAX_DELAY);
 800250c:	4bb2      	ldr	r3, [pc, #712]	@ (80027d8 <lora_network_disconnect_to_all_nodes_task+0x2ec>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f00b fbed 	bl	800dcf4 <xQueueSemaphoreTake>
			bsp_lora_enter_safe_mode();
 800251a:	f7ff f8d7 	bl	80016cc <bsp_lora_enter_safe_mode>
			bsp_pc_user_enter_safe_mode();
 800251e:	f7ff f8f5 	bl	800170c <bsp_pc_user_enter_safe_mode>
			lora_network_send_request_stop_scheduler();
 8002522:	f000 ff8d 	bl	8003440 <lora_network_send_request_stop_scheduler>

			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002526:	bf00      	nop
 8002528:	4bac      	ldr	r3, [pc, #688]	@ (80027dc <lora_network_disconnect_to_all_nodes_task+0x2f0>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4618      	mov	r0, r3
 800252e:	f006 f994 	bl	800885a <HAL_SPI_GetState>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d1f7      	bne.n	8002528 <lora_network_disconnect_to_all_nodes_task+0x3c>
			while(bsp_lora_check_cad() == 1);
 8002538:	bf00      	nop
 800253a:	f7ff f931 	bl	80017a0 <bsp_lora_check_cad>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d0fa      	beq.n	800253a <lora_network_disconnect_to_all_nodes_task+0x4e>
			bsp_lora_set_receive_mode();
 8002544:	f7ff f914 	bl	8001770 <bsp_lora_set_receive_mode>
			if(NotificationValue.cmd == STOP_ALL){
 8002548:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800254c:	2b02      	cmp	r3, #2
 800254e:	d14d      	bne.n	80025ec <lora_network_disconnect_to_all_nodes_task+0x100>
				while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity){
 8002550:	e005      	b.n	800255e <lora_network_disconnect_to_all_nodes_task+0x72>
					lr_nw_node_index1++;
 8002552:	4ba3      	ldr	r3, [pc, #652]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4ba1      	ldr	r3, [pc, #644]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 800255c:	701a      	strb	r2, [r3, #0]
				while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity){
 800255e:	4ba0      	ldr	r3, [pc, #640]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	499f      	ldr	r1, [pc, #636]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	440b      	add	r3, r1
 8002572:	3302      	adds	r3, #2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <lora_network_disconnect_to_all_nodes_task+0x9a>
 800257a:	4b99      	ldr	r3, [pc, #612]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	4b9a      	ldr	r3, [pc, #616]	@ (80027e8 <lora_network_disconnect_to_all_nodes_task+0x2fc>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3e5      	bcc.n	8002552 <lora_network_disconnect_to_all_nodes_task+0x66>
				}
				if(lr_nw_node_index1 < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index1].connected == 1){
 8002586:	4b96      	ldr	r3, [pc, #600]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	4b97      	ldr	r3, [pc, #604]	@ (80027e8 <lora_network_disconnect_to_all_nodes_task+0x2fc>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	f080 8241 	bcs.w	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
 8002594:	4b92      	ldr	r3, [pc, #584]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4992      	ldr	r1, [pc, #584]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	015b      	lsls	r3, r3, #5
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	3302      	adds	r3, #2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 8232 	bne.w	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
					HAL_UART_Transmit(&huart2, "Start disconnect\n", 18, 2000);
 80025b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80025b6:	2212      	movs	r2, #18
 80025b8:	498c      	ldr	r1, [pc, #560]	@ (80027ec <lora_network_disconnect_to_all_nodes_task+0x300>)
 80025ba:	488d      	ldr	r0, [pc, #564]	@ (80027f0 <lora_network_disconnect_to_all_nodes_task+0x304>)
 80025bc:	f006 ff56 	bl	800946c <HAL_UART_Transmit>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, 0, 0, 3);
 80025c0:	4b87      	ldr	r3, [pc, #540]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	015b      	lsls	r3, r3, #5
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	4a84      	ldr	r2, [pc, #528]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 80025d2:	1898      	adds	r0, r3, r2
 80025d4:	2303      	movs	r3, #3
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2300      	movs	r3, #0
 80025de:	2200      	movs	r2, #0
 80025e0:	2101      	movs	r1, #1
 80025e2:	f7ff fba5 	bl	8001d30 <bsp_lora_send_packet_to_node>
					//xTimerStart(all_disconnect_timer, 0);
					lora_network_start_disconnect_timer();
 80025e6:	f7ff fe6b 	bl	80022c0 <lora_network_start_disconnect_timer>
 80025ea:	e214      	b.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
				}
			}


			/* disconnect to specific device here */
			else if(NotificationValue.cmd == STOP_SPECIFIC){
 80025ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d15e      	bne.n	80026b2 <lora_network_disconnect_to_all_nodes_task+0x1c6>
				HAL_UART_Transmit(&huart2, "Stop specific\n", 16, 2000);
 80025f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80025f8:	2210      	movs	r2, #16
 80025fa:	497e      	ldr	r1, [pc, #504]	@ (80027f4 <lora_network_disconnect_to_all_nodes_task+0x308>)
 80025fc:	487c      	ldr	r0, [pc, #496]	@ (80027f0 <lora_network_disconnect_to_all_nodes_task+0x304>)
 80025fe:	f006 ff35 	bl	800946c <HAL_UART_Transmit>
				for(uint8_t i = 0; i < lr_nw_node_quantity; i++){
 8002602:	2300      	movs	r3, #0
 8002604:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002608:	e017      	b.n	800263a <lora_network_disconnect_to_all_nodes_task+0x14e>
					if(NODE_DEVICE[i].id == NotificationValue.node_id){
 800260a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800260e:	4975      	ldr	r1, [pc, #468]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	015b      	lsls	r3, r3, #5
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	440b      	add	r3, r1
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002622:	429a      	cmp	r2, r3
 8002624:	d104      	bne.n	8002630 <lora_network_disconnect_to_all_nodes_task+0x144>
						lr_nw_node_index1 = i;
 8002626:	4a6e      	ldr	r2, [pc, #440]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002628:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800262c:	7013      	strb	r3, [r2, #0]
						break;
 800262e:	e00a      	b.n	8002646 <lora_network_disconnect_to_all_nodes_task+0x15a>
				for(uint8_t i = 0; i < lr_nw_node_quantity; i++){
 8002630:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002634:	3301      	adds	r3, #1
 8002636:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800263a:	4b6b      	ldr	r3, [pc, #428]	@ (80027e8 <lora_network_disconnect_to_all_nodes_task+0x2fc>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002642:	429a      	cmp	r2, r3
 8002644:	d3e1      	bcc.n	800260a <lora_network_disconnect_to_all_nodes_task+0x11e>
					}
				}
				if(NODE_DEVICE[lr_nw_node_index1].connected == 1){
 8002646:	4b66      	ldr	r3, [pc, #408]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	4965      	ldr	r1, [pc, #404]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	015b      	lsls	r3, r3, #5
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	440b      	add	r3, r1
 800265a:	3302      	adds	r3, #2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d115      	bne.n	800268e <lora_network_disconnect_to_all_nodes_task+0x1a2>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, 0, 0, 3);
 8002662:	4b5f      	ldr	r3, [pc, #380]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	015b      	lsls	r3, r3, #5
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	4a5c      	ldr	r2, [pc, #368]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 8002674:	1898      	adds	r0, r3, r2
 8002676:	2303      	movs	r3, #3
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	2200      	movs	r2, #0
 8002682:	2101      	movs	r1, #1
 8002684:	f7ff fb54 	bl	8001d30 <bsp_lora_send_packet_to_node>
					//xTimerStart(all_disconnect_timer, 0);
					lora_network_start_disconnect_timer();
 8002688:	f7ff fe1a 	bl	80022c0 <lora_network_start_disconnect_timer>
 800268c:	e1c3      	b.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
				}
				else{
					HAL_UART_Transmit(&huart2, "Node's disconnected\n", 20, 2000);
 800268e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002692:	2214      	movs	r2, #20
 8002694:	4958      	ldr	r1, [pc, #352]	@ (80027f8 <lora_network_disconnect_to_all_nodes_task+0x30c>)
 8002696:	4856      	ldr	r0, [pc, #344]	@ (80027f0 <lora_network_disconnect_to_all_nodes_task+0x304>)
 8002698:	f006 fee8 	bl	800946c <HAL_UART_Transmit>
					lr_nw_node_index1 = 0;
 800269c:	4b50      	ldr	r3, [pc, #320]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]

					taskENTER_CRITICAL();
 80026a2:	f00d fa59 	bl	800fb58 <vPortEnterCritical>
					lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 80026a6:	4b55      	ldr	r3, [pc, #340]	@ (80027fc <lora_network_disconnect_to_all_nodes_task+0x310>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 80026ac:	f00d fa86 	bl	800fbbc <vPortExitCritical>
 80026b0:	e1b1      	b.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
				}
			}

			/* when receive ack cmd from the node that the gw is requesting to disconnect to */
			else if(NotificationValue.cmd == ACK){
 80026b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80026b6:	2b07      	cmp	r3, #7
 80026b8:	f040 80b6 	bne.w	8002828 <lora_network_disconnect_to_all_nodes_task+0x33c>
				//xQueueReset(all_connect_queue);
				uint8_t buf[30];
				//xTimerStop(all_disconnect_timer, 0);
				sprintf(buf, "Disconnect to node %d\n", lr_nw_node_index1 + 1);
 80026bc:	4b48      	ldr	r3, [pc, #288]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	494e      	ldr	r1, [pc, #312]	@ (8002800 <lora_network_disconnect_to_all_nodes_task+0x314>)
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00e fb27 	bl	8010d1c <siprintf>
				HAL_UART_Transmit(&huart2, buf, strlen(buf), 2000);
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fd84 	bl	80001e0 <strlen>
 80026d8:	4603      	mov	r3, r0
 80026da:	b29a      	uxth	r2, r3
 80026dc:	f107 0108 	add.w	r1, r7, #8
 80026e0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80026e4:	4842      	ldr	r0, [pc, #264]	@ (80027f0 <lora_network_disconnect_to_all_nodes_task+0x304>)
 80026e6:	f006 fec1 	bl	800946c <HAL_UART_Transmit>

				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT);
 80026ea:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	4a3a      	ldr	r2, [pc, #232]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 80026fc:	4413      	add	r3, r2
 80026fe:	2101      	movs	r1, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f991 	bl	8001a28 <bsp_lora_check_cmd_in_node_send_packets>
 8002706:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if(packet_index != -1){
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d00f      	beq.n	8002730 <lora_network_disconnect_to_all_nodes_task+0x244>
					bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], packet_index);
 8002710:	4b33      	ldr	r3, [pc, #204]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	015b      	lsls	r3, r3, #5
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	4a30      	ldr	r2, [pc, #192]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 8002722:	4413      	add	r3, r2
 8002724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f9f3 	bl	8001b16 <bsp_lora_remove_packet_from_node_send_packets>
				}

				if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_ALL){
 8002730:	4b32      	ldr	r3, [pc, #200]	@ (80027fc <lora_network_disconnect_to_all_nodes_task+0x310>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d167      	bne.n	8002808 <lora_network_disconnect_to_all_nodes_task+0x31c>
					do{
						lr_nw_node_index1++;
 8002738:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002742:	701a      	strb	r2, [r3, #0]
					}while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity);
 8002744:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4926      	ldr	r1, [pc, #152]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	015b      	lsls	r3, r3, #5
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	440b      	add	r3, r1
 8002758:	3302      	adds	r3, #2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <lora_network_disconnect_to_all_nodes_task+0x280>
 8002760:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <lora_network_disconnect_to_all_nodes_task+0x2fc>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d3e5      	bcc.n	8002738 <lora_network_disconnect_to_all_nodes_task+0x24c>

					if(lr_nw_node_index1 < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index1].connected == 1){
 800276c:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <lora_network_disconnect_to_all_nodes_task+0x2fc>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	f080 814e 	bcs.w	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4918      	ldr	r1, [pc, #96]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	015b      	lsls	r3, r3, #5
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	440b      	add	r3, r1
 800278e:	3302      	adds	r3, #2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 813f 	bne.w	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
						HAL_UART_Transmit(&huart2, "Disconnect sucessfully\n", 23, 2000);
 8002798:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800279c:	2217      	movs	r2, #23
 800279e:	4919      	ldr	r1, [pc, #100]	@ (8002804 <lora_network_disconnect_to_all_nodes_task+0x318>)
 80027a0:	4813      	ldr	r0, [pc, #76]	@ (80027f0 <lora_network_disconnect_to_all_nodes_task+0x304>)
 80027a2:	f006 fe63 	bl	800946c <HAL_UART_Transmit>
						bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, 0, 0, 3);
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <lora_network_disconnect_to_all_nodes_task+0x2f4>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <lora_network_disconnect_to_all_nodes_task+0x2f8>)
 80027b8:	1898      	adds	r0, r3, r2
 80027ba:	2303      	movs	r3, #3
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	2300      	movs	r3, #0
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2300      	movs	r3, #0
 80027c4:	2200      	movs	r2, #0
 80027c6:	2101      	movs	r1, #1
 80027c8:	f7ff fab2 	bl	8001d30 <bsp_lora_send_packet_to_node>
						//xTimerStart(all_disconnect_timer, 0);
						lora_network_start_disconnect_timer();
 80027cc:	f7ff fd78 	bl	80022c0 <lora_network_start_disconnect_timer>
 80027d0:	e121      	b.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
 80027d2:	bf00      	nop
 80027d4:	2000189c 	.word	0x2000189c
 80027d8:	200018ac 	.word	0x200018ac
 80027dc:	2000016c 	.word	0x2000016c
 80027e0:	200008a4 	.word	0x200008a4
 80027e4:	200008c0 	.word	0x200008c0
 80027e8:	200008a0 	.word	0x200008a0
 80027ec:	08011714 	.word	0x08011714
 80027f0:	20001ad0 	.word	0x20001ad0
 80027f4:	08011728 	.word	0x08011728
 80027f8:	08011738 	.word	0x08011738
 80027fc:	200008a7 	.word	0x200008a7
 8002800:	08011750 	.word	0x08011750
 8002804:	08011768 	.word	0x08011768
					}
				}
				else if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_SPECIFIC){
 8002808:	4ba3      	ldr	r3, [pc, #652]	@ (8002a98 <lora_network_disconnect_to_all_nodes_task+0x5ac>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b04      	cmp	r3, #4
 800280e:	f040 8102 	bne.w	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
					lr_nw_node_index1 = 0;
 8002812:	4ba2      	ldr	r3, [pc, #648]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
					taskENTER_CRITICAL();
 8002818:	f00d f99e 	bl	800fb58 <vPortEnterCritical>
					lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 800281c:	4b9e      	ldr	r3, [pc, #632]	@ (8002a98 <lora_network_disconnect_to_all_nodes_task+0x5ac>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 8002822:	f00d f9cb 	bl	800fbbc <vPortExitCritical>
 8002826:	e0f6      	b.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
				}
			}

			/* receive nak or timeout */
			else if(NotificationValue.cmd == NAK || NotificationValue.cmd == TIMEOUT){
 8002828:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800282c:	2b08      	cmp	r3, #8
 800282e:	d004      	beq.n	800283a <lora_network_disconnect_to_all_nodes_task+0x34e>
 8002830:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002834:	2b09      	cmp	r3, #9
 8002836:	f040 80ee 	bne.w	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
				//xTimerStop(all_disconnect_timer, 0);
				STM_LOG("Timeout n%2d\n", (lr_nw_node_index1 + 1), 11);
 800283a:	4b98      	ldr	r3, [pc, #608]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	220b      	movs	r2, #11
 8002842:	4619      	mov	r1, r3
 8002844:	4896      	ldr	r0, [pc, #600]	@ (8002aa0 <lora_network_disconnect_to_all_nodes_task+0x5b4>)
 8002846:	f7fe ff6f 	bl	8001728 <STM_LOG>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT);
 800284a:	4b94      	ldr	r3, [pc, #592]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	015b      	lsls	r3, r3, #5
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	4a92      	ldr	r2, [pc, #584]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 800285c:	4413      	add	r3, r2
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f8e1 	bl	8001a28 <bsp_lora_check_cmd_in_node_send_packets>
 8002866:	6338      	str	r0, [r7, #48]	@ 0x30
				if(packet_index != -1){
 8002868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	f000 80d2 	beq.w	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
					if(NODE_DEVICE[lr_nw_node_index1].last_lora_send_packet[packet_index].ttl > 0 && NODE_DEVICE[lr_nw_node_index1].last_lora_send_packet[packet_index].responsed == 0){
 8002872:	4b8a      	ldr	r3, [pc, #552]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	488a      	ldr	r0, [pc, #552]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	461a      	mov	r2, r3
 800287e:	0052      	lsls	r2, r2, #1
 8002880:	441a      	add	r2, r3
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	1ad2      	subs	r2, r2, r3
 8002886:	460b      	mov	r3, r1
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	1a5b      	subs	r3, r3, r1
 8002890:	4413      	add	r3, r2
 8002892:	4403      	add	r3, r0
 8002894:	3308      	adds	r3, #8
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d041      	beq.n	8002920 <lora_network_disconnect_to_all_nodes_task+0x434>
 800289c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4880      	ldr	r0, [pc, #512]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 80028a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a6:	461a      	mov	r2, r3
 80028a8:	0052      	lsls	r2, r2, #1
 80028aa:	441a      	add	r2, r3
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	460b      	mov	r3, r1
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	015b      	lsls	r3, r3, #5
 80028b8:	1a5b      	subs	r3, r3, r1
 80028ba:	4413      	add	r3, r2
 80028bc:	4403      	add	r3, r0
 80028be:	3309      	adds	r3, #9
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d12c      	bne.n	8002920 <lora_network_disconnect_to_all_nodes_task+0x434>
						STM_LOG("Disconnect node %3d tout\n", lr_nw_node_index1 + 1, 26);
 80028c6:	4b75      	ldr	r3, [pc, #468]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	221a      	movs	r2, #26
 80028ce:	4619      	mov	r1, r3
 80028d0:	4875      	ldr	r0, [pc, #468]	@ (8002aa8 <lora_network_disconnect_to_all_nodes_task+0x5bc>)
 80028d2:	f7fe ff29 	bl	8001728 <STM_LOG>
						NODE_DEVICE[lr_nw_node_index1].error = 1;
 80028d6:	4b71      	ldr	r3, [pc, #452]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	4971      	ldr	r1, [pc, #452]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	015b      	lsls	r3, r3, #5
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	3304      	adds	r3, #4
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
						bsp_lora_resend_packet(&NODE_DEVICE[lr_nw_node_index1].last_lora_send_packet[packet_index]);
 80028f0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	461a      	mov	r2, r3
 80028fa:	0052      	lsls	r2, r2, #1
 80028fc:	441a      	add	r2, r3
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	1ad2      	subs	r2, r2, r3
 8002902:	460b      	mov	r3, r1
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	1a5b      	subs	r3, r3, r1
 800290c:	4413      	add	r3, r2
 800290e:	4a65      	ldr	r2, [pc, #404]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 8002910:	4413      	add	r3, r2
 8002912:	3305      	adds	r3, #5
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fb11 	bl	8001f3c <bsp_lora_resend_packet>
						//xTimerStart(all_disconnect_timer, 0);
						lora_network_start_disconnect_timer();
 800291a:	f7ff fcd1 	bl	80022c0 <lora_network_start_disconnect_timer>
 800291e:	e07a      	b.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>

					}
					else{
						STM_LOG("Can't disconnect node %3d\n", lr_nw_node_index1 + 1, 27);
 8002920:	4b5e      	ldr	r3, [pc, #376]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	221b      	movs	r2, #27
 8002928:	4619      	mov	r1, r3
 800292a:	4860      	ldr	r0, [pc, #384]	@ (8002aac <lora_network_disconnect_to_all_nodes_task+0x5c0>)
 800292c:	f7fe fefc 	bl	8001728 <STM_LOG>
						NODE_DEVICE[lr_nw_node_index1].error = 2;
 8002930:	4b5a      	ldr	r3, [pc, #360]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	495b      	ldr	r1, [pc, #364]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	015b      	lsls	r3, r3, #5
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	440b      	add	r3, r1
 8002944:	3304      	adds	r3, #4
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
						bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], packet_index);
 800294a:	4b54      	ldr	r3, [pc, #336]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	015b      	lsls	r3, r3, #5
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 800295c:	4413      	add	r3, r2
 800295e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff f8d6 	bl	8001b16 <bsp_lora_remove_packet_from_node_send_packets>

						if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_ALL){
 800296a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <lora_network_disconnect_to_all_nodes_task+0x5ac>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d143      	bne.n	80029fa <lora_network_disconnect_to_all_nodes_task+0x50e>
							do{
								lr_nw_node_index1++;
 8002972:	4b4a      	ldr	r3, [pc, #296]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b48      	ldr	r3, [pc, #288]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 800297c:	701a      	strb	r2, [r3, #0]
							}while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity);
 800297e:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	4947      	ldr	r1, [pc, #284]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	015b      	lsls	r3, r3, #5
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	440b      	add	r3, r1
 8002992:	3302      	adds	r3, #2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <lora_network_disconnect_to_all_nodes_task+0x4ba>
 800299a:	4b40      	ldr	r3, [pc, #256]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	4b44      	ldr	r3, [pc, #272]	@ (8002ab0 <lora_network_disconnect_to_all_nodes_task+0x5c4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d3e5      	bcc.n	8002972 <lora_network_disconnect_to_all_nodes_task+0x486>
							if(lr_nw_node_index1 < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index1].connected == 1){
 80029a6:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <lora_network_disconnect_to_all_nodes_task+0x5c4>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d231      	bcs.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
 80029b2:	4b3a      	ldr	r3, [pc, #232]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	493a      	ldr	r1, [pc, #232]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	3302      	adds	r3, #2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d123      	bne.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
								bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, NULL, 0, 3);
 80029ce:	4b33      	ldr	r3, [pc, #204]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	015b      	lsls	r3, r3, #5
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	4a31      	ldr	r2, [pc, #196]	@ (8002aa4 <lora_network_disconnect_to_all_nodes_task+0x5b8>)
 80029e0:	1898      	adds	r0, r3, r2
 80029e2:	2303      	movs	r3, #3
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	2300      	movs	r3, #0
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	2200      	movs	r2, #0
 80029ee:	2101      	movs	r1, #1
 80029f0:	f7ff f99e 	bl	8001d30 <bsp_lora_send_packet_to_node>
								//xTimerStart(all_disconnect_timer, 0);
								lora_network_start_disconnect_timer();
 80029f4:	f7ff fc64 	bl	80022c0 <lora_network_start_disconnect_timer>
 80029f8:	e00d      	b.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
							}
						}
						else if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_SPECIFIC){
 80029fa:	4b27      	ldr	r3, [pc, #156]	@ (8002a98 <lora_network_disconnect_to_all_nodes_task+0x5ac>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d109      	bne.n	8002a16 <lora_network_disconnect_to_all_nodes_task+0x52a>
							lr_nw_node_index1 = 0;
 8002a02:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
							taskENTER_CRITICAL();
 8002a08:	f00d f8a6 	bl	800fb58 <vPortEnterCritical>
							lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 8002a0c:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <lora_network_disconnect_to_all_nodes_task+0x5ac>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
							taskEXIT_CRITICAL();
 8002a12:	f00d f8d3 	bl	800fbbc <vPortExitCritical>
				}

			}


			if(lr_nw_node_index1 >= lr_nw_node_quantity){
 8002a16:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	4b25      	ldr	r3, [pc, #148]	@ (8002ab0 <lora_network_disconnect_to_all_nodes_task+0x5c4>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d310      	bcc.n	8002a44 <lora_network_disconnect_to_all_nodes_task+0x558>

				HAL_UART_Transmit(&huart2, "Empty nodes\n", 12, 2000);
 8002a22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a26:	220c      	movs	r2, #12
 8002a28:	4922      	ldr	r1, [pc, #136]	@ (8002ab4 <lora_network_disconnect_to_all_nodes_task+0x5c8>)
 8002a2a:	4823      	ldr	r0, [pc, #140]	@ (8002ab8 <lora_network_disconnect_to_all_nodes_task+0x5cc>)
 8002a2c:	f006 fd1e 	bl	800946c <HAL_UART_Transmit>
				lr_nw_node_index1 = 0;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <lora_network_disconnect_to_all_nodes_task+0x5b0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]

				taskENTER_CRITICAL();
 8002a36:	f00d f88f 	bl	800fb58 <vPortEnterCritical>
				lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 8002a3a:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <lora_network_disconnect_to_all_nodes_task+0x5ac>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
				taskEXIT_CRITICAL();
 8002a40:	f00d f8bc 	bl	800fbbc <vPortExitCritical>

			}

			bsp_pc_user_enter_safe_mode();
 8002a44:	f7fe fe62 	bl	800170c <bsp_pc_user_enter_safe_mode>

			//STM_LOG("node device: %d\n", lr_nw_node_index1 + 1, 14);
			if(lr_nw_disconnect_mode == LORA_STATUS_IDLE){
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <lora_network_disconnect_to_all_nodes_task+0x5ac>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10f      	bne.n	8002a70 <lora_network_disconnect_to_all_nodes_task+0x584>
				xQueueReset(send_request_queue);
 8002a50:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <lora_network_disconnect_to_all_nodes_task+0x5d0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00a fc92 	bl	800d380 <xQueueGenericReset>
				xQueueReset(all_disconnect_queue);
 8002a5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <lora_network_disconnect_to_all_nodes_task+0x5d4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f00a fc8c 	bl	800d380 <xQueueGenericReset>
				lora_network_send_request_setup_scheduler();
 8002a68:	f000 fd12 	bl	8003490 <lora_network_send_request_setup_scheduler>
				pc_user_ack_response_connected_node_quantity();
 8002a6c:	f7ff fc80 	bl	8002370 <pc_user_ack_response_connected_node_quantity>

			}

			/* exit safe mode */
			bsp_lora_exit_safe_mode();
 8002a70:	f7fe fe3c 	bl	80016ec <bsp_lora_exit_safe_mode>
			while (HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002a74:	bf00      	nop
 8002a76:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <lora_network_disconnect_to_all_nodes_task+0x5d8>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 feed 	bl	800885a <HAL_SPI_GetState>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d1f7      	bne.n	8002a76 <lora_network_disconnect_to_all_nodes_task+0x58a>
			xSemaphoreGive(spi_mutex);
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <lora_network_disconnect_to_all_nodes_task+0x5dc>)
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f00a fe1e 	bl	800d6d0 <xQueueGenericSend>
		if(xQueueReceive(all_disconnect_queue, &NotificationValue, portMAX_DELAY)){
 8002a94:	e52e      	b.n	80024f4 <lora_network_disconnect_to_all_nodes_task+0x8>
 8002a96:	bf00      	nop
 8002a98:	200008a7 	.word	0x200008a7
 8002a9c:	200008a4 	.word	0x200008a4
 8002aa0:	08011780 	.word	0x08011780
 8002aa4:	200008c0 	.word	0x200008c0
 8002aa8:	08011790 	.word	0x08011790
 8002aac:	080117ac 	.word	0x080117ac
 8002ab0:	200008a0 	.word	0x200008a0
 8002ab4:	080117c8 	.word	0x080117c8
 8002ab8:	20001ad0 	.word	0x20001ad0
 8002abc:	200018a0 	.word	0x200018a0
 8002ac0:	2000189c 	.word	0x2000189c
 8002ac4:	2000016c 	.word	0x2000016c
 8002ac8:	200018ac 	.word	0x200018ac

08002acc <lora_network_connect_to_all_nodes_task>:

	}
	//vTaskDelete(NULL);
}

void lora_network_connect_to_all_nodes_task(void *param){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	//all_connect_timer = xTimerCreate("connect_all", pdMS_TO_TICKS(1000), pdTRUE, 0, lora_network_timer_connect_task);
	//vTimerSetTimerID(all_connect_timer, (void *)SW_TIMER_CONNECT_ALL);

	while(1){
		if(xQueueReceive(all_connect_queue, &NotificationValue, portMAX_DELAY)){
 8002ad4:	4bab      	ldr	r3, [pc, #684]	@ (8002d84 <lora_network_connect_to_all_nodes_task+0x2b8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f107 0108 	add.w	r1, r7, #8
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00b f825 	bl	800db30 <xQueueReceive>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f3      	beq.n	8002ad4 <lora_network_connect_to_all_nodes_task+0x8>
			/* get spi key and enter to safe mode to avoid the situation when lora's data's conflicted */
			xSemaphoreTake(spi_mutex, portMAX_DELAY);
 8002aec:	4ba6      	ldr	r3, [pc, #664]	@ (8002d88 <lora_network_connect_to_all_nodes_task+0x2bc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	4618      	mov	r0, r3
 8002af6:	f00b f8fd 	bl	800dcf4 <xQueueSemaphoreTake>
			bsp_lora_enter_safe_mode();
 8002afa:	f7fe fde7 	bl	80016cc <bsp_lora_enter_safe_mode>
			bsp_pc_user_enter_safe_mode();
 8002afe:	f7fe fe05 	bl	800170c <bsp_pc_user_enter_safe_mode>
			lora_network_send_request_stop_scheduler();
 8002b02:	f000 fc9d 	bl	8003440 <lora_network_send_request_stop_scheduler>

			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002b06:	bf00      	nop
 8002b08:	4ba0      	ldr	r3, [pc, #640]	@ (8002d8c <lora_network_connect_to_all_nodes_task+0x2c0>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f005 fea4 	bl	800885a <HAL_SPI_GetState>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d1f7      	bne.n	8002b08 <lora_network_connect_to_all_nodes_task+0x3c>
			while(bsp_lora_check_cad() == 1);
 8002b18:	bf00      	nop
 8002b1a:	f7fe fe41 	bl	80017a0 <bsp_lora_check_cad>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d0fa      	beq.n	8002b1a <lora_network_connect_to_all_nodes_task+0x4e>
			bsp_lora_set_receive_mode();
 8002b24:	f7fe fe24 	bl	8001770 <bsp_lora_set_receive_mode>
			if(NotificationValue.cmd == START_ALL){
 8002b28:	7a3b      	ldrb	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d14d      	bne.n	8002bca <lora_network_connect_to_all_nodes_task+0xfe>
				while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity){
 8002b2e:	e005      	b.n	8002b3c <lora_network_connect_to_all_nodes_task+0x70>
					lr_nw_node_index++;
 8002b30:	4b97      	ldr	r3, [pc, #604]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b95      	ldr	r3, [pc, #596]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002b3a:	701a      	strb	r2, [r3, #0]
				while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity){
 8002b3c:	4b94      	ldr	r3, [pc, #592]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4994      	ldr	r1, [pc, #592]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3302      	adds	r3, #2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <lora_network_connect_to_all_nodes_task+0x98>
 8002b58:	4b8d      	ldr	r3, [pc, #564]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d98 <lora_network_connect_to_all_nodes_task+0x2cc>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3e5      	bcc.n	8002b30 <lora_network_connect_to_all_nodes_task+0x64>
				}
				if(NODE_DEVICE[lr_nw_node_index].connected == 0 && lr_nw_node_index < lr_nw_node_quantity){
 8002b64:	4b8a      	ldr	r3, [pc, #552]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	498a      	ldr	r1, [pc, #552]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	015b      	lsls	r3, r3, #5
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	3302      	adds	r3, #2
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 8209 	bne.w	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
 8002b82:	4b83      	ldr	r3, [pc, #524]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	4b84      	ldr	r3, [pc, #528]	@ (8002d98 <lora_network_connect_to_all_nodes_task+0x2cc>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	f080 8202 	bcs.w	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
					HAL_UART_Transmit(&huart2, "Start connect\n", 15, 2000);
 8002b90:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b94:	220f      	movs	r2, #15
 8002b96:	4981      	ldr	r1, [pc, #516]	@ (8002d9c <lora_network_connect_to_all_nodes_task+0x2d0>)
 8002b98:	4881      	ldr	r0, [pc, #516]	@ (8002da0 <lora_network_connect_to_all_nodes_task+0x2d4>)
 8002b9a:	f006 fc67 	bl	800946c <HAL_UART_Transmit>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 8002b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	015b      	lsls	r3, r3, #5
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	4a79      	ldr	r2, [pc, #484]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002bb0:	1898      	adds	r0, r3, r2
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f7ff f8b6 	bl	8001d30 <bsp_lora_send_packet_to_node>
					//xTimerStart(all_connect_timer, 10);
					lora_network_start_connect_timer();
 8002bc4:	f7ff fb58 	bl	8002278 <lora_network_start_connect_timer>
 8002bc8:	e1e4      	b.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
				}
			}
			/* connect to specific device here */
			else if(NotificationValue.cmd == START_SPECIFIC){
 8002bca:	7a3b      	ldrb	r3, [r7, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d159      	bne.n	8002c84 <lora_network_connect_to_all_nodes_task+0x1b8>
				HAL_UART_Transmit(&huart2, "Start specific\n", 16, 2000);
 8002bd0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	4973      	ldr	r1, [pc, #460]	@ (8002da4 <lora_network_connect_to_all_nodes_task+0x2d8>)
 8002bd8:	4871      	ldr	r0, [pc, #452]	@ (8002da0 <lora_network_connect_to_all_nodes_task+0x2d4>)
 8002bda:	f006 fc47 	bl	800946c <HAL_UART_Transmit>
				for(int i = 0; i < lr_nw_node_quantity; i++){
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e013      	b.n	8002c0c <lora_network_connect_to_all_nodes_task+0x140>
					if(NODE_DEVICE[i].id == NotificationValue.node_id){
 8002be4:	496b      	ldr	r1, [pc, #428]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	015b      	lsls	r3, r3, #5
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	7a7b      	ldrb	r3, [r7, #9]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d104      	bne.n	8002c06 <lora_network_connect_to_all_nodes_task+0x13a>
						lr_nw_node_index = i;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b63      	ldr	r3, [pc, #396]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002c02:	701a      	strb	r2, [r3, #0]
						break;
 8002c04:	e008      	b.n	8002c18 <lora_network_connect_to_all_nodes_task+0x14c>
				for(int i = 0; i < lr_nw_node_quantity; i++){
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	4b62      	ldr	r3, [pc, #392]	@ (8002d98 <lora_network_connect_to_all_nodes_task+0x2cc>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4293      	cmp	r3, r2
 8002c16:	dbe5      	blt.n	8002be4 <lora_network_connect_to_all_nodes_task+0x118>
					}
				}
				if(NODE_DEVICE[lr_nw_node_index].connected == 0){
 8002c18:	4b5d      	ldr	r3, [pc, #372]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	495d      	ldr	r1, [pc, #372]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	015b      	lsls	r3, r3, #5
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d115      	bne.n	8002c60 <lora_network_connect_to_all_nodes_task+0x194>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 8002c34:	4b56      	ldr	r3, [pc, #344]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	015b      	lsls	r3, r3, #5
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	4a53      	ldr	r2, [pc, #332]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002c46:	1898      	adds	r0, r3, r2
 8002c48:	2303      	movs	r3, #3
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2300      	movs	r3, #0
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	f7ff f86b 	bl	8001d30 <bsp_lora_send_packet_to_node>
					//xTimerStart(all_connect_timer, 0);
					lora_network_start_connect_timer();
 8002c5a:	f7ff fb0d 	bl	8002278 <lora_network_start_connect_timer>
 8002c5e:	e199      	b.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
				}
				else{
					HAL_UART_Transmit(&huart2, "Node's connected\n", 17, 2000);
 8002c60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002c64:	2211      	movs	r2, #17
 8002c66:	4950      	ldr	r1, [pc, #320]	@ (8002da8 <lora_network_connect_to_all_nodes_task+0x2dc>)
 8002c68:	484d      	ldr	r0, [pc, #308]	@ (8002da0 <lora_network_connect_to_all_nodes_task+0x2d4>)
 8002c6a:	f006 fbff 	bl	800946c <HAL_UART_Transmit>
					lr_nw_node_index = 0;
 8002c6e:	4b48      	ldr	r3, [pc, #288]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]

					taskENTER_CRITICAL();
 8002c74:	f00c ff70 	bl	800fb58 <vPortEnterCritical>
					lr_nw_connect_mode = LORA_STATUS_IDLE;
 8002c78:	4b4c      	ldr	r3, [pc, #304]	@ (8002dac <lora_network_connect_to_all_nodes_task+0x2e0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 8002c7e:	f00c ff9d 	bl	800fbbc <vPortExitCritical>
 8002c82:	e187      	b.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
				}
			}

			/* when receive ack cmd from the node that the gw is requesting to connect to */
			else if(NotificationValue.cmd == ACK){
 8002c84:	7a3b      	ldrb	r3, [r7, #8]
 8002c86:	2b07      	cmp	r3, #7
 8002c88:	f040 80a6 	bne.w	8002dd8 <lora_network_connect_to_all_nodes_task+0x30c>
				//xTimerStop(all_connect_timer, 0);
				STM_LOG("Connect to node %2d\n", lr_nw_node_index + 1, 20);
 8002c8c:	4b40      	ldr	r3, [pc, #256]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	2214      	movs	r2, #20
 8002c94:	4619      	mov	r1, r3
 8002c96:	4846      	ldr	r0, [pc, #280]	@ (8002db0 <lora_network_connect_to_all_nodes_task+0x2e4>)
 8002c98:	f7fe fd46 	bl	8001728 <STM_LOG>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT);
 8002c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	015b      	lsls	r3, r3, #5
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	4a39      	ldr	r2, [pc, #228]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe feb8 	bl	8001a28 <bsp_lora_check_cmd_in_node_send_packets>
 8002cb8:	60f8      	str	r0, [r7, #12]
				if(packet_index != -1){
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d00f      	beq.n	8002ce2 <lora_network_connect_to_all_nodes_task+0x216>
					bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index], packet_index);
 8002cc2:	4b33      	ldr	r3, [pc, #204]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	015b      	lsls	r3, r3, #5
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	4a30      	ldr	r2, [pc, #192]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe ff1a 	bl	8001b16 <bsp_lora_remove_packet_from_node_send_packets>
				}

				if(lr_nw_connect_mode == LORA_CONNECT_MODE_ALL){
 8002ce2:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <lora_network_connect_to_all_nodes_task+0x2e0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d166      	bne.n	8002db8 <lora_network_connect_to_all_nodes_task+0x2ec>
					do{
						lr_nw_node_index++;
 8002cea:	4b29      	ldr	r3, [pc, #164]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002cf4:	701a      	strb	r2, [r3, #0]
					}while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity);
 8002cf6:	4b26      	ldr	r3, [pc, #152]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4925      	ldr	r1, [pc, #148]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	015b      	lsls	r3, r3, #5
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <lora_network_connect_to_all_nodes_task+0x252>
 8002d12:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <lora_network_connect_to_all_nodes_task+0x2cc>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d3e5      	bcc.n	8002cea <lora_network_connect_to_all_nodes_task+0x21e>

					if(lr_nw_node_index < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index].connected == 0){
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	4b1d      	ldr	r3, [pc, #116]	@ (8002d98 <lora_network_connect_to_all_nodes_task+0x2cc>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	f080 8134 	bcs.w	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
 8002d2c:	4b18      	ldr	r3, [pc, #96]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4918      	ldr	r1, [pc, #96]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3302      	adds	r3, #2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 8125 	bne.w	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
						HAL_UART_Transmit(&huart2, "Connect sucessfully\n", 20, 2000);
 8002d4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d4e:	2214      	movs	r2, #20
 8002d50:	4918      	ldr	r1, [pc, #96]	@ (8002db4 <lora_network_connect_to_all_nodes_task+0x2e8>)
 8002d52:	4813      	ldr	r0, [pc, #76]	@ (8002da0 <lora_network_connect_to_all_nodes_task+0x2d4>)
 8002d54:	f006 fb8a 	bl	800946c <HAL_UART_Transmit>
						bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 8002d58:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <lora_network_connect_to_all_nodes_task+0x2c4>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	015b      	lsls	r3, r3, #5
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <lora_network_connect_to_all_nodes_task+0x2c8>)
 8002d6a:	1898      	adds	r0, r3, r2
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	2300      	movs	r3, #0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	2200      	movs	r2, #0
 8002d78:	2100      	movs	r1, #0
 8002d7a:	f7fe ffd9 	bl	8001d30 <bsp_lora_send_packet_to_node>
						//xTimerStart(all_connect_timer, 0);
						lora_network_start_connect_timer();
 8002d7e:	f7ff fa7b 	bl	8002278 <lora_network_start_connect_timer>
 8002d82:	e107      	b.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
 8002d84:	20001898 	.word	0x20001898
 8002d88:	200018ac 	.word	0x200018ac
 8002d8c:	2000016c 	.word	0x2000016c
 8002d90:	200008a3 	.word	0x200008a3
 8002d94:	200008c0 	.word	0x200008c0
 8002d98:	200008a0 	.word	0x200008a0
 8002d9c:	080117d8 	.word	0x080117d8
 8002da0:	20001ad0 	.word	0x20001ad0
 8002da4:	080117e8 	.word	0x080117e8
 8002da8:	080117f8 	.word	0x080117f8
 8002dac:	200008a6 	.word	0x200008a6
 8002db0:	0801180c 	.word	0x0801180c
 8002db4:	08011824 	.word	0x08011824
					}
				}
				else if(lr_nw_connect_mode == LORA_CONNECT_MODE_SPECIFIC){
 8002db8:	4b90      	ldr	r3, [pc, #576]	@ (8002ffc <lora_network_connect_to_all_nodes_task+0x530>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	f040 80e9 	bne.w	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
					lr_nw_node_index = 0;
 8002dc2:	4b8f      	ldr	r3, [pc, #572]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]

					taskENTER_CRITICAL();
 8002dc8:	f00c fec6 	bl	800fb58 <vPortEnterCritical>
					lr_nw_connect_mode = LORA_STATUS_IDLE;
 8002dcc:	4b8b      	ldr	r3, [pc, #556]	@ (8002ffc <lora_network_connect_to_all_nodes_task+0x530>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 8002dd2:	f00c fef3 	bl	800fbbc <vPortExitCritical>
 8002dd6:	e0dd      	b.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
				}

			}

			/* receive nak or timeout */
			else if(NotificationValue.cmd == NAK || NotificationValue.cmd == TIMEOUT){
 8002dd8:	7a3b      	ldrb	r3, [r7, #8]
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d003      	beq.n	8002de6 <lora_network_connect_to_all_nodes_task+0x31a>
 8002dde:	7a3b      	ldrb	r3, [r7, #8]
 8002de0:	2b09      	cmp	r3, #9
 8002de2:	f040 80d7 	bne.w	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
				//xTimerStop(all_connect_timer, 0);
				HAL_UART_Transmit(&huart2, "Connect timeout\n", 16, 2000);
 8002de6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002dea:	2210      	movs	r2, #16
 8002dec:	4985      	ldr	r1, [pc, #532]	@ (8003004 <lora_network_connect_to_all_nodes_task+0x538>)
 8002dee:	4886      	ldr	r0, [pc, #536]	@ (8003008 <lora_network_connect_to_all_nodes_task+0x53c>)
 8002df0:	f006 fb3c 	bl	800946c <HAL_UART_Transmit>
				STM_LOG("Connect timeout n%2d\n", lr_nw_node_index, 20);
 8002df4:	4b82      	ldr	r3, [pc, #520]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2214      	movs	r2, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4883      	ldr	r0, [pc, #524]	@ (800300c <lora_network_connect_to_all_nodes_task+0x540>)
 8002dfe:	f7fe fc93 	bl	8001728 <STM_LOG>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT);
 8002e02:	4b7f      	ldr	r3, [pc, #508]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	015b      	lsls	r3, r3, #5
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	4a7f      	ldr	r2, [pc, #508]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002e14:	4413      	add	r3, r2
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fe05 	bl	8001a28 <bsp_lora_check_cmd_in_node_send_packets>
 8002e1e:	6138      	str	r0, [r7, #16]
				if(packet_index != -1){
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	f000 80b5 	beq.w	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
					if(NODE_DEVICE[lr_nw_node_index].last_lora_send_packet[packet_index].ttl > 0){
 8002e2a:	4b75      	ldr	r3, [pc, #468]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4877      	ldr	r0, [pc, #476]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	461a      	mov	r2, r3
 8002e36:	0052      	lsls	r2, r2, #1
 8002e38:	441a      	add	r2, r3
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	1ad2      	subs	r2, r2, r3
 8002e3e:	460b      	mov	r3, r1
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	015b      	lsls	r3, r3, #5
 8002e46:	1a5b      	subs	r3, r3, r1
 8002e48:	4413      	add	r3, r2
 8002e4a:	4403      	add	r3, r0
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d024      	beq.n	8002e9e <lora_network_connect_to_all_nodes_task+0x3d2>
						NODE_DEVICE[lr_nw_node_index].error = 1;
 8002e54:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	496d      	ldr	r1, [pc, #436]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
						bsp_lora_resend_packet(&NODE_DEVICE[lr_nw_node_index].last_lora_send_packet[packet_index]);
 8002e6e:	4b64      	ldr	r3, [pc, #400]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	461a      	mov	r2, r3
 8002e78:	0052      	lsls	r2, r2, #1
 8002e7a:	441a      	add	r2, r3
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	1ad2      	subs	r2, r2, r3
 8002e80:	460b      	mov	r3, r1
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	015b      	lsls	r3, r3, #5
 8002e88:	1a5b      	subs	r3, r3, r1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a60      	ldr	r2, [pc, #384]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002e8e:	4413      	add	r3, r2
 8002e90:	3305      	adds	r3, #5
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f852 	bl	8001f3c <bsp_lora_resend_packet>

						//xTimerStart(all_connect_timer, 0);
						lora_network_start_connect_timer();
 8002e98:	f7ff f9ee 	bl	8002278 <lora_network_start_connect_timer>
 8002e9c:	e07a      	b.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
					}
					else{
						STM_LOG("Can't connect to node %3d\n", lr_nw_node_index + 1, 27);
 8002e9e:	4b58      	ldr	r3, [pc, #352]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	221b      	movs	r2, #27
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	485a      	ldr	r0, [pc, #360]	@ (8003014 <lora_network_connect_to_all_nodes_task+0x548>)
 8002eaa:	f7fe fc3d 	bl	8001728 <STM_LOG>
						NODE_DEVICE[lr_nw_node_index].error = 2;
 8002eae:	4b54      	ldr	r3, [pc, #336]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4956      	ldr	r1, [pc, #344]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	015b      	lsls	r3, r3, #5
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
						bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index], packet_index);
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	015b      	lsls	r3, r3, #5
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002eda:	4413      	add	r3, r2
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fe17 	bl	8001b16 <bsp_lora_remove_packet_from_node_send_packets>

						if(lr_nw_connect_mode == LORA_CONNECT_MODE_ALL){
 8002ee8:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <lora_network_connect_to_all_nodes_task+0x530>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d143      	bne.n	8002f78 <lora_network_connect_to_all_nodes_task+0x4ac>
							do{
								lr_nw_node_index++;
 8002ef0:	4b43      	ldr	r3, [pc, #268]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b41      	ldr	r3, [pc, #260]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002efa:	701a      	strb	r2, [r3, #0]
							}while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity);
 8002efc:	4b40      	ldr	r3, [pc, #256]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4943      	ldr	r1, [pc, #268]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3302      	adds	r3, #2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <lora_network_connect_to_all_nodes_task+0x458>
 8002f18:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003018 <lora_network_connect_to_all_nodes_task+0x54c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d3e5      	bcc.n	8002ef0 <lora_network_connect_to_all_nodes_task+0x424>
							if(lr_nw_node_index < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index].connected == 0){
 8002f24:	4b36      	ldr	r3, [pc, #216]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <lora_network_connect_to_all_nodes_task+0x54c>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d231      	bcs.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
 8002f30:	4b33      	ldr	r3, [pc, #204]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4936      	ldr	r1, [pc, #216]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	3302      	adds	r3, #2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d123      	bne.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
								bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	015b      	lsls	r3, r3, #5
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003010 <lora_network_connect_to_all_nodes_task+0x544>)
 8002f5e:	1898      	adds	r0, r3, r2
 8002f60:	2303      	movs	r3, #3
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2300      	movs	r3, #0
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f7fe fedf 	bl	8001d30 <bsp_lora_send_packet_to_node>
								//xTimerStart(all_connect_timer, 0);
								lora_network_start_connect_timer();
 8002f72:	f7ff f981 	bl	8002278 <lora_network_start_connect_timer>
 8002f76:	e00d      	b.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
							}
						}
						else if(lr_nw_connect_mode == LORA_CONNECT_MODE_SPECIFIC){
 8002f78:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <lora_network_connect_to_all_nodes_task+0x530>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d109      	bne.n	8002f94 <lora_network_connect_to_all_nodes_task+0x4c8>
							lr_nw_node_index = 0;
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
							taskENTER_CRITICAL();
 8002f86:	f00c fde7 	bl	800fb58 <vPortEnterCritical>
							lr_nw_connect_mode = LORA_STATUS_IDLE;
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ffc <lora_network_connect_to_all_nodes_task+0x530>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
							taskEXIT_CRITICAL();
 8002f90:	f00c fe14 	bl	800fbbc <vPortExitCritical>
				}

			}


			if(lr_nw_node_index >= lr_nw_node_quantity){
 8002f94:	4b1a      	ldr	r3, [pc, #104]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <lora_network_connect_to_all_nodes_task+0x54c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d310      	bcc.n	8002fc2 <lora_network_connect_to_all_nodes_task+0x4f6>

				HAL_UART_Transmit(&huart2, "Full nodes\n", 11, 2000);
 8002fa0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002fa4:	220b      	movs	r2, #11
 8002fa6:	491d      	ldr	r1, [pc, #116]	@ (800301c <lora_network_connect_to_all_nodes_task+0x550>)
 8002fa8:	4817      	ldr	r0, [pc, #92]	@ (8003008 <lora_network_connect_to_all_nodes_task+0x53c>)
 8002faa:	f006 fa5f 	bl	800946c <HAL_UART_Transmit>
				lr_nw_node_index = 0;
 8002fae:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <lora_network_connect_to_all_nodes_task+0x534>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]

				taskENTER_CRITICAL();
 8002fb4:	f00c fdd0 	bl	800fb58 <vPortEnterCritical>
				lr_nw_connect_mode = LORA_STATUS_IDLE;
 8002fb8:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <lora_network_connect_to_all_nodes_task+0x530>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
				taskEXIT_CRITICAL();
 8002fbe:	f00c fdfd 	bl	800fbbc <vPortExitCritical>

			}

			bsp_pc_user_exit_safe_mode();
 8002fc2:	f7fe fbaa 	bl	800171a <bsp_pc_user_exit_safe_mode>

			if(lr_nw_connect_mode == LORA_STATUS_IDLE){
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <lora_network_connect_to_all_nodes_task+0x530>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <lora_network_connect_to_all_nodes_task+0x50a>
				lora_network_send_request_setup_scheduler();
 8002fce:	f000 fa5f 	bl	8003490 <lora_network_send_request_setup_scheduler>
				pc_user_ack_response_connected_node_quantity();
 8002fd2:	f7ff f9cd 	bl	8002370 <pc_user_ack_response_connected_node_quantity>
			}
			/* exit safe mode */
			bsp_lora_exit_safe_mode();
 8002fd6:	f7fe fb89 	bl	80016ec <bsp_lora_exit_safe_mode>
			while (HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002fda:	bf00      	nop
 8002fdc:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <lora_network_connect_to_all_nodes_task+0x554>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f005 fc3a 	bl	800885a <HAL_SPI_GetState>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d1f7      	bne.n	8002fdc <lora_network_connect_to_all_nodes_task+0x510>
			xSemaphoreGive(spi_mutex);
 8002fec:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <lora_network_connect_to_all_nodes_task+0x558>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	f00a fb6b 	bl	800d6d0 <xQueueGenericSend>
		if(xQueueReceive(all_connect_queue, &NotificationValue, portMAX_DELAY)){
 8002ffa:	e56b      	b.n	8002ad4 <lora_network_connect_to_all_nodes_task+0x8>
 8002ffc:	200008a6 	.word	0x200008a6
 8003000:	200008a3 	.word	0x200008a3
 8003004:	0801183c 	.word	0x0801183c
 8003008:	20001ad0 	.word	0x20001ad0
 800300c:	08011850 	.word	0x08011850
 8003010:	200008c0 	.word	0x200008c0
 8003014:	08011868 	.word	0x08011868
 8003018:	200008a0 	.word	0x200008a0
 800301c:	08011884 	.word	0x08011884
 8003020:	2000016c 	.word	0x2000016c
 8003024:	200018ac 	.word	0x200018ac

08003028 <lora_network_send_read_request_to_all_nodes_task>:
		}

	}
}

void lora_network_send_read_request_to_all_nodes_task(void *param){
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	//send_data_timer = xTimerCreate("send_data", pdMS_TO_TICKS(1000), pdTRUE, 0, lora_network_timer_read_request_task);
	//vTimerSetTimerID(send_data_timer, (void *)SW_TIMER_SEND_REQUEST);
	while(1){
		while(lora_network_connection_processing());
 8003030:	bf00      	nop
 8003032:	f7ff f80b 	bl	800204c <lora_network_connection_processing>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1fa      	bne.n	8003032 <lora_network_send_read_request_to_all_nodes_task+0xa>
		if(xQueueReceive(send_request_queue, &NotificationValue, portMAX_DELAY)){
 800303c:	4b75      	ldr	r3, [pc, #468]	@ (8003214 <lora_network_send_read_request_to_all_nodes_task+0x1ec>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f107 010c 	add.w	r1, r7, #12
 8003044:	f04f 32ff 	mov.w	r2, #4294967295
 8003048:	4618      	mov	r0, r3
 800304a:	f00a fd71 	bl	800db30 <xQueueReceive>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ed      	beq.n	8003030 <lora_network_send_read_request_to_all_nodes_task+0x8>
			/* get spi key and enter to safe mode to avoid the situation when lora's data's conflicted */
			xSemaphoreTake(spi_mutex, portMAX_DELAY);
 8003054:	4b70      	ldr	r3, [pc, #448]	@ (8003218 <lora_network_send_read_request_to_all_nodes_task+0x1f0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f04f 31ff 	mov.w	r1, #4294967295
 800305c:	4618      	mov	r0, r3
 800305e:	f00a fe49 	bl	800dcf4 <xQueueSemaphoreTake>
			bsp_lora_enter_safe_mode();
 8003062:	f7fe fb33 	bl	80016cc <bsp_lora_enter_safe_mode>
			STM_LOG("Send read request task\n", 0, 23);
 8003066:	2217      	movs	r2, #23
 8003068:	2100      	movs	r1, #0
 800306a:	486c      	ldr	r0, [pc, #432]	@ (800321c <lora_network_send_read_request_to_all_nodes_task+0x1f4>)
 800306c:	f7fe fb5c 	bl	8001728 <STM_LOG>



			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8003070:	bf00      	nop
 8003072:	4b6b      	ldr	r3, [pc, #428]	@ (8003220 <lora_network_send_read_request_to_all_nodes_task+0x1f8>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4618      	mov	r0, r3
 8003078:	f005 fbef 	bl	800885a <HAL_SPI_GetState>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d1f7      	bne.n	8003072 <lora_network_send_read_request_to_all_nodes_task+0x4a>
			while(bsp_lora_check_cad() == 1);
 8003082:	bf00      	nop
 8003084:	f7fe fb8c 	bl	80017a0 <bsp_lora_check_cad>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d0fa      	beq.n	8003084 <lora_network_send_read_request_to_all_nodes_task+0x5c>
			bsp_lora_set_receive_mode();
 800308e:	f7fe fb6f 	bl	8001770 <bsp_lora_set_receive_mode>

			STM_LOG("Send notice v: %2d\n", NotificationValue.cmd, 19);
 8003092:	7b3b      	ldrb	r3, [r7, #12]
 8003094:	2213      	movs	r2, #19
 8003096:	4619      	mov	r1, r3
 8003098:	4862      	ldr	r0, [pc, #392]	@ (8003224 <lora_network_send_read_request_to_all_nodes_task+0x1fc>)
 800309a:	f7fe fb45 	bl	8001728 <STM_LOG>

			/* start send request */
			if(NotificationValue.cmd == START_SEND_REQUEST){
 800309e:	7b3b      	ldrb	r3, [r7, #12]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d14b      	bne.n	800313c <lora_network_send_read_request_to_all_nodes_task+0x114>
				if(CONNECTED_NODE[lr_nw_send_request_index].connected == 1 && CONNECTED_NODE[lr_nw_send_request_index].id != 0){
 80030a4:	4b60      	ldr	r3, [pc, #384]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4960      	ldr	r1, [pc, #384]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	3302      	adds	r3, #2
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d139      	bne.n	8003134 <lora_network_send_read_request_to_all_nodes_task+0x10c>
 80030c0:	4b59      	ldr	r3, [pc, #356]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4959      	ldr	r1, [pc, #356]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	015b      	lsls	r3, r3, #5
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	440b      	add	r3, r1
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d02c      	beq.n	8003134 <lora_network_send_read_request_to_all_nodes_task+0x10c>
					STM_LOG("Send request n%2d\n", lr_nw_send_request_index, 17);
 80030da:	4b53      	ldr	r3, [pc, #332]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2211      	movs	r2, #17
 80030e0:	4619      	mov	r1, r3
 80030e2:	4853      	ldr	r0, [pc, #332]	@ (8003230 <lora_network_send_read_request_to_all_nodes_task+0x208>)
 80030e4:	f7fe fb20 	bl	8001728 <STM_LOG>
					STM_LOG("Node's id: %2d\n", CONNECTED_NODE[lr_nw_send_request_index].id, 14);
 80030e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	494f      	ldr	r1, [pc, #316]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	015b      	lsls	r3, r3, #5
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	220e      	movs	r2, #14
 8003100:	4619      	mov	r1, r3
 8003102:	484c      	ldr	r0, [pc, #304]	@ (8003234 <lora_network_send_read_request_to_all_nodes_task+0x20c>)
 8003104:	f7fe fb10 	bl	8001728 <STM_LOG>
					bsp_lora_send_packet_to_node(&CONNECTED_NODE[lr_nw_send_request_index], LORA_CMD_READ_DATA, 0, NULL, 0, 3);
 8003108:	4b47      	ldr	r3, [pc, #284]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	015b      	lsls	r3, r3, #5
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	4a44      	ldr	r2, [pc, #272]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 800311a:	1898      	adds	r0, r3, r2
 800311c:	2303      	movs	r3, #3
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	2200      	movs	r2, #0
 8003128:	2103      	movs	r1, #3
 800312a:	f7fe fe01 	bl	8001d30 <bsp_lora_send_packet_to_node>
					//xTimerStart(send_data_timer, 0);
					lora_network_start_read_request_timer();
 800312e:	f7ff f8eb 	bl	8002308 <lora_network_start_read_request_timer>
 8003132:	e158      	b.n	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
				}
				else{
					lr_nw_send_request_index = 0;
 8003134:	4b3c      	ldr	r3, [pc, #240]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e154      	b.n	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
				}
			}

			/* receive ack for the packet have sent */
			else if(NotificationValue.cmd == ACK){
 800313c:	7b3b      	ldrb	r3, [r7, #12]
 800313e:	2b07      	cmp	r3, #7
 8003140:	d17e      	bne.n	8003240 <lora_network_send_read_request_to_all_nodes_task+0x218>
				//xTimerStop(send_data_timer, 0);


				STM_LOG("Ack send request n%2d\n", lr_nw_send_request_index, 22);
 8003142:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2216      	movs	r2, #22
 8003148:	4619      	mov	r1, r3
 800314a:	483b      	ldr	r0, [pc, #236]	@ (8003238 <lora_network_send_read_request_to_all_nodes_task+0x210>)
 800314c:	f7fe faec 	bl	8001728 <STM_LOG>
				if(CONNECTED_NODE[lr_nw_send_request_index].connected == 1 && CONNECTED_NODE[lr_nw_send_request_index].id != 0){
 8003150:	4b35      	ldr	r3, [pc, #212]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4935      	ldr	r1, [pc, #212]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	015b      	lsls	r3, r3, #5
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	440b      	add	r3, r1
 8003164:	3302      	adds	r3, #2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d14e      	bne.n	800320a <lora_network_send_read_request_to_all_nodes_task+0x1e2>
 800316c:	4b2e      	ldr	r3, [pc, #184]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	492e      	ldr	r1, [pc, #184]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	015b      	lsls	r3, r3, #5
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	440b      	add	r3, r1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d041      	beq.n	800320a <lora_network_send_read_request_to_all_nodes_task+0x1e2>
					int packet_index = bsp_lora_check_cmd_in_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], LORA_CMD_READ_DATA);
 8003186:	4b28      	ldr	r3, [pc, #160]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	4a25      	ldr	r2, [pc, #148]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 8003198:	4413      	add	r3, r2
 800319a:	2103      	movs	r1, #3
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fc43 	bl	8001a28 <bsp_lora_check_cmd_in_node_send_packets>
 80031a2:	6138      	str	r0, [r7, #16]
					if(packet_index != -1){
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d027      	beq.n	80031fc <lora_network_send_read_request_to_all_nodes_task+0x1d4>
						STM_LOG("Remove packet with pid: %3d\n", CONNECTED_NODE[lr_nw_send_request_index].last_lora_send_packet[packet_index].packet_id, 28);
 80031ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	481e      	ldr	r0, [pc, #120]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	461a      	mov	r2, r3
 80031b8:	0052      	lsls	r2, r2, #1
 80031ba:	441a      	add	r2, r3
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	1ad2      	subs	r2, r2, r3
 80031c0:	460b      	mov	r3, r1
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	015b      	lsls	r3, r3, #5
 80031c8:	1a5b      	subs	r3, r3, r1
 80031ca:	4413      	add	r3, r2
 80031cc:	4403      	add	r3, r0
 80031ce:	3305      	adds	r3, #5
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	221c      	movs	r2, #28
 80031d4:	4619      	mov	r1, r3
 80031d6:	4819      	ldr	r0, [pc, #100]	@ (800323c <lora_network_send_read_request_to_all_nodes_task+0x214>)
 80031d8:	f7fe faa6 	bl	8001728 <STM_LOG>
						bsp_lora_remove_packet_from_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], packet_index);
 80031dc:	4b12      	ldr	r3, [pc, #72]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	015b      	lsls	r3, r3, #5
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	4a0f      	ldr	r2, [pc, #60]	@ (800322c <lora_network_send_read_request_to_all_nodes_task+0x204>)
 80031ee:	4413      	add	r3, r2
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fc8d 	bl	8001b16 <bsp_lora_remove_packet_from_node_send_packets>
					}
					lr_nw_send_request_index++;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	b2da      	uxtb	r2, r3
 8003204:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 8003206:	701a      	strb	r2, [r3, #0]
				if(CONNECTED_NODE[lr_nw_send_request_index].connected == 1 && CONNECTED_NODE[lr_nw_send_request_index].id != 0){
 8003208:	e0ed      	b.n	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
				}
				else{
					lr_nw_send_request_index = 0;
 800320a:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <lora_network_send_read_request_to_all_nodes_task+0x200>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e0e9      	b.n	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
 8003212:	bf00      	nop
 8003214:	200018a0 	.word	0x200018a0
 8003218:	200018ac 	.word	0x200018ac
 800321c:	08011890 	.word	0x08011890
 8003220:	2000016c 	.word	0x2000016c
 8003224:	080118a8 	.word	0x080118a8
 8003228:	200008a5 	.word	0x200008a5
 800322c:	2000109c 	.word	0x2000109c
 8003230:	080118bc 	.word	0x080118bc
 8003234:	080118d0 	.word	0x080118d0
 8003238:	080118e0 	.word	0x080118e0
 800323c:	080118f8 	.word	0x080118f8
				}
			}

			/* timeout or receive nack for the packet have sent */
			else if(NotificationValue.cmd == NAK || NotificationValue.cmd == TIMEOUT){
 8003240:	7b3b      	ldrb	r3, [r7, #12]
 8003242:	2b08      	cmp	r3, #8
 8003244:	d003      	beq.n	800324e <lora_network_send_read_request_to_all_nodes_task+0x226>
 8003246:	7b3b      	ldrb	r3, [r7, #12]
 8003248:	2b09      	cmp	r3, #9
 800324a:	f040 80cc 	bne.w	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
				STM_LOG("Send request timeout or nak n%2d\n", lr_nw_send_request_index, 32);
 800324e:	4b74      	ldr	r3, [pc, #464]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2220      	movs	r2, #32
 8003254:	4619      	mov	r1, r3
 8003256:	4873      	ldr	r0, [pc, #460]	@ (8003424 <lora_network_send_read_request_to_all_nodes_task+0x3fc>)
 8003258:	f7fe fa66 	bl	8001728 <STM_LOG>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], LORA_CMD_READ_DATA);
 800325c:	4b70      	ldr	r3, [pc, #448]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	015b      	lsls	r3, r3, #5
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	4a6e      	ldr	r2, [pc, #440]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 800326e:	4413      	add	r3, r2
 8003270:	2103      	movs	r1, #3
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fbd8 	bl	8001a28 <bsp_lora_check_cmd_in_node_send_packets>
 8003278:	6178      	str	r0, [r7, #20]
				//xTimerStop(send_data_timer, 0);
				if(packet_index != -1){
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	f000 80b1 	beq.w	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
					if(CONNECTED_NODE[lr_nw_send_request_index].last_lora_send_packet[packet_index].ttl > 0 && CONNECTED_NODE[lr_nw_send_request_index].last_lora_send_packet[packet_index].responsed == 0){
 8003284:	4b66      	ldr	r3, [pc, #408]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	4867      	ldr	r0, [pc, #412]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	461a      	mov	r2, r3
 8003290:	0052      	lsls	r2, r2, #1
 8003292:	441a      	add	r2, r3
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	460b      	mov	r3, r1
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	1a5b      	subs	r3, r3, r1
 80032a2:	4413      	add	r3, r2
 80032a4:	4403      	add	r3, r0
 80032a6:	3308      	adds	r3, #8
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d054      	beq.n	8003358 <lora_network_send_read_request_to_all_nodes_task+0x330>
 80032ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	485c      	ldr	r0, [pc, #368]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	461a      	mov	r2, r3
 80032ba:	0052      	lsls	r2, r2, #1
 80032bc:	441a      	add	r2, r3
 80032be:	0112      	lsls	r2, r2, #4
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	460b      	mov	r3, r1
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	015b      	lsls	r3, r3, #5
 80032ca:	1a5b      	subs	r3, r3, r1
 80032cc:	4413      	add	r3, r2
 80032ce:	4403      	add	r3, r0
 80032d0:	3309      	adds	r3, #9
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d13f      	bne.n	8003358 <lora_network_send_read_request_to_all_nodes_task+0x330>
						if(CONNECTED_NODE[lr_nw_send_request_index].connected == 1 && CONNECTED_NODE[lr_nw_send_request_index].id != 0){
 80032d8:	4b51      	ldr	r3, [pc, #324]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	4952      	ldr	r1, [pc, #328]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	3302      	adds	r3, #2
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d177      	bne.n	80033e4 <lora_network_send_read_request_to_all_nodes_task+0x3bc>
 80032f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	494b      	ldr	r1, [pc, #300]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	015b      	lsls	r3, r3, #5
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	440b      	add	r3, r1
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d06a      	beq.n	80033e4 <lora_network_send_read_request_to_all_nodes_task+0x3bc>
							STM_LOG("Resend dcn packet n%2d\n", lr_nw_send_request_index, 22);
 800330e:	4b44      	ldr	r3, [pc, #272]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2216      	movs	r2, #22
 8003314:	4619      	mov	r1, r3
 8003316:	4845      	ldr	r0, [pc, #276]	@ (800342c <lora_network_send_read_request_to_all_nodes_task+0x404>)
 8003318:	f7fe fa06 	bl	8001728 <STM_LOG>
							CONNECTED_NODE[lr_nw_send_request_index].error = 1;
 800331c:	4b40      	ldr	r3, [pc, #256]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4941      	ldr	r1, [pc, #260]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	015b      	lsls	r3, r3, #5
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	440b      	add	r3, r1
 8003330:	3304      	adds	r3, #4
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
							bsp_lora_resend_packet(&CONNECTED_NODE[lr_nw_send_request_index].last_lora_send_packet);
 8003336:	4b3a      	ldr	r3, [pc, #232]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	015b      	lsls	r3, r3, #5
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	4a38      	ldr	r2, [pc, #224]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 8003348:	4413      	add	r3, r2
 800334a:	3305      	adds	r3, #5
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fdf5 	bl	8001f3c <bsp_lora_resend_packet>
							//xTimerStart(send_data_timer, 0);
							lora_network_start_read_request_timer();
 8003352:	f7fe ffd9 	bl	8002308 <lora_network_start_read_request_timer>
						if(CONNECTED_NODE[lr_nw_send_request_index].connected == 1 && CONNECTED_NODE[lr_nw_send_request_index].id != 0){
 8003356:	e045      	b.n	80033e4 <lora_network_send_read_request_to_all_nodes_task+0x3bc>
						}
					}
					else{
						if(CONNECTED_NODE[lr_nw_send_request_index].connected == 1 && CONNECTED_NODE[lr_nw_send_request_index].id != 0){
 8003358:	4b31      	ldr	r3, [pc, #196]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4932      	ldr	r1, [pc, #200]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	015b      	lsls	r3, r3, #5
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	440b      	add	r3, r1
 800336c:	3302      	adds	r3, #2
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d138      	bne.n	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
 8003374:	4b2a      	ldr	r3, [pc, #168]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	492b      	ldr	r1, [pc, #172]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	015b      	lsls	r3, r3, #5
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	440b      	add	r3, r1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02b      	beq.n	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
							CONNECTED_NODE[lr_nw_send_request_index].error = 2;
 800338e:	4b24      	ldr	r3, [pc, #144]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	4924      	ldr	r1, [pc, #144]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	015b      	lsls	r3, r3, #5
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	3304      	adds	r3, #4
 80033a4:	2202      	movs	r2, #2
 80033a6:	701a      	strb	r2, [r3, #0]
							bsp_lora_remove_packet_from_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], packet_index);
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	015b      	lsls	r3, r3, #5
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <lora_network_send_read_request_to_all_nodes_task+0x400>)
 80033ba:	4413      	add	r3, r2
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fba7 	bl	8001b16 <bsp_lora_remove_packet_from_node_send_packets>
							STM_LOG("Error n%2d\n", lr_nw_send_request_index, 10);
 80033c8:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	220a      	movs	r2, #10
 80033ce:	4619      	mov	r1, r3
 80033d0:	4817      	ldr	r0, [pc, #92]	@ (8003430 <lora_network_send_read_request_to_all_nodes_task+0x408>)
 80033d2:	f7fe f9a9 	bl	8001728 <STM_LOG>
							lr_nw_send_request_index++;
 80033d6:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e000      	b.n	80033e6 <lora_network_send_read_request_to_all_nodes_task+0x3be>
						if(CONNECTED_NODE[lr_nw_send_request_index].connected == 1 && CONNECTED_NODE[lr_nw_send_request_index].id != 0){
 80033e4:	bf00      	nop
					//xTimerStop(send_data_timer, 0);
				}


			}
			if(lr_nw_send_request_index >= lr_nw_connected_node_quantity)
 80033e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <lora_network_send_read_request_to_all_nodes_task+0x40c>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <lora_network_send_read_request_to_all_nodes_task+0x3d0>
				lr_nw_send_request_index = 0;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <lora_network_send_read_request_to_all_nodes_task+0x3f8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]

			/* exit safe mode */
			while (HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 80033f8:	bf00      	nop
 80033fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <lora_network_send_read_request_to_all_nodes_task+0x410>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	4618      	mov	r0, r3
 8003400:	f005 fa2b 	bl	800885a <HAL_SPI_GetState>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d1f7      	bne.n	80033fa <lora_network_send_read_request_to_all_nodes_task+0x3d2>
			bsp_lora_exit_safe_mode();
 800340a:	f7fe f96f 	bl	80016ec <bsp_lora_exit_safe_mode>
			//NVIC_EnableIRQ(OTG_FS_IRQn);
			xSemaphoreGive(spi_mutex);
 800340e:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <lora_network_send_read_request_to_all_nodes_task+0x414>)
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	2300      	movs	r3, #0
 8003414:	2200      	movs	r2, #0
 8003416:	2100      	movs	r1, #0
 8003418:	f00a f95a 	bl	800d6d0 <xQueueGenericSend>
		while(lora_network_connection_processing());
 800341c:	e608      	b.n	8003030 <lora_network_send_read_request_to_all_nodes_task+0x8>
 800341e:	bf00      	nop
 8003420:	200008a5 	.word	0x200008a5
 8003424:	08011918 	.word	0x08011918
 8003428:	2000109c 	.word	0x2000109c
 800342c:	0801193c 	.word	0x0801193c
 8003430:	08011954 	.word	0x08011954
 8003434:	200008a1 	.word	0x200008a1
 8003438:	2000016c 	.word	0x2000016c
 800343c:	200018ac 	.word	0x200018ac

08003440 <lora_network_send_request_stop_scheduler>:
		}

	}
}

void lora_network_send_request_stop_scheduler(){
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8003444:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <lora_network_send_request_stop_scheduler+0x30>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0201 	mvn.w	r2, #1
 800344c:	611a      	str	r2, [r3, #16]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800344e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 800345e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Stop_IT(&htim2);
 8003466:	4802      	ldr	r0, [pc, #8]	@ (8003470 <lora_network_send_request_stop_scheduler+0x30>)
 8003468:	f005 fbfa 	bl	8008c60 <HAL_TIM_Base_Stop_IT>
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200019f8 	.word	0x200019f8

08003474 <lora_network_send_request_start_scheduler>:

void lora_network_send_request_start_scheduler(){
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	//TIM2->CR1 &= ~TIM_CR1_CEN;
	TIM2->CNT = 0;
 8003478:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800347c:	2200      	movs	r2, #0
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24
	//TIM2->CR1 |= TIM_CR1_CEN;
	HAL_TIM_Base_Start_IT(&htim2);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <lora_network_send_request_start_scheduler+0x18>)
 8003482:	f005 fb8b 	bl	8008b9c <HAL_TIM_Base_Start_IT>
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200019f8 	.word	0x200019f8

08003490 <lora_network_send_request_setup_scheduler>:
	TIM2->CR1 |= TIM_CR1_CEN;
	lora_network_send_request_start_scheduler();
}


void lora_network_send_request_setup_scheduler(){
 8003490:	b580      	push	{r7, lr}
 8003492:	b090      	sub	sp, #64	@ 0x40
 8003494:	af00      	add	r7, sp, #0
	lora_network_send_request_stop_scheduler();
 8003496:	f7ff ffd3 	bl	8003440 <lora_network_send_request_stop_scheduler>
	if(lr_nw_connected_node_quantity > 0){
 800349a:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <lora_network_send_request_setup_scheduler+0x110>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d03f      	beq.n	8003522 <lora_network_send_request_setup_scheduler+0x92>
		HAL_UART_Transmit(&huart2, "Scheduler setup\n", 16, 2000);
 80034a2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80034a6:	2210      	movs	r2, #16
 80034a8:	493e      	ldr	r1, [pc, #248]	@ (80035a4 <lora_network_send_request_setup_scheduler+0x114>)
 80034aa:	483f      	ldr	r0, [pc, #252]	@ (80035a8 <lora_network_send_request_setup_scheduler+0x118>)
 80034ac:	f005 ffde 	bl	800946c <HAL_UART_Transmit>
		STM_LOG("Nqtt: %2d\n", lr_nw_connected_node_quantity, 10);
 80034b0:	4b3b      	ldr	r3, [pc, #236]	@ (80035a0 <lora_network_send_request_setup_scheduler+0x110>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	220a      	movs	r2, #10
 80034b6:	4619      	mov	r1, r3
 80034b8:	483c      	ldr	r0, [pc, #240]	@ (80035ac <lora_network_send_request_setup_scheduler+0x11c>)
 80034ba:	f7fe f935 	bl	8001728 <STM_LOG>

		lr_nw_last_connected_node_quantity = lr_nw_connected_node_quantity;
 80034be:	4b38      	ldr	r3, [pc, #224]	@ (80035a0 <lora_network_send_request_setup_scheduler+0x110>)
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <lora_network_send_request_setup_scheduler+0x120>)
 80034c4:	701a      	strb	r2, [r3, #0]
		uint32_t time_interval = SEND_REQUEST_TIME_PERIOD / lr_nw_connected_node_quantity;
 80034c6:	4b36      	ldr	r3, [pc, #216]	@ (80035a0 <lora_network_send_request_setup_scheduler+0x110>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f247 5330 	movw	r3, #30000	@ 0x7530
 80034d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80034d4:	63bb      	str	r3, [r7, #56]	@ 0x38
		TIM2->CR1 &= ~TIM_CR1_CEN;
 80034d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;
 80034e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80034ea:	2200      	movs	r2, #0
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM2->ARR = time_interval - 1;
 80034ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f4:	3b01      	subs	r3, #1
 80034f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

		if(semaphore_count == 0){
 80034f8:	4b2e      	ldr	r3, [pc, #184]	@ (80035b4 <lora_network_send_request_setup_scheduler+0x124>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <lora_network_send_request_setup_scheduler+0x8e>
			connection_task_notification_value_t NotificationValue;
			NotificationValue.cmd = START_SEND_REQUEST;
 8003502:	2304      	movs	r3, #4
 8003504:	713b      	strb	r3, [r7, #4]
			NotificationValue.node_id = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	717b      	strb	r3, [r7, #5]
			xQueueSend(send_request_queue, &NotificationValue, portMAX_DELAY);
 800350a:	4b2b      	ldr	r3, [pc, #172]	@ (80035b8 <lora_network_send_request_setup_scheduler+0x128>)
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	1d39      	adds	r1, r7, #4
 8003510:	2300      	movs	r3, #0
 8003512:	f04f 32ff 	mov.w	r2, #4294967295
 8003516:	f00a f8db 	bl	800d6d0 <xQueueGenericSend>
			lora_network_send_request_start_scheduler();
 800351a:	f7ff ffab 	bl	8003474 <lora_network_send_request_start_scheduler>
		}
		lora_network_send_request_start_scheduler();
 800351e:	f7ff ffa9 	bl	8003474 <lora_network_send_request_start_scheduler>
	}

	uart_data_frame_t uart_data_buffer = {0};
 8003522:	f107 0308 	add.w	r3, r7, #8
 8003526:	222b      	movs	r2, #43	@ 0x2b
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f00d fc16 	bl	8010d5c <memset>
	uart_data_buffer.len = lr_nw_connected_node_quantity + 2;
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <lora_network_send_request_setup_scheduler+0x110>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	3302      	adds	r3, #2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	723b      	strb	r3, [r7, #8]
	uart_data_buffer.cmd = UART_CMD_INITIALISE_NODE_QUANTITY;
 800353a:	2300      	movs	r3, #0
 800353c:	727b      	strb	r3, [r7, #9]
	uart_data_buffer.node_id = lr_nw_connected_node_quantity;
 800353e:	4b18      	ldr	r3, [pc, #96]	@ (80035a0 <lora_network_send_request_setup_scheduler+0x110>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	72bb      	strb	r3, [r7, #10]

	for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8003544:	2300      	movs	r3, #0
 8003546:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800354a:	e015      	b.n	8003578 <lora_network_send_request_setup_scheduler+0xe8>
		uart_data_buffer.raw_data[i] = CONNECTED_NODE[i].id;
 800354c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003550:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8003554:	4819      	ldr	r0, [pc, #100]	@ (80035bc <lora_network_send_request_setup_scheduler+0x12c>)
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	015b      	lsls	r3, r3, #5
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	4403      	add	r3, r0
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8003568:	443b      	add	r3, r7
 800356a:	f803 2c35 	strb.w	r2, [r3, #-53]
	for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 800356e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003572:	3301      	adds	r3, #1
 8003574:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003578:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <lora_network_send_request_setup_scheduler+0x110>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003580:	429a      	cmp	r2, r3
 8003582:	d3e3      	bcc.n	800354c <lora_network_send_request_setup_scheduler+0xbc>
	}

	uint8_t *packet_bufer = (uint8_t *)(&uart_data_buffer);
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_UART_Transmit(&huart1, packet_bufer, sizeof(uart_data_frame_t), 2000);
 800358a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800358e:	222b      	movs	r2, #43	@ 0x2b
 8003590:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003592:	480b      	ldr	r0, [pc, #44]	@ (80035c0 <lora_network_send_request_setup_scheduler+0x130>)
 8003594:	f005 ff6a 	bl	800946c <HAL_UART_Transmit>
	//lora_network_send_request_start_scheduler();
}
 8003598:	bf00      	nop
 800359a:	3740      	adds	r7, #64	@ 0x40
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200008a1 	.word	0x200008a1
 80035a4:	08011960 	.word	0x08011960
 80035a8:	20001ad0 	.word	0x20001ad0
 80035ac:	08011974 	.word	0x08011974
 80035b0:	200008a2 	.word	0x200008a2
 80035b4:	200018b8 	.word	0x200018b8
 80035b8:	200018a0 	.word	0x200018a0
 80035bc:	2000109c 	.word	0x2000109c
 80035c0:	20001a88 	.word	0x20001a88

080035c4 <lora_network_send_request_scheduler>:

void lora_network_send_request_scheduler(){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
	if(semaphore_count == 0 && lr_nw_connected_node_quantity > 0){
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <lora_network_send_request_scheduler+0x5c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d120      	bne.n	8003616 <lora_network_send_request_scheduler+0x52>
 80035d4:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <lora_network_send_request_scheduler+0x60>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01c      	beq.n	8003616 <lora_network_send_request_scheduler+0x52>
		STM_LOG("Scheduler call back\n", 0, 19);
 80035dc:	2213      	movs	r2, #19
 80035de:	2100      	movs	r1, #0
 80035e0:	4811      	ldr	r0, [pc, #68]	@ (8003628 <lora_network_send_request_scheduler+0x64>)
 80035e2:	f7fe f8a1 	bl	8001728 <STM_LOG>

		//NVIC_DisableIRQ(OTG_FS_IRQn);
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
		connection_task_notification_value_t NotificationValue;
		NotificationValue.cmd = START_SEND_REQUEST;
 80035ea:	2304      	movs	r3, #4
 80035ec:	703b      	strb	r3, [r7, #0]
		NotificationValue.node_id = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	707b      	strb	r3, [r7, #1]
		//xTimerStopFromISR(send_data_timer, &pxHigherPriorityTaskWoken);
		xQueueSendFromISR(send_request_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 80035f2:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <lora_network_send_request_scheduler+0x68>)
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	1d3a      	adds	r2, r7, #4
 80035f8:	4639      	mov	r1, r7
 80035fa:	2300      	movs	r3, #0
 80035fc:	f00a f96a 	bl	800d8d4 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <lora_network_send_request_scheduler+0x52>
 8003606:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <lora_network_send_request_scheduler+0x6c>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
	}

}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	200018b8 	.word	0x200018b8
 8003624:	200008a1 	.word	0x200008a1
 8003628:	08011980 	.word	0x08011980
 800362c:	200018a0 	.word	0x200018a0
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <lora_network_response_warning_nodes_task>:
	}
}


/* this fuction is used to response the warning packets from the nodes */
void lora_network_response_warning_nodes_task(void *param){
 8003634:	b5b0      	push	{r4, r5, r7, lr}
 8003636:	b0a2      	sub	sp, #136	@ 0x88
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	while(1){
		if(xQueueReceive(warning_queue, &NotificationValue, portMAX_DELAY)){
 800363c:	4b78      	ldr	r3, [pc, #480]	@ (8003820 <lora_network_response_warning_nodes_task+0x1ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	4618      	mov	r0, r3
 800364a:	f00a fa71 	bl	800db30 <xQueueReceive>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f3      	beq.n	800363c <lora_network_response_warning_nodes_task+0x8>
			xSemaphoreTake(spi_mutex, portMAX_DELAY);
 8003654:	4b73      	ldr	r3, [pc, #460]	@ (8003824 <lora_network_response_warning_nodes_task+0x1f0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f04f 31ff 	mov.w	r1, #4294967295
 800365c:	4618      	mov	r0, r3
 800365e:	f00a fb49 	bl	800dcf4 <xQueueSemaphoreTake>
			bsp_lora_enter_safe_mode();
 8003662:	f7fe f833 	bl	80016cc <bsp_lora_enter_safe_mode>
			lora_network_send_request_stop_scheduler();
 8003666:	f7ff feeb 	bl	8003440 <lora_network_send_request_stop_scheduler>

			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 800366a:	bf00      	nop
 800366c:	4b6e      	ldr	r3, [pc, #440]	@ (8003828 <lora_network_response_warning_nodes_task+0x1f4>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 f8f2 	bl	800885a <HAL_SPI_GetState>
 8003676:	4603      	mov	r3, r0
 8003678:	2b01      	cmp	r3, #1
 800367a:	d1f7      	bne.n	800366c <lora_network_response_warning_nodes_task+0x38>
			while(bsp_lora_check_cad() == 1);
 800367c:	bf00      	nop
 800367e:	f7fe f88f 	bl	80017a0 <bsp_lora_check_cad>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d0fa      	beq.n	800367e <lora_network_response_warning_nodes_task+0x4a>
			bsp_lora_set_receive_mode();
 8003688:	f7fe f872 	bl	8001770 <bsp_lora_set_receive_mode>

			if(NotificationValue.cmd == START_RESPONSE_WARNING){
 800368c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003690:	2b05      	cmp	r3, #5
 8003692:	f040 809d 	bne.w	80037d0 <lora_network_response_warning_nodes_task+0x19c>
				uint8_t lora_node_id = NotificationValue.node_id;
 8003696:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800369a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				lora_node_t *lora_node = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
				for(uint8_t node_index = 0; node_index < lr_nw_connected_node_quantity; node_index++){
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80036a8:	e01d      	b.n	80036e6 <lora_network_response_warning_nodes_task+0xb2>
					if(CONNECTED_NODE[node_index].id == lora_node_id){
 80036aa:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 80036ae:	495f      	ldr	r1, [pc, #380]	@ (800382c <lora_network_response_warning_nodes_task+0x1f8>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	015b      	lsls	r3, r3, #5
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	440b      	add	r3, r1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10a      	bne.n	80036dc <lora_network_response_warning_nodes_task+0xa8>
						lora_node = &CONNECTED_NODE[node_index];
 80036c6:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	015b      	lsls	r3, r3, #5
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	4a55      	ldr	r2, [pc, #340]	@ (800382c <lora_network_response_warning_nodes_task+0x1f8>)
 80036d6:	4413      	add	r3, r2
 80036d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
						break;
 80036da:	e00a      	b.n	80036f2 <lora_network_response_warning_nodes_task+0xbe>
				for(uint8_t node_index = 0; node_index < lr_nw_connected_node_quantity; node_index++){
 80036dc:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80036e0:	3301      	adds	r3, #1
 80036e2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80036e6:	4b52      	ldr	r3, [pc, #328]	@ (8003830 <lora_network_response_warning_nodes_task+0x1fc>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d3db      	bcc.n	80036aa <lora_network_response_warning_nodes_task+0x76>
					}
				}

				if(lora_node != NULL){
 80036f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 816a 	beq.w	80039ce <lora_network_response_warning_nodes_task+0x39a>
					int packet_index = bsp_lora_check_cmd_in_node_receive_packets(lora_node, LORA_CMD_WARNING);
 80036fa:	2107      	movs	r1, #7
 80036fc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80036fe:	f7fe fa84 	bl	8001c0a <bsp_lora_check_cmd_in_node_receive_packets>
 8003702:	6638      	str	r0, [r7, #96]	@ 0x60

					if(packet_index != -1){
 8003704:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	f000 8160 	beq.w	80039ce <lora_network_response_warning_nodes_task+0x39a>
						uart_data_frame_t uart_data_buffer = {0};
 800370e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003712:	222b      	movs	r2, #43	@ 0x2b
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f00d fb20 	bl	8010d5c <memset>
						uart_data_buffer.len = 3;
 800371c:	2303      	movs	r3, #3
 800371e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
						uart_data_buffer.cmd = UART_CMD_HANDLE_WARNING_NODE;
 8003722:	2302      	movs	r3, #2
 8003724:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
						uart_data_buffer.node_id = lora_node->id;
 8003728:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						uart_data_buffer.raw_data[0] = lora_node->connected;
 8003730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003732:	789b      	ldrb	r3, [r3, #2]
 8003734:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						uart_data_buffer.raw_data[1] = lora_node->error;
 8003738:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800373a:	791b      	ldrb	r3, [r3, #4]
 800373c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
						// the first item of the payload contain information about the machine and remaining elements contain information about different things such as relay or contactor...
						// = 0: not working; = 1: working; = 2: error
						uart_data_buffer.raw_data[2] = lora_node->last_lora_receive_packet[packet_index].payload[0];
 8003740:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003742:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	440b      	add	r3, r1
 8003750:	33a1      	adds	r3, #161	@ 0xa1
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						uint8_t *packet_bufer = (uint8_t *)(&uart_data_buffer);
 8003758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800375c:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_UART_Transmit(&huart1, packet_bufer, sizeof(uart_data_frame_t), 2000);
 800375e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003762:	222b      	movs	r2, #43	@ 0x2b
 8003764:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003766:	4833      	ldr	r0, [pc, #204]	@ (8003834 <lora_network_response_warning_nodes_task+0x200>)
 8003768:	f005 fe80 	bl	800946c <HAL_UART_Transmit>
						pc_user_send_node_data_to_pc(uart_data_buffer.len, uart_data_buffer.node_id, uart_data_buffer.raw_data);
 800376c:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 8003770:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003774:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003778:	3303      	adds	r3, #3
 800377a:	461a      	mov	r2, r3
 800377c:	f7fe fe0c 	bl	8002398 <pc_user_send_node_data_to_pc>

						STM_LOG("First item of warning data: %2d\n", uart_data_buffer.raw_data[2], 32);
 8003780:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003784:	2220      	movs	r2, #32
 8003786:	4619      	mov	r1, r3
 8003788:	482b      	ldr	r0, [pc, #172]	@ (8003838 <lora_network_response_warning_nodes_task+0x204>)
 800378a:	f7fd ffcd 	bl	8001728 <STM_LOG>

						uint8_t responsed_byte = lora_node->last_lora_receive_packet[packet_index].packet_id;
 800378e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003790:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	440b      	add	r3, r1
 800379e:	3392      	adds	r3, #146	@ 0x92
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

						//memset(&lora_node->last_lora_receive_packet[packet_index], 0, sizeof(lora_packet_t));
						bsp_lora_remove_packet_from_node_receive_packets(lora_node, packet_index);
 80037a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80037ae:	f7fe fa5f 	bl	8001c70 <bsp_lora_remove_packet_from_node_receive_packets>

						lora_send_packet_buffer.responsed = responsed_byte;
 80037b2:	4a22      	ldr	r2, [pc, #136]	@ (800383c <lora_network_response_warning_nodes_task+0x208>)
 80037b4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80037b8:	7113      	strb	r3, [r2, #4]
						bsp_lora_send_packet_to_node(lora_node, LORA_CMD_ACK, 0, NULL, 0, 3);
 80037ba:	2303      	movs	r3, #3
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	2200      	movs	r2, #0
 80037c6:	2105      	movs	r1, #5
 80037c8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80037ca:	f7fe fab1 	bl	8001d30 <bsp_lora_send_packet_to_node>
 80037ce:	e0fe      	b.n	80039ce <lora_network_response_warning_nodes_task+0x39a>
					}
				}
			}

			else if(NotificationValue.cmd == START_HANDLE_ACK_PACKET){
 80037d0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	f040 80fa 	bne.w	80039ce <lora_network_response_warning_nodes_task+0x39a>
				uint8_t lora_node_id = NotificationValue.node_id;
 80037da:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80037de:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
				lora_node_t *lora_node = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	677b      	str	r3, [r7, #116]	@ 0x74

				//HAL_UART_Transmit(&huart2, "ack packet debug 1\n", 19, 2000);
				for(uint8_t node_index = 0; node_index < lr_nw_connected_node_quantity; node_index++){
 80037e6:	2300      	movs	r3, #0
 80037e8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80037ec:	e02d      	b.n	800384a <lora_network_response_warning_nodes_task+0x216>
					if(CONNECTED_NODE[node_index].id == lora_node_id){
 80037ee:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80037f2:	490e      	ldr	r1, [pc, #56]	@ (800382c <lora_network_response_warning_nodes_task+0x1f8>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	015b      	lsls	r3, r3, #5
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	440b      	add	r3, r1
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 8003806:	429a      	cmp	r2, r3
 8003808:	d11a      	bne.n	8003840 <lora_network_response_warning_nodes_task+0x20c>
						lora_node = &CONNECTED_NODE[node_index];
 800380a:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	015b      	lsls	r3, r3, #5
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	4a04      	ldr	r2, [pc, #16]	@ (800382c <lora_network_response_warning_nodes_task+0x1f8>)
 800381a:	4413      	add	r3, r2
 800381c:	677b      	str	r3, [r7, #116]	@ 0x74
						break;
 800381e:	e01a      	b.n	8003856 <lora_network_response_warning_nodes_task+0x222>
 8003820:	200018a4 	.word	0x200018a4
 8003824:	200018ac 	.word	0x200018ac
 8003828:	2000016c 	.word	0x2000016c
 800382c:	2000109c 	.word	0x2000109c
 8003830:	200008a1 	.word	0x200008a1
 8003834:	20001a88 	.word	0x20001a88
 8003838:	08011a2c 	.word	0x08011a2c
 800383c:	20000198 	.word	0x20000198
				for(uint8_t node_index = 0; node_index < lr_nw_connected_node_quantity; node_index++){
 8003840:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003844:	3301      	adds	r3, #1
 8003846:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800384a:	4b6e      	ldr	r3, [pc, #440]	@ (8003a04 <lora_network_response_warning_nodes_task+0x3d0>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8003852:	429a      	cmp	r2, r3
 8003854:	d3cb      	bcc.n	80037ee <lora_network_response_warning_nodes_task+0x1ba>
					}
				}

				if(lora_node != NULL){
 8003856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80b8 	beq.w	80039ce <lora_network_response_warning_nodes_task+0x39a>
					//HAL_UART_Transmit(&huart2, "ack packet debug 2\n", 19, 2000);

					int packet_index = bsp_lora_get_id_in_node_receive_packets(lora_node, NotificationValue.packet_id);
 800385e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8003862:	4619      	mov	r1, r3
 8003864:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003866:	f7fe f9aa 	bl	8001bbe <bsp_lora_get_id_in_node_receive_packets>
 800386a:	66f8      	str	r0, [r7, #108]	@ 0x6c
					if(packet_index != -1){
 800386c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	f000 80ac 	beq.w	80039ce <lora_network_response_warning_nodes_task+0x39a>

						//HAL_UART_Transmit(&huart2, "ack packet debug 3\n", 19, 2000);

						uart_data_frame_t uart_data_buffer = {0};
 8003876:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800387a:	222b      	movs	r2, #43	@ 0x2b
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f00d fa6c 	bl	8010d5c <memset>
						uart_data_buffer.len = 40;
 8003884:	2328      	movs	r3, #40	@ 0x28
 8003886:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
						uart_data_buffer.cmd = UART_CMD_HANDLE_DATA_READ_FROM_NODE;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
						uart_data_buffer.node_id = lora_node->id;
 8003890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						uart_data_buffer.raw_data[0] = lora_node->connected;
 8003898:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389a:	789b      	ldrb	r3, [r3, #2]
 800389c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						uart_data_buffer.raw_data[1] = lora_node->error;
 80038a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a2:	791b      	ldrb	r3, [r3, #4]
 80038a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
						// the first item of the payload contain information about the machine and remaining elements contain information about different things such as relay or contactor...
						// = 0: not working; = 1: working; = 2: error
						uart_data_buffer.raw_data[2] = lora_node->last_lora_receive_packet[packet_index].payload[0];
 80038a8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80038aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	33a1      	adds	r3, #161	@ 0xa1
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						memcpy(&uart_data_buffer.raw_data[8], lora_node->last_lora_receive_packet[packet_index].payload, MAX_PAYLOAD_LENGTH);
 80038c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038c2:	4613      	mov	r3, r2
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4413      	add	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	3398      	adds	r3, #152	@ 0x98
 80038ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038d0:	4413      	add	r3, r2
 80038d2:	f103 0109 	add.w	r1, r3, #9
 80038d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038da:	330b      	adds	r3, #11
 80038dc:	2220      	movs	r2, #32
 80038de:	4618      	mov	r0, r3
 80038e0:	f00d fa80 	bl	8010de4 <memcpy>
						uint8_t *packet_bufer = (uint8_t *)(&uart_data_buffer);
 80038e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038e8:	66bb      	str	r3, [r7, #104]	@ 0x68

						uint8_t debug_buffer[35];
						sprintf(debug_buffer, "ack buffer of msg pid:%2d,%2d,%3d\n", lora_node->last_lora_receive_packet[packet_index].payload[0], lora_node->last_lora_receive_packet[packet_index].payload[1], lora_node->last_lora_receive_packet[packet_index].responsed);
 80038ea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80038ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	33a1      	adds	r3, #161	@ 0xa1
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461c      	mov	r4, r3
 8003900:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003902:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	440b      	add	r3, r1
 8003910:	33a2      	adds	r3, #162	@ 0xa2
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461d      	mov	r5, r3
 8003916:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003918:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	440b      	add	r3, r1
 8003926:	3396      	adds	r3, #150	@ 0x96
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f107 0008 	add.w	r0, r7, #8
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	462b      	mov	r3, r5
 8003932:	4622      	mov	r2, r4
 8003934:	4934      	ldr	r1, [pc, #208]	@ (8003a08 <lora_network_response_warning_nodes_task+0x3d4>)
 8003936:	f00d f9f1 	bl	8010d1c <siprintf>
						HAL_UART_Transmit(&huart2, debug_buffer, sizeof(debug_buffer), 2000);
 800393a:	f107 0108 	add.w	r1, r7, #8
 800393e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003942:	2223      	movs	r2, #35	@ 0x23
 8003944:	4831      	ldr	r0, [pc, #196]	@ (8003a0c <lora_network_response_warning_nodes_task+0x3d8>)
 8003946:	f005 fd91 	bl	800946c <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart1, packet_bufer, sizeof(uart_data_frame_t), 2000);
 800394a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800394e:	222b      	movs	r2, #43	@ 0x2b
 8003950:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003952:	482f      	ldr	r0, [pc, #188]	@ (8003a10 <lora_network_response_warning_nodes_task+0x3dc>)
 8003954:	f005 fd8a 	bl	800946c <HAL_UART_Transmit>
						pc_user_send_node_data_to_pc(uart_data_buffer.len, uart_data_buffer.node_id, uart_data_buffer.raw_data);
 8003958:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 800395c:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003960:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003964:	3303      	adds	r3, #3
 8003966:	461a      	mov	r2, r3
 8003968:	f7fe fd16 	bl	8002398 <pc_user_send_node_data_to_pc>



						NotificationValue.cmd = ACK;
 800396c:	2307      	movs	r3, #7
 800396e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
						NotificationValue.node_id = lora_node->id;
 8003972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
						NotificationValue.packet_id = lora_node->last_lora_receive_packet[packet_index].responsed;
 800397a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800397c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	440b      	add	r3, r1
 800398a:	3396      	adds	r3, #150	@ 0x96
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

						HAL_UART_Transmit(&huart2, "Notify\n", 7, 2000);
 8003992:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003996:	2207      	movs	r2, #7
 8003998:	491e      	ldr	r1, [pc, #120]	@ (8003a14 <lora_network_response_warning_nodes_task+0x3e0>)
 800399a:	481c      	ldr	r0, [pc, #112]	@ (8003a0c <lora_network_response_warning_nodes_task+0x3d8>)
 800399c:	f005 fd66 	bl	800946c <HAL_UART_Transmit>
						if(uxQueueMessagesWaiting(send_request_queue) < 3)
 80039a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <lora_network_response_warning_nodes_task+0x3e4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00a fab5 	bl	800df14 <uxQueueMessagesWaiting>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d808      	bhi.n	80039c2 <lora_network_response_warning_nodes_task+0x38e>
							xQueueSend(send_request_queue, &NotificationValue, portMAX_DELAY);
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <lora_network_response_warning_nodes_task+0x3e4>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80039b8:	2300      	movs	r3, #0
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295
 80039be:	f009 fe87 	bl	800d6d0 <xQueueGenericSend>

						bsp_lora_remove_packet_from_node_receive_packets(lora_node, packet_index);
 80039c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80039ca:	f7fe f951 	bl	8001c70 <bsp_lora_remove_packet_from_node_receive_packets>
					}
				}
			}


			while (HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 80039ce:	bf00      	nop
 80039d0:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <lora_network_response_warning_nodes_task+0x3e8>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 ff40 	bl	800885a <HAL_SPI_GetState>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d1f7      	bne.n	80039d0 <lora_network_response_warning_nodes_task+0x39c>
			lora_network_send_request_start_scheduler();
 80039e0:	f7ff fd48 	bl	8003474 <lora_network_send_request_start_scheduler>

			STM_LOG("Quit send request\n", 0, 18);
 80039e4:	2212      	movs	r2, #18
 80039e6:	2100      	movs	r1, #0
 80039e8:	480d      	ldr	r0, [pc, #52]	@ (8003a20 <lora_network_response_warning_nodes_task+0x3ec>)
 80039ea:	f7fd fe9d 	bl	8001728 <STM_LOG>
			xSemaphoreGive(spi_mutex);
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <lora_network_response_warning_nodes_task+0x3f0>)
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	f009 fe6a 	bl	800d6d0 <xQueueGenericSend>
			bsp_lora_exit_safe_mode();
 80039fc:	f7fd fe76 	bl	80016ec <bsp_lora_exit_safe_mode>
		if(xQueueReceive(warning_queue, &NotificationValue, portMAX_DELAY)){
 8003a00:	e61c      	b.n	800363c <lora_network_response_warning_nodes_task+0x8>
 8003a02:	bf00      	nop
 8003a04:	200008a1 	.word	0x200008a1
 8003a08:	08011a50 	.word	0x08011a50
 8003a0c:	20001ad0 	.word	0x20001ad0
 8003a10:	20001a88 	.word	0x20001a88
 8003a14:	08011a74 	.word	0x08011a74
 8003a18:	200018a0 	.word	0x200018a0
 8003a1c:	2000016c 	.word	0x2000016c
 8003a20:	08011a7c 	.word	0x08011a7c
 8003a24:	200018ac 	.word	0x200018ac

08003a28 <lora_network_save_current_work>:
}


/* if the gw is sending a packet through lora but not received ack packet yet, and at the same time it receive cmd from
 * user or receive warning or ack packet from other nodes, it will save this current packet and process incoming packet */
void lora_network_save_current_work(){
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
	if(lora_send_packet_buffer.destination_id != 0){
 8003a2e:	4bae      	ldr	r3, [pc, #696]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003a30:	789b      	ldrb	r3, [r3, #2]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8238 	beq.w	8003ea8 <lora_network_save_current_work+0x480>
		if(lora_send_packet_buffer.responsed == 0){
 8003a38:	4bab      	ldr	r3, [pc, #684]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003a3a:	791b      	ldrb	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 8233 	bne.w	8003ea8 <lora_network_save_current_work+0x480>
			lora_node_t *lora_node;

			if(lora_send_packet_buffer.cmd == LORA_CMD_CONNECT || lora_send_packet_buffer.cmd == LORA_CMD_DISCONNECT){
 8003a42:	4ba9      	ldr	r3, [pc, #676]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003a44:	795b      	ldrb	r3, [r3, #5]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <lora_network_save_current_work+0x2a>
 8003a4a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003a4c:	795b      	ldrb	r3, [r3, #5]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d123      	bne.n	8003a9a <lora_network_save_current_work+0x72>
				for(uint8_t i = 0; i < lr_nw_node_quantity; i++){
 8003a52:	2300      	movs	r3, #0
 8003a54:	74fb      	strb	r3, [r7, #19]
 8003a56:	e01a      	b.n	8003a8e <lora_network_save_current_work+0x66>
					if(NODE_DEVICE[i].id == lora_send_packet_buffer.destination_id){
 8003a58:	7cfa      	ldrb	r2, [r7, #19]
 8003a5a:	49a4      	ldr	r1, [pc, #656]	@ (8003cec <lora_network_save_current_work+0x2c4>)
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	015b      	lsls	r3, r3, #5
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	440b      	add	r3, r1
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003a6c:	789b      	ldrb	r3, [r3, #2]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10a      	bne.n	8003a88 <lora_network_save_current_work+0x60>
						lora_node = &NODE_DEVICE[i];
 8003a72:	7cfa      	ldrb	r2, [r7, #19]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	015b      	lsls	r3, r3, #5
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	4a9b      	ldr	r2, [pc, #620]	@ (8003cec <lora_network_save_current_work+0x2c4>)
 8003a80:	4413      	add	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
						break;
 8003a84:	bf00      	nop
				for(uint8_t i = 0; i < lr_nw_node_quantity; i++){
 8003a86:	e02a      	b.n	8003ade <lora_network_save_current_work+0xb6>
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	74fb      	strb	r3, [r7, #19]
 8003a8e:	4b98      	ldr	r3, [pc, #608]	@ (8003cf0 <lora_network_save_current_work+0x2c8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	7cfa      	ldrb	r2, [r7, #19]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3df      	bcc.n	8003a58 <lora_network_save_current_work+0x30>
 8003a98:	e021      	b.n	8003ade <lora_network_save_current_work+0xb6>
					}
				}
			}
			else{
				for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	74bb      	strb	r3, [r7, #18]
 8003a9e:	e019      	b.n	8003ad4 <lora_network_save_current_work+0xac>
					if(CONNECTED_NODE[i].id == lora_send_packet_buffer.destination_id){
 8003aa0:	7cba      	ldrb	r2, [r7, #18]
 8003aa2:	4994      	ldr	r1, [pc, #592]	@ (8003cf4 <lora_network_save_current_work+0x2cc>)
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	015b      	lsls	r3, r3, #5
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	440b      	add	r3, r1
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003ab4:	789b      	ldrb	r3, [r3, #2]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d109      	bne.n	8003ace <lora_network_save_current_work+0xa6>
						lora_node = &CONNECTED_NODE[i];
 8003aba:	7cba      	ldrb	r2, [r7, #18]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	4a8b      	ldr	r2, [pc, #556]	@ (8003cf4 <lora_network_save_current_work+0x2cc>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
						break;
 8003acc:	e007      	b.n	8003ade <lora_network_save_current_work+0xb6>
				for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8003ace:	7cbb      	ldrb	r3, [r7, #18]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	74bb      	strb	r3, [r7, #18]
 8003ad4:	4b88      	ldr	r3, [pc, #544]	@ (8003cf8 <lora_network_save_current_work+0x2d0>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	7cba      	ldrb	r2, [r7, #18]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3e0      	bcc.n	8003aa0 <lora_network_save_current_work+0x78>
					}
				}
			}

			/* if time to live byte of packet is still > 0 */
			if(lora_send_packet_buffer.ttl > 0){
 8003ade:	4b82      	ldr	r3, [pc, #520]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003ae0:	78db      	ldrb	r3, [r3, #3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d071      	beq.n	8003bca <lora_network_save_current_work+0x1a2>
				STM_LOG("save curent task1\n", 0, 18);
 8003ae6:	2212      	movs	r2, #18
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4884      	ldr	r0, [pc, #528]	@ (8003cfc <lora_network_save_current_work+0x2d4>)
 8003aec:	f7fd fe1c 	bl	8001728 <STM_LOG>
				xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 8003af0:	4b83      	ldr	r3, [pc, #524]	@ (8003d00 <lora_network_save_current_work+0x2d8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f009 ff8a 	bl	800da10 <xQueueGiveFromISR>
				semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 8003afc:	4b81      	ldr	r3, [pc, #516]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d805      	bhi.n	8003b12 <lora_network_save_current_work+0xea>
 8003b06:	4b7f      	ldr	r3, [pc, #508]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e000      	b.n	8003b14 <lora_network_save_current_work+0xec>
 8003b12:	2303      	movs	r3, #3
 8003b14:	4a7b      	ldr	r2, [pc, #492]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003b16:	7013      	strb	r3, [r2, #0]
				STM_LOG("smph c: %2d\n", semaphore_count, 11);
 8003b18:	4b7a      	ldr	r3, [pc, #488]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	220b      	movs	r2, #11
 8003b20:	4619      	mov	r1, r3
 8003b22:	4879      	ldr	r0, [pc, #484]	@ (8003d08 <lora_network_save_current_work+0x2e0>)
 8003b24:	f7fd fe00 	bl	8001728 <STM_LOG>
				memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8003b28:	4b76      	ldr	r3, [pc, #472]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	1e5a      	subs	r2, r3, #1
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	4a74      	ldr	r2, [pc, #464]	@ (8003d0c <lora_network_save_current_work+0x2e4>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f102 0420 	add.w	r4, r2, #32
 8003b46:	4603      	mov	r3, r0
 8003b48:	4611      	mov	r1, r2
 8003b4a:	f8d1 c000 	ldr.w	ip, [r1]
 8003b4e:	684e      	ldr	r6, [r1, #4]
 8003b50:	688d      	ldr	r5, [r1, #8]
 8003b52:	68c9      	ldr	r1, [r1, #12]
 8003b54:	f8c3 c000 	str.w	ip, [r3]
 8003b58:	605e      	str	r6, [r3, #4]
 8003b5a:	609d      	str	r5, [r3, #8]
 8003b5c:	60d9      	str	r1, [r3, #12]
 8003b5e:	3210      	adds	r2, #16
 8003b60:	3010      	adds	r0, #16
 8003b62:	42a2      	cmp	r2, r4
 8003b64:	d1ef      	bne.n	8003b46 <lora_network_save_current_work+0x11e>
 8003b66:	4603      	mov	r3, r0
 8003b68:	6814      	ldr	r4, [r2, #0]
 8003b6a:	6850      	ldr	r0, [r2, #4]
 8003b6c:	6891      	ldr	r1, [r2, #8]
 8003b6e:	601c      	str	r4, [r3, #0]
 8003b70:	6058      	str	r0, [r3, #4]
 8003b72:	6099      	str	r1, [r3, #8]
 8003b74:	8991      	ldrh	r1, [r2, #12]
 8003b76:	7b92      	ldrb	r2, [r2, #14]
 8003b78:	8199      	strh	r1, [r3, #12]
 8003b7a:	739a      	strb	r2, [r3, #14]


				if(lora_send_packet_buffer.cmd == LORA_CMD_CONNECT){
 8003b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003b7e:	795b      	ldrb	r3, [r3, #5]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <lora_network_save_current_work+0x162>
					/*xTimerStopFromISR(all_connect_timer, NULL);
					xTimerStopFromISR(all_disconnect_timer, NULL);
					xTimerStopFromISR(send_data_timer, NULL);*/
					lora_network_stop_connect_timer();
 8003b84:	f7fe fb8a 	bl	800229c <lora_network_stop_connect_timer>
					}
				}
			}
		}
	}
}
 8003b88:	e18e      	b.n	8003ea8 <lora_network_save_current_work+0x480>
				else if(lora_send_packet_buffer.cmd == LORA_CMD_DISCONNECT){
 8003b8a:	4b57      	ldr	r3, [pc, #348]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003b8c:	795b      	ldrb	r3, [r3, #5]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d102      	bne.n	8003b98 <lora_network_save_current_work+0x170>
					lora_network_stop_disconnect_timer();
 8003b92:	f7fe fba7 	bl	80022e4 <lora_network_stop_disconnect_timer>
}
 8003b96:	e187      	b.n	8003ea8 <lora_network_save_current_work+0x480>
				else if(lora_send_packet_buffer.cmd == LORA_CMD_READ_DATA){
 8003b98:	4b53      	ldr	r3, [pc, #332]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003b9a:	795b      	ldrb	r3, [r3, #5]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	f040 8183 	bne.w	8003ea8 <lora_network_save_current_work+0x480>
					STM_LOG("Save the task with id %3d\n", last_lora_send_packet_buffer[semaphore_count - 1].packet_id, 26);
 8003ba2:	4b58      	ldr	r3, [pc, #352]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	1e5a      	subs	r2, r3, #1
 8003baa:	4958      	ldr	r1, [pc, #352]	@ (8003d0c <lora_network_save_current_work+0x2e4>)
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	221a      	movs	r2, #26
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4854      	ldr	r0, [pc, #336]	@ (8003d10 <lora_network_save_current_work+0x2e8>)
 8003bc0:	f7fd fdb2 	bl	8001728 <STM_LOG>
					lora_network_stop_read_request_timer();
 8003bc4:	f7fe fbb2 	bl	800232c <lora_network_stop_read_request_timer>
}
 8003bc8:	e16e      	b.n	8003ea8 <lora_network_save_current_work+0x480>
				if(lora_send_packet_buffer.cmd == LORA_CMD_CONNECT){
 8003bca:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003bcc:	795b      	ldrb	r3, [r3, #5]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d16e      	bne.n	8003cb0 <lora_network_save_current_work+0x288>
					if(lora_node->error <= 1){
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	791b      	ldrb	r3, [r3, #4]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f200 8166 	bhi.w	8003ea8 <lora_network_save_current_work+0x480>
						xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 8003bdc:	4b48      	ldr	r3, [pc, #288]	@ (8003d00 <lora_network_save_current_work+0x2d8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f009 ff14 	bl	800da10 <xQueueGiveFromISR>
						semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 8003be8:	4b46      	ldr	r3, [pc, #280]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d805      	bhi.n	8003bfe <lora_network_save_current_work+0x1d6>
 8003bf2:	4b44      	ldr	r3, [pc, #272]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e000      	b.n	8003c00 <lora_network_save_current_work+0x1d8>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	4a40      	ldr	r2, [pc, #256]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003c02:	7013      	strb	r3, [r2, #0]
						lora_send_packet_buffer.ttl++;
 8003c04:	4b38      	ldr	r3, [pc, #224]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003c06:	78db      	ldrb	r3, [r3, #3]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003c0e:	70da      	strb	r2, [r3, #3]
						int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node, LORA_CMD_CONNECT, lora_send_packet_buffer.packet_id);
 8003c10:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	2100      	movs	r1, #0
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	f7fd ff47 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 8003c1e:	6078      	str	r0, [r7, #4]
						if(packet_index != -1){
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d016      	beq.n	8003c56 <lora_network_save_current_work+0x22e>
							lora_node->last_lora_send_packet[packet_index].ttl++;
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	3308      	adds	r3, #8
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	b2d8      	uxtb	r0, r3
 8003c40:	6979      	ldr	r1, [r7, #20]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3308      	adds	r3, #8
 8003c52:	4602      	mov	r2, r0
 8003c54:	701a      	strb	r2, [r3, #0]
						memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8003c56:	4b2b      	ldr	r3, [pc, #172]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	1e5a      	subs	r2, r3, #1
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	4a28      	ldr	r2, [pc, #160]	@ (8003d0c <lora_network_save_current_work+0x2e4>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f102 0420 	add.w	r4, r2, #32
 8003c74:	4603      	mov	r3, r0
 8003c76:	4611      	mov	r1, r2
 8003c78:	f8d1 c000 	ldr.w	ip, [r1]
 8003c7c:	684e      	ldr	r6, [r1, #4]
 8003c7e:	688d      	ldr	r5, [r1, #8]
 8003c80:	68c9      	ldr	r1, [r1, #12]
 8003c82:	f8c3 c000 	str.w	ip, [r3]
 8003c86:	605e      	str	r6, [r3, #4]
 8003c88:	609d      	str	r5, [r3, #8]
 8003c8a:	60d9      	str	r1, [r3, #12]
 8003c8c:	3210      	adds	r2, #16
 8003c8e:	3010      	adds	r0, #16
 8003c90:	42a2      	cmp	r2, r4
 8003c92:	d1ef      	bne.n	8003c74 <lora_network_save_current_work+0x24c>
 8003c94:	4603      	mov	r3, r0
 8003c96:	6814      	ldr	r4, [r2, #0]
 8003c98:	6850      	ldr	r0, [r2, #4]
 8003c9a:	6891      	ldr	r1, [r2, #8]
 8003c9c:	601c      	str	r4, [r3, #0]
 8003c9e:	6058      	str	r0, [r3, #4]
 8003ca0:	6099      	str	r1, [r3, #8]
 8003ca2:	8991      	ldrh	r1, [r2, #12]
 8003ca4:	7b92      	ldrb	r2, [r2, #14]
 8003ca6:	8199      	strh	r1, [r3, #12]
 8003ca8:	739a      	strb	r2, [r3, #14]
						lora_network_stop_connect_timer();
 8003caa:	f7fe faf7 	bl	800229c <lora_network_stop_connect_timer>
}
 8003cae:	e0fb      	b.n	8003ea8 <lora_network_save_current_work+0x480>
				else if(lora_send_packet_buffer.cmd == LORA_CMD_DISCONNECT){
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <lora_network_save_current_work+0x2c0>)
 8003cb2:	795b      	ldrb	r3, [r3, #5]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 8086 	bne.w	8003dc6 <lora_network_save_current_work+0x39e>
					if(lora_node->error <= 1){
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	791b      	ldrb	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	f200 80f2 	bhi.w	8003ea8 <lora_network_save_current_work+0x480>
						xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d00 <lora_network_save_current_work+0x2d8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f009 fea0 	bl	800da10 <xQueueGiveFromISR>
						semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d81c      	bhi.n	8003d14 <lora_network_save_current_work+0x2ec>
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <lora_network_save_current_work+0x2dc>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e017      	b.n	8003d16 <lora_network_save_current_work+0x2ee>
 8003ce6:	bf00      	nop
 8003ce8:	20000198 	.word	0x20000198
 8003cec:	200008c0 	.word	0x200008c0
 8003cf0:	200008a0 	.word	0x200008a0
 8003cf4:	2000109c 	.word	0x2000109c
 8003cf8:	200008a1 	.word	0x200008a1
 8003cfc:	08011abc 	.word	0x08011abc
 8003d00:	200018b4 	.word	0x200018b4
 8003d04:	200018b8 	.word	0x200018b8
 8003d08:	08011ad0 	.word	0x08011ad0
 8003d0c:	200018bc 	.word	0x200018bc
 8003d10:	08011ae0 	.word	0x08011ae0
 8003d14:	2303      	movs	r3, #3
 8003d16:	4a66      	ldr	r2, [pc, #408]	@ (8003eb0 <lora_network_save_current_work+0x488>)
 8003d18:	7013      	strb	r3, [r2, #0]
						lora_send_packet_buffer.ttl++;
 8003d1a:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003d1c:	78db      	ldrb	r3, [r3, #3]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b64      	ldr	r3, [pc, #400]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003d24:	70da      	strb	r2, [r3, #3]
						int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node, LORA_CMD_DISCONNECT, lora_send_packet_buffer.packet_id);
 8003d26:	4b63      	ldr	r3, [pc, #396]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7fd febc 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 8003d34:	60b8      	str	r0, [r7, #8]
						if(packet_index != -1){
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d016      	beq.n	8003d6c <lora_network_save_current_work+0x344>
							lora_node->last_lora_send_packet[packet_index].ttl++;
 8003d3e:	6979      	ldr	r1, [r7, #20]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3308      	adds	r3, #8
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	b2d8      	uxtb	r0, r3
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	3308      	adds	r3, #8
 8003d68:	4602      	mov	r2, r0
 8003d6a:	701a      	strb	r2, [r3, #0]
						memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8003d6c:	4b50      	ldr	r3, [pc, #320]	@ (8003eb0 <lora_network_save_current_work+0x488>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	1e5a      	subs	r2, r3, #1
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8003eb8 <lora_network_save_current_work+0x490>)
 8003d80:	4413      	add	r3, r2
 8003d82:	4a4c      	ldr	r2, [pc, #304]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f102 0420 	add.w	r4, r2, #32
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	f8d1 c000 	ldr.w	ip, [r1]
 8003d92:	684e      	ldr	r6, [r1, #4]
 8003d94:	688d      	ldr	r5, [r1, #8]
 8003d96:	68c9      	ldr	r1, [r1, #12]
 8003d98:	f8c3 c000 	str.w	ip, [r3]
 8003d9c:	605e      	str	r6, [r3, #4]
 8003d9e:	609d      	str	r5, [r3, #8]
 8003da0:	60d9      	str	r1, [r3, #12]
 8003da2:	3210      	adds	r2, #16
 8003da4:	3010      	adds	r0, #16
 8003da6:	42a2      	cmp	r2, r4
 8003da8:	d1ef      	bne.n	8003d8a <lora_network_save_current_work+0x362>
 8003daa:	4603      	mov	r3, r0
 8003dac:	6814      	ldr	r4, [r2, #0]
 8003dae:	6850      	ldr	r0, [r2, #4]
 8003db0:	6891      	ldr	r1, [r2, #8]
 8003db2:	601c      	str	r4, [r3, #0]
 8003db4:	6058      	str	r0, [r3, #4]
 8003db6:	6099      	str	r1, [r3, #8]
 8003db8:	8991      	ldrh	r1, [r2, #12]
 8003dba:	7b92      	ldrb	r2, [r2, #14]
 8003dbc:	8199      	strh	r1, [r3, #12]
 8003dbe:	739a      	strb	r2, [r3, #14]
						lora_network_stop_disconnect_timer();
 8003dc0:	f7fe fa90 	bl	80022e4 <lora_network_stop_disconnect_timer>
}
 8003dc4:	e070      	b.n	8003ea8 <lora_network_save_current_work+0x480>
				else if(lora_send_packet_buffer.cmd == LORA_CMD_READ_DATA){
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003dc8:	795b      	ldrb	r3, [r3, #5]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d16c      	bne.n	8003ea8 <lora_network_save_current_work+0x480>
					if(lora_node->error <= 1){
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	791b      	ldrb	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d868      	bhi.n	8003ea8 <lora_network_save_current_work+0x480>
						xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 8003dd6:	4b39      	ldr	r3, [pc, #228]	@ (8003ebc <lora_network_save_current_work+0x494>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f009 fe17 	bl	800da10 <xQueueGiveFromISR>
						semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 8003de2:	4b33      	ldr	r3, [pc, #204]	@ (8003eb0 <lora_network_save_current_work+0x488>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d805      	bhi.n	8003df8 <lora_network_save_current_work+0x3d0>
 8003dec:	4b30      	ldr	r3, [pc, #192]	@ (8003eb0 <lora_network_save_current_work+0x488>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e000      	b.n	8003dfa <lora_network_save_current_work+0x3d2>
 8003df8:	2303      	movs	r3, #3
 8003dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb0 <lora_network_save_current_work+0x488>)
 8003dfc:	7013      	strb	r3, [r2, #0]
						lora_send_packet_buffer.ttl++;
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003e00:	78db      	ldrb	r3, [r3, #3]
 8003e02:	3301      	adds	r3, #1
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003e08:	70da      	strb	r2, [r3, #3]
						int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node, LORA_CMD_READ_DATA, lora_send_packet_buffer.packet_id);
 8003e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2103      	movs	r1, #3
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7fd fe4a 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 8003e18:	60f8      	str	r0, [r7, #12]
						if(packet_index != -1){
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d016      	beq.n	8003e50 <lora_network_save_current_work+0x428>
							lora_node->last_lora_send_packet[packet_index].ttl++;
 8003e22:	6979      	ldr	r1, [r7, #20]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	440b      	add	r3, r1
 8003e32:	3308      	adds	r3, #8
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	b2d8      	uxtb	r0, r3
 8003e3a:	6979      	ldr	r1, [r7, #20]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	701a      	strb	r2, [r3, #0]
						memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8003e50:	4b17      	ldr	r3, [pc, #92]	@ (8003eb0 <lora_network_save_current_work+0x488>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	4a15      	ldr	r2, [pc, #84]	@ (8003eb8 <lora_network_save_current_work+0x490>)
 8003e64:	4413      	add	r3, r2
 8003e66:	4a13      	ldr	r2, [pc, #76]	@ (8003eb4 <lora_network_save_current_work+0x48c>)
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f102 0420 	add.w	r4, r2, #32
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4611      	mov	r1, r2
 8003e72:	f8d1 c000 	ldr.w	ip, [r1]
 8003e76:	684e      	ldr	r6, [r1, #4]
 8003e78:	688d      	ldr	r5, [r1, #8]
 8003e7a:	68c9      	ldr	r1, [r1, #12]
 8003e7c:	f8c3 c000 	str.w	ip, [r3]
 8003e80:	605e      	str	r6, [r3, #4]
 8003e82:	609d      	str	r5, [r3, #8]
 8003e84:	60d9      	str	r1, [r3, #12]
 8003e86:	3210      	adds	r2, #16
 8003e88:	3010      	adds	r0, #16
 8003e8a:	42a2      	cmp	r2, r4
 8003e8c:	d1ef      	bne.n	8003e6e <lora_network_save_current_work+0x446>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6814      	ldr	r4, [r2, #0]
 8003e92:	6850      	ldr	r0, [r2, #4]
 8003e94:	6891      	ldr	r1, [r2, #8]
 8003e96:	601c      	str	r4, [r3, #0]
 8003e98:	6058      	str	r0, [r3, #4]
 8003e9a:	6099      	str	r1, [r3, #8]
 8003e9c:	8991      	ldrh	r1, [r2, #12]
 8003e9e:	7b92      	ldrb	r2, [r2, #14]
 8003ea0:	8199      	strh	r1, [r3, #12]
 8003ea2:	739a      	strb	r2, [r3, #14]
						lora_network_stop_read_request_timer();
 8003ea4:	f7fe fa42 	bl	800232c <lora_network_stop_read_request_timer>
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb0:	200018b8 	.word	0x200018b8
 8003eb4:	20000198 	.word	0x20000198
 8003eb8:	200018bc 	.word	0x200018bc
 8003ebc:	200018b4 	.word	0x200018b4

08003ec0 <pc_user_cmd_handle>:

/*void pc_user_ack_response_step2(){

}*/

void pc_user_cmd_handle(uint8_t *test_buffer){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	uint8_t cmd = test_buffer[1];
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	75fb      	strb	r3, [r7, #23]
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
	connection_task_notification_value_t NotificationValue;
	switch(cmd){
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	f200 80b7 	bhi.w	8004048 <pc_user_cmd_handle+0x188>
 8003eda:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee0 <pc_user_cmd_handle+0x20>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003f47 	.word	0x08003f47
 8003ee8:	08003f99 	.word	0x08003f99
 8003eec:	08003fe9 	.word	0x08003fe9
	case PC_CMD_CONNECT_TO_ALL_NODES:
		if(lr_nw_connect_mode == LORA_STATUS_IDLE && lr_nw_disconnect_mode == LORA_STATUS_IDLE){
 8003ef0:	4b57      	ldr	r3, [pc, #348]	@ (8004050 <pc_user_cmd_handle+0x190>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 80a0 	bne.w	800403a <pc_user_cmd_handle+0x17a>
 8003efa:	4b56      	ldr	r3, [pc, #344]	@ (8004054 <pc_user_cmd_handle+0x194>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 809b 	bne.w	800403a <pc_user_cmd_handle+0x17a>
			// ack to cmd from pc
			pc_user_ack_response();
 8003f04:	f7fe fa24 	bl	8002350 <pc_user_ack_response>

			lora_network_save_current_work();
 8003f08:	f7ff fd8e 	bl	8003a28 <lora_network_save_current_work>
			lr_nw_connect_mode = LORA_CONNECT_MODE_ALL;
 8003f0c:	4b50      	ldr	r3, [pc, #320]	@ (8004050 <pc_user_cmd_handle+0x190>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = START_ALL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	733b      	strb	r3, [r7, #12]
			NotificationValue.node_id = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003f1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004058 <pc_user_cmd_handle+0x198>)
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	f107 0210 	add.w	r2, r7, #16
 8003f22:	f107 010c 	add.w	r1, r7, #12
 8003f26:	2300      	movs	r3, #0
 8003f28:	f009 fcd4 	bl	800d8d4 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8083 	beq.w	800403a <pc_user_cmd_handle+0x17a>
 8003f34:	4b49      	ldr	r3, [pc, #292]	@ (800405c <pc_user_cmd_handle+0x19c>)
 8003f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	f3bf 8f6f 	isb	sy
		}
		break;
 8003f44:	e079      	b.n	800403a <pc_user_cmd_handle+0x17a>

	case PC_CMD_CONNECT_TO_SPECIFIC_NODE:
		if(lr_nw_connect_mode == LORA_STATUS_IDLE && lr_nw_disconnect_mode == LORA_STATUS_IDLE){
 8003f46:	4b42      	ldr	r3, [pc, #264]	@ (8004050 <pc_user_cmd_handle+0x190>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d177      	bne.n	800403e <pc_user_cmd_handle+0x17e>
 8003f4e:	4b41      	ldr	r3, [pc, #260]	@ (8004054 <pc_user_cmd_handle+0x194>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d173      	bne.n	800403e <pc_user_cmd_handle+0x17e>
			// ack to cmd from pc
			pc_user_ack_response();
 8003f56:	f7fe f9fb 	bl	8002350 <pc_user_ack_response>

			lora_network_save_current_work();
 8003f5a:	f7ff fd65 	bl	8003a28 <lora_network_save_current_work>
			lr_nw_connect_mode = LORA_CONNECT_MODE_SPECIFIC;
 8003f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004050 <pc_user_cmd_handle+0x190>)
 8003f60:	2202      	movs	r2, #2
 8003f62:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = START_SPECIFIC;
 8003f64:	2301      	movs	r3, #1
 8003f66:	733b      	strb	r3, [r7, #12]
			NotificationValue.node_id = test_buffer[2];
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	789b      	ldrb	r3, [r3, #2]
 8003f6c:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004058 <pc_user_cmd_handle+0x198>)
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	f107 0210 	add.w	r2, r7, #16
 8003f76:	f107 010c 	add.w	r1, r7, #12
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f009 fcaa 	bl	800d8d4 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d05b      	beq.n	800403e <pc_user_cmd_handle+0x17e>
 8003f86:	4b35      	ldr	r3, [pc, #212]	@ (800405c <pc_user_cmd_handle+0x19c>)
 8003f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	f3bf 8f6f 	isb	sy
		}
		break;
 8003f96:	e052      	b.n	800403e <pc_user_cmd_handle+0x17e>

	case PC_CMD_DISCONNECT_TO_ALL_NODES:
		if(lr_nw_disconnect_mode == LORA_STATUS_IDLE && lr_nw_connect_mode == LORA_STATUS_IDLE){
 8003f98:	4b2e      	ldr	r3, [pc, #184]	@ (8004054 <pc_user_cmd_handle+0x194>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d150      	bne.n	8004042 <pc_user_cmd_handle+0x182>
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <pc_user_cmd_handle+0x190>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d14c      	bne.n	8004042 <pc_user_cmd_handle+0x182>
			// ack to cmd from pc
			pc_user_ack_response();
 8003fa8:	f7fe f9d2 	bl	8002350 <pc_user_ack_response>

			lora_network_save_current_work();
 8003fac:	f7ff fd3c 	bl	8003a28 <lora_network_save_current_work>
			lr_nw_disconnect_mode = LORA_DISCONNECT_MODE_ALL;
 8003fb0:	4b28      	ldr	r3, [pc, #160]	@ (8004054 <pc_user_cmd_handle+0x194>)
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = STOP_ALL;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	733b      	strb	r3, [r7, #12]
			NotificationValue.node_id = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003fbe:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <pc_user_cmd_handle+0x1a0>)
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	f107 0210 	add.w	r2, r7, #16
 8003fc6:	f107 010c 	add.w	r1, r7, #12
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f009 fc82 	bl	800d8d4 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d035      	beq.n	8004042 <pc_user_cmd_handle+0x182>
 8003fd6:	4b21      	ldr	r3, [pc, #132]	@ (800405c <pc_user_cmd_handle+0x19c>)
 8003fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
		}
		break;
 8003fe6:	e02c      	b.n	8004042 <pc_user_cmd_handle+0x182>

	case PC_CMD_DISCONNECT_TO_SPECIFIC_NODE:
		if(lr_nw_disconnect_mode == LORA_STATUS_IDLE && lr_nw_connect_mode == LORA_STATUS_IDLE){
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <pc_user_cmd_handle+0x194>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d12a      	bne.n	8004046 <pc_user_cmd_handle+0x186>
 8003ff0:	4b17      	ldr	r3, [pc, #92]	@ (8004050 <pc_user_cmd_handle+0x190>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d126      	bne.n	8004046 <pc_user_cmd_handle+0x186>
			// ack to cmd from pc
			pc_user_ack_response();
 8003ff8:	f7fe f9aa 	bl	8002350 <pc_user_ack_response>

			lora_network_save_current_work();
 8003ffc:	f7ff fd14 	bl	8003a28 <lora_network_save_current_work>
			lr_nw_disconnect_mode = LORA_DISCONNECT_MODE_SPECIFIC;
 8004000:	4b14      	ldr	r3, [pc, #80]	@ (8004054 <pc_user_cmd_handle+0x194>)
 8004002:	2204      	movs	r2, #4
 8004004:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = STOP_SPECIFIC;
 8004006:	2303      	movs	r3, #3
 8004008:	733b      	strb	r3, [r7, #12]
			NotificationValue.node_id = test_buffer[2];
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	789b      	ldrb	r3, [r3, #2]
 800400e:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004010:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <pc_user_cmd_handle+0x1a0>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	f107 0210 	add.w	r2, r7, #16
 8004018:	f107 010c 	add.w	r1, r7, #12
 800401c:	2300      	movs	r3, #0
 800401e:	f009 fc59 	bl	800d8d4 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <pc_user_cmd_handle+0x186>
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <pc_user_cmd_handle+0x19c>)
 800402a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	f3bf 8f6f 	isb	sy
		}
		break;
 8004038:	e005      	b.n	8004046 <pc_user_cmd_handle+0x186>
		break;
 800403a:	bf00      	nop
 800403c:	e004      	b.n	8004048 <pc_user_cmd_handle+0x188>
		break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <pc_user_cmd_handle+0x188>
		break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <pc_user_cmd_handle+0x188>
		break;
 8004046:	bf00      	nop
	}
}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200008a6 	.word	0x200008a6
 8004054:	200008a7 	.word	0x200008a7
 8004058:	20001898 	.word	0x20001898
 800405c:	e000ed04 	.word	0xe000ed04
 8004060:	2000189c 	.word	0x2000189c

08004064 <lora_network_cmd_ack_handle>:

/**
 * this function is used to handle ack from nodes
 * e.g. ack from node 1 to indicate that node 1 received sucessfully connect cmd from gw
 * **/
void lora_network_cmd_ack_handle(){
 8004064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004066:	b08f      	sub	sp, #60	@ 0x3c
 8004068:	af00      	add	r7, sp, #0
	uint8_t k = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t responsed = lora_receive_packet_buffer.responsed;
 8004070:	4bb9      	ldr	r3, [pc, #740]	@ (8004358 <lora_network_cmd_ack_handle+0x2f4>)
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t handling_last_buffer = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	lora_packet_t * lora_buffer;

	// check if this is ack for lora_send_buffer or last_lora_send_buffers
	// if this ack is for lora_send_buffer
	HAL_UART_Transmit(&huart2, "Ack handle\n", 11, 2000);
 8004082:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004086:	220b      	movs	r2, #11
 8004088:	49b4      	ldr	r1, [pc, #720]	@ (800435c <lora_network_cmd_ack_handle+0x2f8>)
 800408a:	48b5      	ldr	r0, [pc, #724]	@ (8004360 <lora_network_cmd_ack_handle+0x2fc>)
 800408c:	f005 f9ee 	bl	800946c <HAL_UART_Transmit>
	STM_LOG("Responsed value: %3d\n", responsed, 22);
 8004090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004094:	2216      	movs	r2, #22
 8004096:	4619      	mov	r1, r3
 8004098:	48b2      	ldr	r0, [pc, #712]	@ (8004364 <lora_network_cmd_ack_handle+0x300>)
 800409a:	f7fd fb45 	bl	8001728 <STM_LOG>

	if(responsed == lora_send_packet_buffer.packet_id){
 800409e:	4bb2      	ldr	r3, [pc, #712]	@ (8004368 <lora_network_cmd_ack_handle+0x304>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d102      	bne.n	80040b0 <lora_network_cmd_ack_handle+0x4c>
		// get node object which the gateway received from
		lora_buffer = &lora_send_packet_buffer;
 80040aa:	4baf      	ldr	r3, [pc, #700]	@ (8004368 <lora_network_cmd_ack_handle+0x304>)
 80040ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ae:	e02b      	b.n	8004108 <lora_network_cmd_ack_handle+0xa4>
	}

	else{
		for(k = 0; k < semaphore_count; k++){
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80040b6:	e020      	b.n	80040fa <lora_network_cmd_ack_handle+0x96>
			if(responsed == last_lora_send_packet_buffer[k].packet_id){
 80040b8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80040bc:	49ab      	ldr	r1, [pc, #684]	@ (800436c <lora_network_cmd_ack_handle+0x308>)
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	440b      	add	r3, r1
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d10d      	bne.n	80040f0 <lora_network_cmd_ack_handle+0x8c>
				lora_buffer = &last_lora_send_packet_buffer[k];
 80040d4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	4aa2      	ldr	r2, [pc, #648]	@ (800436c <lora_network_cmd_ack_handle+0x308>)
 80040e4:	4413      	add	r3, r2
 80040e6:	633b      	str	r3, [r7, #48]	@ 0x30
				handling_last_buffer = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 80040ee:	e00b      	b.n	8004108 <lora_network_cmd_ack_handle+0xa4>
		for(k = 0; k < semaphore_count; k++){
 80040f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80040f4:	3301      	adds	r3, #1
 80040f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80040fa:	4b9d      	ldr	r3, [pc, #628]	@ (8004370 <lora_network_cmd_ack_handle+0x30c>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004104:	429a      	cmp	r2, r3
 8004106:	d3d7      	bcc.n	80040b8 <lora_network_cmd_ack_handle+0x54>
			}
		}
	}

	if(lora_buffer != NULL){
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8269 	beq.w	80045e2 <lora_network_cmd_ack_handle+0x57e>
		lora_buffer->responsed = responsed;
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004116:	711a      	strb	r2, [r3, #4]

		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	795b      	ldrb	r3, [r3, #5]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <lora_network_cmd_ack_handle+0xc6>
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	795b      	ldrb	r3, [r3, #5]
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 8160 	bne.w	80043ea <lora_network_cmd_ack_handle+0x386>
			lora_node_t *lora_node;
			uint8_t index = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			for(index = 0; index < lr_nw_node_quantity; index++){
 8004130:	2300      	movs	r3, #0
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004136:	e01d      	b.n	8004174 <lora_network_cmd_ack_handle+0x110>
				if(NODE_DEVICE[index].id == lora_receive_packet_buffer.source_id){
 8004138:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800413c:	498d      	ldr	r1, [pc, #564]	@ (8004374 <lora_network_cmd_ack_handle+0x310>)
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	015b      	lsls	r3, r3, #5
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	440b      	add	r3, r1
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	4b82      	ldr	r3, [pc, #520]	@ (8004358 <lora_network_cmd_ack_handle+0x2f4>)
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	429a      	cmp	r2, r3
 8004152:	d10a      	bne.n	800416a <lora_network_cmd_ack_handle+0x106>
					lora_node = &NODE_DEVICE[index];
 8004154:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	015b      	lsls	r3, r3, #5
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	4a84      	ldr	r2, [pc, #528]	@ (8004374 <lora_network_cmd_ack_handle+0x310>)
 8004164:	4413      	add	r3, r2
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
					break;
 8004168:	e00a      	b.n	8004180 <lora_network_cmd_ack_handle+0x11c>
			for(index = 0; index < lr_nw_node_quantity; index++){
 800416a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800416e:	3301      	adds	r3, #1
 8004170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004174:	4b80      	ldr	r3, [pc, #512]	@ (8004378 <lora_network_cmd_ack_handle+0x314>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800417c:	429a      	cmp	r2, r3
 800417e:	d3db      	bcc.n	8004138 <lora_network_cmd_ack_handle+0xd4>
				}
			}

			if(lora_buffer->cmd == LORA_CMD_CONNECT){
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	795b      	ldrb	r3, [r3, #5]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d173      	bne.n	8004270 <lora_network_cmd_ack_handle+0x20c>
				//xTimerStopFromISR(all_connect_timer, &pxHigherPriorityTaskWoken);
				lora_network_stop_connect_timer();
 8004188:	f7fe f888 	bl	800229c <lora_network_stop_connect_timer>

				// confirm the node lr_nw_node_index is connected and increase lr_nw_connected_node_quantity
				lora_node->connected = 1;
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	2201      	movs	r2, #1
 8004190:	709a      	strb	r2, [r3, #2]

				//int packet_index = bsp_lora_check_cmd_in_node_send_packets(lora_node, LORA_CMD_CONNECT);
				int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node, LORA_CMD_CONNECT, responsed);
 8004192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004196:	461a      	mov	r2, r3
 8004198:	2100      	movs	r1, #0
 800419a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800419c:	f7fd fc86 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 80041a0:	60f8      	str	r0, [r7, #12]
				if(packet_index != -1){
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	f000 820d 	beq.w	80045c6 <lora_network_cmd_ack_handle+0x562>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 80041ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004358 <lora_network_cmd_ack_handle+0x2f4>)
 80041ae:	7918      	ldrb	r0, [r3, #4]
 80041b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	440b      	add	r3, r1
 80041c0:	3309      	adds	r3, #9
 80041c2:	4602      	mov	r2, r0
 80041c4:	701a      	strb	r2, [r3, #0]
					lora_node->error = 0;
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	2200      	movs	r2, #0
 80041ca:	711a      	strb	r2, [r3, #4]
					memcpy((&CONNECTED_NODE[lr_nw_connected_node_quantity]), (lora_node), sizeof(lora_node_t));
 80041cc:	4b6b      	ldr	r3, [pc, #428]	@ (800437c <lora_network_cmd_ack_handle+0x318>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	015b      	lsls	r3, r3, #5
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	4a68      	ldr	r2, [pc, #416]	@ (8004380 <lora_network_cmd_ack_handle+0x31c>)
 80041de:	4413      	add	r3, r2
 80041e0:	f240 121f 	movw	r2, #287	@ 0x11f
 80041e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e6:	4618      	mov	r0, r3
 80041e8:	f00c fdfc 	bl	8010de4 <memcpy>

					int connect_packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(&CONNECTED_NODE[lr_nw_connected_node_quantity], LORA_CMD_CONNECT, responsed);
 80041ec:	4b63      	ldr	r3, [pc, #396]	@ (800437c <lora_network_cmd_ack_handle+0x318>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	015b      	lsls	r3, r3, #5
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	4a60      	ldr	r2, [pc, #384]	@ (8004380 <lora_network_cmd_ack_handle+0x31c>)
 80041fe:	4413      	add	r3, r2
 8004200:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd fc50 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 800420c:	60b8      	str	r0, [r7, #8]
					if(connect_packet_index != -1)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d00f      	beq.n	8004236 <lora_network_cmd_ack_handle+0x1d2>
						bsp_lora_remove_packet_from_node_send_packets(&CONNECTED_NODE[lr_nw_connected_node_quantity], connect_packet_index);
 8004216:	4b59      	ldr	r3, [pc, #356]	@ (800437c <lora_network_cmd_ack_handle+0x318>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	015b      	lsls	r3, r3, #5
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	4a56      	ldr	r2, [pc, #344]	@ (8004380 <lora_network_cmd_ack_handle+0x31c>)
 8004228:	4413      	add	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fc70 	bl	8001b16 <bsp_lora_remove_packet_from_node_send_packets>
					/*for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++)
						memset(&CONNECTED_NODE[lr_nw_connected_node_quantity].last_lora_send_packet[i], 0, sizeof(lora_packet_t));*/
					lr_nw_connected_node_quantity++;
 8004236:	4b51      	ldr	r3, [pc, #324]	@ (800437c <lora_network_cmd_ack_handle+0x318>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	3301      	adds	r3, #1
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b4f      	ldr	r3, [pc, #316]	@ (800437c <lora_network_cmd_ack_handle+0x318>)
 8004240:	701a      	strb	r2, [r3, #0]

					// notify to connection task with notification value = ACK
					NotificationValue.cmd = ACK;
 8004242:	2307      	movs	r3, #7
 8004244:	703b      	strb	r3, [r7, #0]
					NotificationValue.node_id = lora_node->id;
 8004246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	707b      	strb	r3, [r7, #1]
					NotificationValue.packet_id = responsed;
 800424c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004250:	70bb      	strb	r3, [r7, #2]

					HAL_UART_Transmit(&huart2, "Connect notify\n", 15, 2000);
 8004252:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004256:	220f      	movs	r2, #15
 8004258:	494a      	ldr	r1, [pc, #296]	@ (8004384 <lora_network_cmd_ack_handle+0x320>)
 800425a:	4841      	ldr	r0, [pc, #260]	@ (8004360 <lora_network_cmd_ack_handle+0x2fc>)
 800425c:	f005 f906 	bl	800946c <HAL_UART_Transmit>
					xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004260:	4b49      	ldr	r3, [pc, #292]	@ (8004388 <lora_network_cmd_ack_handle+0x324>)
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	1d3a      	adds	r2, r7, #4
 8004266:	4639      	mov	r1, r7
 8004268:	2300      	movs	r3, #0
 800426a:	f009 fb33 	bl	800d8d4 <xQueueGenericSendFromISR>
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 800426e:	e1aa      	b.n	80045c6 <lora_network_cmd_ack_handle+0x562>
					//portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
				}
			}

			else if(lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	795b      	ldrb	r3, [r3, #5]
 8004274:	2b01      	cmp	r3, #1
 8004276:	f040 81a6 	bne.w	80045c6 <lora_network_cmd_ack_handle+0x562>
				//xTimerStopFromISR(all_disconnect_timer, &pxHigherPriorityTaskWoken);
				lora_network_stop_disconnect_timer();
 800427a:	f7fe f833 	bl	80022e4 <lora_network_stop_disconnect_timer>

				lora_node->connected = 0;
 800427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004280:	2200      	movs	r2, #0
 8004282:	709a      	strb	r2, [r3, #2]
				int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node, LORA_CMD_DISCONNECT, responsed);
 8004284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004288:	461a      	mov	r2, r3
 800428a:	2101      	movs	r1, #1
 800428c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800428e:	f7fd fc0d 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 8004292:	6138      	str	r0, [r7, #16]
				if(packet_index != -1){
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	f000 8194 	beq.w	80045c6 <lora_network_cmd_ack_handle+0x562>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 800429e:	4b2e      	ldr	r3, [pc, #184]	@ (8004358 <lora_network_cmd_ack_handle+0x2f4>)
 80042a0:	7918      	ldrb	r0, [r3, #4]
 80042a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	440b      	add	r3, r1
 80042b2:	3309      	adds	r3, #9
 80042b4:	4602      	mov	r2, r0
 80042b6:	701a      	strb	r2, [r3, #0]
					lora_node->error = 0;
 80042b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ba:	2200      	movs	r2, #0
 80042bc:	711a      	strb	r2, [r3, #4]
					for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042c4:	e067      	b.n	8004396 <lora_network_cmd_ack_handle+0x332>
						if(CONNECTED_NODE[i].id == lora_node->id){
 80042c6:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80042ca:	492d      	ldr	r1, [pc, #180]	@ (8004380 <lora_network_cmd_ack_handle+0x31c>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	015b      	lsls	r3, r3, #5
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d154      	bne.n	800438c <lora_network_cmd_ack_handle+0x328>
							for(uint8_t j = i; j < lr_nw_connected_node_quantity - 1; j++){
 80042e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042e6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80042ea:	e01c      	b.n	8004326 <lora_network_cmd_ack_handle+0x2c2>
								memcpy(&CONNECTED_NODE[j], &CONNECTED_NODE[j + 1], sizeof(lora_node_t));
 80042ec:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	015b      	lsls	r3, r3, #5
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	4a21      	ldr	r2, [pc, #132]	@ (8004380 <lora_network_cmd_ack_handle+0x31c>)
 80042fc:	1898      	adds	r0, r3, r2
 80042fe:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	015b      	lsls	r3, r3, #5
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	4a1c      	ldr	r2, [pc, #112]	@ (8004380 <lora_network_cmd_ack_handle+0x31c>)
 8004310:	4413      	add	r3, r2
 8004312:	f240 121f 	movw	r2, #287	@ 0x11f
 8004316:	4619      	mov	r1, r3
 8004318:	f00c fd64 	bl	8010de4 <memcpy>
							for(uint8_t j = i; j < lr_nw_connected_node_quantity - 1; j++){
 800431c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004320:	3301      	adds	r3, #1
 8004322:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8004326:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800432a:	4b14      	ldr	r3, [pc, #80]	@ (800437c <lora_network_cmd_ack_handle+0x318>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	3b01      	subs	r3, #1
 8004330:	429a      	cmp	r2, r3
 8004332:	dbdb      	blt.n	80042ec <lora_network_cmd_ack_handle+0x288>
							}
							memset(&CONNECTED_NODE[lr_nw_connected_node_quantity - 1], 0, sizeof(lora_node_t));
 8004334:	4b11      	ldr	r3, [pc, #68]	@ (800437c <lora_network_cmd_ack_handle+0x318>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	1e5a      	subs	r2, r3, #1
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	015b      	lsls	r3, r3, #5
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	4a0e      	ldr	r2, [pc, #56]	@ (8004380 <lora_network_cmd_ack_handle+0x31c>)
 8004346:	4413      	add	r3, r2
 8004348:	f240 121f 	movw	r2, #287	@ 0x11f
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f00c fd04 	bl	8010d5c <memset>
							break;
 8004354:	e025      	b.n	80043a2 <lora_network_cmd_ack_handle+0x33e>
 8004356:	bf00      	nop
 8004358:	200001c8 	.word	0x200001c8
 800435c:	08011afc 	.word	0x08011afc
 8004360:	20001ad0 	.word	0x20001ad0
 8004364:	08011b08 	.word	0x08011b08
 8004368:	20000198 	.word	0x20000198
 800436c:	200018bc 	.word	0x200018bc
 8004370:	200018b8 	.word	0x200018b8
 8004374:	200008c0 	.word	0x200008c0
 8004378:	200008a0 	.word	0x200008a0
 800437c:	200008a1 	.word	0x200008a1
 8004380:	2000109c 	.word	0x2000109c
 8004384:	08011b20 	.word	0x08011b20
 8004388:	20001898 	.word	0x20001898
					for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 800438c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004390:	3301      	adds	r3, #1
 8004392:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004396:	4b95      	ldr	r3, [pc, #596]	@ (80045ec <lora_network_cmd_ack_handle+0x588>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800439e:	429a      	cmp	r2, r3
 80043a0:	d391      	bcc.n	80042c6 <lora_network_cmd_ack_handle+0x262>
						}
					}

					lr_nw_connected_node_quantity--;
 80043a2:	4b92      	ldr	r3, [pc, #584]	@ (80045ec <lora_network_cmd_ack_handle+0x588>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b90      	ldr	r3, [pc, #576]	@ (80045ec <lora_network_cmd_ack_handle+0x588>)
 80043ac:	701a      	strb	r2, [r3, #0]
					NotificationValue.cmd = ACK;
 80043ae:	2307      	movs	r3, #7
 80043b0:	703b      	strb	r3, [r7, #0]
					NotificationValue.node_id = lora_node->id;
 80043b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	707b      	strb	r3, [r7, #1]
					NotificationValue.packet_id = responsed;
 80043b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043bc:	70bb      	strb	r3, [r7, #2]

					HAL_UART_Transmit(&huart2, "Disconnect notify\n", 18, 2000);
 80043be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80043c2:	2212      	movs	r2, #18
 80043c4:	498a      	ldr	r1, [pc, #552]	@ (80045f0 <lora_network_cmd_ack_handle+0x58c>)
 80043c6:	488b      	ldr	r0, [pc, #556]	@ (80045f4 <lora_network_cmd_ack_handle+0x590>)
 80043c8:	f005 f850 	bl	800946c <HAL_UART_Transmit>
					STM_LOG("Node quantity: %3d\n", lr_nw_connected_node_quantity, 19);
 80043cc:	4b87      	ldr	r3, [pc, #540]	@ (80045ec <lora_network_cmd_ack_handle+0x588>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2213      	movs	r2, #19
 80043d2:	4619      	mov	r1, r3
 80043d4:	4888      	ldr	r0, [pc, #544]	@ (80045f8 <lora_network_cmd_ack_handle+0x594>)
 80043d6:	f7fd f9a7 	bl	8001728 <STM_LOG>

					xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 80043da:	4b88      	ldr	r3, [pc, #544]	@ (80045fc <lora_network_cmd_ack_handle+0x598>)
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	1d3a      	adds	r2, r7, #4
 80043e0:	4639      	mov	r1, r7
 80043e2:	2300      	movs	r3, #0
 80043e4:	f009 fa76 	bl	800d8d4 <xQueueGenericSendFromISR>
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80043e8:	e0ed      	b.n	80045c6 <lora_network_cmd_ack_handle+0x562>
					//portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
				}
			}
		}
		else if(lora_buffer->cmd == LORA_CMD_READ_DATA){
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	795b      	ldrb	r3, [r3, #5]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	f040 80ec 	bne.w	80045cc <lora_network_cmd_ack_handle+0x568>
			//xTimerStopFromISR(send_data_timer, &pxHigherPriorityTaskWoken);
			lora_network_stop_read_request_timer();
 80043f4:	f7fd ff9a 	bl	800232c <lora_network_stop_read_request_timer>
			for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80043fe:	e0da      	b.n	80045b6 <lora_network_cmd_ack_handle+0x552>
				if(CONNECTED_NODE[i].id == lora_receive_packet_buffer.source_id){
 8004400:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004404:	497e      	ldr	r1, [pc, #504]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	015b      	lsls	r3, r3, #5
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	440b      	add	r3, r1
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	4b7b      	ldr	r3, [pc, #492]	@ (8004604 <lora_network_cmd_ack_handle+0x5a0>)
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	429a      	cmp	r2, r3
 800441a:	f040 80c7 	bne.w	80045ac <lora_network_cmd_ack_handle+0x548>
					int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(&CONNECTED_NODE[i], LORA_CMD_READ_DATA, responsed);
 800441e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004422:	4613      	mov	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4413      	add	r3, r2
 8004428:	015b      	lsls	r3, r3, #5
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	4a74      	ldr	r2, [pc, #464]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 800442e:	4413      	add	r3, r2
 8004430:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004434:	2103      	movs	r1, #3
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fb38 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 800443c:	6238      	str	r0, [r7, #32]
					if(packet_index != -1){
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d013      	beq.n	800446e <lora_network_cmd_ack_handle+0x40a>
						CONNECTED_NODE[i].last_lora_send_packet[packet_index].responsed = responsed;
 8004446:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800444a:	486d      	ldr	r0, [pc, #436]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	461a      	mov	r2, r3
 8004450:	0052      	lsls	r2, r2, #1
 8004452:	441a      	add	r2, r3
 8004454:	0112      	lsls	r2, r2, #4
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	460b      	mov	r3, r1
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	015b      	lsls	r3, r3, #5
 8004460:	1a5b      	subs	r3, r3, r1
 8004462:	4413      	add	r3, r2
 8004464:	4403      	add	r3, r0
 8004466:	3309      	adds	r3, #9
 8004468:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800446c:	701a      	strb	r2, [r3, #0]
					}

					CONNECTED_NODE[i].error = 0;
 800446e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004472:	4963      	ldr	r1, [pc, #396]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	015b      	lsls	r3, r3, #5
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	440b      	add	r3, r1
 8004480:	3304      	adds	r3, #4
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]

					if(lora_receive_packet_buffer.payload_length > 0){
 8004486:	4b5f      	ldr	r3, [pc, #380]	@ (8004604 <lora_network_cmd_ack_handle+0x5a0>)
 8004488:	7b9b      	ldrb	r3, [r3, #14]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 809d 	beq.w	80045ca <lora_network_cmd_ack_handle+0x566>
						// receive responsed packet from the node here
						int packet_index1 = bsp_lora_check_cmd_in_node_receive_packets(&CONNECTED_NODE[i], LORA_CMD_ACK);
 8004490:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	015b      	lsls	r3, r3, #5
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	4a58      	ldr	r2, [pc, #352]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 80044a0:	4413      	add	r3, r2
 80044a2:	2105      	movs	r1, #5
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd fbb0 	bl	8001c0a <bsp_lora_check_cmd_in_node_receive_packets>
 80044aa:	61f8      	str	r0, [r7, #28]
						int packet_index2 = bsp_lora_get_id_in_node_receive_packets(&CONNECTED_NODE[i], lora_receive_packet_buffer.packet_id);
 80044ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	015b      	lsls	r3, r3, #5
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	4a51      	ldr	r2, [pc, #324]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 80044bc:	4413      	add	r3, r2
 80044be:	4a51      	ldr	r2, [pc, #324]	@ (8004604 <lora_network_cmd_ack_handle+0x5a0>)
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fd fb7a 	bl	8001bbe <bsp_lora_get_id_in_node_receive_packets>
 80044ca:	61b8      	str	r0, [r7, #24]
						int packet_index3 = bsp_lora_get_node_receive_packet_index(&CONNECTED_NODE[i]);
 80044cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	015b      	lsls	r3, r3, #5
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	4a49      	ldr	r2, [pc, #292]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 80044dc:	4413      	add	r3, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd fb4a 	bl	8001b78 <bsp_lora_get_node_receive_packet_index>
 80044e4:	6178      	str	r0, [r7, #20]

						if((packet_index1 == -1 || packet_index2 == -1) && (packet_index3 != -1)){
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d003      	beq.n	80044f6 <lora_network_cmd_ack_handle+0x492>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d169      	bne.n	80045ca <lora_network_cmd_ack_handle+0x566>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d065      	beq.n	80045ca <lora_network_cmd_ack_handle+0x566>
							HAL_UART_Transmit(&huart2, "Ack packet has payload length > 0\n", 34, 2000);
 80044fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004502:	2222      	movs	r2, #34	@ 0x22
 8004504:	4940      	ldr	r1, [pc, #256]	@ (8004608 <lora_network_cmd_ack_handle+0x5a4>)
 8004506:	483b      	ldr	r0, [pc, #236]	@ (80045f4 <lora_network_cmd_ack_handle+0x590>)
 8004508:	f004 ffb0 	bl	800946c <HAL_UART_Transmit>

							memcpy(&CONNECTED_NODE[i].last_lora_receive_packet[packet_index3], &lora_receive_packet_buffer, sizeof(lora_packet_t));
 800450c:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	461a      	mov	r2, r3
 8004514:	0052      	lsls	r2, r2, #1
 8004516:	441a      	add	r2, r3
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	1ad2      	subs	r2, r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	440b      	add	r3, r1
 8004522:	015b      	lsls	r3, r3, #5
 8004524:	1a5b      	subs	r3, r3, r1
 8004526:	4413      	add	r3, r2
 8004528:	3390      	adds	r3, #144	@ 0x90
 800452a:	4a35      	ldr	r2, [pc, #212]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 800452c:	4413      	add	r3, r2
 800452e:	3302      	adds	r3, #2
 8004530:	4a34      	ldr	r2, [pc, #208]	@ (8004604 <lora_network_cmd_ack_handle+0x5a0>)
 8004532:	4618      	mov	r0, r3
 8004534:	f102 0420 	add.w	r4, r2, #32
 8004538:	4603      	mov	r3, r0
 800453a:	4611      	mov	r1, r2
 800453c:	f8d1 c000 	ldr.w	ip, [r1]
 8004540:	684e      	ldr	r6, [r1, #4]
 8004542:	688d      	ldr	r5, [r1, #8]
 8004544:	68c9      	ldr	r1, [r1, #12]
 8004546:	f8c3 c000 	str.w	ip, [r3]
 800454a:	605e      	str	r6, [r3, #4]
 800454c:	609d      	str	r5, [r3, #8]
 800454e:	60d9      	str	r1, [r3, #12]
 8004550:	3210      	adds	r2, #16
 8004552:	3010      	adds	r0, #16
 8004554:	42a2      	cmp	r2, r4
 8004556:	d1ef      	bne.n	8004538 <lora_network_cmd_ack_handle+0x4d4>
 8004558:	4603      	mov	r3, r0
 800455a:	6814      	ldr	r4, [r2, #0]
 800455c:	6850      	ldr	r0, [r2, #4]
 800455e:	6891      	ldr	r1, [r2, #8]
 8004560:	601c      	str	r4, [r3, #0]
 8004562:	6058      	str	r0, [r3, #4]
 8004564:	6099      	str	r1, [r3, #8]
 8004566:	8991      	ldrh	r1, [r2, #12]
 8004568:	7b92      	ldrb	r2, [r2, #14]
 800456a:	8199      	strh	r1, [r3, #12]
 800456c:	739a      	strb	r2, [r3, #14]

							NotificationValue.cmd = START_HANDLE_ACK_PACKET;
 800456e:	2306      	movs	r3, #6
 8004570:	703b      	strb	r3, [r7, #0]
							NotificationValue.node_id = CONNECTED_NODE[i].id;
 8004572:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004576:	4922      	ldr	r1, [pc, #136]	@ (8004600 <lora_network_cmd_ack_handle+0x59c>)
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	015b      	lsls	r3, r3, #5
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	440b      	add	r3, r1
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	707b      	strb	r3, [r7, #1]
							NotificationValue.packet_id = lora_receive_packet_buffer.packet_id;
 8004588:	4b1e      	ldr	r3, [pc, #120]	@ (8004604 <lora_network_cmd_ack_handle+0x5a0>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	70bb      	strb	r3, [r7, #2]
							xQueueSendFromISR(warning_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 800458e:	4b1f      	ldr	r3, [pc, #124]	@ (800460c <lora_network_cmd_ack_handle+0x5a8>)
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	1d3a      	adds	r2, r7, #4
 8004594:	4639      	mov	r1, r7
 8004596:	2300      	movs	r3, #0
 8004598:	f009 f99c 	bl	800d8d4 <xQueueGenericSendFromISR>

							HAL_UART_Transmit(&huart2, "Notify\n", 7, 2000);
 800459c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80045a0:	2207      	movs	r2, #7
 80045a2:	491b      	ldr	r1, [pc, #108]	@ (8004610 <lora_network_cmd_ack_handle+0x5ac>)
 80045a4:	4813      	ldr	r0, [pc, #76]	@ (80045f4 <lora_network_cmd_ack_handle+0x590>)
 80045a6:	f004 ff61 	bl	800946c <HAL_UART_Transmit>
					NotificationValue.packet_id = responsed;

					HAL_UART_Transmit(&huart2, "Notify\n", 7, 2000);
					xQueueSendFromISR(send_request_queue, &NotificationValue, &pxHigherPriorityTaskWoken);*/
					//portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
					break;
 80045aa:	e00e      	b.n	80045ca <lora_network_cmd_ack_handle+0x566>
			for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 80045ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045b0:	3301      	adds	r3, #1
 80045b2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80045b6:	4b0d      	ldr	r3, [pc, #52]	@ (80045ec <lora_network_cmd_ack_handle+0x588>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80045be:	429a      	cmp	r2, r3
 80045c0:	f4ff af1e 	bcc.w	8004400 <lora_network_cmd_ack_handle+0x39c>
 80045c4:	e002      	b.n	80045cc <lora_network_cmd_ack_handle+0x568>
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <lora_network_cmd_ack_handle+0x568>
					break;
 80045ca:	bf00      	nop
				memcpy(&last_lora_send_packet_buffer[i], &last_lora_send_packet_buffer[i + 1], sizeof(lora_packet_t));
			}
			memset(&last_lora_send_packet_buffer[semaphore_count - 1], 0, sizeof(lora_packet_t));
			handling_last_buffer = 0;
		}*/
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <lora_network_cmd_ack_handle+0x57e>
 80045d2:	4b10      	ldr	r3, [pc, #64]	@ (8004614 <lora_network_cmd_ack_handle+0x5b0>)
 80045d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	f3bf 8f6f 	isb	sy
	}
}
 80045e2:	bf00      	nop
 80045e4:	373c      	adds	r7, #60	@ 0x3c
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200008a1 	.word	0x200008a1
 80045f0:	08011b30 	.word	0x08011b30
 80045f4:	20001ad0 	.word	0x20001ad0
 80045f8:	08011b44 	.word	0x08011b44
 80045fc:	2000189c 	.word	0x2000189c
 8004600:	2000109c 	.word	0x2000109c
 8004604:	200001c8 	.word	0x200001c8
 8004608:	08011b58 	.word	0x08011b58
 800460c:	200018a4 	.word	0x200018a4
 8004610:	08011a74 	.word	0x08011a74
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <lora_network_cmd_nack_handle>:


void lora_network_cmd_nack_handle(){
 8004618:	b580      	push	{r7, lr}
 800461a:	b08c      	sub	sp, #48	@ 0x30
 800461c:	af02      	add	r7, sp, #8
	uint8_t k = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t responsed = lora_receive_packet_buffer.responsed;
 8004624:	4b91      	ldr	r3, [pc, #580]	@ (800486c <lora_network_cmd_nack_handle+0x254>)
 8004626:	791b      	ldrb	r3, [r3, #4]
 8004628:	763b      	strb	r3, [r7, #24]
	uint8_t handling_last_buffer = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]
	connection_task_notification_value_t NotificationValue;
	lora_packet_t * lora_buffer;

	HAL_UART_Transmit(&huart2, "Nack handle\n", 12, 2000);
 8004634:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004638:	220c      	movs	r2, #12
 800463a:	498d      	ldr	r1, [pc, #564]	@ (8004870 <lora_network_cmd_nack_handle+0x258>)
 800463c:	488d      	ldr	r0, [pc, #564]	@ (8004874 <lora_network_cmd_nack_handle+0x25c>)
 800463e:	f004 ff15 	bl	800946c <HAL_UART_Transmit>
	STM_LOG("Responsed value: %3d\n", responsed, 22);
 8004642:	7e3b      	ldrb	r3, [r7, #24]
 8004644:	2216      	movs	r2, #22
 8004646:	4619      	mov	r1, r3
 8004648:	488b      	ldr	r0, [pc, #556]	@ (8004878 <lora_network_cmd_nack_handle+0x260>)
 800464a:	f7fd f86d 	bl	8001728 <STM_LOG>

	// check if this is ack for lora_send_buffer or last_lora_send_buffers
	// if this ack is for lora_send_buffer
	if(responsed == lora_send_packet_buffer.packet_id){
 800464e:	4b8b      	ldr	r3, [pc, #556]	@ (800487c <lora_network_cmd_nack_handle+0x264>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	7e3a      	ldrb	r2, [r7, #24]
 8004654:	429a      	cmp	r2, r3
 8004656:	d102      	bne.n	800465e <lora_network_cmd_nack_handle+0x46>
		// get node object which the gateway received from
		lora_buffer = &lora_send_packet_buffer;
 8004658:	4b88      	ldr	r3, [pc, #544]	@ (800487c <lora_network_cmd_nack_handle+0x264>)
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	e02a      	b.n	80046b4 <lora_network_cmd_nack_handle+0x9c>
	}

	else{
		for(k = 0; k < semaphore_count; k++){
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004664:	e01f      	b.n	80046a6 <lora_network_cmd_nack_handle+0x8e>
			if(responsed == last_lora_send_packet_buffer[k].packet_id){
 8004666:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800466a:	4985      	ldr	r1, [pc, #532]	@ (8004880 <lora_network_cmd_nack_handle+0x268>)
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	440b      	add	r3, r1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	7e3a      	ldrb	r2, [r7, #24]
 800467c:	429a      	cmp	r2, r3
 800467e:	d10d      	bne.n	800469c <lora_network_cmd_nack_handle+0x84>
				lora_buffer = &last_lora_send_packet_buffer[k];
 8004680:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <lora_network_cmd_nack_handle+0x268>)
 8004690:	4413      	add	r3, r2
 8004692:	623b      	str	r3, [r7, #32]
				handling_last_buffer = 1;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 800469a:	e00b      	b.n	80046b4 <lora_network_cmd_nack_handle+0x9c>
		for(k = 0; k < semaphore_count; k++){
 800469c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046a0:	3301      	adds	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046a6:	4b77      	ldr	r3, [pc, #476]	@ (8004884 <lora_network_cmd_nack_handle+0x26c>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3d8      	bcc.n	8004666 <lora_network_cmd_nack_handle+0x4e>
			}
		}
	}

	if(lora_buffer != NULL){
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 819b 	beq.w	80049f2 <lora_network_cmd_nack_handle+0x3da>
		lora_buffer->responsed = responsed;
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	7e3a      	ldrb	r2, [r7, #24]
 80046c0:	711a      	strb	r2, [r3, #4]

		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	795b      	ldrb	r3, [r3, #5]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <lora_network_cmd_nack_handle+0xbc>
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	795b      	ldrb	r3, [r3, #5]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	f040 80b9 	bne.w	8004846 <lora_network_cmd_nack_handle+0x22e>
			lora_node_t *lora_node;
			uint8_t index = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	76fb      	strb	r3, [r7, #27]
			for(index = 0; index < lr_nw_node_quantity; index++){
 80046d8:	2300      	movs	r3, #0
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e019      	b.n	8004712 <lora_network_cmd_nack_handle+0xfa>
				if(NODE_DEVICE[index].id == lora_receive_packet_buffer.source_id){
 80046de:	7efa      	ldrb	r2, [r7, #27]
 80046e0:	4969      	ldr	r1, [pc, #420]	@ (8004888 <lora_network_cmd_nack_handle+0x270>)
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	015b      	lsls	r3, r3, #5
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	440b      	add	r3, r1
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	4b5e      	ldr	r3, [pc, #376]	@ (800486c <lora_network_cmd_nack_handle+0x254>)
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d109      	bne.n	800470c <lora_network_cmd_nack_handle+0xf4>
					lora_node = &NODE_DEVICE[index];
 80046f8:	7efa      	ldrb	r2, [r7, #27]
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	015b      	lsls	r3, r3, #5
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	4a60      	ldr	r2, [pc, #384]	@ (8004888 <lora_network_cmd_nack_handle+0x270>)
 8004706:	4413      	add	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]
					break;
 800470a:	e007      	b.n	800471c <lora_network_cmd_nack_handle+0x104>
			for(index = 0; index < lr_nw_node_quantity; index++){
 800470c:	7efb      	ldrb	r3, [r7, #27]
 800470e:	3301      	adds	r3, #1
 8004710:	76fb      	strb	r3, [r7, #27]
 8004712:	4b5e      	ldr	r3, [pc, #376]	@ (800488c <lora_network_cmd_nack_handle+0x274>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	7efa      	ldrb	r2, [r7, #27]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3e0      	bcc.n	80046de <lora_network_cmd_nack_handle+0xc6>
				}
			}

			if(lora_buffer->cmd == LORA_CMD_CONNECT){
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	795b      	ldrb	r3, [r3, #5]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d145      	bne.n	80047b0 <lora_network_cmd_nack_handle+0x198>
				xTimerStopFromISR(all_connect_timer, &pxHigherPriorityTaskWoken);
 8004724:	4b5a      	ldr	r3, [pc, #360]	@ (8004890 <lora_network_cmd_nack_handle+0x278>)
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	2200      	movs	r2, #0
 800472e:	9200      	str	r2, [sp, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	2108      	movs	r1, #8
 8004734:	f00a fdea 	bl	800f30c <xTimerGenericCommand>

				int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node, LORA_CMD_CONNECT, responsed);
 8004738:	7e3b      	ldrb	r3, [r7, #24]
 800473a:	461a      	mov	r2, r3
 800473c:	2100      	movs	r1, #0
 800473e:	69f8      	ldr	r0, [r7, #28]
 8004740:	f7fd f9b4 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 8004744:	60f8      	str	r0, [r7, #12]
				if(packet_index != -1){
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	f000 8114 	beq.w	8004978 <lora_network_cmd_nack_handle+0x360>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 8004750:	4b46      	ldr	r3, [pc, #280]	@ (800486c <lora_network_cmd_nack_handle+0x254>)
 8004752:	7918      	ldrb	r0, [r3, #4]
 8004754:	69f9      	ldr	r1, [r7, #28]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	440b      	add	r3, r1
 8004764:	3309      	adds	r3, #9
 8004766:	4602      	mov	r2, r0
 8004768:	701a      	strb	r2, [r3, #0]
					lora_node->error = 1;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2201      	movs	r2, #1
 800476e:	711a      	strb	r2, [r3, #4]

					// notify to connection task with notification value = NAK
					NotificationValue.cmd = NAK;
 8004770:	2308      	movs	r3, #8
 8004772:	713b      	strb	r3, [r7, #4]
					NotificationValue.node_id = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	717b      	strb	r3, [r7, #5]
					HAL_UART_Transmit(&huart2, "Nak connect\n", 12, 2000);
 8004778:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800477c:	220c      	movs	r2, #12
 800477e:	4945      	ldr	r1, [pc, #276]	@ (8004894 <lora_network_cmd_nack_handle+0x27c>)
 8004780:	483c      	ldr	r0, [pc, #240]	@ (8004874 <lora_network_cmd_nack_handle+0x25c>)
 8004782:	f004 fe73 	bl	800946c <HAL_UART_Transmit>
					xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004786:	4b44      	ldr	r3, [pc, #272]	@ (8004898 <lora_network_cmd_nack_handle+0x280>)
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	f107 0208 	add.w	r2, r7, #8
 800478e:	1d39      	adds	r1, r7, #4
 8004790:	2300      	movs	r3, #0
 8004792:	f009 f89f 	bl	800d8d4 <xQueueGenericSendFromISR>
					portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80ed 	beq.w	8004978 <lora_network_cmd_nack_handle+0x360>
 800479e:	4b3f      	ldr	r3, [pc, #252]	@ (800489c <lora_network_cmd_nack_handle+0x284>)
 80047a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	f3bf 8f6f 	isb	sy
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80047ae:	e0e3      	b.n	8004978 <lora_network_cmd_nack_handle+0x360>
				}

			}

			else if(lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	795b      	ldrb	r3, [r3, #5]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f040 80df 	bne.w	8004978 <lora_network_cmd_nack_handle+0x360>
				xTimerStopFromISR(all_disconnect_timer, &pxHigherPriorityTaskWoken);
 80047ba:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <lora_network_cmd_nack_handle+0x288>)
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	2200      	movs	r2, #0
 80047c4:	9200      	str	r2, [sp, #0]
 80047c6:	2200      	movs	r2, #0
 80047c8:	2108      	movs	r1, #8
 80047ca:	f00a fd9f 	bl	800f30c <xTimerGenericCommand>

				int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(lora_node, LORA_CMD_DISCONNECT, responsed);
 80047ce:	7e3b      	ldrb	r3, [r7, #24]
 80047d0:	461a      	mov	r2, r3
 80047d2:	2101      	movs	r1, #1
 80047d4:	69f8      	ldr	r0, [r7, #28]
 80047d6:	f7fd f969 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 80047da:	6138      	str	r0, [r7, #16]
				if(packet_index != -1){
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	f000 80c9 	beq.w	8004978 <lora_network_cmd_nack_handle+0x360>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 80047e6:	4b21      	ldr	r3, [pc, #132]	@ (800486c <lora_network_cmd_nack_handle+0x254>)
 80047e8:	7918      	ldrb	r0, [r3, #4]
 80047ea:	69f9      	ldr	r1, [r7, #28]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	3309      	adds	r3, #9
 80047fc:	4602      	mov	r2, r0
 80047fe:	701a      	strb	r2, [r3, #0]
					lora_node->error = 1;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2201      	movs	r2, #1
 8004804:	711a      	strb	r2, [r3, #4]
					NotificationValue.cmd = NAK;
 8004806:	2308      	movs	r3, #8
 8004808:	713b      	strb	r3, [r7, #4]
					NotificationValue.node_id = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	717b      	strb	r3, [r7, #5]
					HAL_UART_Transmit(&huart2, "Nak disconnect\n", 15, 2000);
 800480e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004812:	220f      	movs	r2, #15
 8004814:	4923      	ldr	r1, [pc, #140]	@ (80048a4 <lora_network_cmd_nack_handle+0x28c>)
 8004816:	4817      	ldr	r0, [pc, #92]	@ (8004874 <lora_network_cmd_nack_handle+0x25c>)
 8004818:	f004 fe28 	bl	800946c <HAL_UART_Transmit>

					xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 800481c:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <lora_network_cmd_nack_handle+0x290>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	f107 0208 	add.w	r2, r7, #8
 8004824:	1d39      	adds	r1, r7, #4
 8004826:	2300      	movs	r3, #0
 8004828:	f009 f854 	bl	800d8d4 <xQueueGenericSendFromISR>
					portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80a2 	beq.w	8004978 <lora_network_cmd_nack_handle+0x360>
 8004834:	4b19      	ldr	r3, [pc, #100]	@ (800489c <lora_network_cmd_nack_handle+0x284>)
 8004836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	f3bf 8f6f 	isb	sy
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8004844:	e098      	b.n	8004978 <lora_network_cmd_nack_handle+0x360>
				}

			}
		}

		else if(lora_buffer->cmd == LORA_CMD_READ_DATA){
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	795b      	ldrb	r3, [r3, #5]
 800484a:	2b03      	cmp	r3, #3
 800484c:	f040 8097 	bne.w	800497e <lora_network_cmd_nack_handle+0x366>
			xTimerStopFromISR(send_data_timer, &pxHigherPriorityTaskWoken);
 8004850:	4b16      	ldr	r3, [pc, #88]	@ (80048ac <lora_network_cmd_nack_handle+0x294>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	f107 0308 	add.w	r3, r7, #8
 8004858:	2200      	movs	r2, #0
 800485a:	9200      	str	r2, [sp, #0]
 800485c:	2200      	movs	r2, #0
 800485e:	2108      	movs	r1, #8
 8004860:	f00a fd54 	bl	800f30c <xTimerGenericCommand>
			for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8004864:	2300      	movs	r3, #0
 8004866:	76bb      	strb	r3, [r7, #26]
 8004868:	e080      	b.n	800496c <lora_network_cmd_nack_handle+0x354>
 800486a:	bf00      	nop
 800486c:	200001c8 	.word	0x200001c8
 8004870:	08011b7c 	.word	0x08011b7c
 8004874:	20001ad0 	.word	0x20001ad0
 8004878:	08011b08 	.word	0x08011b08
 800487c:	20000198 	.word	0x20000198
 8004880:	200018bc 	.word	0x200018bc
 8004884:	200018b8 	.word	0x200018b8
 8004888:	200008c0 	.word	0x200008c0
 800488c:	200008a0 	.word	0x200008a0
 8004890:	2000188c 	.word	0x2000188c
 8004894:	08011b8c 	.word	0x08011b8c
 8004898:	20001898 	.word	0x20001898
 800489c:	e000ed04 	.word	0xe000ed04
 80048a0:	20001890 	.word	0x20001890
 80048a4:	08011b9c 	.word	0x08011b9c
 80048a8:	2000189c 	.word	0x2000189c
 80048ac:	20001894 	.word	0x20001894
				if(CONNECTED_NODE[i].id == lora_receive_packet_buffer.source_id){
 80048b0:	7eba      	ldrb	r2, [r7, #26]
 80048b2:	4952      	ldr	r1, [pc, #328]	@ (80049fc <lora_network_cmd_nack_handle+0x3e4>)
 80048b4:	4613      	mov	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4413      	add	r3, r2
 80048ba:	015b      	lsls	r3, r3, #5
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	440b      	add	r3, r1
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a00 <lora_network_cmd_nack_handle+0x3e8>)
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d14d      	bne.n	8004966 <lora_network_cmd_nack_handle+0x34e>
					int packet_index = bsp_lora_check_cmd_and_id_in_node_send_packets(&CONNECTED_NODE[i], LORA_CMD_READ_DATA, responsed);
 80048ca:	7eba      	ldrb	r2, [r7, #26]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	015b      	lsls	r3, r3, #5
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	4a49      	ldr	r2, [pc, #292]	@ (80049fc <lora_network_cmd_nack_handle+0x3e4>)
 80048d8:	4413      	add	r3, r2
 80048da:	7e3a      	ldrb	r2, [r7, #24]
 80048dc:	2103      	movs	r1, #3
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fd f8e4 	bl	8001aac <bsp_lora_check_cmd_and_id_in_node_send_packets>
 80048e4:	6178      	str	r0, [r7, #20]
					if(packet_index != -1){
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d03b      	beq.n	8004966 <lora_network_cmd_nack_handle+0x34e>
						CONNECTED_NODE[i].last_lora_send_packet[packet_index].responsed = responsed;
 80048ee:	7eb9      	ldrb	r1, [r7, #26]
 80048f0:	4842      	ldr	r0, [pc, #264]	@ (80049fc <lora_network_cmd_nack_handle+0x3e4>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	461a      	mov	r2, r3
 80048f6:	0052      	lsls	r2, r2, #1
 80048f8:	441a      	add	r2, r3
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	460b      	mov	r3, r1
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	015b      	lsls	r3, r3, #5
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	4413      	add	r3, r2
 800490a:	4403      	add	r3, r0
 800490c:	3309      	adds	r3, #9
 800490e:	7e3a      	ldrb	r2, [r7, #24]
 8004910:	701a      	strb	r2, [r3, #0]
						CONNECTED_NODE[i].error = 1;
 8004912:	7eba      	ldrb	r2, [r7, #26]
 8004914:	4939      	ldr	r1, [pc, #228]	@ (80049fc <lora_network_cmd_nack_handle+0x3e4>)
 8004916:	4613      	mov	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4413      	add	r3, r2
 800491c:	015b      	lsls	r3, r3, #5
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	440b      	add	r3, r1
 8004922:	3304      	adds	r3, #4
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
						NotificationValue.cmd = NAK;
 8004928:	2308      	movs	r3, #8
 800492a:	713b      	strb	r3, [r7, #4]
						NotificationValue.node_id = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	717b      	strb	r3, [r7, #5]

						HAL_UART_Transmit(&huart2, "Nak send\n", 9, 2000);
 8004930:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004934:	2209      	movs	r2, #9
 8004936:	4933      	ldr	r1, [pc, #204]	@ (8004a04 <lora_network_cmd_nack_handle+0x3ec>)
 8004938:	4833      	ldr	r0, [pc, #204]	@ (8004a08 <lora_network_cmd_nack_handle+0x3f0>)
 800493a:	f004 fd97 	bl	800946c <HAL_UART_Transmit>
						xQueueSendFromISR(send_request_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 800493e:	4b33      	ldr	r3, [pc, #204]	@ (8004a0c <lora_network_cmd_nack_handle+0x3f4>)
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	f107 0208 	add.w	r2, r7, #8
 8004946:	1d39      	adds	r1, r7, #4
 8004948:	2300      	movs	r3, #0
 800494a:	f008 ffc3 	bl	800d8d4 <xQueueGenericSendFromISR>
						portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <lora_network_cmd_nack_handle+0x364>
 8004954:	4b2e      	ldr	r3, [pc, #184]	@ (8004a10 <lora_network_cmd_nack_handle+0x3f8>)
 8004956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
						break;
 8004964:	e00a      	b.n	800497c <lora_network_cmd_nack_handle+0x364>
			for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8004966:	7ebb      	ldrb	r3, [r7, #26]
 8004968:	3301      	adds	r3, #1
 800496a:	76bb      	strb	r3, [r7, #26]
 800496c:	4b29      	ldr	r3, [pc, #164]	@ (8004a14 <lora_network_cmd_nack_handle+0x3fc>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	7eba      	ldrb	r2, [r7, #26]
 8004972:	429a      	cmp	r2, r3
 8004974:	d39c      	bcc.n	80048b0 <lora_network_cmd_nack_handle+0x298>
 8004976:	e002      	b.n	800497e <lora_network_cmd_nack_handle+0x366>
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <lora_network_cmd_nack_handle+0x366>
						break;
 800497c:	bf00      	nop
					}
				}
			}
		}

		if(handling_last_buffer == 1){
 800497e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004982:	2b01      	cmp	r3, #1
 8004984:	d135      	bne.n	80049f2 <lora_network_cmd_nack_handle+0x3da>
			for(uint8_t i = k; i < semaphore_count - 1; i++){
 8004986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800498a:	767b      	strb	r3, [r7, #25]
 800498c:	e017      	b.n	80049be <lora_network_cmd_nack_handle+0x3a6>
				memcpy(&last_lora_send_packet_buffer[i], &last_lora_send_packet_buffer[i + 1], sizeof(lora_packet_t));
 800498e:	7e7a      	ldrb	r2, [r7, #25]
 8004990:	4613      	mov	r3, r2
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4413      	add	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <lora_network_cmd_nack_handle+0x400>)
 800499c:	1898      	adds	r0, r3, r2
 800499e:	7e7b      	ldrb	r3, [r7, #25]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <lora_network_cmd_nack_handle+0x400>)
 80049ae:	4413      	add	r3, r2
 80049b0:	222f      	movs	r2, #47	@ 0x2f
 80049b2:	4619      	mov	r1, r3
 80049b4:	f00c fa16 	bl	8010de4 <memcpy>
			for(uint8_t i = k; i < semaphore_count - 1; i++){
 80049b8:	7e7b      	ldrb	r3, [r7, #25]
 80049ba:	3301      	adds	r3, #1
 80049bc:	767b      	strb	r3, [r7, #25]
 80049be:	7e7a      	ldrb	r2, [r7, #25]
 80049c0:	4b16      	ldr	r3, [pc, #88]	@ (8004a1c <lora_network_cmd_nack_handle+0x404>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	429a      	cmp	r2, r3
 80049ca:	dbe0      	blt.n	800498e <lora_network_cmd_nack_handle+0x376>
			}
			memset(&last_lora_send_packet_buffer[semaphore_count - 1], 0, sizeof(lora_packet_t));
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <lora_network_cmd_nack_handle+0x404>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	1e5a      	subs	r2, r3, #1
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	4a0e      	ldr	r2, [pc, #56]	@ (8004a18 <lora_network_cmd_nack_handle+0x400>)
 80049e0:	4413      	add	r3, r2
 80049e2:	222f      	movs	r2, #47	@ 0x2f
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f00c f9b8 	bl	8010d5c <memset>
			handling_last_buffer = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}
	}
}
 80049f2:	bf00      	nop
 80049f4:	3728      	adds	r7, #40	@ 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	2000109c 	.word	0x2000109c
 8004a00:	200001c8 	.word	0x200001c8
 8004a04:	08011bac 	.word	0x08011bac
 8004a08:	20001ad0 	.word	0x20001ad0
 8004a0c:	200018a0 	.word	0x200018a0
 8004a10:	e000ed04 	.word	0xe000ed04
 8004a14:	200008a1 	.word	0x200008a1
 8004a18:	200018bc 	.word	0x200018bc
 8004a1c:	200018b8 	.word	0x200018b8

08004a20 <lora_network_cmd_warning_handle>:

void lora_network_cmd_warning_handle(){
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
	lora_node_t *lora_node = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
	for(uint8_t lora_index = 0; lora_index < lr_nw_connected_node_quantity; lora_index++){
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	74fb      	strb	r3, [r7, #19]
 8004a2e:	e019      	b.n	8004a64 <lora_network_cmd_warning_handle+0x44>
		if(CONNECTED_NODE[lora_index].id == lora_receive_packet_buffer.source_id){
 8004a30:	7cfa      	ldrb	r2, [r7, #19]
 8004a32:	493b      	ldr	r1, [pc, #236]	@ (8004b20 <lora_network_cmd_warning_handle+0x100>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	015b      	lsls	r3, r3, #5
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	440b      	add	r3, r1
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <lora_network_cmd_warning_handle+0x104>)
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d109      	bne.n	8004a5e <lora_network_cmd_warning_handle+0x3e>
			lora_node = &CONNECTED_NODE[lora_index];
 8004a4a:	7cfa      	ldrb	r2, [r7, #19]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	015b      	lsls	r3, r3, #5
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	4a32      	ldr	r2, [pc, #200]	@ (8004b20 <lora_network_cmd_warning_handle+0x100>)
 8004a58:	4413      	add	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
			break;
 8004a5c:	e007      	b.n	8004a6e <lora_network_cmd_warning_handle+0x4e>
	for(uint8_t lora_index = 0; lora_index < lr_nw_connected_node_quantity; lora_index++){
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	3301      	adds	r3, #1
 8004a62:	74fb      	strb	r3, [r7, #19]
 8004a64:	4b30      	ldr	r3, [pc, #192]	@ (8004b28 <lora_network_cmd_warning_handle+0x108>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	7cfa      	ldrb	r2, [r7, #19]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d3e0      	bcc.n	8004a30 <lora_network_cmd_warning_handle+0x10>
		}
	}
	if(lora_node != NULL){
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d051      	beq.n	8004b18 <lora_network_cmd_warning_handle+0xf8>
		int packet_index = bsp_lora_get_node_receive_packet_index(lora_node);
 8004a74:	6978      	ldr	r0, [r7, #20]
 8004a76:	f7fd f87f 	bl	8001b78 <bsp_lora_get_node_receive_packet_index>
 8004a7a:	60f8      	str	r0, [r7, #12]
		if(packet_index != -1){
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d049      	beq.n	8004b18 <lora_network_cmd_warning_handle+0xf8>
			STM_LOG("Warning from node %2d\n", lora_node->id, 21);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2215      	movs	r2, #21
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4827      	ldr	r0, [pc, #156]	@ (8004b2c <lora_network_cmd_warning_handle+0x10c>)
 8004a8e:	f7fc fe4b 	bl	8001728 <STM_LOG>
			memcpy(&lora_node->last_lora_receive_packet[packet_index], &lora_receive_packet_buffer, sizeof(lora_packet_t));
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4613      	mov	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	3390      	adds	r3, #144	@ 0x90
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b24 <lora_network_cmd_warning_handle+0x104>)
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f102 0420 	add.w	r4, r2, #32
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	f8d1 c000 	ldr.w	ip, [r1]
 8004ab6:	684e      	ldr	r6, [r1, #4]
 8004ab8:	688d      	ldr	r5, [r1, #8]
 8004aba:	68c9      	ldr	r1, [r1, #12]
 8004abc:	f8c3 c000 	str.w	ip, [r3]
 8004ac0:	605e      	str	r6, [r3, #4]
 8004ac2:	609d      	str	r5, [r3, #8]
 8004ac4:	60d9      	str	r1, [r3, #12]
 8004ac6:	3210      	adds	r2, #16
 8004ac8:	3010      	adds	r0, #16
 8004aca:	42a2      	cmp	r2, r4
 8004acc:	d1ef      	bne.n	8004aae <lora_network_cmd_warning_handle+0x8e>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	6814      	ldr	r4, [r2, #0]
 8004ad2:	6850      	ldr	r0, [r2, #4]
 8004ad4:	6891      	ldr	r1, [r2, #8]
 8004ad6:	601c      	str	r4, [r3, #0]
 8004ad8:	6058      	str	r0, [r3, #4]
 8004ada:	6099      	str	r1, [r3, #8]
 8004adc:	8991      	ldrh	r1, [r2, #12]
 8004ade:	7b92      	ldrb	r2, [r2, #14]
 8004ae0:	8199      	strh	r1, [r3, #12]
 8004ae2:	739a      	strb	r2, [r3, #14]

			connection_task_notification_value_t NotificationValue;
			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	607b      	str	r3, [r7, #4]
			NotificationValue.cmd = START_RESPONSE_WARNING;
 8004ae8:	2305      	movs	r3, #5
 8004aea:	723b      	strb	r3, [r7, #8]
			NotificationValue.node_id = lora_node->id;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	727b      	strb	r3, [r7, #9]

			xQueueSendFromISR(warning_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004af2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b30 <lora_network_cmd_warning_handle+0x110>)
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	1d3a      	adds	r2, r7, #4
 8004af8:	f107 0108 	add.w	r1, r7, #8
 8004afc:	2300      	movs	r3, #0
 8004afe:	f008 fee9 	bl	800d8d4 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <lora_network_cmd_warning_handle+0xf8>
 8004b08:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <lora_network_cmd_warning_handle+0x114>)
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	f3bf 8f6f 	isb	sy
		}
		// notify to task
	}
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b20:	2000109c 	.word	0x2000109c
 8004b24:	200001c8 	.word	0x200001c8
 8004b28:	200008a1 	.word	0x200008a1
 8004b2c:	08011bb8 	.word	0x08011bb8
 8004b30:	200018a4 	.word	0x200018a4
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <lora_network_receive_packet_handle>:

/**
 * this function is used to handle packet received from lora irq handle function
 * **/
void lora_network_receive_packet_handle(){
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
	if(lora_receive_packet_buffer.cmd == LORA_CMD_ACK){
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <lora_network_receive_packet_handle+0x30>)
 8004b3e:	795b      	ldrb	r3, [r3, #5]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d102      	bne.n	8004b4a <lora_network_receive_packet_handle+0x12>
		lora_network_cmd_ack_handle();
 8004b44:	f7ff fa8e 	bl	8004064 <lora_network_cmd_ack_handle>
		lora_network_cmd_nack_handle();
	}
	else if(lora_receive_packet_buffer.cmd == LORA_CMD_WARNING){
		lora_network_cmd_warning_handle();
	}
}
 8004b48:	e00c      	b.n	8004b64 <lora_network_receive_packet_handle+0x2c>
	else if(lora_receive_packet_buffer.cmd == LORA_CMD_NACK){
 8004b4a:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <lora_network_receive_packet_handle+0x30>)
 8004b4c:	795b      	ldrb	r3, [r3, #5]
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d102      	bne.n	8004b58 <lora_network_receive_packet_handle+0x20>
		lora_network_cmd_nack_handle();
 8004b52:	f7ff fd61 	bl	8004618 <lora_network_cmd_nack_handle>
}
 8004b56:	e005      	b.n	8004b64 <lora_network_receive_packet_handle+0x2c>
	else if(lora_receive_packet_buffer.cmd == LORA_CMD_WARNING){
 8004b58:	4b03      	ldr	r3, [pc, #12]	@ (8004b68 <lora_network_receive_packet_handle+0x30>)
 8004b5a:	795b      	ldrb	r3, [r3, #5]
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	d101      	bne.n	8004b64 <lora_network_receive_packet_handle+0x2c>
		lora_network_cmd_warning_handle();
 8004b60:	f7ff ff5e 	bl	8004a20 <lora_network_cmd_warning_handle>
}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	200001c8 	.word	0x200001c8

08004b6c <lora_network_irq_handle>:

/**
 * lora irq handle function is used to receive packet through interrupt of DIO0 pin
 * **/
void lora_network_irq_handle(){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0

	while (HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8004b72:	bf00      	nop
 8004b74:	4b12      	ldr	r3, [pc, #72]	@ (8004bc0 <lora_network_irq_handle+0x54>)
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f003 fe6e 	bl	800885a <HAL_SPI_GetState>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d1f7      	bne.n	8004b74 <lora_network_irq_handle+0x8>

	uint8_t irqFlags = LoRa_read(&myLoRa, RegIrqFlags);
 8004b84:	2112      	movs	r1, #18
 8004b86:	480e      	ldr	r0, [pc, #56]	@ (8004bc0 <lora_network_irq_handle+0x54>)
 8004b88:	f7fc fb55 	bl	8001236 <LoRa_read>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	71fb      	strb	r3, [r7, #7]
	if(irqFlags & 0x40) {
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <lora_network_irq_handle+0x42>
		STM_LOG("lora irq flag exact\n", 20, 20);
 8004b9a:	2214      	movs	r2, #20
 8004b9c:	2114      	movs	r1, #20
 8004b9e:	4809      	ldr	r0, [pc, #36]	@ (8004bc4 <lora_network_irq_handle+0x58>)
 8004ba0:	f7fc fdc2 	bl	8001728 <STM_LOG>
		bsp_lora_receive_packet();
 8004ba4:	f7fd f9f6 	bl	8001f94 <bsp_lora_receive_packet>
		// All data have received and saved to lora_receive_packet_buffer
		lora_network_receive_packet_handle();
 8004ba8:	f7ff ffc6 	bl	8004b38 <lora_network_receive_packet_handle>
	}
	else{
		STM_LOG("lora irq flag wrong\n", 20, 20);
		//lora_network_send_request_start_scheduler();
	}
}
 8004bac:	e004      	b.n	8004bb8 <lora_network_irq_handle+0x4c>
		STM_LOG("lora irq flag wrong\n", 20, 20);
 8004bae:	2214      	movs	r2, #20
 8004bb0:	2114      	movs	r1, #20
 8004bb2:	4805      	ldr	r0, [pc, #20]	@ (8004bc8 <lora_network_irq_handle+0x5c>)
 8004bb4:	f7fc fdb8 	bl	8001728 <STM_LOG>
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	2000016c 	.word	0x2000016c
 8004bc4:	08011bd0 	.word	0x08011bd0
 8004bc8:	08011be8 	.word	0x08011be8

08004bcc <lora_network_timer_handle>:


void lora_network_timer_handle(){
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
	connection_task_notification_value_t NotificationValue;
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	603b      	str	r3, [r7, #0]
	if(lr_nw_connect_timer_enable == 1){
 8004bd6:	4b33      	ldr	r3, [pc, #204]	@ (8004ca4 <lora_network_timer_handle+0xd8>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d11c      	bne.n	8004c18 <lora_network_timer_handle+0x4c>
		lr_nw_connect_timer_count++;
 8004bde:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <lora_network_timer_handle+0xdc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a30      	ldr	r2, [pc, #192]	@ (8004ca8 <lora_network_timer_handle+0xdc>)
 8004be6:	6013      	str	r3, [r2, #0]

		if(lr_nw_connect_timer_count >= 10){
 8004be8:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca8 <lora_network_timer_handle+0xdc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b09      	cmp	r3, #9
 8004bee:	d913      	bls.n	8004c18 <lora_network_timer_handle+0x4c>
			lora_network_stop_connect_timer();
 8004bf0:	f7fd fb54 	bl	800229c <lora_network_stop_connect_timer>

			NotificationValue.cmd = TIMEOUT;
 8004bf4:	2309      	movs	r3, #9
 8004bf6:	713b      	strb	r3, [r7, #4]
			NotificationValue.node_id = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	717b      	strb	r3, [r7, #5]
			HAL_UART_Transmit(&huart2, "Connect timeout\n", 15, 2000);
 8004bfc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004c00:	220f      	movs	r2, #15
 8004c02:	492a      	ldr	r1, [pc, #168]	@ (8004cac <lora_network_timer_handle+0xe0>)
 8004c04:	482a      	ldr	r0, [pc, #168]	@ (8004cb0 <lora_network_timer_handle+0xe4>)
 8004c06:	f004 fc31 	bl	800946c <HAL_UART_Transmit>

			xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb4 <lora_network_timer_handle+0xe8>)
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	463a      	mov	r2, r7
 8004c10:	1d39      	adds	r1, r7, #4
 8004c12:	2300      	movs	r3, #0
 8004c14:	f008 fe5e 	bl	800d8d4 <xQueueGenericSendFromISR>
		}
	}

	if(lr_nw_disconnect_timer_enable == 1){
 8004c18:	4b27      	ldr	r3, [pc, #156]	@ (8004cb8 <lora_network_timer_handle+0xec>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d11c      	bne.n	8004c5a <lora_network_timer_handle+0x8e>
		lr_nw_disconnect_timer_count++;
 8004c20:	4b26      	ldr	r3, [pc, #152]	@ (8004cbc <lora_network_timer_handle+0xf0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a25      	ldr	r2, [pc, #148]	@ (8004cbc <lora_network_timer_handle+0xf0>)
 8004c28:	6013      	str	r3, [r2, #0]

		if(lr_nw_disconnect_timer_count >= 10){
 8004c2a:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <lora_network_timer_handle+0xf0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d913      	bls.n	8004c5a <lora_network_timer_handle+0x8e>
			lora_network_stop_disconnect_timer();
 8004c32:	f7fd fb57 	bl	80022e4 <lora_network_stop_disconnect_timer>

			NotificationValue.cmd = TIMEOUT;
 8004c36:	2309      	movs	r3, #9
 8004c38:	713b      	strb	r3, [r7, #4]
			NotificationValue.node_id = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	717b      	strb	r3, [r7, #5]
			HAL_UART_Transmit(&huart2, "Disconnect timeout\n", 18, 2000);
 8004c3e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004c42:	2212      	movs	r2, #18
 8004c44:	491e      	ldr	r1, [pc, #120]	@ (8004cc0 <lora_network_timer_handle+0xf4>)
 8004c46:	481a      	ldr	r0, [pc, #104]	@ (8004cb0 <lora_network_timer_handle+0xe4>)
 8004c48:	f004 fc10 	bl	800946c <HAL_UART_Transmit>

			xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <lora_network_timer_handle+0xf8>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	463a      	mov	r2, r7
 8004c52:	1d39      	adds	r1, r7, #4
 8004c54:	2300      	movs	r3, #0
 8004c56:	f008 fe3d 	bl	800d8d4 <xQueueGenericSendFromISR>
		}
	}

	if(lr_nw_read_request_timer_enable == 1){
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc8 <lora_network_timer_handle+0xfc>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d11c      	bne.n	8004c9c <lora_network_timer_handle+0xd0>
		lr_nw_read_request_timer_count++;
 8004c62:	4b1a      	ldr	r3, [pc, #104]	@ (8004ccc <lora_network_timer_handle+0x100>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <lora_network_timer_handle+0x100>)
 8004c6a:	6013      	str	r3, [r2, #0]

		if(lr_nw_read_request_timer_count >= 10){
 8004c6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ccc <lora_network_timer_handle+0x100>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b09      	cmp	r3, #9
 8004c72:	d913      	bls.n	8004c9c <lora_network_timer_handle+0xd0>
			lora_network_stop_read_request_timer();
 8004c74:	f7fd fb5a 	bl	800232c <lora_network_stop_read_request_timer>

			NotificationValue.cmd = TIMEOUT;
 8004c78:	2309      	movs	r3, #9
 8004c7a:	713b      	strb	r3, [r7, #4]
			NotificationValue.node_id = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	717b      	strb	r3, [r7, #5]
			HAL_UART_Transmit(&huart2, "Send request timeout\n", 20, 2000);
 8004c80:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004c84:	2214      	movs	r2, #20
 8004c86:	4912      	ldr	r1, [pc, #72]	@ (8004cd0 <lora_network_timer_handle+0x104>)
 8004c88:	4809      	ldr	r0, [pc, #36]	@ (8004cb0 <lora_network_timer_handle+0xe4>)
 8004c8a:	f004 fbef 	bl	800946c <HAL_UART_Transmit>

			xQueueSendFromISR(send_request_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004c8e:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <lora_network_timer_handle+0x108>)
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	463a      	mov	r2, r7
 8004c94:	1d39      	adds	r1, r7, #4
 8004c96:	2300      	movs	r3, #0
 8004c98:	f008 fe1c 	bl	800d8d4 <xQueueGenericSendFromISR>
		}
	}
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200008a8 	.word	0x200008a8
 8004ca8:	200008ac 	.word	0x200008ac
 8004cac:	0801183c 	.word	0x0801183c
 8004cb0:	20001ad0 	.word	0x20001ad0
 8004cb4:	20001898 	.word	0x20001898
 8004cb8:	200008a9 	.word	0x200008a9
 8004cbc:	200008b0 	.word	0x200008b0
 8004cc0:	08011a90 	.word	0x08011a90
 8004cc4:	2000189c 	.word	0x2000189c
 8004cc8:	200008aa 	.word	0x200008aa
 8004ccc:	200008b4 	.word	0x200008b4
 8004cd0:	08011aa4 	.word	0x08011aa4
 8004cd4:	200018a0 	.word	0x200018a0

08004cd8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == BUTTON1_Pin)){
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d121      	bne.n	8004d2c <HAL_GPIO_EXTI_Callback+0x54>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ce8:	4a41      	ldr	r2, [pc, #260]	@ (8004df0 <HAL_GPIO_EXTI_Callback+0x118>)
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 8004cee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cf2:	f000 fe2f 	bl	8005954 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	483e      	ldr	r0, [pc, #248]	@ (8004df4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004cfc:	f001 f8b4 	bl	8005e68 <HAL_GPIO_ReadPin>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d06b      	beq.n	8004dde <HAL_GPIO_EXTI_Callback+0x106>
		uint8_t test_buffer[3];
		HAL_UART_Transmit(&huart2, "Test1\n", 6, 2000);
 8004d06:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004d0a:	2206      	movs	r2, #6
 8004d0c:	493a      	ldr	r1, [pc, #232]	@ (8004df8 <HAL_GPIO_EXTI_Callback+0x120>)
 8004d0e:	483b      	ldr	r0, [pc, #236]	@ (8004dfc <HAL_GPIO_EXTI_Callback+0x124>)
 8004d10:	f004 fbac 	bl	800946c <HAL_UART_Transmit>

		test_buffer[0] = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	743b      	strb	r3, [r7, #16]
		test_buffer[1] = PC_CMD_CONNECT_TO_ALL_NODES;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	747b      	strb	r3, [r7, #17]
		test_buffer[2] = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	74bb      	strb	r3, [r7, #18]
		pc_user_cmd_handle(test_buffer);
 8004d20:	f107 0310 	add.w	r3, r7, #16
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff f8cb 	bl	8003ec0 <pc_user_cmd_handle>
 8004d2a:	e05d      	b.n	8004de8 <HAL_GPIO_EXTI_Callback+0x110>

	}
	else if(GPIO_Pin == BUTTON2_Pin){
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d121      	bne.n	8004d76 <HAL_GPIO_EXTI_Callback+0x9e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d32:	4a2f      	ldr	r2, [pc, #188]	@ (8004df0 <HAL_GPIO_EXTI_Callback+0x118>)
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 8004d38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d3c:	f000 fe0a 	bl	8005954 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 8004d40:	88fb      	ldrh	r3, [r7, #6]
 8004d42:	4619      	mov	r1, r3
 8004d44:	482b      	ldr	r0, [pc, #172]	@ (8004df4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004d46:	f001 f88f 	bl	8005e68 <HAL_GPIO_ReadPin>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d048      	beq.n	8004de2 <HAL_GPIO_EXTI_Callback+0x10a>
		HAL_UART_Transmit(&huart2, "Test2\n", 6, 2000);
 8004d50:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004d54:	2206      	movs	r2, #6
 8004d56:	492a      	ldr	r1, [pc, #168]	@ (8004e00 <HAL_GPIO_EXTI_Callback+0x128>)
 8004d58:	4828      	ldr	r0, [pc, #160]	@ (8004dfc <HAL_GPIO_EXTI_Callback+0x124>)
 8004d5a:	f004 fb87 	bl	800946c <HAL_UART_Transmit>
		uint8_t test_buffer[3];
		test_buffer[0] = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	733b      	strb	r3, [r7, #12]
		test_buffer[1] = PC_CMD_CONNECT_TO_SPECIFIC_NODE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	737b      	strb	r3, [r7, #13]
		test_buffer[2] = 4;
 8004d66:	2304      	movs	r3, #4
 8004d68:	73bb      	strb	r3, [r7, #14]
		pc_user_cmd_handle(test_buffer);
 8004d6a:	f107 030c 	add.w	r3, r7, #12
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff f8a6 	bl	8003ec0 <pc_user_cmd_handle>
 8004d74:	e038      	b.n	8004de8 <HAL_GPIO_EXTI_Callback+0x110>

	}

	else if(GPIO_Pin == BUTTON3_Pin){
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d121      	bne.n	8004dc0 <HAL_GPIO_EXTI_Callback+0xe8>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004df0 <HAL_GPIO_EXTI_Callback+0x118>)
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 8004d82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d86:	f000 fde5 	bl	8005954 <HAL_Delay>
		if(HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, GPIO_Pin) == GPIO_PIN_RESET) return;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4819      	ldr	r0, [pc, #100]	@ (8004df4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004d90:	f001 f86a 	bl	8005e68 <HAL_GPIO_ReadPin>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d025      	beq.n	8004de6 <HAL_GPIO_EXTI_Callback+0x10e>
		HAL_UART_Transmit(&huart2, "Test3\n", 6, 2000);
 8004d9a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004d9e:	2206      	movs	r2, #6
 8004da0:	4918      	ldr	r1, [pc, #96]	@ (8004e04 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004da2:	4816      	ldr	r0, [pc, #88]	@ (8004dfc <HAL_GPIO_EXTI_Callback+0x124>)
 8004da4:	f004 fb62 	bl	800946c <HAL_UART_Transmit>
		uint8_t test_buffer[3];

		test_buffer[0] = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	723b      	strb	r3, [r7, #8]
		test_buffer[1] = PC_CMD_DISCONNECT_TO_ALL_NODES;
 8004dac:	2302      	movs	r3, #2
 8004dae:	727b      	strb	r3, [r7, #9]
		test_buffer[2] = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	72bb      	strb	r3, [r7, #10]
		pc_user_cmd_handle(test_buffer);
 8004db4:	f107 0308 	add.w	r3, r7, #8
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff f881 	bl	8003ec0 <pc_user_cmd_handle>
 8004dbe:	e013      	b.n	8004de8 <HAL_GPIO_EXTI_Callback+0x110>
	}

	else if(GPIO_Pin == LORA_DIO0_Pin){
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d110      	bne.n	8004de8 <HAL_GPIO_EXTI_Callback+0x110>
		int buf = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, "DIO0\n", 5, 2000);
 8004dca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004dce:	2205      	movs	r2, #5
 8004dd0:	490d      	ldr	r1, [pc, #52]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x130>)
 8004dd2:	480a      	ldr	r0, [pc, #40]	@ (8004dfc <HAL_GPIO_EXTI_Callback+0x124>)
 8004dd4:	f004 fb4a 	bl	800946c <HAL_UART_Transmit>
		lora_network_irq_handle();
 8004dd8:	f7ff fec8 	bl	8004b6c <lora_network_irq_handle>
 8004ddc:	e004      	b.n	8004de8 <HAL_GPIO_EXTI_Callback+0x110>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 8004dde:	bf00      	nop
 8004de0:	e002      	b.n	8004de8 <HAL_GPIO_EXTI_Callback+0x110>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_GPIO_EXTI_Callback+0x110>
		if(HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, GPIO_Pin) == GPIO_PIN_RESET) return;
 8004de6:	bf00      	nop
	}
}
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40013c00 	.word	0x40013c00
 8004df4:	40020400 	.word	0x40020400
 8004df8:	08011c00 	.word	0x08011c00
 8004dfc:	20001ad0 	.word	0x20001ad0
 8004e00:	08011c08 	.word	0x08011c08
 8004e04:	08011c10 	.word	0x08011c10
 8004e08:	08011c18 	.word	0x08011c18

08004e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e10:	f000 fd5e 	bl	80058d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e14:	f000 f81a 	bl	8004e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e18:	f000 f9d4 	bl	80051c4 <MX_GPIO_Init>
  HAL_Delay(200);
 8004e1c:	20c8      	movs	r0, #200	@ 0xc8
 8004e1e:	f000 fd99 	bl	8005954 <HAL_Delay>
  MX_USB_DEVICE_Init();
 8004e22:	f00b f9a9 	bl	8010178 <MX_USB_DEVICE_Init>

  MX_USART1_UART_Init();
 8004e26:	f000 f979 	bl	800511c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8004e2a:	f000 f8a5 	bl	8004f78 <MX_SPI1_Init>
  MX_I2C1_Init();
 8004e2e:	f000 f875 	bl	8004f1c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004e32:	f000 f99d 	bl	8005170 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8004e36:	f000 f8d5 	bl	8004fe4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8004e3a:	f000 f921 	bl	8005080 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  lora_network_init(5);
 8004e3e:	2005      	movs	r0, #5
 8004e40:	f7fd f91a 	bl	8002078 <lora_network_init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8004e44:	f009 fba4 	bl	800e590 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <main+0x3c>

08004e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b094      	sub	sp, #80	@ 0x50
 8004e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e52:	f107 0320 	add.w	r3, r7, #32
 8004e56:	2230      	movs	r2, #48	@ 0x30
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f00b ff7e 	bl	8010d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	2300      	movs	r3, #0
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <SystemClock_Config+0xc8>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	4a26      	ldr	r2, [pc, #152]	@ (8004f14 <SystemClock_Config+0xc8>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e80:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <SystemClock_Config+0xc8>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	4b21      	ldr	r3, [pc, #132]	@ (8004f18 <SystemClock_Config+0xcc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a20      	ldr	r2, [pc, #128]	@ (8004f18 <SystemClock_Config+0xcc>)
 8004e96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <SystemClock_Config+0xcc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004eb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8004ebc:	230f      	movs	r3, #15
 8004ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8004ec0:	2390      	movs	r3, #144	@ 0x90
 8004ec2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004ec4:	2306      	movs	r3, #6
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8004ec8:	2305      	movs	r3, #5
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ecc:	f107 0320 	add.w	r3, r7, #32
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f002 fba9 	bl	8007628 <HAL_RCC_OscConfig>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004edc:	f000 fa28 	bl	8005330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	2101      	movs	r1, #1
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 fe0c 	bl	8007b18 <HAL_RCC_ClockConfig>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8004f06:	f000 fa13 	bl	8005330 <Error_Handler>
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	3750      	adds	r7, #80	@ 0x50
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40007000 	.word	0x40007000

08004f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004f20:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f22:	4a13      	ldr	r2, [pc, #76]	@ (8004f70 <MX_I2C1_Init+0x54>)
 8004f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004f26:	4b11      	ldr	r3, [pc, #68]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f28:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <MX_I2C1_Init+0x58>)
 8004f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004f32:	4b0e      	ldr	r3, [pc, #56]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f38:	4b0c      	ldr	r3, [pc, #48]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f40:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f4c:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f52:	4b06      	ldr	r3, [pc, #24]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f58:	4804      	ldr	r0, [pc, #16]	@ (8004f6c <MX_I2C1_Init+0x50>)
 8004f5a:	f000 ffcf 	bl	8005efc <HAL_I2C_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004f64:	f000 f9e4 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	2000194c 	.word	0x2000194c
 8004f70:	40005400 	.word	0x40005400
 8004f74:	000186a0 	.word	0x000186a0

08004f78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004f7c:	4b17      	ldr	r3, [pc, #92]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004f7e:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <MX_SPI1_Init+0x68>)
 8004f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f82:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004f84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f8a:	4b14      	ldr	r3, [pc, #80]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f90:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f96:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004fac:	2220      	movs	r2, #32
 8004fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fb6:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fbc:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004fc8:	4804      	ldr	r0, [pc, #16]	@ (8004fdc <MX_SPI1_Init+0x64>)
 8004fca:	f002 ffb7 	bl	8007f3c <HAL_SPI_Init>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004fd4:	f000 f9ac 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	200019a0 	.word	0x200019a0
 8004fe0:	40013000 	.word	0x40013000

08004fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005000:	4b1e      	ldr	r3, [pc, #120]	@ (800507c <MX_TIM2_Init+0x98>)
 8005002:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 8005008:	4b1c      	ldr	r3, [pc, #112]	@ (800507c <MX_TIM2_Init+0x98>)
 800500a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800500e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005010:	4b1a      	ldr	r3, [pc, #104]	@ (800507c <MX_TIM2_Init+0x98>)
 8005012:	2200      	movs	r2, #0
 8005014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8005016:	4b19      	ldr	r3, [pc, #100]	@ (800507c <MX_TIM2_Init+0x98>)
 8005018:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800501c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800501e:	4b17      	ldr	r3, [pc, #92]	@ (800507c <MX_TIM2_Init+0x98>)
 8005020:	2200      	movs	r2, #0
 8005022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005024:	4b15      	ldr	r3, [pc, #84]	@ (800507c <MX_TIM2_Init+0x98>)
 8005026:	2200      	movs	r2, #0
 8005028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800502a:	4814      	ldr	r0, [pc, #80]	@ (800507c <MX_TIM2_Init+0x98>)
 800502c:	f003 fd66 	bl	8008afc <HAL_TIM_Base_Init>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005036:	f000 f97b 	bl	8005330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800503a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800503e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005040:	f107 0308 	add.w	r3, r7, #8
 8005044:	4619      	mov	r1, r3
 8005046:	480d      	ldr	r0, [pc, #52]	@ (800507c <MX_TIM2_Init+0x98>)
 8005048:	f003 ff29 	bl	8008e9e <HAL_TIM_ConfigClockSource>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005052:	f000 f96d 	bl	8005330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800505a:	2300      	movs	r3, #0
 800505c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800505e:	463b      	mov	r3, r7
 8005060:	4619      	mov	r1, r3
 8005062:	4806      	ldr	r0, [pc, #24]	@ (800507c <MX_TIM2_Init+0x98>)
 8005064:	f004 f930 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800506e:	f000 f95f 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005072:	bf00      	nop
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200019f8 	.word	0x200019f8

08005080 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005094:	463b      	mov	r3, r7
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800509c:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <MX_TIM4_Init+0x94>)
 800509e:	4a1e      	ldr	r2, [pc, #120]	@ (8005118 <MX_TIM4_Init+0x98>)
 80050a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 40000-1;
 80050a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050a4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80050a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80050b0:	4b18      	ldr	r3, [pc, #96]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050b2:	2263      	movs	r2, #99	@ 0x63
 80050b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050b6:	4b17      	ldr	r3, [pc, #92]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050bc:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80050c2:	4814      	ldr	r0, [pc, #80]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050c4:	f003 fd1a 	bl	8008afc <HAL_TIM_Base_Init>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80050ce:	f000 f92f 	bl	8005330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80050d8:	f107 0308 	add.w	r3, r7, #8
 80050dc:	4619      	mov	r1, r3
 80050de:	480d      	ldr	r0, [pc, #52]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050e0:	f003 fedd 	bl	8008e9e <HAL_TIM_ConfigClockSource>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80050ea:	f000 f921 	bl	8005330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80050f6:	463b      	mov	r3, r7
 80050f8:	4619      	mov	r1, r3
 80050fa:	4806      	ldr	r0, [pc, #24]	@ (8005114 <MX_TIM4_Init+0x94>)
 80050fc:	f004 f8e4 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005106:	f000 f913 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20001a40 	.word	0x20001a40
 8005118:	40000800 	.word	0x40000800

0800511c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005120:	4b11      	ldr	r3, [pc, #68]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 8005122:	4a12      	ldr	r2, [pc, #72]	@ (800516c <MX_USART1_UART_Init+0x50>)
 8005124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005126:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 8005128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800512c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800512e:	4b0e      	ldr	r3, [pc, #56]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 8005130:	2200      	movs	r2, #0
 8005132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 8005136:	2200      	movs	r2, #0
 8005138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800513a:	4b0b      	ldr	r3, [pc, #44]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 800513c:	2200      	movs	r2, #0
 800513e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005140:	4b09      	ldr	r3, [pc, #36]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 8005142:	220c      	movs	r2, #12
 8005144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005146:	4b08      	ldr	r3, [pc, #32]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 8005148:	2200      	movs	r2, #0
 800514a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800514c:	4b06      	ldr	r3, [pc, #24]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 800514e:	2200      	movs	r2, #0
 8005150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005152:	4805      	ldr	r0, [pc, #20]	@ (8005168 <MX_USART1_UART_Init+0x4c>)
 8005154:	f004 f93a 	bl	80093cc <HAL_UART_Init>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800515e:	f000 f8e7 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20001a88 	.word	0x20001a88
 800516c:	40011000 	.word	0x40011000

08005170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005174:	4b11      	ldr	r3, [pc, #68]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 8005176:	4a12      	ldr	r2, [pc, #72]	@ (80051c0 <MX_USART2_UART_Init+0x50>)
 8005178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800517a:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 800517c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005182:	4b0e      	ldr	r3, [pc, #56]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 8005184:	2200      	movs	r2, #0
 8005186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005188:	4b0c      	ldr	r3, [pc, #48]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 800518a:	2200      	movs	r2, #0
 800518c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800518e:	4b0b      	ldr	r3, [pc, #44]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 8005190:	2200      	movs	r2, #0
 8005192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005194:	4b09      	ldr	r3, [pc, #36]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 8005196:	220c      	movs	r2, #12
 8005198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800519a:	4b08      	ldr	r3, [pc, #32]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 800519c:	2200      	movs	r2, #0
 800519e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051a0:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051a6:	4805      	ldr	r0, [pc, #20]	@ (80051bc <MX_USART2_UART_Init+0x4c>)
 80051a8:	f004 f910 	bl	80093cc <HAL_UART_Init>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80051b2:	f000 f8bd 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80051b6:	bf00      	nop
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20001ad0 	.word	0x20001ad0
 80051c0:	40004400 	.word	0x40004400

080051c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ca:	f107 030c 	add.w	r3, r7, #12
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	4b3d      	ldr	r3, [pc, #244]	@ (80052d4 <MX_GPIO_Init+0x110>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e2:	4a3c      	ldr	r2, [pc, #240]	@ (80052d4 <MX_GPIO_Init+0x110>)
 80051e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ea:	4b3a      	ldr	r3, [pc, #232]	@ (80052d4 <MX_GPIO_Init+0x110>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	4b36      	ldr	r3, [pc, #216]	@ (80052d4 <MX_GPIO_Init+0x110>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	4a35      	ldr	r2, [pc, #212]	@ (80052d4 <MX_GPIO_Init+0x110>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	6313      	str	r3, [r2, #48]	@ 0x30
 8005206:	4b33      	ldr	r3, [pc, #204]	@ (80052d4 <MX_GPIO_Init+0x110>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4b2f      	ldr	r3, [pc, #188]	@ (80052d4 <MX_GPIO_Init+0x110>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	4a2e      	ldr	r2, [pc, #184]	@ (80052d4 <MX_GPIO_Init+0x110>)
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	6313      	str	r3, [r2, #48]	@ 0x30
 8005222:	4b2c      	ldr	r3, [pc, #176]	@ (80052d4 <MX_GPIO_Init+0x110>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 800522e:	2200      	movs	r2, #0
 8005230:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8005234:	4828      	ldr	r0, [pc, #160]	@ (80052d8 <MX_GPIO_Init+0x114>)
 8005236:	f000 fe2f 	bl	8005e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_RST_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|SPI1_NSS_Pin;
 800523a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800523e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005240:	2301      	movs	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005248:	2301      	movs	r3, #1
 800524a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524c:	f107 030c 	add.w	r3, r7, #12
 8005250:	4619      	mov	r1, r3
 8005252:	4821      	ldr	r0, [pc, #132]	@ (80052d8 <MX_GPIO_Init+0x114>)
 8005254:	f000 fc84 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8005258:	2301      	movs	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800525c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8005266:	f107 030c 	add.w	r3, r7, #12
 800526a:	4619      	mov	r1, r3
 800526c:	481b      	ldr	r0, [pc, #108]	@ (80052dc <MX_GPIO_Init+0x118>)
 800526e:	f000 fc77 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8005272:	230e      	movs	r3, #14
 8005274:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800527a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800527c:	2302      	movs	r3, #2
 800527e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005280:	f107 030c 	add.w	r3, r7, #12
 8005284:	4619      	mov	r1, r3
 8005286:	4815      	ldr	r0, [pc, #84]	@ (80052dc <MX_GPIO_Init+0x118>)
 8005288:	f000 fc6a 	bl	8005b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 800528c:	2200      	movs	r2, #0
 800528e:	2107      	movs	r1, #7
 8005290:	2006      	movs	r0, #6
 8005292:	f000 fc3b 	bl	8005b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005296:	2006      	movs	r0, #6
 8005298:	f000 fc54 	bl	8005b44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 800529c:	2200      	movs	r2, #0
 800529e:	2108      	movs	r1, #8
 80052a0:	2007      	movs	r0, #7
 80052a2:	f000 fc33 	bl	8005b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80052a6:	2007      	movs	r0, #7
 80052a8:	f000 fc4c 	bl	8005b44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 8, 0);
 80052ac:	2200      	movs	r2, #0
 80052ae:	2108      	movs	r1, #8
 80052b0:	2008      	movs	r0, #8
 80052b2:	f000 fc2b 	bl	8005b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80052b6:	2008      	movs	r0, #8
 80052b8:	f000 fc44 	bl	8005b44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 8, 0);
 80052bc:	2200      	movs	r2, #0
 80052be:	2108      	movs	r1, #8
 80052c0:	2009      	movs	r0, #9
 80052c2:	f000 fc23 	bl	8005b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80052c6:	2009      	movs	r0, #9
 80052c8:	f000 fc3c 	bl	8005b44 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80052cc:	bf00      	nop
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40020000 	.word	0x40020000
 80052dc:	40020400 	.word	0x40020400

080052e0 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void){
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
	while(1){
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <vApplicationIdleHook+0x4>

080052e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005328 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d102      	bne.n	8005300 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80052fa:	f000 fb0b 	bl	8005914 <HAL_IncTick>

  else if (htim->Instance == TIM4){
	  lora_network_timer_handle();
  }
  /* USER CODE END Callback 1 */
}
 80052fe:	e00e      	b.n	800531e <HAL_TIM_PeriodElapsedCallback+0x36>
  else if (htim->Instance == TIM2){
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d102      	bne.n	8005310 <HAL_TIM_PeriodElapsedCallback+0x28>
	  lora_network_send_request_scheduler();
 800530a:	f7fe f95b 	bl	80035c4 <lora_network_send_request_scheduler>
}
 800530e:	e006      	b.n	800531e <HAL_TIM_PeriodElapsedCallback+0x36>
  else if (htim->Instance == TIM4){
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a05      	ldr	r2, [pc, #20]	@ (800532c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <HAL_TIM_PeriodElapsedCallback+0x36>
	  lora_network_timer_handle();
 800531a:	f7ff fc57 	bl	8004bcc <lora_network_timer_handle>
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800

08005330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005334:	b672      	cpsid	i
}
 8005336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <Error_Handler+0x8>

0800533c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <HAL_MspInit+0x54>)
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	4a11      	ldr	r2, [pc, #68]	@ (8005390 <HAL_MspInit+0x54>)
 800534c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005350:	6453      	str	r3, [r2, #68]	@ 0x44
 8005352:	4b0f      	ldr	r3, [pc, #60]	@ (8005390 <HAL_MspInit+0x54>)
 8005354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <HAL_MspInit+0x54>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	4a0a      	ldr	r2, [pc, #40]	@ (8005390 <HAL_MspInit+0x54>)
 8005368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800536c:	6413      	str	r3, [r2, #64]	@ 0x40
 800536e:	4b08      	ldr	r3, [pc, #32]	@ (8005390 <HAL_MspInit+0x54>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800537a:	2200      	movs	r2, #0
 800537c:	210f      	movs	r1, #15
 800537e:	f06f 0001 	mvn.w	r0, #1
 8005382:	f000 fbc3 	bl	8005b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800

08005394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	@ 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539c:	f107 0314 	add.w	r3, r7, #20
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <HAL_I2C_MspInit+0x84>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d12b      	bne.n	800540e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	4b18      	ldr	r3, [pc, #96]	@ (800541c <HAL_I2C_MspInit+0x88>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	4a17      	ldr	r2, [pc, #92]	@ (800541c <HAL_I2C_MspInit+0x88>)
 80053c0:	f043 0302 	orr.w	r3, r3, #2
 80053c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80053c6:	4b15      	ldr	r3, [pc, #84]	@ (800541c <HAL_I2C_MspInit+0x88>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_EEPROM_Pin|I2C1_SDA_EEPROM_Pin;
 80053d2:	23c0      	movs	r3, #192	@ 0xc0
 80053d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053d6:	2312      	movs	r3, #18
 80053d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053de:	2303      	movs	r3, #3
 80053e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053e2:	2304      	movs	r3, #4
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053e6:	f107 0314 	add.w	r3, r7, #20
 80053ea:	4619      	mov	r1, r3
 80053ec:	480c      	ldr	r0, [pc, #48]	@ (8005420 <HAL_I2C_MspInit+0x8c>)
 80053ee:	f000 fbb7 	bl	8005b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4b09      	ldr	r3, [pc, #36]	@ (800541c <HAL_I2C_MspInit+0x88>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	4a08      	ldr	r2, [pc, #32]	@ (800541c <HAL_I2C_MspInit+0x88>)
 80053fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005400:	6413      	str	r3, [r2, #64]	@ 0x40
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_I2C_MspInit+0x88>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800540e:	bf00      	nop
 8005410:	3728      	adds	r7, #40	@ 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40005400 	.word	0x40005400
 800541c:	40023800 	.word	0x40023800
 8005420:	40020400 	.word	0x40020400

08005424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542c:	f107 0314 	add.w	r3, r7, #20
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a19      	ldr	r2, [pc, #100]	@ (80054a8 <HAL_SPI_MspInit+0x84>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d12b      	bne.n	800549e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	4b18      	ldr	r3, [pc, #96]	@ (80054ac <HAL_SPI_MspInit+0x88>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	4a17      	ldr	r2, [pc, #92]	@ (80054ac <HAL_SPI_MspInit+0x88>)
 8005450:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005454:	6453      	str	r3, [r2, #68]	@ 0x44
 8005456:	4b15      	ldr	r3, [pc, #84]	@ (80054ac <HAL_SPI_MspInit+0x88>)
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	4b11      	ldr	r3, [pc, #68]	@ (80054ac <HAL_SPI_MspInit+0x88>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	4a10      	ldr	r2, [pc, #64]	@ (80054ac <HAL_SPI_MspInit+0x88>)
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	6313      	str	r3, [r2, #48]	@ 0x30
 8005472:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <HAL_SPI_MspInit+0x88>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_LORA_Pin|SPI1_MISO_LORA_Pin|SPI1_MOSI_LORA_Pin;
 800547e:	23e0      	movs	r3, #224	@ 0xe0
 8005480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005482:	2302      	movs	r3, #2
 8005484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800548a:	2303      	movs	r3, #3
 800548c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800548e:	2305      	movs	r3, #5
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005492:	f107 0314 	add.w	r3, r7, #20
 8005496:	4619      	mov	r1, r3
 8005498:	4805      	ldr	r0, [pc, #20]	@ (80054b0 <HAL_SPI_MspInit+0x8c>)
 800549a:	f000 fb61 	bl	8005b60 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800549e:	bf00      	nop
 80054a0:	3728      	adds	r7, #40	@ 0x28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40013000 	.word	0x40013000
 80054ac:	40023800 	.word	0x40023800
 80054b0:	40020000 	.word	0x40020000

080054b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c4:	d116      	bne.n	80054f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005534 <HAL_TIM_Base_MspInit+0x80>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	4a19      	ldr	r2, [pc, #100]	@ (8005534 <HAL_TIM_Base_MspInit+0x80>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054d6:	4b17      	ldr	r3, [pc, #92]	@ (8005534 <HAL_TIM_Base_MspInit+0x80>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80054e2:	2200      	movs	r2, #0
 80054e4:	2106      	movs	r1, #6
 80054e6:	201c      	movs	r0, #28
 80054e8:	f000 fb10 	bl	8005b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054ec:	201c      	movs	r0, #28
 80054ee:	f000 fb29 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80054f2:	e01a      	b.n	800552a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005538 <HAL_TIM_Base_MspInit+0x84>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d115      	bne.n	800552a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <HAL_TIM_Base_MspInit+0x80>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	4a0b      	ldr	r2, [pc, #44]	@ (8005534 <HAL_TIM_Base_MspInit+0x80>)
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	6413      	str	r3, [r2, #64]	@ 0x40
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <HAL_TIM_Base_MspInit+0x80>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 800551a:	2200      	movs	r2, #0
 800551c:	2106      	movs	r1, #6
 800551e:	201e      	movs	r0, #30
 8005520:	f000 faf4 	bl	8005b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005524:	201e      	movs	r0, #30
 8005526:	f000 fb0d 	bl	8005b44 <HAL_NVIC_EnableIRQ>
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
 8005538:	40000800 	.word	0x40000800

0800553c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08c      	sub	sp, #48	@ 0x30
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005544:	f107 031c 	add.w	r3, r7, #28
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a32      	ldr	r2, [pc, #200]	@ (8005624 <HAL_UART_MspInit+0xe8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d12d      	bne.n	80055ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	4b31      	ldr	r3, [pc, #196]	@ (8005628 <HAL_UART_MspInit+0xec>)
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	4a30      	ldr	r2, [pc, #192]	@ (8005628 <HAL_UART_MspInit+0xec>)
 8005568:	f043 0310 	orr.w	r3, r3, #16
 800556c:	6453      	str	r3, [r2, #68]	@ 0x44
 800556e:	4b2e      	ldr	r3, [pc, #184]	@ (8005628 <HAL_UART_MspInit+0xec>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	4b2a      	ldr	r3, [pc, #168]	@ (8005628 <HAL_UART_MspInit+0xec>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	4a29      	ldr	r2, [pc, #164]	@ (8005628 <HAL_UART_MspInit+0xec>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	6313      	str	r3, [r2, #48]	@ 0x30
 800558a:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <HAL_UART_MspInit+0xec>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin|USART1_RX_ESP_Pin;
 8005596:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800559a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559c:	2302      	movs	r3, #2
 800559e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a4:	2303      	movs	r3, #3
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055a8:	2307      	movs	r3, #7
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ac:	f107 031c 	add.w	r3, r7, #28
 80055b0:	4619      	mov	r1, r3
 80055b2:	481e      	ldr	r0, [pc, #120]	@ (800562c <HAL_UART_MspInit+0xf0>)
 80055b4:	f000 fad4 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80055b8:	e030      	b.n	800561c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1c      	ldr	r2, [pc, #112]	@ (8005630 <HAL_UART_MspInit+0xf4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d12b      	bne.n	800561c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	4b17      	ldr	r3, [pc, #92]	@ (8005628 <HAL_UART_MspInit+0xec>)
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	4a16      	ldr	r2, [pc, #88]	@ (8005628 <HAL_UART_MspInit+0xec>)
 80055ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80055d4:	4b14      	ldr	r3, [pc, #80]	@ (8005628 <HAL_UART_MspInit+0xec>)
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	4b10      	ldr	r3, [pc, #64]	@ (8005628 <HAL_UART_MspInit+0xec>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005628 <HAL_UART_MspInit+0xec>)
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80055f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <HAL_UART_MspInit+0xec>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_SIM_Pin|USART2_RX_SIM_Pin;
 80055fc:	230c      	movs	r3, #12
 80055fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005600:	2302      	movs	r3, #2
 8005602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005608:	2303      	movs	r3, #3
 800560a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800560c:	2307      	movs	r3, #7
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005610:	f107 031c 	add.w	r3, r7, #28
 8005614:	4619      	mov	r1, r3
 8005616:	4805      	ldr	r0, [pc, #20]	@ (800562c <HAL_UART_MspInit+0xf0>)
 8005618:	f000 faa2 	bl	8005b60 <HAL_GPIO_Init>
}
 800561c:	bf00      	nop
 800561e:	3730      	adds	r7, #48	@ 0x30
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40011000 	.word	0x40011000
 8005628:	40023800 	.word	0x40023800
 800562c:	40020000 	.word	0x40020000
 8005630:	40004400 	.word	0x40004400

08005634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	@ 0x38
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	4b33      	ldr	r3, [pc, #204]	@ (8005718 <HAL_InitTick+0xe4>)
 800564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564c:	4a32      	ldr	r2, [pc, #200]	@ (8005718 <HAL_InitTick+0xe4>)
 800564e:	f043 0302 	orr.w	r3, r3, #2
 8005652:	6413      	str	r3, [r2, #64]	@ 0x40
 8005654:	4b30      	ldr	r3, [pc, #192]	@ (8005718 <HAL_InitTick+0xe4>)
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005660:	f107 0210 	add.w	r2, r7, #16
 8005664:	f107 0314 	add.w	r3, r7, #20
 8005668:	4611      	mov	r1, r2
 800566a:	4618      	mov	r0, r3
 800566c:	f002 fc34 	bl	8007ed8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800567a:	f002 fc05 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 800567e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005680:	e004      	b.n	800568c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005682:	f002 fc01 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 8005686:	4603      	mov	r3, r0
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800568c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568e:	4a23      	ldr	r2, [pc, #140]	@ (800571c <HAL_InitTick+0xe8>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	0c9b      	lsrs	r3, r3, #18
 8005696:	3b01      	subs	r3, #1
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800569a:	4b21      	ldr	r3, [pc, #132]	@ (8005720 <HAL_InitTick+0xec>)
 800569c:	4a21      	ldr	r2, [pc, #132]	@ (8005724 <HAL_InitTick+0xf0>)
 800569e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80056a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <HAL_InitTick+0xec>)
 80056a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80056a6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_InitTick+0xec>)
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80056ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005720 <HAL_InitTick+0xec>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <HAL_InitTick+0xec>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056ba:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <HAL_InitTick+0xec>)
 80056bc:	2200      	movs	r2, #0
 80056be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80056c0:	4817      	ldr	r0, [pc, #92]	@ (8005720 <HAL_InitTick+0xec>)
 80056c2:	f003 fa1b 	bl	8008afc <HAL_TIM_Base_Init>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80056cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11b      	bne.n	800570c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80056d4:	4812      	ldr	r0, [pc, #72]	@ (8005720 <HAL_InitTick+0xec>)
 80056d6:	f003 fa61 	bl	8008b9c <HAL_TIM_Base_Start_IT>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80056e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d111      	bne.n	800570c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80056e8:	201d      	movs	r0, #29
 80056ea:	f000 fa2b 	bl	8005b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d808      	bhi.n	8005706 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80056f4:	2200      	movs	r2, #0
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	201d      	movs	r0, #29
 80056fa:	f000 fa07 	bl	8005b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <HAL_InitTick+0xf4>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	e002      	b.n	800570c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800570c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005710:	4618      	mov	r0, r3
 8005712:	3738      	adds	r7, #56	@ 0x38
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40023800 	.word	0x40023800
 800571c:	431bde83 	.word	0x431bde83
 8005720:	20001b18 	.word	0x20001b18
 8005724:	40000400 	.word	0x40000400
 8005728:	20000004 	.word	0x20000004

0800572c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <NMI_Handler+0x4>

08005734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <HardFault_Handler+0x4>

0800573c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <MemManage_Handler+0x4>

08005744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <BusFault_Handler+0x4>

0800574c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005750:	bf00      	nop
 8005752:	e7fd      	b.n	8005750 <UsageFault_Handler+0x4>

08005754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8005766:	2001      	movs	r0, #1
 8005768:	f000 fbb0 	bl	8005ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800576c:	bf00      	nop
 800576e:	bd80      	pop	{r7, pc}

08005770 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8005774:	2002      	movs	r0, #2
 8005776:	f000 fba9 	bl	8005ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}

0800577e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8005782:	2004      	movs	r0, #4
 8005784:	f000 fba2 	bl	8005ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}

0800578c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8005790:	2008      	movs	r0, #8
 8005792:	f000 fb9b 	bl	8005ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057a0:	4802      	ldr	r0, [pc, #8]	@ (80057ac <TIM2_IRQHandler+0x10>)
 80057a2:	f003 fa8c 	bl	8008cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	200019f8 	.word	0x200019f8

080057b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80057b4:	4802      	ldr	r0, [pc, #8]	@ (80057c0 <TIM3_IRQHandler+0x10>)
 80057b6:	f003 fa82 	bl	8008cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20001b18 	.word	0x20001b18

080057c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80057c8:	4802      	ldr	r0, [pc, #8]	@ (80057d4 <TIM4_IRQHandler+0x10>)
 80057ca:	f003 fa78 	bl	8008cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20001a40 	.word	0x20001a40

080057d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80057dc:	4802      	ldr	r0, [pc, #8]	@ (80057e8 <OTG_FS_IRQHandler+0x10>)
 80057de:	f000 fe15 	bl	800640c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80057e2:	bf00      	nop
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	2000c358 	.word	0x2000c358

080057ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057f4:	4a14      	ldr	r2, [pc, #80]	@ (8005848 <_sbrk+0x5c>)
 80057f6:	4b15      	ldr	r3, [pc, #84]	@ (800584c <_sbrk+0x60>)
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005800:	4b13      	ldr	r3, [pc, #76]	@ (8005850 <_sbrk+0x64>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005808:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <_sbrk+0x64>)
 800580a:	4a12      	ldr	r2, [pc, #72]	@ (8005854 <_sbrk+0x68>)
 800580c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800580e:	4b10      	ldr	r3, [pc, #64]	@ (8005850 <_sbrk+0x64>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	429a      	cmp	r2, r3
 800581a:	d207      	bcs.n	800582c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800581c:	f00b fab6 	bl	8010d8c <__errno>
 8005820:	4603      	mov	r3, r0
 8005822:	220c      	movs	r2, #12
 8005824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	e009      	b.n	8005840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800582c:	4b08      	ldr	r3, [pc, #32]	@ (8005850 <_sbrk+0x64>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005832:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <_sbrk+0x64>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	4a05      	ldr	r2, [pc, #20]	@ (8005850 <_sbrk+0x64>)
 800583c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800583e:	68fb      	ldr	r3, [r7, #12]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20020000 	.word	0x20020000
 800584c:	00000400 	.word	0x00000400
 8005850:	20001b60 	.word	0x20001b60
 8005854:	2000cba8 	.word	0x2000cba8

08005858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800585c:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <SystemInit+0x20>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	4a05      	ldr	r2, [pc, #20]	@ (8005878 <SystemInit+0x20>)
 8005864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800587c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80058b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005880:	f7ff ffea 	bl	8005858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005884:	480c      	ldr	r0, [pc, #48]	@ (80058b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005886:	490d      	ldr	r1, [pc, #52]	@ (80058bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005888:	4a0d      	ldr	r2, [pc, #52]	@ (80058c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800588a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800588c:	e002      	b.n	8005894 <LoopCopyDataInit>

0800588e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800588e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005892:	3304      	adds	r3, #4

08005894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005898:	d3f9      	bcc.n	800588e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800589c:	4c0a      	ldr	r4, [pc, #40]	@ (80058c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800589e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058a0:	e001      	b.n	80058a6 <LoopFillZerobss>

080058a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058a4:	3204      	adds	r2, #4

080058a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058a8:	d3fb      	bcc.n	80058a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058aa:	f00b fa75 	bl	8010d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058ae:	f7ff faad 	bl	8004e0c <main>
  bx  lr    
 80058b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80058b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80058b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058bc:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80058c0:	08011cdc 	.word	0x08011cdc
  ldr r2, =_sbss
 80058c4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80058c8:	2000cba4 	.word	0x2000cba4

080058cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058cc:	e7fe      	b.n	80058cc <ADC_IRQHandler>
	...

080058d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005910 <HAL_Init+0x40>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005910 <HAL_Init+0x40>)
 80058da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <HAL_Init+0x40>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005910 <HAL_Init+0x40>)
 80058e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058ec:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <HAL_Init+0x40>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_Init+0x40>)
 80058f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058f8:	2003      	movs	r0, #3
 80058fa:	f000 f8fc 	bl	8005af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058fe:	2005      	movs	r0, #5
 8005900:	f7ff fe98 	bl	8005634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005904:	f7ff fd1a 	bl	800533c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023c00 	.word	0x40023c00

08005914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <HAL_IncTick+0x20>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <HAL_IncTick+0x24>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4413      	add	r3, r2
 8005924:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <HAL_IncTick+0x24>)
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000008 	.word	0x20000008
 8005938:	20001b64 	.word	0x20001b64

0800593c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return uwTick;
 8005940:	4b03      	ldr	r3, [pc, #12]	@ (8005950 <HAL_GetTick+0x14>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20001b64 	.word	0x20001b64

08005954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800595c:	f7ff ffee 	bl	800593c <HAL_GetTick>
 8005960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d005      	beq.n	800597a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800596e:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <HAL_Delay+0x44>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800597a:	bf00      	nop
 800597c:	f7ff ffde 	bl	800593c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d8f7      	bhi.n	800597c <HAL_Delay+0x28>
  {
  }
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000008 	.word	0x20000008

0800599c <__NVIC_SetPriorityGrouping>:
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059ac:	4b0c      	ldr	r3, [pc, #48]	@ (80059e0 <__NVIC_SetPriorityGrouping+0x44>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059b8:	4013      	ands	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ce:	4a04      	ldr	r2, [pc, #16]	@ (80059e0 <__NVIC_SetPriorityGrouping+0x44>)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	60d3      	str	r3, [r2, #12]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <__NVIC_GetPriorityGrouping>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059e8:	4b04      	ldr	r3, [pc, #16]	@ (80059fc <__NVIC_GetPriorityGrouping+0x18>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	f003 0307 	and.w	r3, r3, #7
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <__NVIC_EnableIRQ>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	db0b      	blt.n	8005a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	f003 021f 	and.w	r2, r3, #31
 8005a18:	4907      	ldr	r1, [pc, #28]	@ (8005a38 <__NVIC_EnableIRQ+0x38>)
 8005a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	2001      	movs	r0, #1
 8005a22:	fa00 f202 	lsl.w	r2, r0, r2
 8005a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	e000e100 	.word	0xe000e100

08005a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db0a      	blt.n	8005a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	490c      	ldr	r1, [pc, #48]	@ (8005a88 <__NVIC_SetPriority+0x4c>)
 8005a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5a:	0112      	lsls	r2, r2, #4
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a64:	e00a      	b.n	8005a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4908      	ldr	r1, [pc, #32]	@ (8005a8c <__NVIC_SetPriority+0x50>)
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	3b04      	subs	r3, #4
 8005a74:	0112      	lsls	r2, r2, #4
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	440b      	add	r3, r1
 8005a7a:	761a      	strb	r2, [r3, #24]
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000e100 	.word	0xe000e100
 8005a8c:	e000ed00 	.word	0xe000ed00

08005a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	@ 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f1c3 0307 	rsb	r3, r3, #7
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	bf28      	it	cs
 8005aae:	2304      	movcs	r3, #4
 8005ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d902      	bls.n	8005ac0 <NVIC_EncodePriority+0x30>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3b03      	subs	r3, #3
 8005abe:	e000      	b.n	8005ac2 <NVIC_EncodePriority+0x32>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43da      	mvns	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae2:	43d9      	mvns	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae8:	4313      	orrs	r3, r2
         );
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3724      	adds	r7, #36	@ 0x24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff ff4c 	bl	800599c <__NVIC_SetPriorityGrouping>
}
 8005b04:	bf00      	nop
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b1e:	f7ff ff61 	bl	80059e4 <__NVIC_GetPriorityGrouping>
 8005b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	6978      	ldr	r0, [r7, #20]
 8005b2a:	f7ff ffb1 	bl	8005a90 <NVIC_EncodePriority>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff ff80 	bl	8005a3c <__NVIC_SetPriority>
}
 8005b3c:	bf00      	nop
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff ff54 	bl	8005a00 <__NVIC_EnableIRQ>
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	@ 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	e159      	b.n	8005e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	f040 8148 	bne.w	8005e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d005      	beq.n	8005bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d130      	bne.n	8005c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005be8:	2201      	movs	r2, #1
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	f003 0201 	and.w	r2, r3, #1
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d017      	beq.n	8005c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d123      	bne.n	8005ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	08da      	lsrs	r2, r3, #3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3208      	adds	r2, #8
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	220f      	movs	r2, #15
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	08da      	lsrs	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	69b9      	ldr	r1, [r7, #24]
 8005ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	2203      	movs	r2, #3
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0203 	and.w	r2, r3, #3
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80a2 	beq.w	8005e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	4b57      	ldr	r3, [pc, #348]	@ (8005e48 <HAL_GPIO_Init+0x2e8>)
 8005cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cee:	4a56      	ldr	r2, [pc, #344]	@ (8005e48 <HAL_GPIO_Init+0x2e8>)
 8005cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cf6:	4b54      	ldr	r3, [pc, #336]	@ (8005e48 <HAL_GPIO_Init+0x2e8>)
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d02:	4a52      	ldr	r2, [pc, #328]	@ (8005e4c <HAL_GPIO_Init+0x2ec>)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	220f      	movs	r2, #15
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a49      	ldr	r2, [pc, #292]	@ (8005e50 <HAL_GPIO_Init+0x2f0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d019      	beq.n	8005d62 <HAL_GPIO_Init+0x202>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a48      	ldr	r2, [pc, #288]	@ (8005e54 <HAL_GPIO_Init+0x2f4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <HAL_GPIO_Init+0x1fe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a47      	ldr	r2, [pc, #284]	@ (8005e58 <HAL_GPIO_Init+0x2f8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00d      	beq.n	8005d5a <HAL_GPIO_Init+0x1fa>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a46      	ldr	r2, [pc, #280]	@ (8005e5c <HAL_GPIO_Init+0x2fc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <HAL_GPIO_Init+0x1f6>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a45      	ldr	r2, [pc, #276]	@ (8005e60 <HAL_GPIO_Init+0x300>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d101      	bne.n	8005d52 <HAL_GPIO_Init+0x1f2>
 8005d4e:	2304      	movs	r3, #4
 8005d50:	e008      	b.n	8005d64 <HAL_GPIO_Init+0x204>
 8005d52:	2307      	movs	r3, #7
 8005d54:	e006      	b.n	8005d64 <HAL_GPIO_Init+0x204>
 8005d56:	2303      	movs	r3, #3
 8005d58:	e004      	b.n	8005d64 <HAL_GPIO_Init+0x204>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e002      	b.n	8005d64 <HAL_GPIO_Init+0x204>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_GPIO_Init+0x204>
 8005d62:	2300      	movs	r3, #0
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	f002 0203 	and.w	r2, r2, #3
 8005d6a:	0092      	lsls	r2, r2, #2
 8005d6c:	4093      	lsls	r3, r2
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d74:	4935      	ldr	r1, [pc, #212]	@ (8005e4c <HAL_GPIO_Init+0x2ec>)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	089b      	lsrs	r3, r3, #2
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d82:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005da6:	4a2f      	ldr	r2, [pc, #188]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005dac:	4b2d      	ldr	r3, [pc, #180]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005dd0:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005dd6:	4b23      	ldr	r3, [pc, #140]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e00:	4b18      	ldr	r3, [pc, #96]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e24:	4a0f      	ldr	r2, [pc, #60]	@ (8005e64 <HAL_GPIO_Init+0x304>)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b0f      	cmp	r3, #15
 8005e34:	f67f aea2 	bls.w	8005b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	3724      	adds	r7, #36	@ 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40013800 	.word	0x40013800
 8005e50:	40020000 	.word	0x40020000
 8005e54:	40020400 	.word	0x40020400
 8005e58:	40020800 	.word	0x40020800
 8005e5c:	40020c00 	.word	0x40020c00
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40013c00 	.word	0x40013c00

08005e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	887b      	ldrh	r3, [r7, #2]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e001      	b.n	8005e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	807b      	strh	r3, [r7, #2]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ea8:	787b      	ldrb	r3, [r7, #1]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eae:	887a      	ldrh	r2, [r7, #2]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005eb4:	e003      	b.n	8005ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005eb6:	887b      	ldrh	r3, [r7, #2]
 8005eb8:	041a      	lsls	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	619a      	str	r2, [r3, #24]
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ed6:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ee2:	4a05      	ldr	r2, [pc, #20]	@ (8005ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe fef4 	bl	8004cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40013c00 	.word	0x40013c00

08005efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e12b      	b.n	8006166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff fa36 	bl	8005394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	@ 0x24
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f60:	f001 ff92 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 8005f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4a81      	ldr	r2, [pc, #516]	@ (8006170 <HAL_I2C_Init+0x274>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d807      	bhi.n	8005f80 <HAL_I2C_Init+0x84>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a80      	ldr	r2, [pc, #512]	@ (8006174 <HAL_I2C_Init+0x278>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	bf94      	ite	ls
 8005f78:	2301      	movls	r3, #1
 8005f7a:	2300      	movhi	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e006      	b.n	8005f8e <HAL_I2C_Init+0x92>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a7d      	ldr	r2, [pc, #500]	@ (8006178 <HAL_I2C_Init+0x27c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bf94      	ite	ls
 8005f88:	2301      	movls	r3, #1
 8005f8a:	2300      	movhi	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e0e7      	b.n	8006166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a78      	ldr	r2, [pc, #480]	@ (800617c <HAL_I2C_Init+0x280>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0c9b      	lsrs	r3, r3, #18
 8005fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8006170 <HAL_I2C_Init+0x274>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d802      	bhi.n	8005fd0 <HAL_I2C_Init+0xd4>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	e009      	b.n	8005fe4 <HAL_I2C_Init+0xe8>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	4a69      	ldr	r2, [pc, #420]	@ (8006180 <HAL_I2C_Init+0x284>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	099b      	lsrs	r3, r3, #6
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ff6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	495c      	ldr	r1, [pc, #368]	@ (8006170 <HAL_I2C_Init+0x274>)
 8006000:	428b      	cmp	r3, r1
 8006002:	d819      	bhi.n	8006038 <HAL_I2C_Init+0x13c>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1e59      	subs	r1, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006018:	400b      	ands	r3, r1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_I2C_Init+0x138>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1e59      	subs	r1, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	fbb1 f3f3 	udiv	r3, r1, r3
 800602c:	3301      	adds	r3, #1
 800602e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006032:	e051      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 8006034:	2304      	movs	r3, #4
 8006036:	e04f      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d111      	bne.n	8006064 <HAL_I2C_Init+0x168>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1e58      	subs	r0, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6859      	ldr	r1, [r3, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	440b      	add	r3, r1
 800604e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006052:	3301      	adds	r3, #1
 8006054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	e012      	b.n	800608a <HAL_I2C_Init+0x18e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1e58      	subs	r0, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6859      	ldr	r1, [r3, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	0099      	lsls	r1, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	fbb0 f3f3 	udiv	r3, r0, r3
 800607a:	3301      	adds	r3, #1
 800607c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_Init+0x196>
 800608e:	2301      	movs	r3, #1
 8006090:	e022      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10e      	bne.n	80060b8 <HAL_I2C_Init+0x1bc>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1e58      	subs	r0, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6859      	ldr	r1, [r3, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	440b      	add	r3, r1
 80060a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ac:	3301      	adds	r3, #1
 80060ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060b6:	e00f      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1e58      	subs	r0, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6859      	ldr	r1, [r3, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	0099      	lsls	r1, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	6809      	ldr	r1, [r1, #0]
 80060dc:	4313      	orrs	r3, r2
 80060de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69da      	ldr	r2, [r3, #28]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006106:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6911      	ldr	r1, [r2, #16]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68d2      	ldr	r2, [r2, #12]
 8006112:	4311      	orrs	r1, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	430b      	orrs	r3, r1
 800611a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	000186a0 	.word	0x000186a0
 8006174:	001e847f 	.word	0x001e847f
 8006178:	003d08ff 	.word	0x003d08ff
 800617c:	431bde83 	.word	0x431bde83
 8006180:	10624dd3 	.word	0x10624dd3

08006184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af02      	add	r7, sp, #8
 800618a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e101      	b.n	800639a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f00a f9eb 	bl	801058c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2203      	movs	r2, #3
 80061ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061c4:	d102      	bne.n	80061cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f003 fe1e 	bl	8009e12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7c1a      	ldrb	r2, [r3, #16]
 80061de:	f88d 2000 	strb.w	r2, [sp]
 80061e2:	3304      	adds	r3, #4
 80061e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e6:	f003 fcfd 	bl	8009be4 <USB_CoreInit>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0ce      	b.n	800639a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f003 fe16 	bl	8009e34 <USB_SetCurrentMode>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e0bf      	b.n	800639a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	e04a      	b.n	80062b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006220:	7bfa      	ldrb	r2, [r7, #15]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	3315      	adds	r3, #21
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006234:	7bfa      	ldrb	r2, [r7, #15]
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	3314      	adds	r3, #20
 8006244:	7bfa      	ldrb	r2, [r7, #15]
 8006246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006248:	7bfa      	ldrb	r2, [r7, #15]
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	b298      	uxth	r0, r3
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	332e      	adds	r3, #46	@ 0x2e
 800625c:	4602      	mov	r2, r0
 800625e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006260:	7bfa      	ldrb	r2, [r7, #15]
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	4613      	mov	r3, r2
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	4413      	add	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	3318      	adds	r3, #24
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006274:	7bfa      	ldrb	r2, [r7, #15]
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	331c      	adds	r3, #28
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006288:	7bfa      	ldrb	r2, [r7, #15]
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	3320      	adds	r3, #32
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800629c:	7bfa      	ldrb	r2, [r7, #15]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	3324      	adds	r3, #36	@ 0x24
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	3301      	adds	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	791b      	ldrb	r3, [r3, #4]
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d3af      	bcc.n	8006220 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
 80062c4:	e044      	b.n	8006350 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062c6:	7bfa      	ldrb	r2, [r7, #15]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062dc:	7bfa      	ldrb	r2, [r7, #15]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80062ee:	7bfa      	ldrb	r2, [r7, #15]
 80062f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062f2:	7bfa      	ldrb	r2, [r7, #15]
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006308:	7bfa      	ldrb	r2, [r7, #15]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800631e:	7bfa      	ldrb	r2, [r7, #15]
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006334:	7bfa      	ldrb	r2, [r7, #15]
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	3301      	adds	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	791b      	ldrb	r3, [r3, #4]
 8006354:	7bfa      	ldrb	r2, [r7, #15]
 8006356:	429a      	cmp	r2, r3
 8006358:	d3b5      	bcc.n	80062c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	7c1a      	ldrb	r2, [r3, #16]
 8006362:	f88d 2000 	strb.w	r2, [sp]
 8006366:	3304      	adds	r3, #4
 8006368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636a:	f003 fdaf 	bl	8009ecc <USB_DevInit>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e00c      	b.n	800639a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f004 fdf9 	bl	800af8a <USB_DevDisconnect>

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_PCD_Start+0x1c>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e022      	b.n	8006404 <HAL_PCD_Start+0x62>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d105      	bne.n	80063e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f003 fd00 	bl	8009df0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f004 fda7 	bl	800af48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800640c:	b590      	push	{r4, r7, lr}
 800640e:	b08d      	sub	sp, #52	@ 0x34
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f004 fe65 	bl	800b0f2 <USB_GetMode>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 848c 	bne.w	8006d48 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f004 fdc9 	bl	800afcc <USB_ReadInterrupts>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8482 	beq.w	8006d46 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f004 fdb6 	bl	800afcc <USB_ReadInterrupts>
 8006460:	4603      	mov	r3, r0
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d107      	bne.n	800647a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695a      	ldr	r2, [r3, #20]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f002 0202 	and.w	r2, r2, #2
 8006478:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f004 fda4 	bl	800afcc <USB_ReadInterrupts>
 8006484:	4603      	mov	r3, r0
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b10      	cmp	r3, #16
 800648c:	d161      	bne.n	8006552 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0210 	bic.w	r2, r2, #16
 800649c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f003 020f 	and.w	r2, r3, #15
 80064aa:	4613      	mov	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	3304      	adds	r3, #4
 80064bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	0c5b      	lsrs	r3, r3, #17
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d124      	bne.n	8006514 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d035      	beq.n	8006542 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80064e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	6a38      	ldr	r0, [r7, #32]
 80064ea:	f004 fbdb 	bl	800aca4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	091b      	lsrs	r3, r3, #4
 80064f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064fa:	441a      	add	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	091b      	lsrs	r3, r3, #4
 8006508:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800650c:	441a      	add	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	615a      	str	r2, [r3, #20]
 8006512:	e016      	b.n	8006542 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	0c5b      	lsrs	r3, r3, #17
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	2b06      	cmp	r3, #6
 800651e:	d110      	bne.n	8006542 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006526:	2208      	movs	r2, #8
 8006528:	4619      	mov	r1, r3
 800652a:	6a38      	ldr	r0, [r7, #32]
 800652c:	f004 fbba 	bl	800aca4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800653c:	441a      	add	r2, r3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0210 	orr.w	r2, r2, #16
 8006550:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f004 fd38 	bl	800afcc <USB_ReadInterrupts>
 800655c:	4603      	mov	r3, r0
 800655e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006562:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006566:	f040 80a7 	bne.w	80066b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f004 fd3d 	bl	800aff2 <USB_ReadDevAllOutEpInterrupt>
 8006578:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800657a:	e099      	b.n	80066b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 808e 	beq.w	80066a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f004 fd61 	bl	800b05a <USB_ReadDevOutEPInterrupt>
 8006598:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00c      	beq.n	80065be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b0:	461a      	mov	r2, r3
 80065b2:	2301      	movs	r3, #1
 80065b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80065b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fea3 	bl	8007304 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00c      	beq.n	80065e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2308      	movs	r3, #8
 80065d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80065da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 ff79 	bl	80074d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f8:	461a      	mov	r2, r3
 80065fa:	2310      	movs	r3, #16
 80065fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d030      	beq.n	800666a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006610:	2b80      	cmp	r3, #128	@ 0x80
 8006612:	d109      	bne.n	8006628 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006622:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006626:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800662a:	4613      	mov	r3, r2
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4413      	add	r3, r2
 800663a:	3304      	adds	r3, #4
 800663c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	78db      	ldrb	r3, [r3, #3]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d108      	bne.n	8006658 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	b2db      	uxtb	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f00a f896 	bl	8010784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	2302      	movs	r3, #2
 8006668:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	2320      	movs	r3, #32
 8006684:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669c:	461a      	mov	r2, r3
 800669e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	3301      	adds	r3, #1
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f47f af62 	bne.w	800657c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f004 fc85 	bl	800afcc <USB_ReadInterrupts>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066cc:	f040 80db 	bne.w	8006886 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f004 fca6 	bl	800b026 <USB_ReadDevAllInEpInterrupt>
 80066da:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80066e0:	e0cd      	b.n	800687e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80c2 	beq.w	8006872 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f004 fccc 	bl	800b096 <USB_ReadDevInEPInterrupt>
 80066fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d057      	beq.n	80067ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	2201      	movs	r2, #1
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	43db      	mvns	r3, r3
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800672a:	4013      	ands	r3, r2
 800672c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800673a:	461a      	mov	r2, r3
 800673c:	2301      	movs	r3, #1
 800673e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	799b      	ldrb	r3, [r3, #6]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d132      	bne.n	80067ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674c:	4613      	mov	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	3320      	adds	r3, #32
 8006758:	6819      	ldr	r1, [r3, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800675e:	4613      	mov	r3, r2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4403      	add	r3, r0
 8006768:	331c      	adds	r3, #28
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4419      	add	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4403      	add	r3, r0
 800677c:	3320      	adds	r3, #32
 800677e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d113      	bne.n	80067ae <HAL_PCD_IRQHandler+0x3a2>
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678a:	4613      	mov	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	3324      	adds	r3, #36	@ 0x24
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d108      	bne.n	80067ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067a6:	461a      	mov	r2, r3
 80067a8:	2101      	movs	r1, #1
 80067aa:	f004 fcd3 	bl	800b154 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f009 ff6a 	bl	801068e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	461a      	mov	r2, r3
 80067d2:	2308      	movs	r3, #8
 80067d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d008      	beq.n	80067f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ec:	461a      	mov	r2, r3
 80067ee:	2310      	movs	r3, #16
 80067f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	2340      	movs	r3, #64	@ 0x40
 800680c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d023      	beq.n	8006860 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800681a:	6a38      	ldr	r0, [r7, #32]
 800681c:	f003 fcba 	bl	800a194 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006822:	4613      	mov	r3, r2
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	3310      	adds	r3, #16
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4413      	add	r3, r2
 8006830:	3304      	adds	r3, #4
 8006832:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	78db      	ldrb	r3, [r3, #3]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d108      	bne.n	800684e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2200      	movs	r2, #0
 8006840:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	b2db      	uxtb	r3, r3
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f009 ffad 	bl	80107a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685a:	461a      	mov	r2, r3
 800685c:	2302      	movs	r3, #2
 800685e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800686a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fcbd 	bl	80071ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	3301      	adds	r3, #1
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	f47f af2e 	bne.w	80066e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f004 fb9e 	bl	800afcc <USB_ReadInterrupts>
 8006890:	4603      	mov	r3, r0
 8006892:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006896:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800689a:	d122      	bne.n	80068e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d108      	bne.n	80068cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80068c2:	2100      	movs	r1, #0
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fea3 	bl	8007610 <HAL_PCDEx_LPM_Callback>
 80068ca:	e002      	b.n	80068d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f009 ff4b 	bl	8010768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80068e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f004 fb70 	bl	800afcc <USB_ReadInterrupts>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f6:	d112      	bne.n	800691e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d102      	bne.n	800690e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f009 ff07 	bl	801071c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695a      	ldr	r2, [r3, #20]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800691c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f004 fb52 	bl	800afcc <USB_ReadInterrupts>
 8006928:	4603      	mov	r3, r0
 800692a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006932:	f040 80b7 	bne.w	8006aa4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2110      	movs	r1, #16
 8006950:	4618      	mov	r0, r3
 8006952:	f003 fc1f 	bl	800a194 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006956:	2300      	movs	r3, #0
 8006958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695a:	e046      	b.n	80069ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006968:	461a      	mov	r2, r3
 800696a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800696e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800698e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699c:	461a      	mov	r2, r3
 800699e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	3301      	adds	r3, #1
 80069e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	791b      	ldrb	r3, [r3, #4]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d3b2      	bcc.n	800695c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a04:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006a08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7bdb      	ldrb	r3, [r3, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d016      	beq.n	8006a40 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a22:	f043 030b 	orr.w	r3, r3, #11
 8006a26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a38:	f043 030b 	orr.w	r3, r3, #11
 8006a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a3e:	e015      	b.n	8006a6c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006a52:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006a56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a66:	f043 030b 	orr.w	r3, r3, #11
 8006a6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f004 fb60 	bl	800b154 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f004 fa8f 	bl	800afcc <USB_ReadInterrupts>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab8:	d123      	bne.n	8006b02 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f004 fb25 	bl	800b10e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f003 fbdc 	bl	800a286 <USB_GetDevSpeed>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681c      	ldr	r4, [r3, #0]
 8006ada:	f001 f9c9 	bl	8007e70 <HAL_RCC_GetHCLKFreq>
 8006ade:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f003 f8e0 	bl	8009cac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f009 fdf6 	bl	80106de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f004 fa60 	bl	800afcc <USB_ReadInterrupts>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d10a      	bne.n	8006b2c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f009 fdd3 	bl	80106c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f002 0208 	and.w	r2, r2, #8
 8006b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f004 fa4b 	bl	800afcc <USB_ReadInterrupts>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3c:	2b80      	cmp	r3, #128	@ 0x80
 8006b3e:	d123      	bne.n	8006b88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b50:	e014      	b.n	8006b7c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b56:	4613      	mov	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d105      	bne.n	8006b76 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb0a 	bl	800718a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	3301      	adds	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	791b      	ldrb	r3, [r3, #4]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d3e4      	bcc.n	8006b52 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f004 fa1d 	bl	800afcc <USB_ReadInterrupts>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9c:	d13c      	bne.n	8006c18 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ba2:	e02b      	b.n	8006bfc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d115      	bne.n	8006bf6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006bca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da12      	bge.n	8006bf6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	3317      	adds	r3, #23
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 faca 	bl	800718a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	791b      	ldrb	r3, [r3, #4]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d3cd      	bcc.n	8006ba4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f004 f9d5 	bl	800afcc <USB_ReadInterrupts>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c2c:	d156      	bne.n	8006cdc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c2e:	2301      	movs	r3, #1
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c32:	e045      	b.n	8006cc0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d12e      	bne.n	8006cba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	da2b      	bge.n	8006cba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006c6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d121      	bne.n	8006cba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006c88:	2201      	movs	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	69fa      	ldr	r2, [r7, #28]
 8006cae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cb6:	6053      	str	r3, [r2, #4]
            break;
 8006cb8:	e008      	b.n	8006ccc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	791b      	ldrb	r3, [r3, #4]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d3b3      	bcc.n	8006c34 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f004 f973 	bl	800afcc <USB_ReadInterrupts>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf0:	d10a      	bne.n	8006d08 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f009 fd6a 	bl	80107cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695a      	ldr	r2, [r3, #20]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f004 f95d 	bl	800afcc <USB_ReadInterrupts>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d115      	bne.n	8006d48 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f009 fd5a 	bl	80107e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	e000      	b.n	8006d48 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006d46:	bf00      	nop
    }
  }
}
 8006d48:	3734      	adds	r7, #52	@ 0x34
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd90      	pop	{r4, r7, pc}

08006d4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_PCD_SetAddress+0x1a>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e012      	b.n	8006d8e <HAL_PCD_SetAddress+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f004 f8bc 	bl	800aefc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	461a      	mov	r2, r3
 8006da4:	4603      	mov	r3, r0
 8006da6:	70fb      	strb	r3, [r7, #3]
 8006da8:	460b      	mov	r3, r1
 8006daa:	803b      	strh	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da0f      	bge.n	8006ddc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	f003 020f 	and.w	r2, r3, #15
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	3310      	adds	r3, #16
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	4413      	add	r3, r2
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	705a      	strb	r2, [r3, #1]
 8006dda:	e00f      	b.n	8006dfc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	f003 020f 	and.w	r2, r3, #15
 8006de2:	4613      	mov	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	3304      	adds	r3, #4
 8006df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006e08:	883b      	ldrh	r3, [r7, #0]
 8006e0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	78ba      	ldrb	r2, [r7, #2]
 8006e16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e2a:	78bb      	ldrb	r3, [r7, #2]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d102      	bne.n	8006e36 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_PCD_EP_Open+0xae>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e00e      	b.n	8006e62 <HAL_PCD_EP_Open+0xcc>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f003 fa3c 	bl	800a2d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006e60:	7afb      	ldrb	r3, [r7, #11]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	da0f      	bge.n	8006e9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	f003 020f 	and.w	r2, r3, #15
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4413      	add	r3, r2
 8006e92:	3304      	adds	r3, #4
 8006e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	705a      	strb	r2, [r3, #1]
 8006e9c:	e00f      	b.n	8006ebe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	f003 020f 	and.w	r2, r3, #15
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_PCD_EP_Close+0x6e>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e00e      	b.n	8006ef6 <HAL_PCD_EP_Close+0x8c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f003 fa7a 	bl	800a3e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b086      	sub	sp, #24
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	f003 020f 	and.w	r2, r3, #15
 8006f14:	4613      	mov	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	3304      	adds	r3, #4
 8006f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	799b      	ldrb	r3, [r3, #6]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d102      	bne.n	8006f5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	799b      	ldrb	r3, [r3, #6]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	f003 fb17 	bl	800a598 <USB_EPStartXfer>

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	f003 020f 	and.w	r2, r3, #15
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006f96:	681b      	ldr	r3, [r3, #0]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	f003 020f 	and.w	r2, r3, #15
 8006fba:	4613      	mov	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	3310      	adds	r3, #16
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3304      	adds	r3, #4
 8006fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	799b      	ldrb	r3, [r3, #6]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d102      	bne.n	8006ffe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	799b      	ldrb	r3, [r3, #6]
 8007006:	461a      	mov	r2, r3
 8007008:	6979      	ldr	r1, [r7, #20]
 800700a:	f003 fac5 	bl	800a598 <USB_EPStartXfer>

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	7912      	ldrb	r2, [r2, #4]
 800702e:	4293      	cmp	r3, r2
 8007030:	d901      	bls.n	8007036 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e04f      	b.n	80070d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800703a:	2b00      	cmp	r3, #0
 800703c:	da0f      	bge.n	800705e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	f003 020f 	and.w	r2, r3, #15
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	3310      	adds	r3, #16
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	3304      	adds	r3, #4
 8007054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	705a      	strb	r2, [r3, #1]
 800705c:	e00d      	b.n	800707a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	4613      	mov	r3, r2
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	3304      	adds	r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	b2da      	uxtb	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_PCD_EP_SetStall+0x82>
 8007096:	2302      	movs	r3, #2
 8007098:	e01d      	b.n	80070d6 <HAL_PCD_EP_SetStall+0xbe>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f003 fe53 	bl	800ad54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d109      	bne.n	80070cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	7999      	ldrb	r1, [r3, #6]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070c6:	461a      	mov	r2, r3
 80070c8:	f004 f844 	bl	800b154 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	7912      	ldrb	r2, [r2, #4]
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d901      	bls.n	80070fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e042      	b.n	8007182 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007100:	2b00      	cmp	r3, #0
 8007102:	da0f      	bge.n	8007124 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	f003 020f 	and.w	r2, r3, #15
 800710a:	4613      	mov	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	3310      	adds	r3, #16
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	4413      	add	r3, r2
 8007118:	3304      	adds	r3, #4
 800711a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	705a      	strb	r2, [r3, #1]
 8007122:	e00f      	b.n	8007144 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	f003 020f 	and.w	r2, r3, #15
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	4413      	add	r3, r2
 800713a:	3304      	adds	r3, #4
 800713c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	b2da      	uxtb	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_PCD_EP_ClrStall+0x86>
 8007160:	2302      	movs	r3, #2
 8007162:	e00e      	b.n	8007182 <HAL_PCD_EP_ClrStall+0xa4>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68f9      	ldr	r1, [r7, #12]
 8007172:	4618      	mov	r0, r3
 8007174:	f003 fe5c 	bl	800ae30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800719a:	2b00      	cmp	r3, #0
 800719c:	da0c      	bge.n	80071b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	4613      	mov	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	3310      	adds	r3, #16
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	3304      	adds	r3, #4
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	e00c      	b.n	80071d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	f003 020f 	and.w	r2, r3, #15
 80071be:	4613      	mov	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	3304      	adds	r3, #4
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	4618      	mov	r0, r3
 80071da:	f003 fc7b 	bl	800aad4 <USB_EPStopXfer>
 80071de:	4603      	mov	r3, r0
 80071e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	@ 0x28
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	4613      	mov	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	3310      	adds	r3, #16
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4413      	add	r3, r2
 8007210:	3304      	adds	r3, #4
 8007212:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d901      	bls.n	8007224 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e06b      	b.n	80072fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	429a      	cmp	r2, r3
 8007238:	d902      	bls.n	8007240 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	3303      	adds	r3, #3
 8007244:	089b      	lsrs	r3, r3, #2
 8007246:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007248:	e02a      	b.n	80072a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	429a      	cmp	r2, r3
 800725e:	d902      	bls.n	8007266 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	3303      	adds	r3, #3
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68d9      	ldr	r1, [r3, #12]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4603      	mov	r3, r0
 8007282:	6978      	ldr	r0, [r7, #20]
 8007284:	f003 fcd0 	bl	800ac28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	441a      	add	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	441a      	add	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d809      	bhi.n	80072ca <PCD_WriteEmptyTxFifo+0xde>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	695a      	ldr	r2, [r3, #20]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072be:	429a      	cmp	r2, r3
 80072c0:	d203      	bcs.n	80072ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1bf      	bne.n	800724a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d811      	bhi.n	80072fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	2201      	movs	r2, #1
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	43db      	mvns	r3, r3
 80072f0:	6939      	ldr	r1, [r7, #16]
 80072f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072f6:	4013      	ands	r3, r2
 80072f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	333c      	adds	r3, #60	@ 0x3c
 800731c:	3304      	adds	r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	799b      	ldrb	r3, [r3, #6]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d17b      	bne.n	8007432 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b00      	cmp	r3, #0
 8007342:	d015      	beq.n	8007370 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4a61      	ldr	r2, [pc, #388]	@ (80074cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	f240 80b9 	bls.w	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80b3 	beq.w	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800736c:	6093      	str	r3, [r2, #8]
 800736e:	e0a7      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007386:	461a      	mov	r2, r3
 8007388:	2320      	movs	r3, #32
 800738a:	6093      	str	r3, [r2, #8]
 800738c:	e098      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 8093 	bne.w	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4a4b      	ldr	r2, [pc, #300]	@ (80074cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d90f      	bls.n	80073c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b8:	461a      	mov	r2, r3
 80073ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	e07e      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	3304      	adds	r3, #4
 80073d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1a      	ldr	r2, [r3, #32]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	0159      	lsls	r1, r3, #5
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	440b      	add	r3, r1
 80073e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d114      	bne.n	8007424 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800740c:	461a      	mov	r2, r3
 800740e:	2101      	movs	r1, #1
 8007410:	f003 fea0 	bl	800b154 <USB_EP0_OutStart>
 8007414:	e006      	b.n	8007424 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	441a      	add	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f009 f914 	bl	8010658 <HAL_PCD_DataOutStageCallback>
 8007430:	e046      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	4a26      	ldr	r2, [pc, #152]	@ (80074d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d124      	bne.n	8007484 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007450:	461a      	mov	r2, r3
 8007452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007456:	6093      	str	r3, [r2, #8]
 8007458:	e032      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d008      	beq.n	8007476 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	461a      	mov	r2, r3
 8007472:	2320      	movs	r3, #32
 8007474:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f009 f8eb 	bl	8010658 <HAL_PCD_DataOutStageCallback>
 8007482:	e01d      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d114      	bne.n	80074b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d108      	bne.n	80074b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074ac:	461a      	mov	r2, r3
 80074ae:	2100      	movs	r1, #0
 80074b0:	f003 fe50 	bl	800b154 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f009 f8cc 	bl	8010658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	4f54300a 	.word	0x4f54300a
 80074d0:	4f54310a 	.word	0x4f54310a

080074d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	333c      	adds	r3, #60	@ 0x3c
 80074ec:	3304      	adds	r3, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a15      	ldr	r2, [pc, #84]	@ (800755c <PCD_EP_OutSetupPacket_int+0x88>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d90e      	bls.n	8007528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007520:	461a      	mov	r2, r3
 8007522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f009 f883 	bl	8010634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4a0a      	ldr	r2, [pc, #40]	@ (800755c <PCD_EP_OutSetupPacket_int+0x88>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d90c      	bls.n	8007550 <PCD_EP_OutSetupPacket_int+0x7c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	799b      	ldrb	r3, [r3, #6]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d108      	bne.n	8007550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007548:	461a      	mov	r2, r3
 800754a:	2101      	movs	r1, #1
 800754c:	f003 fe02 	bl	800b154 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	4f54300a 	.word	0x4f54300a

08007560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
 800756c:	4613      	mov	r3, r2
 800756e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d107      	bne.n	800758e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800757e:	883b      	ldrh	r3, [r7, #0]
 8007580:	0419      	lsls	r1, r3, #16
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	430a      	orrs	r2, r1
 800758a:	629a      	str	r2, [r3, #40]	@ 0x28
 800758c:	e028      	b.n	80075e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4413      	add	r3, r2
 800759a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	e00d      	b.n	80075be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	3340      	adds	r3, #64	@ 0x40
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4413      	add	r3, r2
 80075b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	3301      	adds	r3, #1
 80075bc:	73fb      	strb	r3, [r7, #15]
 80075be:	7bfa      	ldrb	r2, [r7, #15]
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d3ec      	bcc.n	80075a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075c8:	883b      	ldrh	r3, [r7, #0]
 80075ca:	0418      	lsls	r0, r3, #16
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6819      	ldr	r1, [r3, #0]
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	4302      	orrs	r2, r0
 80075d8:	3340      	adds	r3, #64	@ 0x40
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	887a      	ldrh	r2, [r7, #2]
 8007600:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e267      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d075      	beq.n	8007732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007646:	4b88      	ldr	r3, [pc, #544]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f003 030c 	and.w	r3, r3, #12
 800764e:	2b04      	cmp	r3, #4
 8007650:	d00c      	beq.n	800766c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007652:	4b85      	ldr	r3, [pc, #532]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800765a:	2b08      	cmp	r3, #8
 800765c:	d112      	bne.n	8007684 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800765e:	4b82      	ldr	r3, [pc, #520]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800766a:	d10b      	bne.n	8007684 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800766c:	4b7e      	ldr	r3, [pc, #504]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d05b      	beq.n	8007730 <HAL_RCC_OscConfig+0x108>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d157      	bne.n	8007730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e242      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800768c:	d106      	bne.n	800769c <HAL_RCC_OscConfig+0x74>
 800768e:	4b76      	ldr	r3, [pc, #472]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a75      	ldr	r2, [pc, #468]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	e01d      	b.n	80076d8 <HAL_RCC_OscConfig+0xb0>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076a4:	d10c      	bne.n	80076c0 <HAL_RCC_OscConfig+0x98>
 80076a6:	4b70      	ldr	r3, [pc, #448]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a6f      	ldr	r2, [pc, #444]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a6c      	ldr	r2, [pc, #432]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	e00b      	b.n	80076d8 <HAL_RCC_OscConfig+0xb0>
 80076c0:	4b69      	ldr	r3, [pc, #420]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a68      	ldr	r2, [pc, #416]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	4b66      	ldr	r3, [pc, #408]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a65      	ldr	r2, [pc, #404]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d013      	beq.n	8007708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e0:	f7fe f92c 	bl	800593c <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076e8:	f7fe f928 	bl	800593c <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b64      	cmp	r3, #100	@ 0x64
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e207      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f0      	beq.n	80076e8 <HAL_RCC_OscConfig+0xc0>
 8007706:	e014      	b.n	8007732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007708:	f7fe f918 	bl	800593c <HAL_GetTick>
 800770c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800770e:	e008      	b.n	8007722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007710:	f7fe f914 	bl	800593c <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b64      	cmp	r3, #100	@ 0x64
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e1f3      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007722:	4b51      	ldr	r3, [pc, #324]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f0      	bne.n	8007710 <HAL_RCC_OscConfig+0xe8>
 800772e:	e000      	b.n	8007732 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d063      	beq.n	8007806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800773e:	4b4a      	ldr	r3, [pc, #296]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 030c 	and.w	r3, r3, #12
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800774a:	4b47      	ldr	r3, [pc, #284]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007752:	2b08      	cmp	r3, #8
 8007754:	d11c      	bne.n	8007790 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007756:	4b44      	ldr	r3, [pc, #272]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d116      	bne.n	8007790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007762:	4b41      	ldr	r3, [pc, #260]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <HAL_RCC_OscConfig+0x152>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d001      	beq.n	800777a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e1c7      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800777a:	4b3b      	ldr	r3, [pc, #236]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4937      	ldr	r1, [pc, #220]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 800778a:	4313      	orrs	r3, r2
 800778c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800778e:	e03a      	b.n	8007806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d020      	beq.n	80077da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007798:	4b34      	ldr	r3, [pc, #208]	@ (800786c <HAL_RCC_OscConfig+0x244>)
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779e:	f7fe f8cd 	bl	800593c <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077a6:	f7fe f8c9 	bl	800593c <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e1a8      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0f0      	beq.n	80077a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c4:	4b28      	ldr	r3, [pc, #160]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	4925      	ldr	r1, [pc, #148]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	600b      	str	r3, [r1, #0]
 80077d8:	e015      	b.n	8007806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077da:	4b24      	ldr	r3, [pc, #144]	@ (800786c <HAL_RCC_OscConfig+0x244>)
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e0:	f7fe f8ac 	bl	800593c <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077e8:	f7fe f8a8 	bl	800593c <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e187      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f0      	bne.n	80077e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d036      	beq.n	8007880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d016      	beq.n	8007848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800781a:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <HAL_RCC_OscConfig+0x248>)
 800781c:	2201      	movs	r2, #1
 800781e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007820:	f7fe f88c 	bl	800593c <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007828:	f7fe f888 	bl	800593c <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e167      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800783a:	4b0b      	ldr	r3, [pc, #44]	@ (8007868 <HAL_RCC_OscConfig+0x240>)
 800783c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x200>
 8007846:	e01b      	b.n	8007880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007848:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <HAL_RCC_OscConfig+0x248>)
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800784e:	f7fe f875 	bl	800593c <HAL_GetTick>
 8007852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007854:	e00e      	b.n	8007874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007856:	f7fe f871 	bl	800593c <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d907      	bls.n	8007874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e150      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
 8007868:	40023800 	.word	0x40023800
 800786c:	42470000 	.word	0x42470000
 8007870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007874:	4b88      	ldr	r3, [pc, #544]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1ea      	bne.n	8007856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8097 	beq.w	80079bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800788e:	2300      	movs	r3, #0
 8007890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007892:	4b81      	ldr	r3, [pc, #516]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10f      	bne.n	80078be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800789e:	2300      	movs	r3, #0
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	4a7c      	ldr	r2, [pc, #496]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80078a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80078ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ba:	2301      	movs	r3, #1
 80078bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078be:	4b77      	ldr	r3, [pc, #476]	@ (8007a9c <HAL_RCC_OscConfig+0x474>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d118      	bne.n	80078fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078ca:	4b74      	ldr	r3, [pc, #464]	@ (8007a9c <HAL_RCC_OscConfig+0x474>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a73      	ldr	r2, [pc, #460]	@ (8007a9c <HAL_RCC_OscConfig+0x474>)
 80078d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078d6:	f7fe f831 	bl	800593c <HAL_GetTick>
 80078da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078dc:	e008      	b.n	80078f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078de:	f7fe f82d 	bl	800593c <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e10c      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f0:	4b6a      	ldr	r3, [pc, #424]	@ (8007a9c <HAL_RCC_OscConfig+0x474>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f0      	beq.n	80078de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d106      	bne.n	8007912 <HAL_RCC_OscConfig+0x2ea>
 8007904:	4b64      	ldr	r3, [pc, #400]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007908:	4a63      	ldr	r2, [pc, #396]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007910:	e01c      	b.n	800794c <HAL_RCC_OscConfig+0x324>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b05      	cmp	r3, #5
 8007918:	d10c      	bne.n	8007934 <HAL_RCC_OscConfig+0x30c>
 800791a:	4b5f      	ldr	r3, [pc, #380]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 800791c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800791e:	4a5e      	ldr	r2, [pc, #376]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007920:	f043 0304 	orr.w	r3, r3, #4
 8007924:	6713      	str	r3, [r2, #112]	@ 0x70
 8007926:	4b5c      	ldr	r3, [pc, #368]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800792a:	4a5b      	ldr	r2, [pc, #364]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	6713      	str	r3, [r2, #112]	@ 0x70
 8007932:	e00b      	b.n	800794c <HAL_RCC_OscConfig+0x324>
 8007934:	4b58      	ldr	r3, [pc, #352]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007938:	4a57      	ldr	r2, [pc, #348]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007940:	4b55      	ldr	r3, [pc, #340]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007944:	4a54      	ldr	r2, [pc, #336]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007946:	f023 0304 	bic.w	r3, r3, #4
 800794a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d015      	beq.n	8007980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007954:	f7fd fff2 	bl	800593c <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800795a:	e00a      	b.n	8007972 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800795c:	f7fd ffee 	bl	800593c <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800796a:	4293      	cmp	r3, r2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e0cb      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007972:	4b49      	ldr	r3, [pc, #292]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0ee      	beq.n	800795c <HAL_RCC_OscConfig+0x334>
 800797e:	e014      	b.n	80079aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007980:	f7fd ffdc 	bl	800593c <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007986:	e00a      	b.n	800799e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007988:	f7fd ffd8 	bl	800593c <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007996:	4293      	cmp	r3, r2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e0b5      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800799e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1ee      	bne.n	8007988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d105      	bne.n	80079bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079b0:	4b39      	ldr	r3, [pc, #228]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80079b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b4:	4a38      	ldr	r2, [pc, #224]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80079b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80a1 	beq.w	8007b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079c6:	4b34      	ldr	r3, [pc, #208]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 030c 	and.w	r3, r3, #12
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	d05c      	beq.n	8007a8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d141      	bne.n	8007a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079da:	4b31      	ldr	r3, [pc, #196]	@ (8007aa0 <HAL_RCC_OscConfig+0x478>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e0:	f7fd ffac 	bl	800593c <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e8:	f7fd ffa8 	bl	800593c <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e087      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079fa:	4b27      	ldr	r3, [pc, #156]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69da      	ldr	r2, [r3, #28]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	019b      	lsls	r3, r3, #6
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1c:	085b      	lsrs	r3, r3, #1
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	041b      	lsls	r3, r3, #16
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	061b      	lsls	r3, r3, #24
 8007a2a:	491b      	ldr	r1, [pc, #108]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a30:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa0 <HAL_RCC_OscConfig+0x478>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a36:	f7fd ff81 	bl	800593c <HAL_GetTick>
 8007a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a3e:	f7fd ff7d 	bl	800593c <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e05c      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a50:	4b11      	ldr	r3, [pc, #68]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0f0      	beq.n	8007a3e <HAL_RCC_OscConfig+0x416>
 8007a5c:	e054      	b.n	8007b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5e:	4b10      	ldr	r3, [pc, #64]	@ (8007aa0 <HAL_RCC_OscConfig+0x478>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a64:	f7fd ff6a 	bl	800593c <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6c:	f7fd ff66 	bl	800593c <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e045      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a7e:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <HAL_RCC_OscConfig+0x470>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1f0      	bne.n	8007a6c <HAL_RCC_OscConfig+0x444>
 8007a8a:	e03d      	b.n	8007b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e038      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	40007000 	.word	0x40007000
 8007aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b14 <HAL_RCC_OscConfig+0x4ec>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d028      	beq.n	8007b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d121      	bne.n	8007b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d11a      	bne.n	8007b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d111      	bne.n	8007b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	3b01      	subs	r3, #1
 8007aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d107      	bne.n	8007b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d001      	beq.n	8007b08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40023800 	.word	0x40023800

08007b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e0cc      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b2c:	4b68      	ldr	r3, [pc, #416]	@ (8007cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d90c      	bls.n	8007b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3a:	4b65      	ldr	r3, [pc, #404]	@ (8007cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b63      	ldr	r3, [pc, #396]	@ (8007cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0b8      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d020      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b6c:	4b59      	ldr	r3, [pc, #356]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	4a58      	ldr	r2, [pc, #352]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b84:	4b53      	ldr	r3, [pc, #332]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4a52      	ldr	r2, [pc, #328]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b90:	4b50      	ldr	r3, [pc, #320]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	494d      	ldr	r1, [pc, #308]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d044      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb6:	4b47      	ldr	r3, [pc, #284]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d119      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e07f      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d003      	beq.n	8007bd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e06f      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007be6:	4b3b      	ldr	r3, [pc, #236]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e067      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bf6:	4b37      	ldr	r3, [pc, #220]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f023 0203 	bic.w	r2, r3, #3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	4934      	ldr	r1, [pc, #208]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c08:	f7fd fe98 	bl	800593c <HAL_GetTick>
 8007c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c0e:	e00a      	b.n	8007c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c10:	f7fd fe94 	bl	800593c <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e04f      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c26:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 020c 	and.w	r2, r3, #12
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d1eb      	bne.n	8007c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c38:	4b25      	ldr	r3, [pc, #148]	@ (8007cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d20c      	bcs.n	8007c60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c46:	4b22      	ldr	r3, [pc, #136]	@ (8007cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4e:	4b20      	ldr	r3, [pc, #128]	@ (8007cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d001      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e032      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c6c:	4b19      	ldr	r3, [pc, #100]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	4916      	ldr	r1, [pc, #88]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c8a:	4b12      	ldr	r3, [pc, #72]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	490e      	ldr	r1, [pc, #56]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c9e:	f000 f821 	bl	8007ce4 <HAL_RCC_GetSysClockFreq>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	091b      	lsrs	r3, r3, #4
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	490a      	ldr	r1, [pc, #40]	@ (8007cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007cb0:	5ccb      	ldrb	r3, [r1, r3]
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	4a09      	ldr	r2, [pc, #36]	@ (8007cdc <HAL_RCC_ClockConfig+0x1c4>)
 8007cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007cba:	4b09      	ldr	r3, [pc, #36]	@ (8007ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fd fcb8 	bl	8005634 <HAL_InitTick>

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40023c00 	.word	0x40023c00
 8007cd4:	40023800 	.word	0x40023800
 8007cd8:	08011c80 	.word	0x08011c80
 8007cdc:	20000000 	.word	0x20000000
 8007ce0:	20000004 	.word	0x20000004

08007ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ce8:	b090      	sub	sp, #64	@ 0x40
 8007cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cfc:	4b59      	ldr	r3, [pc, #356]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 030c 	and.w	r3, r3, #12
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d00d      	beq.n	8007d24 <HAL_RCC_GetSysClockFreq+0x40>
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	f200 80a1 	bhi.w	8007e50 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_RCC_GetSysClockFreq+0x34>
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d003      	beq.n	8007d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8007d16:	e09b      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d18:	4b53      	ldr	r3, [pc, #332]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d1c:	e09b      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d1e:	4b53      	ldr	r3, [pc, #332]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d22:	e098      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d24:	4b4f      	ldr	r3, [pc, #316]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d028      	beq.n	8007d8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	099b      	lsrs	r3, r3, #6
 8007d40:	2200      	movs	r2, #0
 8007d42:	623b      	str	r3, [r7, #32]
 8007d44:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4b47      	ldr	r3, [pc, #284]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d50:	fb03 f201 	mul.w	r2, r3, r1
 8007d54:	2300      	movs	r3, #0
 8007d56:	fb00 f303 	mul.w	r3, r0, r3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	4a43      	ldr	r2, [pc, #268]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d5e:	fba0 1202 	umull	r1, r2, r0, r2
 8007d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d64:	460a      	mov	r2, r1
 8007d66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d6a:	4413      	add	r3, r2
 8007d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d70:	2200      	movs	r2, #0
 8007d72:	61bb      	str	r3, [r7, #24]
 8007d74:	61fa      	str	r2, [r7, #28]
 8007d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d7e:	f7f8 fe7d 	bl	8000a7c <__aeabi_uldivmod>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4613      	mov	r3, r2
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d8a:	e053      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d8c:	4b35      	ldr	r3, [pc, #212]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	099b      	lsrs	r3, r3, #6
 8007d92:	2200      	movs	r2, #0
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	617a      	str	r2, [r7, #20]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d9e:	f04f 0b00 	mov.w	fp, #0
 8007da2:	4652      	mov	r2, sl
 8007da4:	465b      	mov	r3, fp
 8007da6:	f04f 0000 	mov.w	r0, #0
 8007daa:	f04f 0100 	mov.w	r1, #0
 8007dae:	0159      	lsls	r1, r3, #5
 8007db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007db4:	0150      	lsls	r0, r2, #5
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	ebb2 080a 	subs.w	r8, r2, sl
 8007dbe:	eb63 090b 	sbc.w	r9, r3, fp
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007dce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007dd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007dd6:	ebb2 0408 	subs.w	r4, r2, r8
 8007dda:	eb63 0509 	sbc.w	r5, r3, r9
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	00eb      	lsls	r3, r5, #3
 8007de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dec:	00e2      	lsls	r2, r4, #3
 8007dee:	4614      	mov	r4, r2
 8007df0:	461d      	mov	r5, r3
 8007df2:	eb14 030a 	adds.w	r3, r4, sl
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	eb45 030b 	adc.w	r3, r5, fp
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	028b      	lsls	r3, r1, #10
 8007e0e:	4621      	mov	r1, r4
 8007e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e14:	4621      	mov	r1, r4
 8007e16:	028a      	lsls	r2, r1, #10
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1e:	2200      	movs	r2, #0
 8007e20:	60bb      	str	r3, [r7, #8]
 8007e22:	60fa      	str	r2, [r7, #12]
 8007e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e28:	f7f8 fe28 	bl	8000a7c <__aeabi_uldivmod>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4613      	mov	r3, r2
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007e34:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	0c1b      	lsrs	r3, r3, #16
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	3301      	adds	r3, #1
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007e44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e4e:	e002      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e50:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3740      	adds	r7, #64	@ 0x40
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e62:	bf00      	nop
 8007e64:	40023800 	.word	0x40023800
 8007e68:	00f42400 	.word	0x00f42400
 8007e6c:	017d7840 	.word	0x017d7840

08007e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e74:	4b03      	ldr	r3, [pc, #12]	@ (8007e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e76:	681b      	ldr	r3, [r3, #0]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20000000 	.word	0x20000000

08007e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e8c:	f7ff fff0 	bl	8007e70 <HAL_RCC_GetHCLKFreq>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4b05      	ldr	r3, [pc, #20]	@ (8007ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	0a9b      	lsrs	r3, r3, #10
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	4903      	ldr	r1, [pc, #12]	@ (8007eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	08011c90 	.word	0x08011c90

08007eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007eb4:	f7ff ffdc 	bl	8007e70 <HAL_RCC_GetHCLKFreq>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	0b5b      	lsrs	r3, r3, #13
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	4903      	ldr	r1, [pc, #12]	@ (8007ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ec6:	5ccb      	ldrb	r3, [r1, r3]
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	08011c90 	.word	0x08011c90

08007ed8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	220f      	movs	r2, #15
 8007ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ee8:	4b12      	ldr	r3, [pc, #72]	@ (8007f34 <HAL_RCC_GetClockConfig+0x5c>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 0203 	and.w	r2, r3, #3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f34 <HAL_RCC_GetClockConfig+0x5c>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f00:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <HAL_RCC_GetClockConfig+0x5c>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007f0c:	4b09      	ldr	r3, [pc, #36]	@ (8007f34 <HAL_RCC_GetClockConfig+0x5c>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	08db      	lsrs	r3, r3, #3
 8007f12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f1a:	4b07      	ldr	r3, [pc, #28]	@ (8007f38 <HAL_RCC_GetClockConfig+0x60>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0207 	and.w	r2, r3, #7
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	601a      	str	r2, [r3, #0]
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40023800 	.word	0x40023800
 8007f38:	40023c00 	.word	0x40023c00

08007f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e07b      	b.n	8008046 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d108      	bne.n	8007f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f5e:	d009      	beq.n	8007f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	61da      	str	r2, [r3, #28]
 8007f66:	e005      	b.n	8007f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fd fa48 	bl	8005424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff8:	ea42 0103 	orr.w	r1, r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	0c1b      	lsrs	r3, r3, #16
 8008012:	f003 0104 	and.w	r1, r3, #4
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801a:	f003 0210 	and.w	r2, r3, #16
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008034:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b088      	sub	sp, #32
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800805e:	f7fd fc6d 	bl	800593c <HAL_GetTick>
 8008062:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008064:	88fb      	ldrh	r3, [r7, #6]
 8008066:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b01      	cmp	r3, #1
 8008072:	d001      	beq.n	8008078 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
 8008076:	e12a      	b.n	80082ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_SPI_Transmit+0x36>
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e122      	b.n	80082ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_SPI_Transmit+0x48>
 8008092:	2302      	movs	r3, #2
 8008094:	e11b      	b.n	80082ce <HAL_SPI_Transmit+0x280>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2203      	movs	r2, #3
 80080a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	88fa      	ldrh	r2, [r7, #6]
 80080b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080e4:	d10f      	bne.n	8008106 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008104:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008110:	2b40      	cmp	r3, #64	@ 0x40
 8008112:	d007      	beq.n	8008124 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800812c:	d152      	bne.n	80081d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_SPI_Transmit+0xee>
 8008136:	8b7b      	ldrh	r3, [r7, #26]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d145      	bne.n	80081c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008140:	881a      	ldrh	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814c:	1c9a      	adds	r2, r3, #2
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008156:	b29b      	uxth	r3, r3
 8008158:	3b01      	subs	r3, #1
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008160:	e032      	b.n	80081c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b02      	cmp	r3, #2
 800816e:	d112      	bne.n	8008196 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008174:	881a      	ldrh	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008180:	1c9a      	adds	r2, r3, #2
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008194:	e018      	b.n	80081c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008196:	f7fd fbd1 	bl	800593c <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d803      	bhi.n	80081ae <HAL_SPI_Transmit+0x160>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d102      	bne.n	80081b4 <HAL_SPI_Transmit+0x166>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e082      	b.n	80082ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1c7      	bne.n	8008162 <HAL_SPI_Transmit+0x114>
 80081d2:	e053      	b.n	800827c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <HAL_SPI_Transmit+0x194>
 80081dc:	8b7b      	ldrh	r3, [r7, #26]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d147      	bne.n	8008272 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	330c      	adds	r3, #12
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008208:	e033      	b.n	8008272 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b02      	cmp	r3, #2
 8008216:	d113      	bne.n	8008240 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	7812      	ldrb	r2, [r2, #0]
 8008224:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800823e:	e018      	b.n	8008272 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008240:	f7fd fb7c 	bl	800593c <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d803      	bhi.n	8008258 <HAL_SPI_Transmit+0x20a>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d102      	bne.n	800825e <HAL_SPI_Transmit+0x210>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e02d      	b.n	80082ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1c6      	bne.n	800820a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fbe7 	bl	8008a54 <SPI_EndRxTxTransaction>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2220      	movs	r2, #32
 8008290:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10a      	bne.n	80082b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e000      	b.n	80082ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
  }
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3720      	adds	r7, #32
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b088      	sub	sp, #32
 80082da:	af02      	add	r7, sp, #8
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	603b      	str	r3, [r7, #0]
 80082e2:	4613      	mov	r3, r2
 80082e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d001      	beq.n	80082f6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80082f2:	2302      	movs	r3, #2
 80082f4:	e104      	b.n	8008500 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082fe:	d112      	bne.n	8008326 <HAL_SPI_Receive+0x50>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10e      	bne.n	8008326 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2204      	movs	r2, #4
 800830c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	4613      	mov	r3, r2
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	68b9      	ldr	r1, [r7, #8]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f8f3 	bl	8008508 <HAL_SPI_TransmitReceive>
 8008322:	4603      	mov	r3, r0
 8008324:	e0ec      	b.n	8008500 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008326:	f7fd fb09 	bl	800593c <HAL_GetTick>
 800832a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <HAL_SPI_Receive+0x62>
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e0e1      	b.n	8008500 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_SPI_Receive+0x74>
 8008346:	2302      	movs	r3, #2
 8008348:	e0da      	b.n	8008500 <HAL_SPI_Receive+0x22a>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2204      	movs	r2, #4
 8008356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	88fa      	ldrh	r2, [r7, #6]
 800836a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	88fa      	ldrh	r2, [r7, #6]
 8008370:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008398:	d10f      	bne.n	80083ba <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80083b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c4:	2b40      	cmp	r3, #64	@ 0x40
 80083c6:	d007      	beq.n	80083d8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d170      	bne.n	80084c2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80083e0:	e035      	b.n	800844e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d115      	bne.n	800841c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f103 020c 	add.w	r2, r3, #12
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800841a:	e018      	b.n	800844e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800841c:	f7fd fa8e 	bl	800593c <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d803      	bhi.n	8008434 <HAL_SPI_Receive+0x15e>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008432:	d102      	bne.n	800843a <HAL_SPI_Receive+0x164>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d109      	bne.n	800844e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e058      	b.n	8008500 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008452:	b29b      	uxth	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1c4      	bne.n	80083e2 <HAL_SPI_Receive+0x10c>
 8008458:	e038      	b.n	80084cc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b01      	cmp	r3, #1
 8008466:	d113      	bne.n	8008490 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008472:	b292      	uxth	r2, r2
 8008474:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800848e:	e018      	b.n	80084c2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008490:	f7fd fa54 	bl	800593c <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d803      	bhi.n	80084a8 <HAL_SPI_Receive+0x1d2>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a6:	d102      	bne.n	80084ae <HAL_SPI_Receive+0x1d8>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e01e      	b.n	8008500 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1c6      	bne.n	800845a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fa59 	bl	8008988 <SPI_EndRxTransaction>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e000      	b.n	8008500 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80084fe:	2300      	movs	r3, #0
  }
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	@ 0x28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008516:	2301      	movs	r3, #1
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800851a:	f7fd fa0f 	bl	800593c <HAL_GetTick>
 800851e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008526:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800852e:	887b      	ldrh	r3, [r7, #2]
 8008530:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008532:	7ffb      	ldrb	r3, [r7, #31]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d00c      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x4a>
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800853e:	d106      	bne.n	800854e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <HAL_SPI_TransmitReceive+0x46>
 8008548:	7ffb      	ldrb	r3, [r7, #31]
 800854a:	2b04      	cmp	r3, #4
 800854c:	d001      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800854e:	2302      	movs	r3, #2
 8008550:	e17f      	b.n	8008852 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d005      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x5c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x5c>
 800855e:	887b      	ldrh	r3, [r7, #2]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e174      	b.n	8008852 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x6e>
 8008572:	2302      	movs	r3, #2
 8008574:	e16d      	b.n	8008852 <HAL_SPI_TransmitReceive+0x34a>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b04      	cmp	r3, #4
 8008588:	d003      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2205      	movs	r2, #5
 800858e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	887a      	ldrh	r2, [r7, #2]
 80085a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	887a      	ldrh	r2, [r7, #2]
 80085a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	887a      	ldrh	r2, [r7, #2]
 80085b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	887a      	ldrh	r2, [r7, #2]
 80085ba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d2:	2b40      	cmp	r3, #64	@ 0x40
 80085d4:	d007      	beq.n	80085e6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085ee:	d17e      	bne.n	80086ee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_SPI_TransmitReceive+0xf6>
 80085f8:	8afb      	ldrh	r3, [r7, #22]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d16c      	bne.n	80086d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008602:	881a      	ldrh	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860e:	1c9a      	adds	r2, r3, #2
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b29a      	uxth	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008622:	e059      	b.n	80086d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b02      	cmp	r3, #2
 8008630:	d11b      	bne.n	800866a <HAL_SPI_TransmitReceive+0x162>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d016      	beq.n	800866a <HAL_SPI_TransmitReceive+0x162>
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	2b01      	cmp	r3, #1
 8008640:	d113      	bne.n	800866a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008646:	881a      	ldrh	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008652:	1c9a      	adds	r2, r3, #2
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b01      	cmp	r3, #1
 8008676:	d119      	bne.n	80086ac <HAL_SPI_TransmitReceive+0x1a4>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d014      	beq.n	80086ac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868c:	b292      	uxth	r2, r2
 800868e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008694:	1c9a      	adds	r2, r3, #2
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086a8:	2301      	movs	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086ac:	f7fd f946 	bl	800593c <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d80d      	bhi.n	80086d8 <HAL_SPI_TransmitReceive+0x1d0>
 80086bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d009      	beq.n	80086d8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e0bc      	b.n	8008852 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1a0      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x11c>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d19b      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x11c>
 80086ec:	e082      	b.n	80087f4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_SPI_TransmitReceive+0x1f4>
 80086f6:	8afb      	ldrh	r3, [r7, #22]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d171      	bne.n	80087e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	330c      	adds	r3, #12
 8008706:	7812      	ldrb	r2, [r2, #0]
 8008708:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008718:	b29b      	uxth	r3, r3
 800871a:	3b01      	subs	r3, #1
 800871c:	b29a      	uxth	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008722:	e05d      	b.n	80087e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d11c      	bne.n	800876c <HAL_SPI_TransmitReceive+0x264>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d017      	beq.n	800876c <HAL_SPI_TransmitReceive+0x264>
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	2b01      	cmp	r3, #1
 8008740:	d114      	bne.n	800876c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	330c      	adds	r3, #12
 800874c:	7812      	ldrb	r2, [r2, #0]
 800874e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800875e:	b29b      	uxth	r3, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b01      	cmp	r3, #1
 8008778:	d119      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x2a6>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d014      	beq.n	80087ae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087aa:	2301      	movs	r3, #1
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087ae:	f7fd f8c5 	bl	800593c <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d803      	bhi.n	80087c6 <HAL_SPI_TransmitReceive+0x2be>
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c4:	d102      	bne.n	80087cc <HAL_SPI_TransmitReceive+0x2c4>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d109      	bne.n	80087e0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e038      	b.n	8008852 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d19c      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x21c>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d197      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087f4:	6a3a      	ldr	r2, [r7, #32]
 80087f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f92b 	bl	8008a54 <SPI_EndRxTxTransaction>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2220      	movs	r2, #32
 8008808:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e01d      	b.n	8008852 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008850:	2300      	movs	r3, #0
  }
}
 8008852:	4618      	mov	r0, r3
 8008854:	3728      	adds	r7, #40	@ 0x28
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008868:	b2db      	uxtb	r3, r3
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008888:	f7fd f858 	bl	800593c <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4413      	add	r3, r2
 8008896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008898:	f7fd f850 	bl	800593c <HAL_GetTick>
 800889c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800889e:	4b39      	ldr	r3, [pc, #228]	@ (8008984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	015b      	lsls	r3, r3, #5
 80088a4:	0d1b      	lsrs	r3, r3, #20
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	fb02 f303 	mul.w	r3, r2, r3
 80088ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088ae:	e054      	b.n	800895a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d050      	beq.n	800895a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088b8:	f7fd f840 	bl	800593c <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	69fa      	ldr	r2, [r7, #28]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d902      	bls.n	80088ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d13d      	bne.n	800894a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088e6:	d111      	bne.n	800890c <SPI_WaitFlagStateUntilTimeout+0x94>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088f0:	d004      	beq.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088fa:	d107      	bne.n	800890c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800890a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008914:	d10f      	bne.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e017      	b.n	800897a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	3b01      	subs	r3, #1
 8008958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4013      	ands	r3, r2
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	bf0c      	ite	eq
 800896a:	2301      	moveq	r3, #1
 800896c:	2300      	movne	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	429a      	cmp	r2, r3
 8008976:	d19b      	bne.n	80088b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3720      	adds	r7, #32
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000000 	.word	0x20000000

08008988 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800899c:	d111      	bne.n	80089c2 <SPI_EndRxTransaction+0x3a>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089a6:	d004      	beq.n	80089b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b0:	d107      	bne.n	80089c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089ca:	d12a      	bne.n	8008a22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089d4:	d012      	beq.n	80089fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2200      	movs	r2, #0
 80089de:	2180      	movs	r1, #128	@ 0x80
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff ff49 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d02d      	beq.n	8008a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089f0:	f043 0220 	orr.w	r2, r3, #32
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e026      	b.n	8008a4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	2101      	movs	r1, #1
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff ff36 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01a      	beq.n	8008a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e013      	b.n	8008a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff ff23 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3c:	f043 0220 	orr.w	r2, r3, #32
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e000      	b.n	8008a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2201      	movs	r2, #1
 8008a68:	2102      	movs	r1, #2
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7ff ff04 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7a:	f043 0220 	orr.w	r2, r3, #32
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e032      	b.n	8008aec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a86:	4b1b      	ldr	r3, [pc, #108]	@ (8008af4 <SPI_EndRxTxTransaction+0xa0>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008af8 <SPI_EndRxTxTransaction+0xa4>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	0d5b      	lsrs	r3, r3, #21
 8008a92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a96:	fb02 f303 	mul.w	r3, r2, r3
 8008a9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aa4:	d112      	bne.n	8008acc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2200      	movs	r2, #0
 8008aae:	2180      	movs	r1, #128	@ 0x80
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f7ff fee1 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d016      	beq.n	8008aea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac0:	f043 0220 	orr.w	r2, r3, #32
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e00f      	b.n	8008aec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae2:	2b80      	cmp	r3, #128	@ 0x80
 8008ae4:	d0f2      	beq.n	8008acc <SPI_EndRxTxTransaction+0x78>
 8008ae6:	e000      	b.n	8008aea <SPI_EndRxTxTransaction+0x96>
        break;
 8008ae8:	bf00      	nop
  }

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000000 	.word	0x20000000
 8008af8:	165e9f81 	.word	0x165e9f81

08008afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e041      	b.n	8008b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fc fcc6 	bl	80054b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f000 fa9e 	bl	800907c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d001      	beq.n	8008bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e044      	b.n	8008c3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c4c <HAL_TIM_Base_Start_IT+0xb0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d018      	beq.n	8008c08 <HAL_TIM_Base_Start_IT+0x6c>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bde:	d013      	beq.n	8008c08 <HAL_TIM_Base_Start_IT+0x6c>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a1a      	ldr	r2, [pc, #104]	@ (8008c50 <HAL_TIM_Base_Start_IT+0xb4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00e      	beq.n	8008c08 <HAL_TIM_Base_Start_IT+0x6c>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a19      	ldr	r2, [pc, #100]	@ (8008c54 <HAL_TIM_Base_Start_IT+0xb8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d009      	beq.n	8008c08 <HAL_TIM_Base_Start_IT+0x6c>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a17      	ldr	r2, [pc, #92]	@ (8008c58 <HAL_TIM_Base_Start_IT+0xbc>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <HAL_TIM_Base_Start_IT+0x6c>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a16      	ldr	r2, [pc, #88]	@ (8008c5c <HAL_TIM_Base_Start_IT+0xc0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d111      	bne.n	8008c2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b06      	cmp	r3, #6
 8008c18:	d010      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 0201 	orr.w	r2, r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2a:	e007      	b.n	8008c3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0201 	orr.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40000400 	.word	0x40000400
 8008c54:	40000800 	.word	0x40000800
 8008c58:	40000c00 	.word	0x40000c00
 8008c5c:	40014000 	.word	0x40014000

08008c60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0201 	bic.w	r2, r2, #1
 8008c76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6a1a      	ldr	r2, [r3, #32]
 8008c7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c82:	4013      	ands	r3, r2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10f      	bne.n	8008ca8 <HAL_TIM_Base_Stop_IT+0x48>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6a1a      	ldr	r2, [r3, #32]
 8008c8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008c92:	4013      	ands	r3, r2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d107      	bne.n	8008ca8 <HAL_TIM_Base_Stop_IT+0x48>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0201 	bic.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d020      	beq.n	8008d22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d01b      	beq.n	8008d22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f06f 0202 	mvn.w	r2, #2
 8008cf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f999 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008d0e:	e005      	b.n	8008d1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f98b 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f99c 	bl	8009054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d020      	beq.n	8008d6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f003 0304 	and.w	r3, r3, #4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01b      	beq.n	8008d6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f06f 0204 	mvn.w	r2, #4
 8008d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f973 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008d5a:	e005      	b.n	8008d68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f965 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f976 	bl	8009054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f003 0308 	and.w	r3, r3, #8
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d020      	beq.n	8008dba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d01b      	beq.n	8008dba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f06f 0208 	mvn.w	r2, #8
 8008d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f94d 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008da6:	e005      	b.n	8008db4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f93f 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f950 	bl	8009054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f003 0310 	and.w	r3, r3, #16
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d020      	beq.n	8008e06 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f003 0310 	and.w	r3, r3, #16
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d01b      	beq.n	8008e06 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f06f 0210 	mvn.w	r2, #16
 8008dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2208      	movs	r2, #8
 8008ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f927 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008df2:	e005      	b.n	8008e00 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f919 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f92a 	bl	8009054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f06f 0201 	mvn.w	r2, #1
 8008e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7fc fa5f 	bl	80052e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00c      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d007      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fab5 	bl	80093b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00c      	beq.n	8008e72 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d007      	beq.n	8008e72 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f8fb 	bl	8009068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00c      	beq.n	8008e96 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f06f 0220 	mvn.w	r2, #32
 8008e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fa87 	bl	80093a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_TIM_ConfigClockSource+0x1c>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e0b4      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x186>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ed8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ee0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ef2:	d03e      	beq.n	8008f72 <HAL_TIM_ConfigClockSource+0xd4>
 8008ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ef8:	f200 8087 	bhi.w	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f00:	f000 8086 	beq.w	8009010 <HAL_TIM_ConfigClockSource+0x172>
 8008f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f08:	d87f      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f0a:	2b70      	cmp	r3, #112	@ 0x70
 8008f0c:	d01a      	beq.n	8008f44 <HAL_TIM_ConfigClockSource+0xa6>
 8008f0e:	2b70      	cmp	r3, #112	@ 0x70
 8008f10:	d87b      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f12:	2b60      	cmp	r3, #96	@ 0x60
 8008f14:	d050      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0x11a>
 8008f16:	2b60      	cmp	r3, #96	@ 0x60
 8008f18:	d877      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f1a:	2b50      	cmp	r3, #80	@ 0x50
 8008f1c:	d03c      	beq.n	8008f98 <HAL_TIM_ConfigClockSource+0xfa>
 8008f1e:	2b50      	cmp	r3, #80	@ 0x50
 8008f20:	d873      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f22:	2b40      	cmp	r3, #64	@ 0x40
 8008f24:	d058      	beq.n	8008fd8 <HAL_TIM_ConfigClockSource+0x13a>
 8008f26:	2b40      	cmp	r3, #64	@ 0x40
 8008f28:	d86f      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f2a:	2b30      	cmp	r3, #48	@ 0x30
 8008f2c:	d064      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f2e:	2b30      	cmp	r3, #48	@ 0x30
 8008f30:	d86b      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d060      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d867      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d05c      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f3e:	2b10      	cmp	r3, #16
 8008f40:	d05a      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f42:	e062      	b.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f54:	f000 f998 	bl	8009288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	609a      	str	r2, [r3, #8]
      break;
 8008f70:	e04f      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f82:	f000 f981 	bl	8009288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f94:	609a      	str	r2, [r3, #8]
      break;
 8008f96:	e03c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f000 f8f5 	bl	8009194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2150      	movs	r1, #80	@ 0x50
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f94e 	bl	8009252 <TIM_ITRx_SetConfig>
      break;
 8008fb6:	e02c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f000 f914 	bl	80091f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2160      	movs	r1, #96	@ 0x60
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f93e 	bl	8009252 <TIM_ITRx_SetConfig>
      break;
 8008fd6:	e01c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	f000 f8d5 	bl	8009194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2140      	movs	r1, #64	@ 0x40
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f92e 	bl	8009252 <TIM_ITRx_SetConfig>
      break;
 8008ff6:	e00c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4619      	mov	r1, r3
 8009002:	4610      	mov	r0, r2
 8009004:	f000 f925 	bl	8009252 <TIM_ITRx_SetConfig>
      break;
 8009008:	e003      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]
      break;
 800900e:	e000      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009010:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a3a      	ldr	r2, [pc, #232]	@ (8009178 <TIM_Base_SetConfig+0xfc>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d00f      	beq.n	80090b4 <TIM_Base_SetConfig+0x38>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800909a:	d00b      	beq.n	80090b4 <TIM_Base_SetConfig+0x38>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a37      	ldr	r2, [pc, #220]	@ (800917c <TIM_Base_SetConfig+0x100>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d007      	beq.n	80090b4 <TIM_Base_SetConfig+0x38>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a36      	ldr	r2, [pc, #216]	@ (8009180 <TIM_Base_SetConfig+0x104>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d003      	beq.n	80090b4 <TIM_Base_SetConfig+0x38>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a35      	ldr	r2, [pc, #212]	@ (8009184 <TIM_Base_SetConfig+0x108>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d108      	bne.n	80090c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009178 <TIM_Base_SetConfig+0xfc>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01b      	beq.n	8009106 <TIM_Base_SetConfig+0x8a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d4:	d017      	beq.n	8009106 <TIM_Base_SetConfig+0x8a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a28      	ldr	r2, [pc, #160]	@ (800917c <TIM_Base_SetConfig+0x100>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <TIM_Base_SetConfig+0x8a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a27      	ldr	r2, [pc, #156]	@ (8009180 <TIM_Base_SetConfig+0x104>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00f      	beq.n	8009106 <TIM_Base_SetConfig+0x8a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a26      	ldr	r2, [pc, #152]	@ (8009184 <TIM_Base_SetConfig+0x108>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00b      	beq.n	8009106 <TIM_Base_SetConfig+0x8a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a25      	ldr	r2, [pc, #148]	@ (8009188 <TIM_Base_SetConfig+0x10c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d007      	beq.n	8009106 <TIM_Base_SetConfig+0x8a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a24      	ldr	r2, [pc, #144]	@ (800918c <TIM_Base_SetConfig+0x110>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d003      	beq.n	8009106 <TIM_Base_SetConfig+0x8a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a23      	ldr	r2, [pc, #140]	@ (8009190 <TIM_Base_SetConfig+0x114>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d108      	bne.n	8009118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800910c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a0e      	ldr	r2, [pc, #56]	@ (8009178 <TIM_Base_SetConfig+0xfc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d103      	bne.n	800914c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b01      	cmp	r3, #1
 800915c:	d105      	bne.n	800916a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f023 0201 	bic.w	r2, r3, #1
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	611a      	str	r2, [r3, #16]
  }
}
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40010000 	.word	0x40010000
 800917c:	40000400 	.word	0x40000400
 8009180:	40000800 	.word	0x40000800
 8009184:	40000c00 	.word	0x40000c00
 8009188:	40014000 	.word	0x40014000
 800918c:	40014400 	.word	0x40014400
 8009190:	40014800 	.word	0x40014800

08009194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
 80091a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	f023 0201 	bic.w	r2, r3, #1
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	011b      	lsls	r3, r3, #4
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f023 030a 	bic.w	r3, r3, #10
 80091d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	621a      	str	r2, [r3, #32]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b087      	sub	sp, #28
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	60f8      	str	r0, [r7, #12]
 80091fa:	60b9      	str	r1, [r7, #8]
 80091fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	f023 0210 	bic.w	r2, r3, #16
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800921c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	031b      	lsls	r3, r3, #12
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4313      	orrs	r3, r2
 8009226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800922e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	621a      	str	r2, [r3, #32]
}
 8009246:	bf00      	nop
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	f043 0307 	orr.w	r3, r3, #7
 8009274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	609a      	str	r2, [r3, #8]
}
 800927c:	bf00      	nop
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	021a      	lsls	r2, r3, #8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	609a      	str	r2, [r3, #8]
}
 80092bc:	bf00      	nop
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092dc:	2302      	movs	r3, #2
 80092de:	e050      	b.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1c      	ldr	r2, [pc, #112]	@ (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d018      	beq.n	8009356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800932c:	d013      	beq.n	8009356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a18      	ldr	r2, [pc, #96]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d00e      	beq.n	8009356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a16      	ldr	r2, [pc, #88]	@ (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d009      	beq.n	8009356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a15      	ldr	r2, [pc, #84]	@ (800939c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d004      	beq.n	8009356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a13      	ldr	r2, [pc, #76]	@ (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d10c      	bne.n	8009370 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800935c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	4313      	orrs	r3, r2
 8009366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40010000 	.word	0x40010000
 8009394:	40000400 	.word	0x40000400
 8009398:	40000800 	.word	0x40000800
 800939c:	40000c00 	.word	0x40000c00
 80093a0:	40014000 	.word	0x40014000

080093a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e042      	b.n	8009464 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fc f8a2 	bl	800553c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2224      	movs	r2, #36	@ 0x24
 80093fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800940e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f973 	bl	80096fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	691a      	ldr	r2, [r3, #16]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	695a      	ldr	r2, [r3, #20]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68da      	ldr	r2, [r3, #12]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2220      	movs	r2, #32
 8009458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08a      	sub	sp, #40	@ 0x28
 8009470:	af02      	add	r7, sp, #8
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	4613      	mov	r3, r2
 800947a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b20      	cmp	r3, #32
 800948a:	d175      	bne.n	8009578 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <HAL_UART_Transmit+0x2c>
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e06e      	b.n	800957a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2221      	movs	r2, #33	@ 0x21
 80094a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094aa:	f7fc fa47 	bl	800593c <HAL_GetTick>
 80094ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	88fa      	ldrh	r2, [r7, #6]
 80094b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	88fa      	ldrh	r2, [r7, #6]
 80094ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094c4:	d108      	bne.n	80094d8 <HAL_UART_Transmit+0x6c>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	61bb      	str	r3, [r7, #24]
 80094d6:	e003      	b.n	80094e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094e0:	e02e      	b.n	8009540 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2200      	movs	r2, #0
 80094ea:	2180      	movs	r1, #128	@ 0x80
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f848 	bl	8009582 <UART_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e03a      	b.n	800957a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	3302      	adds	r3, #2
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	e007      	b.n	8009532 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	3301      	adds	r3, #1
 8009530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009536:	b29b      	uxth	r3, r3
 8009538:	3b01      	subs	r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009544:	b29b      	uxth	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1cb      	bne.n	80094e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2200      	movs	r2, #0
 8009552:	2140      	movs	r1, #64	@ 0x40
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 f814 	bl	8009582 <UART_WaitOnFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2220      	movs	r2, #32
 8009564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e006      	b.n	800957a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e000      	b.n	800957a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009578:	2302      	movs	r3, #2
  }
}
 800957a:	4618      	mov	r0, r3
 800957c:	3720      	adds	r7, #32
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	603b      	str	r3, [r7, #0]
 800958e:	4613      	mov	r3, r2
 8009590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009592:	e03b      	b.n	800960c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959a:	d037      	beq.n	800960c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800959c:	f7fc f9ce 	bl	800593c <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d302      	bcc.n	80095b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e03a      	b.n	800962c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d023      	beq.n	800960c <UART_WaitOnFlagUntilTimeout+0x8a>
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2b80      	cmp	r3, #128	@ 0x80
 80095c8:	d020      	beq.n	800960c <UART_WaitOnFlagUntilTimeout+0x8a>
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b40      	cmp	r3, #64	@ 0x40
 80095ce:	d01d      	beq.n	800960c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0308 	and.w	r3, r3, #8
 80095da:	2b08      	cmp	r3, #8
 80095dc:	d116      	bne.n	800960c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80095de:	2300      	movs	r3, #0
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f81d 	bl	8009634 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2208      	movs	r2, #8
 80095fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e00f      	b.n	800962c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	4013      	ands	r3, r2
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	429a      	cmp	r2, r3
 800961a:	bf0c      	ite	eq
 800961c:	2301      	moveq	r3, #1
 800961e:	2300      	movne	r3, #0
 8009620:	b2db      	uxtb	r3, r3
 8009622:	461a      	mov	r2, r3
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	429a      	cmp	r2, r3
 8009628:	d0b4      	beq.n	8009594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009634:	b480      	push	{r7}
 8009636:	b095      	sub	sp, #84	@ 0x54
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	330c      	adds	r3, #12
 8009642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800965c:	643a      	str	r2, [r7, #64]	@ 0x40
 800965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009664:	e841 2300 	strex	r3, r2, [r1]
 8009668:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800966a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e5      	bne.n	800963c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3314      	adds	r3, #20
 8009676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3314      	adds	r3, #20
 800968e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e5      	bne.n	8009670 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d119      	bne.n	80096e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	330c      	adds	r3, #12
 80096b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f023 0310 	bic.w	r3, r3, #16
 80096c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	330c      	adds	r3, #12
 80096ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096cc:	61ba      	str	r2, [r7, #24]
 80096ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	6979      	ldr	r1, [r7, #20]
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	e841 2300 	strex	r3, r2, [r1]
 80096d8:	613b      	str	r3, [r7, #16]
   return(result);
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e5      	bne.n	80096ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80096ee:	bf00      	nop
 80096f0:	3754      	adds	r7, #84	@ 0x54
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
	...

080096fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009700:	b0c0      	sub	sp, #256	@ 0x100
 8009702:	af00      	add	r7, sp, #0
 8009704:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009718:	68d9      	ldr	r1, [r3, #12]
 800971a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	ea40 0301 	orr.w	r3, r0, r1
 8009724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	431a      	orrs	r2, r3
 8009734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	431a      	orrs	r2, r3
 800973c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009754:	f021 010c 	bic.w	r1, r1, #12
 8009758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009762:	430b      	orrs	r3, r1
 8009764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009776:	6999      	ldr	r1, [r3, #24]
 8009778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	ea40 0301 	orr.w	r3, r0, r1
 8009782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	4b8f      	ldr	r3, [pc, #572]	@ (80099c8 <UART_SetConfig+0x2cc>)
 800978c:	429a      	cmp	r2, r3
 800978e:	d005      	beq.n	800979c <UART_SetConfig+0xa0>
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b8d      	ldr	r3, [pc, #564]	@ (80099cc <UART_SetConfig+0x2d0>)
 8009798:	429a      	cmp	r2, r3
 800979a:	d104      	bne.n	80097a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800979c:	f7fe fb88 	bl	8007eb0 <HAL_RCC_GetPCLK2Freq>
 80097a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80097a4:	e003      	b.n	80097ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097a6:	f7fe fb6f 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 80097aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097b8:	f040 810c 	bne.w	80099d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80097ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80097ce:	4622      	mov	r2, r4
 80097d0:	462b      	mov	r3, r5
 80097d2:	1891      	adds	r1, r2, r2
 80097d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80097d6:	415b      	adcs	r3, r3
 80097d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80097de:	4621      	mov	r1, r4
 80097e0:	eb12 0801 	adds.w	r8, r2, r1
 80097e4:	4629      	mov	r1, r5
 80097e6:	eb43 0901 	adc.w	r9, r3, r1
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097fe:	4690      	mov	r8, r2
 8009800:	4699      	mov	r9, r3
 8009802:	4623      	mov	r3, r4
 8009804:	eb18 0303 	adds.w	r3, r8, r3
 8009808:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800980c:	462b      	mov	r3, r5
 800980e:	eb49 0303 	adc.w	r3, r9, r3
 8009812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009822:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800982a:	460b      	mov	r3, r1
 800982c:	18db      	adds	r3, r3, r3
 800982e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009830:	4613      	mov	r3, r2
 8009832:	eb42 0303 	adc.w	r3, r2, r3
 8009836:	657b      	str	r3, [r7, #84]	@ 0x54
 8009838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800983c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009840:	f7f7 f91c 	bl	8000a7c <__aeabi_uldivmod>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4b61      	ldr	r3, [pc, #388]	@ (80099d0 <UART_SetConfig+0x2d4>)
 800984a:	fba3 2302 	umull	r2, r3, r3, r2
 800984e:	095b      	lsrs	r3, r3, #5
 8009850:	011c      	lsls	r4, r3, #4
 8009852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009856:	2200      	movs	r2, #0
 8009858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800985c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009864:	4642      	mov	r2, r8
 8009866:	464b      	mov	r3, r9
 8009868:	1891      	adds	r1, r2, r2
 800986a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800986c:	415b      	adcs	r3, r3
 800986e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009874:	4641      	mov	r1, r8
 8009876:	eb12 0a01 	adds.w	sl, r2, r1
 800987a:	4649      	mov	r1, r9
 800987c:	eb43 0b01 	adc.w	fp, r3, r1
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	f04f 0300 	mov.w	r3, #0
 8009888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800988c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009894:	4692      	mov	sl, r2
 8009896:	469b      	mov	fp, r3
 8009898:	4643      	mov	r3, r8
 800989a:	eb1a 0303 	adds.w	r3, sl, r3
 800989e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098a2:	464b      	mov	r3, r9
 80098a4:	eb4b 0303 	adc.w	r3, fp, r3
 80098a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80098bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80098c0:	460b      	mov	r3, r1
 80098c2:	18db      	adds	r3, r3, r3
 80098c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80098c6:	4613      	mov	r3, r2
 80098c8:	eb42 0303 	adc.w	r3, r2, r3
 80098cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80098d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80098d6:	f7f7 f8d1 	bl	8000a7c <__aeabi_uldivmod>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	4b3b      	ldr	r3, [pc, #236]	@ (80099d0 <UART_SetConfig+0x2d4>)
 80098e2:	fba3 2301 	umull	r2, r3, r3, r1
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	2264      	movs	r2, #100	@ 0x64
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	1acb      	subs	r3, r1, r3
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80098f6:	4b36      	ldr	r3, [pc, #216]	@ (80099d0 <UART_SetConfig+0x2d4>)
 80098f8:	fba3 2302 	umull	r2, r3, r3, r2
 80098fc:	095b      	lsrs	r3, r3, #5
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009904:	441c      	add	r4, r3
 8009906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800990a:	2200      	movs	r2, #0
 800990c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009910:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009918:	4642      	mov	r2, r8
 800991a:	464b      	mov	r3, r9
 800991c:	1891      	adds	r1, r2, r2
 800991e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009920:	415b      	adcs	r3, r3
 8009922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009928:	4641      	mov	r1, r8
 800992a:	1851      	adds	r1, r2, r1
 800992c:	6339      	str	r1, [r7, #48]	@ 0x30
 800992e:	4649      	mov	r1, r9
 8009930:	414b      	adcs	r3, r1
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
 8009934:	f04f 0200 	mov.w	r2, #0
 8009938:	f04f 0300 	mov.w	r3, #0
 800993c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009940:	4659      	mov	r1, fp
 8009942:	00cb      	lsls	r3, r1, #3
 8009944:	4651      	mov	r1, sl
 8009946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800994a:	4651      	mov	r1, sl
 800994c:	00ca      	lsls	r2, r1, #3
 800994e:	4610      	mov	r0, r2
 8009950:	4619      	mov	r1, r3
 8009952:	4603      	mov	r3, r0
 8009954:	4642      	mov	r2, r8
 8009956:	189b      	adds	r3, r3, r2
 8009958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800995c:	464b      	mov	r3, r9
 800995e:	460a      	mov	r2, r1
 8009960:	eb42 0303 	adc.w	r3, r2, r3
 8009964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009974:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800997c:	460b      	mov	r3, r1
 800997e:	18db      	adds	r3, r3, r3
 8009980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009982:	4613      	mov	r3, r2
 8009984:	eb42 0303 	adc.w	r3, r2, r3
 8009988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800998a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800998e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009992:	f7f7 f873 	bl	8000a7c <__aeabi_uldivmod>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <UART_SetConfig+0x2d4>)
 800999c:	fba3 1302 	umull	r1, r3, r3, r2
 80099a0:	095b      	lsrs	r3, r3, #5
 80099a2:	2164      	movs	r1, #100	@ 0x64
 80099a4:	fb01 f303 	mul.w	r3, r1, r3
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	3332      	adds	r3, #50	@ 0x32
 80099ae:	4a08      	ldr	r2, [pc, #32]	@ (80099d0 <UART_SetConfig+0x2d4>)
 80099b0:	fba2 2303 	umull	r2, r3, r2, r3
 80099b4:	095b      	lsrs	r3, r3, #5
 80099b6:	f003 0207 	and.w	r2, r3, #7
 80099ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4422      	add	r2, r4
 80099c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099c4:	e106      	b.n	8009bd4 <UART_SetConfig+0x4d8>
 80099c6:	bf00      	nop
 80099c8:	40011000 	.word	0x40011000
 80099cc:	40011400 	.word	0x40011400
 80099d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099d8:	2200      	movs	r2, #0
 80099da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80099e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80099e6:	4642      	mov	r2, r8
 80099e8:	464b      	mov	r3, r9
 80099ea:	1891      	adds	r1, r2, r2
 80099ec:	6239      	str	r1, [r7, #32]
 80099ee:	415b      	adcs	r3, r3
 80099f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80099f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099f6:	4641      	mov	r1, r8
 80099f8:	1854      	adds	r4, r2, r1
 80099fa:	4649      	mov	r1, r9
 80099fc:	eb43 0501 	adc.w	r5, r3, r1
 8009a00:	f04f 0200 	mov.w	r2, #0
 8009a04:	f04f 0300 	mov.w	r3, #0
 8009a08:	00eb      	lsls	r3, r5, #3
 8009a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a0e:	00e2      	lsls	r2, r4, #3
 8009a10:	4614      	mov	r4, r2
 8009a12:	461d      	mov	r5, r3
 8009a14:	4643      	mov	r3, r8
 8009a16:	18e3      	adds	r3, r4, r3
 8009a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	eb45 0303 	adc.w	r3, r5, r3
 8009a22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a36:	f04f 0200 	mov.w	r2, #0
 8009a3a:	f04f 0300 	mov.w	r3, #0
 8009a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009a42:	4629      	mov	r1, r5
 8009a44:	008b      	lsls	r3, r1, #2
 8009a46:	4621      	mov	r1, r4
 8009a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	008a      	lsls	r2, r1, #2
 8009a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009a54:	f7f7 f812 	bl	8000a7c <__aeabi_uldivmod>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4b60      	ldr	r3, [pc, #384]	@ (8009be0 <UART_SetConfig+0x4e4>)
 8009a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a62:	095b      	lsrs	r3, r3, #5
 8009a64:	011c      	lsls	r4, r3, #4
 8009a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009a78:	4642      	mov	r2, r8
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	1891      	adds	r1, r2, r2
 8009a7e:	61b9      	str	r1, [r7, #24]
 8009a80:	415b      	adcs	r3, r3
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a88:	4641      	mov	r1, r8
 8009a8a:	1851      	adds	r1, r2, r1
 8009a8c:	6139      	str	r1, [r7, #16]
 8009a8e:	4649      	mov	r1, r9
 8009a90:	414b      	adcs	r3, r1
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	f04f 0300 	mov.w	r3, #0
 8009a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009aa0:	4659      	mov	r1, fp
 8009aa2:	00cb      	lsls	r3, r1, #3
 8009aa4:	4651      	mov	r1, sl
 8009aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aaa:	4651      	mov	r1, sl
 8009aac:	00ca      	lsls	r2, r1, #3
 8009aae:	4610      	mov	r0, r2
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	189b      	adds	r3, r3, r2
 8009ab8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009abc:	464b      	mov	r3, r9
 8009abe:	460a      	mov	r2, r1
 8009ac0:	eb42 0303 	adc.w	r3, r2, r3
 8009ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ad2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	008b      	lsls	r3, r1, #2
 8009ae4:	4641      	mov	r1, r8
 8009ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009aea:	4641      	mov	r1, r8
 8009aec:	008a      	lsls	r2, r1, #2
 8009aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009af2:	f7f6 ffc3 	bl	8000a7c <__aeabi_uldivmod>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4611      	mov	r1, r2
 8009afc:	4b38      	ldr	r3, [pc, #224]	@ (8009be0 <UART_SetConfig+0x4e4>)
 8009afe:	fba3 2301 	umull	r2, r3, r3, r1
 8009b02:	095b      	lsrs	r3, r3, #5
 8009b04:	2264      	movs	r2, #100	@ 0x64
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
 8009b0a:	1acb      	subs	r3, r1, r3
 8009b0c:	011b      	lsls	r3, r3, #4
 8009b0e:	3332      	adds	r3, #50	@ 0x32
 8009b10:	4a33      	ldr	r2, [pc, #204]	@ (8009be0 <UART_SetConfig+0x4e4>)
 8009b12:	fba2 2303 	umull	r2, r3, r2, r3
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b1c:	441c      	add	r4, r3
 8009b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b22:	2200      	movs	r2, #0
 8009b24:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b26:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	464b      	mov	r3, r9
 8009b30:	1891      	adds	r1, r2, r2
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	415b      	adcs	r3, r3
 8009b36:	60fb      	str	r3, [r7, #12]
 8009b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b3c:	4641      	mov	r1, r8
 8009b3e:	1851      	adds	r1, r2, r1
 8009b40:	6039      	str	r1, [r7, #0]
 8009b42:	4649      	mov	r1, r9
 8009b44:	414b      	adcs	r3, r1
 8009b46:	607b      	str	r3, [r7, #4]
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	f04f 0300 	mov.w	r3, #0
 8009b50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b54:	4659      	mov	r1, fp
 8009b56:	00cb      	lsls	r3, r1, #3
 8009b58:	4651      	mov	r1, sl
 8009b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b5e:	4651      	mov	r1, sl
 8009b60:	00ca      	lsls	r2, r1, #3
 8009b62:	4610      	mov	r0, r2
 8009b64:	4619      	mov	r1, r3
 8009b66:	4603      	mov	r3, r0
 8009b68:	4642      	mov	r2, r8
 8009b6a:	189b      	adds	r3, r3, r2
 8009b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b6e:	464b      	mov	r3, r9
 8009b70:	460a      	mov	r2, r1
 8009b72:	eb42 0303 	adc.w	r3, r2, r3
 8009b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b82:	667a      	str	r2, [r7, #100]	@ 0x64
 8009b84:	f04f 0200 	mov.w	r2, #0
 8009b88:	f04f 0300 	mov.w	r3, #0
 8009b8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009b90:	4649      	mov	r1, r9
 8009b92:	008b      	lsls	r3, r1, #2
 8009b94:	4641      	mov	r1, r8
 8009b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b9a:	4641      	mov	r1, r8
 8009b9c:	008a      	lsls	r2, r1, #2
 8009b9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009ba2:	f7f6 ff6b 	bl	8000a7c <__aeabi_uldivmod>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4b0d      	ldr	r3, [pc, #52]	@ (8009be0 <UART_SetConfig+0x4e4>)
 8009bac:	fba3 1302 	umull	r1, r3, r3, r2
 8009bb0:	095b      	lsrs	r3, r3, #5
 8009bb2:	2164      	movs	r1, #100	@ 0x64
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	3332      	adds	r3, #50	@ 0x32
 8009bbe:	4a08      	ldr	r2, [pc, #32]	@ (8009be0 <UART_SetConfig+0x4e4>)
 8009bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc4:	095b      	lsrs	r3, r3, #5
 8009bc6:	f003 020f 	and.w	r2, r3, #15
 8009bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4422      	add	r2, r4
 8009bd2:	609a      	str	r2, [r3, #8]
}
 8009bd4:	bf00      	nop
 8009bd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009be0:	51eb851f 	.word	0x51eb851f

08009be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009be4:	b084      	sub	sp, #16
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	f107 001c 	add.w	r0, r7, #28
 8009bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d123      	bne.n	8009c46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d105      	bne.n	8009c3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 fae8 	bl	800b210 <USB_CoreReset>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]
 8009c44:	e01b      	b.n	8009c7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 fadc 	bl	800b210 <USB_CoreReset>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009c5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c70:	e005      	b.n	8009c7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009c7e:	7fbb      	ldrb	r3, [r7, #30]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d10b      	bne.n	8009c9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f043 0206 	orr.w	r2, r3, #6
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f043 0220 	orr.w	r2, r3, #32
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ca8:	b004      	add	sp, #16
 8009caa:	4770      	bx	lr

08009cac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d165      	bne.n	8009d8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4a41      	ldr	r2, [pc, #260]	@ (8009dc8 <USB_SetTurnaroundTime+0x11c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d906      	bls.n	8009cd6 <USB_SetTurnaroundTime+0x2a>
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4a40      	ldr	r2, [pc, #256]	@ (8009dcc <USB_SetTurnaroundTime+0x120>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d202      	bcs.n	8009cd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009cd0:	230f      	movs	r3, #15
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	e062      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8009dcc <USB_SetTurnaroundTime+0x120>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d306      	bcc.n	8009cec <USB_SetTurnaroundTime+0x40>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8009dd0 <USB_SetTurnaroundTime+0x124>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d202      	bcs.n	8009cec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ce6:	230e      	movs	r3, #14
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	e057      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4a38      	ldr	r2, [pc, #224]	@ (8009dd0 <USB_SetTurnaroundTime+0x124>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d306      	bcc.n	8009d02 <USB_SetTurnaroundTime+0x56>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4a37      	ldr	r2, [pc, #220]	@ (8009dd4 <USB_SetTurnaroundTime+0x128>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d202      	bcs.n	8009d02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009cfc:	230d      	movs	r3, #13
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e04c      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4a33      	ldr	r2, [pc, #204]	@ (8009dd4 <USB_SetTurnaroundTime+0x128>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d306      	bcc.n	8009d18 <USB_SetTurnaroundTime+0x6c>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	4a32      	ldr	r2, [pc, #200]	@ (8009dd8 <USB_SetTurnaroundTime+0x12c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d802      	bhi.n	8009d18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d12:	230c      	movs	r3, #12
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	e041      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8009dd8 <USB_SetTurnaroundTime+0x12c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d906      	bls.n	8009d2e <USB_SetTurnaroundTime+0x82>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4a2e      	ldr	r2, [pc, #184]	@ (8009ddc <USB_SetTurnaroundTime+0x130>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d802      	bhi.n	8009d2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d28:	230b      	movs	r3, #11
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e036      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	4a2a      	ldr	r2, [pc, #168]	@ (8009ddc <USB_SetTurnaroundTime+0x130>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d906      	bls.n	8009d44 <USB_SetTurnaroundTime+0x98>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	4a29      	ldr	r2, [pc, #164]	@ (8009de0 <USB_SetTurnaroundTime+0x134>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d802      	bhi.n	8009d44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009d3e:	230a      	movs	r3, #10
 8009d40:	617b      	str	r3, [r7, #20]
 8009d42:	e02b      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4a26      	ldr	r2, [pc, #152]	@ (8009de0 <USB_SetTurnaroundTime+0x134>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d906      	bls.n	8009d5a <USB_SetTurnaroundTime+0xae>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4a25      	ldr	r2, [pc, #148]	@ (8009de4 <USB_SetTurnaroundTime+0x138>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d202      	bcs.n	8009d5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009d54:	2309      	movs	r3, #9
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e020      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	4a21      	ldr	r2, [pc, #132]	@ (8009de4 <USB_SetTurnaroundTime+0x138>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d306      	bcc.n	8009d70 <USB_SetTurnaroundTime+0xc4>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4a20      	ldr	r2, [pc, #128]	@ (8009de8 <USB_SetTurnaroundTime+0x13c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d802      	bhi.n	8009d70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d6a:	2308      	movs	r3, #8
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	e015      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4a1d      	ldr	r2, [pc, #116]	@ (8009de8 <USB_SetTurnaroundTime+0x13c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d906      	bls.n	8009d86 <USB_SetTurnaroundTime+0xda>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009dec <USB_SetTurnaroundTime+0x140>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d202      	bcs.n	8009d86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d80:	2307      	movs	r3, #7
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e00a      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d86:	2306      	movs	r3, #6
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e007      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d92:	2309      	movs	r3, #9
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	e001      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d98:	2309      	movs	r3, #9
 8009d9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	029b      	lsls	r3, r3, #10
 8009db0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009db4:	431a      	orrs	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	371c      	adds	r7, #28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	00d8acbf 	.word	0x00d8acbf
 8009dcc:	00e4e1c0 	.word	0x00e4e1c0
 8009dd0:	00f42400 	.word	0x00f42400
 8009dd4:	01067380 	.word	0x01067380
 8009dd8:	011a499f 	.word	0x011a499f
 8009ddc:	01312cff 	.word	0x01312cff
 8009de0:	014ca43f 	.word	0x014ca43f
 8009de4:	016e3600 	.word	0x016e3600
 8009de8:	01a6ab1f 	.word	0x01a6ab1f
 8009dec:	01e84800 	.word	0x01e84800

08009df0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f043 0201 	orr.w	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f023 0201 	bic.w	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d115      	bne.n	8009e82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009e62:	200a      	movs	r0, #10
 8009e64:	f7fb fd76 	bl	8005954 <HAL_Delay>
      ms += 10U;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	330a      	adds	r3, #10
 8009e6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 f93f 	bl	800b0f2 <USB_GetMode>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d01e      	beq.n	8009eb8 <USB_SetCurrentMode+0x84>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009e7e:	d9f0      	bls.n	8009e62 <USB_SetCurrentMode+0x2e>
 8009e80:	e01a      	b.n	8009eb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e82:	78fb      	ldrb	r3, [r7, #3]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d115      	bne.n	8009eb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009e94:	200a      	movs	r0, #10
 8009e96:	f7fb fd5d 	bl	8005954 <HAL_Delay>
      ms += 10U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	330a      	adds	r3, #10
 8009e9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 f926 	bl	800b0f2 <USB_GetMode>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <USB_SetCurrentMode+0x84>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2bc7      	cmp	r3, #199	@ 0xc7
 8009eb0:	d9f0      	bls.n	8009e94 <USB_SetCurrentMode+0x60>
 8009eb2:	e001      	b.n	8009eb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e005      	b.n	8009ec4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2bc8      	cmp	r3, #200	@ 0xc8
 8009ebc:	d101      	bne.n	8009ec2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e000      	b.n	8009ec4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ecc:	b084      	sub	sp, #16
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
 8009eea:	e009      	b.n	8009f00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	3340      	adds	r3, #64	@ 0x40
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3301      	adds	r3, #1
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	2b0e      	cmp	r3, #14
 8009f04:	d9f2      	bls.n	8009eec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d11c      	bne.n	8009f48 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f1c:	f043 0302 	orr.w	r3, r3, #2
 8009f20:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f46:	e00b      	b.n	8009f60 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f58:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f66:	461a      	mov	r2, r3
 8009f68:	2300      	movs	r3, #0
 8009f6a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f6c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d10d      	bne.n	8009f90 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f968 	bl	800a254 <USB_SetDevSpeed>
 8009f84:	e008      	b.n	8009f98 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f86:	2101      	movs	r1, #1
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f963 	bl	800a254 <USB_SetDevSpeed>
 8009f8e:	e003      	b.n	8009f98 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f90:	2103      	movs	r1, #3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f95e 	bl	800a254 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f98:	2110      	movs	r1, #16
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f8fa 	bl	800a194 <USB_FlushTxFifo>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f924 	bl	800a1f8 <USB_FlushRxFifo>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fcc:	461a      	mov	r2, r3
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd8:	461a      	mov	r2, r3
 8009fda:	2300      	movs	r3, #0
 8009fdc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	e043      	b.n	800a06c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ffa:	d118      	bne.n	800a02e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a00e:	461a      	mov	r2, r3
 800a010:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	e013      	b.n	800a040 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a024:	461a      	mov	r2, r3
 800a026:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	e008      	b.n	800a040 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03a:	461a      	mov	r2, r3
 800a03c:	2300      	movs	r3, #0
 800a03e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a04c:	461a      	mov	r2, r3
 800a04e:	2300      	movs	r3, #0
 800a050:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05e:	461a      	mov	r2, r3
 800a060:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3301      	adds	r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a070:	461a      	mov	r2, r3
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	4293      	cmp	r3, r2
 800a076:	d3b5      	bcc.n	8009fe4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a078:	2300      	movs	r3, #0
 800a07a:	613b      	str	r3, [r7, #16]
 800a07c:	e043      	b.n	800a106 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a094:	d118      	bne.n	800a0c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	e013      	b.n	800a0da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e008      	b.n	800a0da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a0fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	3301      	adds	r3, #1
 800a104:	613b      	str	r3, [r7, #16]
 800a106:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a10a:	461a      	mov	r2, r3
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	4293      	cmp	r3, r2
 800a110:	d3b5      	bcc.n	800a07e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a124:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a132:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a134:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d105      	bne.n	800a148 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	f043 0210 	orr.w	r2, r3, #16
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	699a      	ldr	r2, [r3, #24]
 800a14c:	4b10      	ldr	r3, [pc, #64]	@ (800a190 <USB_DevInit+0x2c4>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a154:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	f043 0208 	orr.w	r2, r3, #8
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a168:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d107      	bne.n	800a180 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a178:	f043 0304 	orr.w	r3, r3, #4
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a18c:	b004      	add	sp, #16
 800a18e:	4770      	bx	lr
 800a190:	803c3800 	.word	0x803c3800

0800a194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1ae:	d901      	bls.n	800a1b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e01b      	b.n	800a1ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	daf2      	bge.n	800a1a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	019b      	lsls	r3, r3, #6
 800a1c4:	f043 0220 	orr.w	r2, r3, #32
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1d8:	d901      	bls.n	800a1de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e006      	b.n	800a1ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d0f0      	beq.n	800a1cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3301      	adds	r3, #1
 800a208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a210:	d901      	bls.n	800a216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e018      	b.n	800a248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	daf2      	bge.n	800a204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2210      	movs	r2, #16
 800a226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3301      	adds	r3, #1
 800a22c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a234:	d901      	bls.n	800a23a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e006      	b.n	800a248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0310 	and.w	r3, r3, #16
 800a242:	2b10      	cmp	r3, #16
 800a244:	d0f0      	beq.n	800a228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	68f9      	ldr	r1, [r7, #12]
 800a270:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a274:	4313      	orrs	r3, r2
 800a276:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a286:	b480      	push	{r7}
 800a288:	b087      	sub	sp, #28
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f003 0306 	and.w	r3, r3, #6
 800a29e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d102      	bne.n	800a2ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]
 800a2aa:	e00a      	b.n	800a2c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d002      	beq.n	800a2b8 <USB_GetDevSpeed+0x32>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b06      	cmp	r3, #6
 800a2b6:	d102      	bne.n	800a2be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	75fb      	strb	r3, [r7, #23]
 800a2bc:	e001      	b.n	800a2c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a2be:	230f      	movs	r3, #15
 800a2c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	371c      	adds	r7, #28
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	785b      	ldrb	r3, [r3, #1]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d13a      	bne.n	800a362 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2f2:	69da      	ldr	r2, [r3, #28]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f003 030f 	and.w	r3, r3, #15
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a302:	b29b      	uxth	r3, r3
 800a304:	68f9      	ldr	r1, [r7, #12]
 800a306:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a30a:	4313      	orrs	r3, r2
 800a30c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d155      	bne.n	800a3d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	791b      	ldrb	r3, [r3, #4]
 800a33e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a340:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	059b      	lsls	r3, r3, #22
 800a346:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a348:	4313      	orrs	r3, r2
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	440a      	add	r2, r1
 800a352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	e036      	b.n	800a3d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a368:	69da      	ldr	r2, [r3, #28]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 030f 	and.w	r3, r3, #15
 800a372:	2101      	movs	r1, #1
 800a374:	fa01 f303 	lsl.w	r3, r1, r3
 800a378:	041b      	lsls	r3, r3, #16
 800a37a:	68f9      	ldr	r1, [r7, #12]
 800a37c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a380:	4313      	orrs	r3, r2
 800a382:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d11a      	bne.n	800a3d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	791b      	ldrb	r3, [r3, #4]
 800a3b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3b6:	430b      	orrs	r3, r1
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	0151      	lsls	r1, r2, #5
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	440a      	add	r2, r1
 800a3c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	785b      	ldrb	r3, [r3, #1]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d161      	bne.n	800a4c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a40e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a412:	d11f      	bne.n	800a454 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	0151      	lsls	r1, r2, #5
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	440a      	add	r2, r1
 800a42a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a42e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a432:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	0151      	lsls	r1, r2, #5
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	440a      	add	r2, r1
 800a44a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a44e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a45a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	f003 030f 	and.w	r3, r3, #15
 800a464:	2101      	movs	r1, #1
 800a466:	fa01 f303 	lsl.w	r3, r1, r3
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	43db      	mvns	r3, r3
 800a46e:	68f9      	ldr	r1, [r7, #12]
 800a470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a474:	4013      	ands	r3, r2
 800a476:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a47e:	69da      	ldr	r2, [r3, #28]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	f003 030f 	and.w	r3, r3, #15
 800a488:	2101      	movs	r1, #1
 800a48a:	fa01 f303 	lsl.w	r3, r1, r3
 800a48e:	b29b      	uxth	r3, r3
 800a490:	43db      	mvns	r3, r3
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a498:	4013      	ands	r3, r2
 800a49a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	0159      	lsls	r1, r3, #5
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	440b      	add	r3, r1
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4b35      	ldr	r3, [pc, #212]	@ (800a590 <USB_DeactivateEndpoint+0x1b0>)
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	600b      	str	r3, [r1, #0]
 800a4be:	e060      	b.n	800a582 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4d6:	d11f      	bne.n	800a518 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	0151      	lsls	r1, r2, #5
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	440a      	add	r2, r1
 800a4ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	0151      	lsls	r1, r2, #5
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	440a      	add	r2, r1
 800a50e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a512:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a516:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a51e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	f003 030f 	and.w	r3, r3, #15
 800a528:	2101      	movs	r1, #1
 800a52a:	fa01 f303 	lsl.w	r3, r1, r3
 800a52e:	041b      	lsls	r3, r3, #16
 800a530:	43db      	mvns	r3, r3
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a538:	4013      	ands	r3, r2
 800a53a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a542:	69da      	ldr	r2, [r3, #28]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	f003 030f 	and.w	r3, r3, #15
 800a54c:	2101      	movs	r1, #1
 800a54e:	fa01 f303 	lsl.w	r3, r1, r3
 800a552:	041b      	lsls	r3, r3, #16
 800a554:	43db      	mvns	r3, r3
 800a556:	68f9      	ldr	r1, [r7, #12]
 800a558:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a55c:	4013      	ands	r3, r2
 800a55e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	0159      	lsls	r1, r3, #5
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	440b      	add	r3, r1
 800a576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57a:	4619      	mov	r1, r3
 800a57c:	4b05      	ldr	r3, [pc, #20]	@ (800a594 <USB_DeactivateEndpoint+0x1b4>)
 800a57e:	4013      	ands	r3, r2
 800a580:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	ec337800 	.word	0xec337800
 800a594:	eff37800 	.word	0xeff37800

0800a598 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08a      	sub	sp, #40	@ 0x28
 800a59c:	af02      	add	r7, sp, #8
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	f040 817f 	bne.w	800a8b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d132      	bne.n	800a628 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	0151      	lsls	r1, r2, #5
 800a5d4:	69fa      	ldr	r2, [r7, #28]
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a5e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a5e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	0151      	lsls	r1, r2, #5
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	440a      	add	r2, r1
 800a5fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	69ba      	ldr	r2, [r7, #24]
 800a616:	0151      	lsls	r1, r2, #5
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	440a      	add	r2, r1
 800a61c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a620:	0cdb      	lsrs	r3, r3, #19
 800a622:	04db      	lsls	r3, r3, #19
 800a624:	6113      	str	r3, [r2, #16]
 800a626:	e097      	b.n	800a758 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	0151      	lsls	r1, r2, #5
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	440a      	add	r2, r1
 800a63e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a642:	0cdb      	lsrs	r3, r3, #19
 800a644:	04db      	lsls	r3, r3, #19
 800a646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	69ba      	ldr	r2, [r7, #24]
 800a658:	0151      	lsls	r1, r2, #5
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	440a      	add	r2, r1
 800a65e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a662:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a666:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a66a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d11a      	bne.n	800a6a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	691a      	ldr	r2, [r3, #16]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d903      	bls.n	800a686 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	689a      	ldr	r2, [r3, #8]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	0151      	lsls	r1, r2, #5
 800a698:	69fa      	ldr	r2, [r7, #28]
 800a69a:	440a      	add	r2, r1
 800a69c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6a4:	6113      	str	r3, [r2, #16]
 800a6a6:	e044      	b.n	800a732 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	691a      	ldr	r2, [r3, #16]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	1e5a      	subs	r2, r3, #1
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6bc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ca:	691a      	ldr	r2, [r3, #16]
 800a6cc:	8afb      	ldrh	r3, [r7, #22]
 800a6ce:	04d9      	lsls	r1, r3, #19
 800a6d0:	4ba4      	ldr	r3, [pc, #656]	@ (800a964 <USB_EPStartXfer+0x3cc>)
 800a6d2:	400b      	ands	r3, r1
 800a6d4:	69b9      	ldr	r1, [r7, #24]
 800a6d6:	0148      	lsls	r0, r1, #5
 800a6d8:	69f9      	ldr	r1, [r7, #28]
 800a6da:	4401      	add	r1, r0
 800a6dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	791b      	ldrb	r3, [r3, #4]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d122      	bne.n	800a732 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	0151      	lsls	r1, r2, #5
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	440a      	add	r2, r1
 800a702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a706:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a70a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a718:	691a      	ldr	r2, [r3, #16]
 800a71a:	8afb      	ldrh	r3, [r7, #22]
 800a71c:	075b      	lsls	r3, r3, #29
 800a71e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a722:	69b9      	ldr	r1, [r7, #24]
 800a724:	0148      	lsls	r0, r1, #5
 800a726:	69f9      	ldr	r1, [r7, #28]
 800a728:	4401      	add	r1, r0
 800a72a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a72e:	4313      	orrs	r3, r2
 800a730:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a73e:	691a      	ldr	r2, [r3, #16]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a748:	69b9      	ldr	r1, [r7, #24]
 800a74a:	0148      	lsls	r0, r1, #5
 800a74c:	69f9      	ldr	r1, [r7, #28]
 800a74e:	4401      	add	r1, r0
 800a750:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a754:	4313      	orrs	r3, r2
 800a756:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d14b      	bne.n	800a7f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d009      	beq.n	800a77a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a772:	461a      	mov	r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	791b      	ldrb	r3, [r3, #4]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d128      	bne.n	800a7d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d110      	bne.n	800a7b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	69fa      	ldr	r2, [r7, #28]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	e00f      	b.n	800a7d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	0151      	lsls	r1, r2, #5
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	440a      	add	r2, r1
 800a7ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	69ba      	ldr	r2, [r7, #24]
 800a7e4:	0151      	lsls	r1, r2, #5
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	440a      	add	r2, r1
 800a7ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	e166      	b.n	800aac4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a810:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a814:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	791b      	ldrb	r3, [r3, #4]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d015      	beq.n	800a84a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 814e 	beq.w	800aac4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	2101      	movs	r1, #1
 800a83a:	fa01 f303 	lsl.w	r3, r1, r3
 800a83e:	69f9      	ldr	r1, [r7, #28]
 800a840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a844:	4313      	orrs	r3, r2
 800a846:	634b      	str	r3, [r1, #52]	@ 0x34
 800a848:	e13c      	b.n	800aac4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a856:	2b00      	cmp	r3, #0
 800a858:	d110      	bne.n	800a87c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a874:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	e00f      	b.n	800a89c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	0151      	lsls	r1, r2, #5
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	440a      	add	r2, r1
 800a892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a89a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	68d9      	ldr	r1, [r3, #12]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	b298      	uxth	r0, r3
 800a8aa:	79fb      	ldrb	r3, [r7, #7]
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 f9b9 	bl	800ac28 <USB_WritePacket>
 800a8b6:	e105      	b.n	800aac4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	0151      	lsls	r1, r2, #5
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	440a      	add	r2, r1
 800a8ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8d2:	0cdb      	lsrs	r3, r3, #19
 800a8d4:	04db      	lsls	r3, r3, #19
 800a8d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	0151      	lsls	r1, r2, #5
 800a8ea:	69fa      	ldr	r2, [r7, #28]
 800a8ec:	440a      	add	r2, r1
 800a8ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a8f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a8fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d132      	bne.n	800a968 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	689a      	ldr	r2, [r3, #8]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	015a      	lsls	r2, r3, #5
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	4413      	add	r3, r2
 800a922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a926:	691a      	ldr	r2, [r3, #16]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a930:	69b9      	ldr	r1, [r7, #24]
 800a932:	0148      	lsls	r0, r1, #5
 800a934:	69f9      	ldr	r1, [r7, #28]
 800a936:	4401      	add	r1, r0
 800a938:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a93c:	4313      	orrs	r3, r2
 800a93e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	0151      	lsls	r1, r2, #5
 800a952:	69fa      	ldr	r2, [r7, #28]
 800a954:	440a      	add	r2, r1
 800a956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a95a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a95e:	6113      	str	r3, [r2, #16]
 800a960:	e062      	b.n	800aa28 <USB_EPStartXfer+0x490>
 800a962:	bf00      	nop
 800a964:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d123      	bne.n	800a9b8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97c:	691a      	ldr	r2, [r3, #16]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a986:	69b9      	ldr	r1, [r7, #24]
 800a988:	0148      	lsls	r0, r1, #5
 800a98a:	69f9      	ldr	r1, [r7, #28]
 800a98c:	4401      	add	r1, r0
 800a98e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a992:	4313      	orrs	r3, r2
 800a994:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	0151      	lsls	r1, r2, #5
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	440a      	add	r2, r1
 800a9ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9b4:	6113      	str	r3, [r2, #16]
 800a9b6:	e037      	b.n	800aa28 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	1e5a      	subs	r2, r3, #1
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9cc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	8afa      	ldrh	r2, [r7, #22]
 800a9d4:	fb03 f202 	mul.w	r2, r3, r2
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	8afb      	ldrh	r3, [r7, #22]
 800a9ec:	04d9      	lsls	r1, r3, #19
 800a9ee:	4b38      	ldr	r3, [pc, #224]	@ (800aad0 <USB_EPStartXfer+0x538>)
 800a9f0:	400b      	ands	r3, r1
 800a9f2:	69b9      	ldr	r1, [r7, #24]
 800a9f4:	0148      	lsls	r0, r1, #5
 800a9f6:	69f9      	ldr	r1, [r7, #28]
 800a9f8:	4401      	add	r1, r0
 800a9fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa0e:	691a      	ldr	r2, [r3, #16]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa18:	69b9      	ldr	r1, [r7, #24]
 800aa1a:	0148      	lsls	r0, r1, #5
 800aa1c:	69f9      	ldr	r1, [r7, #28]
 800aa1e:	4401      	add	r1, r0
 800aa20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aa24:	4313      	orrs	r3, r2
 800aa26:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d10d      	bne.n	800aa4a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	68d9      	ldr	r1, [r3, #12]
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa46:	460a      	mov	r2, r1
 800aa48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	791b      	ldrb	r3, [r3, #4]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d128      	bne.n	800aaa4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d110      	bne.n	800aa84 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	0151      	lsls	r1, r2, #5
 800aa74:	69fa      	ldr	r2, [r7, #28]
 800aa76:	440a      	add	r2, r1
 800aa78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	e00f      	b.n	800aaa4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	0151      	lsls	r1, r2, #5
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	440a      	add	r2, r1
 800aa9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaa2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	0151      	lsls	r1, r2, #5
 800aab6:	69fa      	ldr	r2, [r7, #28]
 800aab8:	440a      	add	r2, r1
 800aaba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aabe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3720      	adds	r7, #32
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	1ff80000 	.word	0x1ff80000

0800aad4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	785b      	ldrb	r3, [r3, #1]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d14a      	bne.n	800ab88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab0a:	f040 8086 	bne.w	800ac1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	7812      	ldrb	r2, [r2, #0]
 800ab22:	0151      	lsls	r1, r2, #5
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	440a      	add	r2, r1
 800ab28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d902      	bls.n	800ab6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	75fb      	strb	r3, [r7, #23]
          break;
 800ab6a:	e056      	b.n	800ac1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab84:	d0e7      	beq.n	800ab56 <USB_EPStopXfer+0x82>
 800ab86:	e048      	b.n	800ac1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aba0:	d13b      	bne.n	800ac1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	7812      	ldrb	r2, [r2, #0]
 800abb6:	0151      	lsls	r1, r2, #5
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	440a      	add	r2, r1
 800abbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800abc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	7812      	ldrb	r2, [r2, #0]
 800abda:	0151      	lsls	r1, r2, #5
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	440a      	add	r2, r1
 800abe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800abe8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3301      	adds	r3, #1
 800abee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d902      	bls.n	800ac00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	75fb      	strb	r3, [r7, #23]
          break;
 800abfe:	e00c      	b.n	800ac1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac18:	d0e7      	beq.n	800abea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	371c      	adds	r7, #28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b089      	sub	sp, #36	@ 0x24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4611      	mov	r1, r2
 800ac34:	461a      	mov	r2, r3
 800ac36:	460b      	mov	r3, r1
 800ac38:	71fb      	strb	r3, [r7, #7]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ac46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d123      	bne.n	800ac96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac4e:	88bb      	ldrh	r3, [r7, #4]
 800ac50:	3303      	adds	r3, #3
 800ac52:	089b      	lsrs	r3, r3, #2
 800ac54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac56:	2300      	movs	r3, #0
 800ac58:	61bb      	str	r3, [r7, #24]
 800ac5a:	e018      	b.n	800ac8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	031a      	lsls	r2, r3, #12
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac68:	461a      	mov	r2, r3
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	3301      	adds	r3, #1
 800ac74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	3301      	adds	r3, #1
 800ac86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	61bb      	str	r3, [r7, #24]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d3e2      	bcc.n	800ac5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3724      	adds	r7, #36	@ 0x24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b08b      	sub	sp, #44	@ 0x2c
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800acba:	88fb      	ldrh	r3, [r7, #6]
 800acbc:	089b      	lsrs	r3, r3, #2
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800acc2:	88fb      	ldrh	r3, [r7, #6]
 800acc4:	f003 0303 	and.w	r3, r3, #3
 800acc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800acca:	2300      	movs	r3, #0
 800accc:	623b      	str	r3, [r7, #32]
 800acce:	e014      	b.n	800acfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	601a      	str	r2, [r3, #0]
    pDest++;
 800acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acde:	3301      	adds	r3, #1
 800ace0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	3301      	adds	r3, #1
 800ace6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acea:	3301      	adds	r3, #1
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	3301      	adds	r3, #1
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	3301      	adds	r3, #1
 800acf8:	623b      	str	r3, [r7, #32]
 800acfa:	6a3a      	ldr	r2, [r7, #32]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d3e6      	bcc.n	800acd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ad02:	8bfb      	ldrh	r3, [r7, #30]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01e      	beq.n	800ad46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad12:	461a      	mov	r2, r3
 800ad14:	f107 0310 	add.w	r3, r7, #16
 800ad18:	6812      	ldr	r2, [r2, #0]
 800ad1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	fa22 f303 	lsr.w	r3, r2, r3
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2c:	701a      	strb	r2, [r3, #0]
      i++;
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	3301      	adds	r3, #1
 800ad32:	623b      	str	r3, [r7, #32]
      pDest++;
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	3301      	adds	r3, #1
 800ad38:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ad3a:	8bfb      	ldrh	r3, [r7, #30]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ad40:	8bfb      	ldrh	r3, [r7, #30]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1ea      	bne.n	800ad1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	372c      	adds	r7, #44	@ 0x2c
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	785b      	ldrb	r3, [r3, #1]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d12c      	bne.n	800adca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	db12      	blt.n	800ada8 <USB_EPSetStall+0x54>
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00f      	beq.n	800ada8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ada2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ada6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	0151      	lsls	r1, r2, #5
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	440a      	add	r2, r1
 800adbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	e02b      	b.n	800ae22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	db12      	blt.n	800ae02 <USB_EPSetStall+0xae>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00f      	beq.n	800ae02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	0151      	lsls	r1, r2, #5
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	440a      	add	r2, r1
 800adf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ae00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	0151      	lsls	r1, r2, #5
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	440a      	add	r2, r1
 800ae18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ae20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d128      	bne.n	800ae9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	0151      	lsls	r1, r2, #5
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	440a      	add	r2, r1
 800ae62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ae6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	791b      	ldrb	r3, [r3, #4]
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d003      	beq.n	800ae7c <USB_EPClearStall+0x4c>
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	791b      	ldrb	r3, [r3, #4]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d138      	bne.n	800aeee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	0151      	lsls	r1, r2, #5
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	440a      	add	r2, r1
 800ae92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	e027      	b.n	800aeee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aebc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	791b      	ldrb	r3, [r3, #4]
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d003      	beq.n	800aece <USB_EPClearStall+0x9e>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	791b      	ldrb	r3, [r3, #4]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d10f      	bne.n	800aeee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	015a      	lsls	r2, r3, #5
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4413      	add	r3, r2
 800aed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	0151      	lsls	r1, r2, #5
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	440a      	add	r2, r1
 800aee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aeec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af1a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800af1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800af30:	68f9      	ldr	r1, [r7, #12]
 800af32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af36:	4313      	orrs	r3, r2
 800af38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af62:	f023 0303 	bic.w	r3, r3, #3
 800af66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af76:	f023 0302 	bic.w	r3, r3, #2
 800af7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b085      	sub	sp, #20
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800afa4:	f023 0303 	bic.w	r3, r3, #3
 800afa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afb8:	f043 0302 	orr.w	r3, r3, #2
 800afbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	695b      	ldr	r3, [r3, #20]
 800afd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4013      	ands	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800afe4:	68fb      	ldr	r3, [r7, #12]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b085      	sub	sp, #20
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	4013      	ands	r3, r2
 800b014:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	0c1b      	lsrs	r3, r3, #16
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b026:	b480      	push	{r7}
 800b028:	b085      	sub	sp, #20
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	4013      	ands	r3, r2
 800b048:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	b29b      	uxth	r3, r3
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	460b      	mov	r3, r1
 800b064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	015a      	lsls	r2, r3, #5
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4413      	add	r3, r2
 800b072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	4013      	ands	r3, r2
 800b086:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b088:	68bb      	ldr	r3, [r7, #8]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b096:	b480      	push	{r7}
 800b098:	b087      	sub	sp, #28
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b0ba:	78fb      	ldrb	r3, [r7, #3]
 800b0bc:	f003 030f 	and.w	r3, r3, #15
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c6:	01db      	lsls	r3, r3, #7
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0e4:	68bb      	ldr	r3, [r7, #8]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
}
 800b102:	4618      	mov	r0, r3
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b10e:	b480      	push	{r7}
 800b110:	b085      	sub	sp, #20
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b128:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b12c:	f023 0307 	bic.w	r3, r3, #7
 800b130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	460b      	mov	r3, r1
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	333c      	adds	r3, #60	@ 0x3c
 800b16a:	3304      	adds	r3, #4
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	4a26      	ldr	r2, [pc, #152]	@ (800b20c <USB_EP0_OutStart+0xb8>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d90a      	bls.n	800b18e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b188:	d101      	bne.n	800b18e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e037      	b.n	800b1fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b194:	461a      	mov	r2, r3
 800b196:	2300      	movs	r3, #0
 800b198:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b1ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1bc:	f043 0318 	orr.w	r3, r3, #24
 800b1c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1d0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b1d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b1d6:	7afb      	ldrb	r3, [r7, #11]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d10f      	bne.n	800b1fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1f6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b1fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	371c      	adds	r7, #28
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	4f54300a 	.word	0x4f54300a

0800b210 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3301      	adds	r3, #1
 800b220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b228:	d901      	bls.n	800b22e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e01b      	b.n	800b266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	daf2      	bge.n	800b21c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f043 0201 	orr.w	r2, r3, #1
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3301      	adds	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b252:	d901      	bls.n	800b258 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e006      	b.n	800b266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b01      	cmp	r3, #1
 800b262:	d0f0      	beq.n	800b246 <USB_CoreReset+0x36>

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
	...

0800b274 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b280:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b284:	f005 fc48 	bl	8010b18 <USBD_static_malloc>
 800b288:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d109      	bne.n	800b2a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	32b0      	adds	r2, #176	@ 0xb0
 800b29a:	2100      	movs	r1, #0
 800b29c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e0d4      	b.n	800b44e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b2a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f005 fd56 	bl	8010d5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ba:	68f9      	ldr	r1, [r7, #12]
 800b2bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	7c1b      	ldrb	r3, [r3, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d138      	bne.n	800b34e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b2dc:	4b5e      	ldr	r3, [pc, #376]	@ (800b458 <USBD_CDC_Init+0x1e4>)
 800b2de:	7819      	ldrb	r1, [r3, #0]
 800b2e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f005 faf3 	bl	80108d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b2ec:	4b5a      	ldr	r3, [pc, #360]	@ (800b458 <USBD_CDC_Init+0x1e4>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	f003 020f 	and.w	r2, r3, #15
 800b2f4:	6879      	ldr	r1, [r7, #4]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	440b      	add	r3, r1
 800b300:	3324      	adds	r3, #36	@ 0x24
 800b302:	2201      	movs	r2, #1
 800b304:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b306:	4b55      	ldr	r3, [pc, #340]	@ (800b45c <USBD_CDC_Init+0x1e8>)
 800b308:	7819      	ldrb	r1, [r3, #0]
 800b30a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b30e:	2202      	movs	r2, #2
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f005 fade 	bl	80108d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b316:	4b51      	ldr	r3, [pc, #324]	@ (800b45c <USBD_CDC_Init+0x1e8>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	f003 020f 	and.w	r2, r3, #15
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	440b      	add	r3, r1
 800b32a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b32e:	2201      	movs	r2, #1
 800b330:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b332:	4b4b      	ldr	r3, [pc, #300]	@ (800b460 <USBD_CDC_Init+0x1ec>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	f003 020f 	and.w	r2, r3, #15
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	3326      	adds	r3, #38	@ 0x26
 800b348:	2210      	movs	r2, #16
 800b34a:	801a      	strh	r2, [r3, #0]
 800b34c:	e035      	b.n	800b3ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b34e:	4b42      	ldr	r3, [pc, #264]	@ (800b458 <USBD_CDC_Init+0x1e4>)
 800b350:	7819      	ldrb	r1, [r3, #0]
 800b352:	2340      	movs	r3, #64	@ 0x40
 800b354:	2202      	movs	r2, #2
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f005 fabb 	bl	80108d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b35c:	4b3e      	ldr	r3, [pc, #248]	@ (800b458 <USBD_CDC_Init+0x1e4>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f003 020f 	and.w	r2, r3, #15
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	440b      	add	r3, r1
 800b370:	3324      	adds	r3, #36	@ 0x24
 800b372:	2201      	movs	r2, #1
 800b374:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b376:	4b39      	ldr	r3, [pc, #228]	@ (800b45c <USBD_CDC_Init+0x1e8>)
 800b378:	7819      	ldrb	r1, [r3, #0]
 800b37a:	2340      	movs	r3, #64	@ 0x40
 800b37c:	2202      	movs	r2, #2
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f005 faa7 	bl	80108d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b384:	4b35      	ldr	r3, [pc, #212]	@ (800b45c <USBD_CDC_Init+0x1e8>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	f003 020f 	and.w	r2, r3, #15
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	440b      	add	r3, r1
 800b398:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b39c:	2201      	movs	r2, #1
 800b39e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b3a0:	4b2f      	ldr	r3, [pc, #188]	@ (800b460 <USBD_CDC_Init+0x1ec>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	f003 020f 	and.w	r2, r3, #15
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	440b      	add	r3, r1
 800b3b4:	3326      	adds	r3, #38	@ 0x26
 800b3b6:	2210      	movs	r2, #16
 800b3b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b3ba:	4b29      	ldr	r3, [pc, #164]	@ (800b460 <USBD_CDC_Init+0x1ec>)
 800b3bc:	7819      	ldrb	r1, [r3, #0]
 800b3be:	2308      	movs	r3, #8
 800b3c0:	2203      	movs	r2, #3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f005 fa85 	bl	80108d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b3c8:	4b25      	ldr	r3, [pc, #148]	@ (800b460 <USBD_CDC_Init+0x1ec>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 020f 	and.w	r2, r3, #15
 800b3d0:	6879      	ldr	r1, [r7, #4]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	440b      	add	r3, r1
 800b3dc:	3324      	adds	r3, #36	@ 0x24
 800b3de:	2201      	movs	r2, #1
 800b3e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	33b0      	adds	r3, #176	@ 0xb0
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b418:	2302      	movs	r3, #2
 800b41a:	e018      	b.n	800b44e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	7c1b      	ldrb	r3, [r3, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10a      	bne.n	800b43a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b424:	4b0d      	ldr	r3, [pc, #52]	@ (800b45c <USBD_CDC_Init+0x1e8>)
 800b426:	7819      	ldrb	r1, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b42e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f005 fb3c 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800b438:	e008      	b.n	800b44c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b43a:	4b08      	ldr	r3, [pc, #32]	@ (800b45c <USBD_CDC_Init+0x1e8>)
 800b43c:	7819      	ldrb	r1, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b444:	2340      	movs	r3, #64	@ 0x40
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f005 fb32 	bl	8010ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20000093 	.word	0x20000093
 800b45c:	20000094 	.word	0x20000094
 800b460:	20000095 	.word	0x20000095

0800b464 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b470:	4b3a      	ldr	r3, [pc, #232]	@ (800b55c <USBD_CDC_DeInit+0xf8>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f005 fa51 	bl	801091e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b47c:	4b37      	ldr	r3, [pc, #220]	@ (800b55c <USBD_CDC_DeInit+0xf8>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 020f 	and.w	r2, r3, #15
 800b484:	6879      	ldr	r1, [r7, #4]
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	440b      	add	r3, r1
 800b490:	3324      	adds	r3, #36	@ 0x24
 800b492:	2200      	movs	r2, #0
 800b494:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b496:	4b32      	ldr	r3, [pc, #200]	@ (800b560 <USBD_CDC_DeInit+0xfc>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f005 fa3e 	bl	801091e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b4a2:	4b2f      	ldr	r3, [pc, #188]	@ (800b560 <USBD_CDC_DeInit+0xfc>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	f003 020f 	and.w	r2, r3, #15
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b4be:	4b29      	ldr	r3, [pc, #164]	@ (800b564 <USBD_CDC_DeInit+0x100>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f005 fa2a 	bl	801091e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b4ca:	4b26      	ldr	r3, [pc, #152]	@ (800b564 <USBD_CDC_DeInit+0x100>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	f003 020f 	and.w	r2, r3, #15
 800b4d2:	6879      	ldr	r1, [r7, #4]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	440b      	add	r3, r1
 800b4de:	3324      	adds	r3, #36	@ 0x24
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b4e4:	4b1f      	ldr	r3, [pc, #124]	@ (800b564 <USBD_CDC_DeInit+0x100>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f003 020f 	and.w	r2, r3, #15
 800b4ec:	6879      	ldr	r1, [r7, #4]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	440b      	add	r3, r1
 800b4f8:	3326      	adds	r3, #38	@ 0x26
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	32b0      	adds	r2, #176	@ 0xb0
 800b508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01f      	beq.n	800b550 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	33b0      	adds	r3, #176	@ 0xb0
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	32b0      	adds	r2, #176	@ 0xb0
 800b52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b532:	4618      	mov	r0, r3
 800b534:	f005 fafe 	bl	8010b34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	32b0      	adds	r2, #176	@ 0xb0
 800b542:	2100      	movs	r1, #0
 800b544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	20000093 	.word	0x20000093
 800b560:	20000094 	.word	0x20000094
 800b564:	20000095 	.word	0x20000095

0800b568 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	32b0      	adds	r2, #176	@ 0xb0
 800b57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b580:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b594:	2303      	movs	r3, #3
 800b596:	e0bf      	b.n	800b718 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d050      	beq.n	800b646 <USBD_CDC_Setup+0xde>
 800b5a4:	2b20      	cmp	r3, #32
 800b5a6:	f040 80af 	bne.w	800b708 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	88db      	ldrh	r3, [r3, #6]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d03a      	beq.n	800b628 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	b25b      	sxtb	r3, r3
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	da1b      	bge.n	800b5f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	33b0      	adds	r3, #176	@ 0xb0
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b5d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	88d2      	ldrh	r2, [r2, #6]
 800b5d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	88db      	ldrh	r3, [r3, #6]
 800b5de:	2b07      	cmp	r3, #7
 800b5e0:	bf28      	it	cs
 800b5e2:	2307      	movcs	r3, #7
 800b5e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	89fa      	ldrh	r2, [r7, #14]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 fd93 	bl	800d118 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b5f2:	e090      	b.n	800b716 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	785a      	ldrb	r2, [r3, #1]
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	88db      	ldrh	r3, [r3, #6]
 800b602:	2b3f      	cmp	r3, #63	@ 0x3f
 800b604:	d803      	bhi.n	800b60e <USBD_CDC_Setup+0xa6>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	88db      	ldrh	r3, [r3, #6]
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	e000      	b.n	800b610 <USBD_CDC_Setup+0xa8>
 800b60e:	2240      	movs	r2, #64	@ 0x40
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b616:	6939      	ldr	r1, [r7, #16]
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b61e:	461a      	mov	r2, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f001 fda5 	bl	800d170 <USBD_CtlPrepareRx>
      break;
 800b626:	e076      	b.n	800b716 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	33b0      	adds	r3, #176	@ 0xb0
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	7850      	ldrb	r0, [r2, #1]
 800b63e:	2200      	movs	r2, #0
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	4798      	blx	r3
      break;
 800b644:	e067      	b.n	800b716 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	785b      	ldrb	r3, [r3, #1]
 800b64a:	2b0b      	cmp	r3, #11
 800b64c:	d851      	bhi.n	800b6f2 <USBD_CDC_Setup+0x18a>
 800b64e:	a201      	add	r2, pc, #4	@ (adr r2, 800b654 <USBD_CDC_Setup+0xec>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b685 	.word	0x0800b685
 800b658:	0800b701 	.word	0x0800b701
 800b65c:	0800b6f3 	.word	0x0800b6f3
 800b660:	0800b6f3 	.word	0x0800b6f3
 800b664:	0800b6f3 	.word	0x0800b6f3
 800b668:	0800b6f3 	.word	0x0800b6f3
 800b66c:	0800b6f3 	.word	0x0800b6f3
 800b670:	0800b6f3 	.word	0x0800b6f3
 800b674:	0800b6f3 	.word	0x0800b6f3
 800b678:	0800b6f3 	.word	0x0800b6f3
 800b67c:	0800b6af 	.word	0x0800b6af
 800b680:	0800b6d9 	.word	0x0800b6d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d107      	bne.n	800b6a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b690:	f107 030a 	add.w	r3, r7, #10
 800b694:	2202      	movs	r2, #2
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f001 fd3d 	bl	800d118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b69e:	e032      	b.n	800b706 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 fcbb 	bl	800d01e <USBD_CtlError>
            ret = USBD_FAIL;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	75fb      	strb	r3, [r7, #23]
          break;
 800b6ac:	e02b      	b.n	800b706 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d107      	bne.n	800b6ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b6ba:	f107 030d 	add.w	r3, r7, #13
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 fd28 	bl	800d118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6c8:	e01d      	b.n	800b706 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 fca6 	bl	800d01e <USBD_CtlError>
            ret = USBD_FAIL;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800b6d6:	e016      	b.n	800b706 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d00f      	beq.n	800b704 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 fc99 	bl	800d01e <USBD_CtlError>
            ret = USBD_FAIL;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b6f0:	e008      	b.n	800b704 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f001 fc92 	bl	800d01e <USBD_CtlError>
          ret = USBD_FAIL;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	75fb      	strb	r3, [r7, #23]
          break;
 800b6fe:	e002      	b.n	800b706 <USBD_CDC_Setup+0x19e>
          break;
 800b700:	bf00      	nop
 800b702:	e008      	b.n	800b716 <USBD_CDC_Setup+0x1ae>
          break;
 800b704:	bf00      	nop
      }
      break;
 800b706:	e006      	b.n	800b716 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 fc87 	bl	800d01e <USBD_CtlError>
      ret = USBD_FAIL;
 800b710:	2303      	movs	r3, #3
 800b712:	75fb      	strb	r3, [r7, #23]
      break;
 800b714:	bf00      	nop
  }

  return (uint8_t)ret;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	460b      	mov	r3, r1
 800b72a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b732:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	32b0      	adds	r2, #176	@ 0xb0
 800b73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b746:	2303      	movs	r3, #3
 800b748:	e065      	b.n	800b816 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	32b0      	adds	r2, #176	@ 0xb0
 800b754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b758:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	f003 020f 	and.w	r2, r3, #15
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	4613      	mov	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	440b      	add	r3, r1
 800b76c:	3318      	adds	r3, #24
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d02f      	beq.n	800b7d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b774:	78fb      	ldrb	r3, [r7, #3]
 800b776:	f003 020f 	and.w	r2, r3, #15
 800b77a:	6879      	ldr	r1, [r7, #4]
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	440b      	add	r3, r1
 800b786:	3318      	adds	r3, #24
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	f003 010f 	and.w	r1, r3, #15
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	460b      	mov	r3, r1
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	440b      	add	r3, r1
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4403      	add	r3, r0
 800b79c:	331c      	adds	r3, #28
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b7a4:	fb01 f303 	mul.w	r3, r1, r3
 800b7a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d112      	bne.n	800b7d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b7ae:	78fb      	ldrb	r3, [r7, #3]
 800b7b0:	f003 020f 	and.w	r2, r3, #15
 800b7b4:	6879      	ldr	r1, [r7, #4]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4413      	add	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	440b      	add	r3, r1
 800b7c0:	3318      	adds	r3, #24
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b7c6:	78f9      	ldrb	r1, [r7, #3]
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f005 f94e 	bl	8010a6e <USBD_LL_Transmit>
 800b7d2:	e01f      	b.n	800b814 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	33b0      	adds	r3, #176	@ 0xb0
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d010      	beq.n	800b814 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	33b0      	adds	r3, #176	@ 0xb0
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b810:	78fa      	ldrb	r2, [r7, #3]
 800b812:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	460b      	mov	r3, r1
 800b828:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	32b0      	adds	r2, #176	@ 0xb0
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	32b0      	adds	r2, #176	@ 0xb0
 800b844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e01a      	b.n	800b886 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b850:	78fb      	ldrb	r3, [r7, #3]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f005 f94c 	bl	8010af2 <USBD_LL_GetRxDataSize>
 800b85a:	4602      	mov	r2, r0
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	33b0      	adds	r3, #176	@ 0xb0
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b880:	4611      	mov	r1, r2
 800b882:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b084      	sub	sp, #16
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	32b0      	adds	r2, #176	@ 0xb0
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e024      	b.n	800b8fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	33b0      	adds	r3, #176	@ 0xb0
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d019      	beq.n	800b8f8 <USBD_CDC_EP0_RxReady+0x6a>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b8ca:	2bff      	cmp	r3, #255	@ 0xff
 800b8cc:	d014      	beq.n	800b8f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	33b0      	adds	r3, #176	@ 0xb0
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b8e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b8ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	22ff      	movs	r2, #255	@ 0xff
 800b8f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
	...

0800b904 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b90c:	2182      	movs	r1, #130	@ 0x82
 800b90e:	4818      	ldr	r0, [pc, #96]	@ (800b970 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b910:	f000 fd4f 	bl	800c3b2 <USBD_GetEpDesc>
 800b914:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b916:	2101      	movs	r1, #1
 800b918:	4815      	ldr	r0, [pc, #84]	@ (800b970 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b91a:	f000 fd4a 	bl	800c3b2 <USBD_GetEpDesc>
 800b91e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b920:	2181      	movs	r1, #129	@ 0x81
 800b922:	4813      	ldr	r0, [pc, #76]	@ (800b970 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b924:	f000 fd45 	bl	800c3b2 <USBD_GetEpDesc>
 800b928:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2210      	movs	r2, #16
 800b934:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d006      	beq.n	800b94a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2200      	movs	r2, #0
 800b940:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b944:	711a      	strb	r2, [r3, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d006      	beq.n	800b95e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b958:	711a      	strb	r2, [r3, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2243      	movs	r2, #67	@ 0x43
 800b962:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b964:	4b02      	ldr	r3, [pc, #8]	@ (800b970 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000050 	.word	0x20000050

0800b974 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b97c:	2182      	movs	r1, #130	@ 0x82
 800b97e:	4818      	ldr	r0, [pc, #96]	@ (800b9e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b980:	f000 fd17 	bl	800c3b2 <USBD_GetEpDesc>
 800b984:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b986:	2101      	movs	r1, #1
 800b988:	4815      	ldr	r0, [pc, #84]	@ (800b9e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b98a:	f000 fd12 	bl	800c3b2 <USBD_GetEpDesc>
 800b98e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b990:	2181      	movs	r1, #129	@ 0x81
 800b992:	4813      	ldr	r0, [pc, #76]	@ (800b9e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b994:	f000 fd0d 	bl	800c3b2 <USBD_GetEpDesc>
 800b998:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2210      	movs	r2, #16
 800b9a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d006      	beq.n	800b9ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	711a      	strb	r2, [r3, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f042 0202 	orr.w	r2, r2, #2
 800b9b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d006      	beq.n	800b9ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	711a      	strb	r2, [r3, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f042 0202 	orr.w	r2, r2, #2
 800b9cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2243      	movs	r2, #67	@ 0x43
 800b9d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9d4:	4b02      	ldr	r3, [pc, #8]	@ (800b9e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000050 	.word	0x20000050

0800b9e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9ec:	2182      	movs	r1, #130	@ 0x82
 800b9ee:	4818      	ldr	r0, [pc, #96]	@ (800ba50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9f0:	f000 fcdf 	bl	800c3b2 <USBD_GetEpDesc>
 800b9f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	4815      	ldr	r0, [pc, #84]	@ (800ba50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9fa:	f000 fcda 	bl	800c3b2 <USBD_GetEpDesc>
 800b9fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba00:	2181      	movs	r1, #129	@ 0x81
 800ba02:	4813      	ldr	r0, [pc, #76]	@ (800ba50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba04:	f000 fcd5 	bl	800c3b2 <USBD_GetEpDesc>
 800ba08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2210      	movs	r2, #16
 800ba14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba24:	711a      	strb	r2, [r3, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba38:	711a      	strb	r2, [r3, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2243      	movs	r2, #67	@ 0x43
 800ba42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba44:	4b02      	ldr	r3, [pc, #8]	@ (800ba50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000050 	.word	0x20000050

0800ba54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	220a      	movs	r2, #10
 800ba60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ba62:	4b03      	ldr	r3, [pc, #12]	@ (800ba70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	2000000c 	.word	0x2000000c

0800ba74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e009      	b.n	800ba9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	33b0      	adds	r3, #176	@ 0xb0
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b087      	sub	sp, #28
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	32b0      	adds	r2, #176	@ 0xb0
 800babe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800baca:	2303      	movs	r3, #3
 800bacc:	e008      	b.n	800bae0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	371c      	adds	r7, #28
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	32b0      	adds	r2, #176	@ 0xb0
 800bb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e004      	b.n	800bb1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3714      	adds	r7, #20
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
	...

0800bb28 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	32b0      	adds	r2, #176	@ 0xb0
 800bb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bb40:	2301      	movs	r3, #1
 800bb42:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb4a:	2303      	movs	r3, #3
 800bb4c:	e025      	b.n	800bb9a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d11f      	bne.n	800bb98 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bb60:	4b10      	ldr	r3, [pc, #64]	@ (800bba4 <USBD_CDC_TransmitPacket+0x7c>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	f003 020f 	and.w	r2, r3, #15
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4613      	mov	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4403      	add	r3, r0
 800bb7a:	3318      	adds	r3, #24
 800bb7c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bb7e:	4b09      	ldr	r3, [pc, #36]	@ (800bba4 <USBD_CDC_TransmitPacket+0x7c>)
 800bb80:	7819      	ldrb	r1, [r3, #0]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f004 ff6d 	bl	8010a6e <USBD_LL_Transmit>

    ret = USBD_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20000093 	.word	0x20000093

0800bba8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	32b0      	adds	r2, #176	@ 0xb0
 800bbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	32b0      	adds	r2, #176	@ 0xb0
 800bbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	e018      	b.n	800bc08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	7c1b      	ldrb	r3, [r3, #16]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10a      	bne.n	800bbf4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bbde:	4b0c      	ldr	r3, [pc, #48]	@ (800bc10 <USBD_CDC_ReceivePacket+0x68>)
 800bbe0:	7819      	ldrb	r1, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bbe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f004 ff5f 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800bbf2:	e008      	b.n	800bc06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bbf4:	4b06      	ldr	r3, [pc, #24]	@ (800bc10 <USBD_CDC_ReceivePacket+0x68>)
 800bbf6:	7819      	ldrb	r1, [r3, #0]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bbfe:	2340      	movs	r3, #64	@ 0x40
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f004 ff55 	bl	8010ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000094 	.word	0x20000094

0800bc14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e01f      	b.n	800bc6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	79fa      	ldrb	r2, [r7, #7]
 800bc5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f004 fdcf 	bl	8010804 <USBD_LL_Init>
 800bc66:	4603      	mov	r3, r0
 800bc68:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e025      	b.n	800bcd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	32ae      	adds	r2, #174	@ 0xae
 800bc9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00f      	beq.n	800bcc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	32ae      	adds	r2, #174	@ 0xae
 800bcb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb8:	f107 020e 	add.w	r2, r7, #14
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f004 fdd7 	bl	801089c <USBD_LL_Start>
 800bcee:	4603      	mov	r3, r0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d009      	beq.n	800bd3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	78fa      	ldrb	r2, [r7, #3]
 800bd32:	4611      	mov	r1, r2
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	4798      	blx	r3
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	78fa      	ldrb	r2, [r7, #3]
 800bd60:	4611      	mov	r1, r2
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	4798      	blx	r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f001 f90c 	bl	800cfaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bda0:	461a      	mov	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bdae:	f003 031f 	and.w	r3, r3, #31
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d01a      	beq.n	800bdec <USBD_LL_SetupStage+0x72>
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d822      	bhi.n	800be00 <USBD_LL_SetupStage+0x86>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <USBD_LL_SetupStage+0x4a>
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d00a      	beq.n	800bdd8 <USBD_LL_SetupStage+0x5e>
 800bdc2:	e01d      	b.n	800be00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fb63 	bl	800c498 <USBD_StdDevReq>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd6:	e020      	b.n	800be1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fbcb 	bl	800c57c <USBD_StdItfReq>
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]
      break;
 800bdea:	e016      	b.n	800be1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fc2d 	bl	800c654 <USBD_StdEPReq>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73fb      	strb	r3, [r7, #15]
      break;
 800bdfe:	e00c      	b.n	800be1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f004 fda4 	bl	801095c <USBD_LL_StallEP>
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]
      break;
 800be18:	bf00      	nop
  }

  return ret;
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	460b      	mov	r3, r1
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800be36:	7afb      	ldrb	r3, [r7, #11]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d16e      	bne.n	800bf1a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800be42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be4a:	2b03      	cmp	r3, #3
 800be4c:	f040 8098 	bne.w	800bf80 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	689a      	ldr	r2, [r3, #8]
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d913      	bls.n	800be84 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	689a      	ldr	r2, [r3, #8]
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	1ad2      	subs	r2, r2, r3
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	4293      	cmp	r3, r2
 800be74:	bf28      	it	cs
 800be76:	4613      	movcs	r3, r2
 800be78:	461a      	mov	r2, r3
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f001 f994 	bl	800d1aa <USBD_CtlContinueRx>
 800be82:	e07d      	b.n	800bf80 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be8a:	f003 031f 	and.w	r3, r3, #31
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d014      	beq.n	800bebc <USBD_LL_DataOutStage+0x98>
 800be92:	2b02      	cmp	r3, #2
 800be94:	d81d      	bhi.n	800bed2 <USBD_LL_DataOutStage+0xae>
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <USBD_LL_DataOutStage+0x7c>
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d003      	beq.n	800bea6 <USBD_LL_DataOutStage+0x82>
 800be9e:	e018      	b.n	800bed2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	75bb      	strb	r3, [r7, #22]
            break;
 800bea4:	e018      	b.n	800bed8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800beac:	b2db      	uxtb	r3, r3
 800beae:	4619      	mov	r1, r3
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f000 fa64 	bl	800c37e <USBD_CoreFindIF>
 800beb6:	4603      	mov	r3, r0
 800beb8:	75bb      	strb	r3, [r7, #22]
            break;
 800beba:	e00d      	b.n	800bed8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	4619      	mov	r1, r3
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 fa66 	bl	800c398 <USBD_CoreFindEP>
 800becc:	4603      	mov	r3, r0
 800bece:	75bb      	strb	r3, [r7, #22]
            break;
 800bed0:	e002      	b.n	800bed8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	75bb      	strb	r3, [r7, #22]
            break;
 800bed6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bed8:	7dbb      	ldrb	r3, [r7, #22]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d119      	bne.n	800bf12 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d113      	bne.n	800bf12 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800beea:	7dba      	ldrb	r2, [r7, #22]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	32ae      	adds	r2, #174	@ 0xae
 800bef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00b      	beq.n	800bf12 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800befa:	7dba      	ldrb	r2, [r7, #22]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bf02:	7dba      	ldrb	r2, [r7, #22]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	32ae      	adds	r2, #174	@ 0xae
 800bf08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f001 f95a 	bl	800d1cc <USBD_CtlSendStatus>
 800bf18:	e032      	b.n	800bf80 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bf1a:	7afb      	ldrb	r3, [r7, #11]
 800bf1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	4619      	mov	r1, r3
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 fa37 	bl	800c398 <USBD_CoreFindEP>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf2e:	7dbb      	ldrb	r3, [r7, #22]
 800bf30:	2bff      	cmp	r3, #255	@ 0xff
 800bf32:	d025      	beq.n	800bf80 <USBD_LL_DataOutStage+0x15c>
 800bf34:	7dbb      	ldrb	r3, [r7, #22]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d122      	bne.n	800bf80 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d117      	bne.n	800bf76 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bf46:	7dba      	ldrb	r2, [r7, #22]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	32ae      	adds	r2, #174	@ 0xae
 800bf4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00f      	beq.n	800bf76 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bf56:	7dba      	ldrb	r2, [r7, #22]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bf5e:	7dba      	ldrb	r2, [r7, #22]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	32ae      	adds	r2, #174	@ 0xae
 800bf64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	7afa      	ldrb	r2, [r7, #11]
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	4798      	blx	r3
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d001      	beq.n	800bf80 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	e000      	b.n	800bf82 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b086      	sub	sp, #24
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	460b      	mov	r3, r1
 800bf94:	607a      	str	r2, [r7, #4]
 800bf96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bf98:	7afb      	ldrb	r3, [r7, #11]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d16f      	bne.n	800c07e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3314      	adds	r3, #20
 800bfa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d15a      	bne.n	800c064 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d914      	bls.n	800bfe4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	1ad2      	subs	r2, r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f001 f8bc 	bl	800d14e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2100      	movs	r1, #0
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f004 fd67 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800bfe2:	e03f      	b.n	800c064 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	68da      	ldr	r2, [r3, #12]
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d11c      	bne.n	800c02a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d316      	bcc.n	800c02a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c006:	429a      	cmp	r2, r3
 800c008:	d20f      	bcs.n	800c02a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c00a:	2200      	movs	r2, #0
 800c00c:	2100      	movs	r1, #0
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f001 f89d 	bl	800d14e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c01c:	2300      	movs	r3, #0
 800c01e:	2200      	movs	r2, #0
 800c020:	2100      	movs	r1, #0
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f004 fd44 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800c028:	e01c      	b.n	800c064 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b03      	cmp	r3, #3
 800c034:	d10f      	bne.n	800c056 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c056:	2180      	movs	r1, #128	@ 0x80
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f004 fc7f 	bl	801095c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f001 f8c7 	bl	800d1f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d03a      	beq.n	800c0e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff fe42 	bl	800bcf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c07c:	e032      	b.n	800c0e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c07e:	7afb      	ldrb	r3, [r7, #11]
 800c080:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c084:	b2db      	uxtb	r3, r3
 800c086:	4619      	mov	r1, r3
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 f985 	bl	800c398 <USBD_CoreFindEP>
 800c08e:	4603      	mov	r3, r0
 800c090:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c092:	7dfb      	ldrb	r3, [r7, #23]
 800c094:	2bff      	cmp	r3, #255	@ 0xff
 800c096:	d025      	beq.n	800c0e4 <USBD_LL_DataInStage+0x15a>
 800c098:	7dfb      	ldrb	r3, [r7, #23]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d122      	bne.n	800c0e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d11c      	bne.n	800c0e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c0aa:	7dfa      	ldrb	r2, [r7, #23]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	32ae      	adds	r2, #174	@ 0xae
 800c0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b4:	695b      	ldr	r3, [r3, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d014      	beq.n	800c0e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c0ba:	7dfa      	ldrb	r2, [r7, #23]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c0c2:	7dfa      	ldrb	r2, [r7, #23]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	32ae      	adds	r2, #174	@ 0xae
 800c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	7afa      	ldrb	r2, [r7, #11]
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	4798      	blx	r3
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c0da:	7dbb      	ldrb	r3, [r7, #22]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c0e0:	7dbb      	ldrb	r3, [r7, #22]
 800c0e2:	e000      	b.n	800c0e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c126:	2b00      	cmp	r3, #0
 800c128:	d014      	beq.n	800c154 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00e      	beq.n	800c154 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	6852      	ldr	r2, [r2, #4]
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	4611      	mov	r1, r2
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	4798      	blx	r3
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c150:	2303      	movs	r3, #3
 800c152:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c154:	2340      	movs	r3, #64	@ 0x40
 800c156:	2200      	movs	r2, #0
 800c158:	2100      	movs	r1, #0
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f004 fbb9 	bl	80108d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2240      	movs	r2, #64	@ 0x40
 800c16c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c170:	2340      	movs	r3, #64	@ 0x40
 800c172:	2200      	movs	r2, #0
 800c174:	2180      	movs	r1, #128	@ 0x80
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f004 fbab 	bl	80108d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2240      	movs	r2, #64	@ 0x40
 800c186:	621a      	str	r2, [r3, #32]

  return ret;
 800c188:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	460b      	mov	r3, r1
 800c19c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	78fa      	ldrb	r2, [r7, #3]
 800c1a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d006      	beq.n	800c1d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2204      	movs	r2, #4
 800c1d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b083      	sub	sp, #12
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d106      	bne.n	800c20c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c204:	b2da      	uxtb	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b082      	sub	sp, #8
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	d110      	bne.n	800c250 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c24a:	69db      	ldr	r3, [r3, #28]
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	460b      	mov	r3, r1
 800c264:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	32ae      	adds	r2, #174	@ 0xae
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c278:	2303      	movs	r3, #3
 800c27a:	e01c      	b.n	800c2b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c282:	b2db      	uxtb	r3, r3
 800c284:	2b03      	cmp	r3, #3
 800c286:	d115      	bne.n	800c2b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	32ae      	adds	r2, #174	@ 0xae
 800c292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	32ae      	adds	r2, #174	@ 0xae
 800c2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2aa:	6a1b      	ldr	r3, [r3, #32]
 800c2ac:	78fa      	ldrb	r2, [r7, #3]
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	32ae      	adds	r2, #174	@ 0xae
 800c2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e01c      	b.n	800c31a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	d115      	bne.n	800c318 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	32ae      	adds	r2, #174	@ 0xae
 800c2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	32ae      	adds	r2, #174	@ 0xae
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c310:	78fa      	ldrb	r2, [r7, #3]
 800c312:	4611      	mov	r1, r2
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c322:	b480      	push	{r7}
 800c324:	b083      	sub	sp, #12
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00e      	beq.n	800c374 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6852      	ldr	r2, [r2, #4]
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	4611      	mov	r1, r2
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	4798      	blx	r3
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c370:	2303      	movs	r3, #3
 800c372:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c374:	7bfb      	ldrb	r3, [r7, #15]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c37e:	b480      	push	{r7}
 800c380:	b083      	sub	sp, #12
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	460b      	mov	r3, r1
 800c388:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c38a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c3a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b086      	sub	sp, #24
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	885b      	ldrh	r3, [r3, #2]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	7812      	ldrb	r2, [r2, #0]
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d91f      	bls.n	800c418 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c3de:	e013      	b.n	800c408 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c3e0:	f107 030a 	add.w	r3, r7, #10
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6978      	ldr	r0, [r7, #20]
 800c3e8:	f000 f81b 	bl	800c422 <USBD_GetNextDesc>
 800c3ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	2b05      	cmp	r3, #5
 800c3f4:	d108      	bne.n	800c408 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	789b      	ldrb	r3, [r3, #2]
 800c3fe:	78fa      	ldrb	r2, [r7, #3]
 800c400:	429a      	cmp	r2, r3
 800c402:	d008      	beq.n	800c416 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c404:	2300      	movs	r3, #0
 800c406:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	885b      	ldrh	r3, [r3, #2]
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	897b      	ldrh	r3, [r7, #10]
 800c410:	429a      	cmp	r2, r3
 800c412:	d8e5      	bhi.n	800c3e0 <USBD_GetEpDesc+0x2e>
 800c414:	e000      	b.n	800c418 <USBD_GetEpDesc+0x66>
          break;
 800c416:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c418:	693b      	ldr	r3, [r7, #16]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	7812      	ldrb	r2, [r2, #0]
 800c438:	4413      	add	r3, r2
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	461a      	mov	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c44c:	68fb      	ldr	r3, [r7, #12]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b087      	sub	sp, #28
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	3301      	adds	r3, #1
 800c470:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c478:	8a3b      	ldrh	r3, [r7, #16]
 800c47a:	021b      	lsls	r3, r3, #8
 800c47c:	b21a      	sxth	r2, r3
 800c47e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c482:	4313      	orrs	r3, r2
 800c484:	b21b      	sxth	r3, r3
 800c486:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c488:	89fb      	ldrh	r3, [r7, #14]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
	...

0800c498 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4ae:	2b40      	cmp	r3, #64	@ 0x40
 800c4b0:	d005      	beq.n	800c4be <USBD_StdDevReq+0x26>
 800c4b2:	2b40      	cmp	r3, #64	@ 0x40
 800c4b4:	d857      	bhi.n	800c566 <USBD_StdDevReq+0xce>
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00f      	beq.n	800c4da <USBD_StdDevReq+0x42>
 800c4ba:	2b20      	cmp	r3, #32
 800c4bc:	d153      	bne.n	800c566 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	32ae      	adds	r2, #174	@ 0xae
 800c4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	4798      	blx	r3
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d8:	e04a      	b.n	800c570 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	785b      	ldrb	r3, [r3, #1]
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d83b      	bhi.n	800c55a <USBD_StdDevReq+0xc2>
 800c4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e8 <USBD_StdDevReq+0x50>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c53d 	.word	0x0800c53d
 800c4ec:	0800c551 	.word	0x0800c551
 800c4f0:	0800c55b 	.word	0x0800c55b
 800c4f4:	0800c547 	.word	0x0800c547
 800c4f8:	0800c55b 	.word	0x0800c55b
 800c4fc:	0800c51b 	.word	0x0800c51b
 800c500:	0800c511 	.word	0x0800c511
 800c504:	0800c55b 	.word	0x0800c55b
 800c508:	0800c533 	.word	0x0800c533
 800c50c:	0800c525 	.word	0x0800c525
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fa3c 	bl	800c990 <USBD_GetDescriptor>
          break;
 800c518:	e024      	b.n	800c564 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fba1 	bl	800cc64 <USBD_SetAddress>
          break;
 800c522:	e01f      	b.n	800c564 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fbe0 	bl	800ccec <USBD_SetConfig>
 800c52c:	4603      	mov	r3, r0
 800c52e:	73fb      	strb	r3, [r7, #15]
          break;
 800c530:	e018      	b.n	800c564 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fc83 	bl	800ce40 <USBD_GetConfig>
          break;
 800c53a:	e013      	b.n	800c564 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fcb4 	bl	800ceac <USBD_GetStatus>
          break;
 800c544:	e00e      	b.n	800c564 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fce3 	bl	800cf14 <USBD_SetFeature>
          break;
 800c54e:	e009      	b.n	800c564 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fd07 	bl	800cf66 <USBD_ClrFeature>
          break;
 800c558:	e004      	b.n	800c564 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fd5e 	bl	800d01e <USBD_CtlError>
          break;
 800c562:	bf00      	nop
      }
      break;
 800c564:	e004      	b.n	800c570 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fd58 	bl	800d01e <USBD_CtlError>
      break;
 800c56e:	bf00      	nop
  }

  return ret;
 800c570:	7bfb      	ldrb	r3, [r7, #15]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop

0800c57c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c592:	2b40      	cmp	r3, #64	@ 0x40
 800c594:	d005      	beq.n	800c5a2 <USBD_StdItfReq+0x26>
 800c596:	2b40      	cmp	r3, #64	@ 0x40
 800c598:	d852      	bhi.n	800c640 <USBD_StdItfReq+0xc4>
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <USBD_StdItfReq+0x26>
 800c59e:	2b20      	cmp	r3, #32
 800c5a0:	d14e      	bne.n	800c640 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d840      	bhi.n	800c632 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	889b      	ldrh	r3, [r3, #4]
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d836      	bhi.n	800c628 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	889b      	ldrh	r3, [r3, #4]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff fedb 	bl	800c37e <USBD_CoreFindIF>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	2bff      	cmp	r3, #255	@ 0xff
 800c5d0:	d01d      	beq.n	800c60e <USBD_StdItfReq+0x92>
 800c5d2:	7bbb      	ldrb	r3, [r7, #14]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d11a      	bne.n	800c60e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c5d8:	7bba      	ldrb	r2, [r7, #14]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	32ae      	adds	r2, #174	@ 0xae
 800c5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00f      	beq.n	800c608 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c5e8:	7bba      	ldrb	r2, [r7, #14]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5f0:	7bba      	ldrb	r2, [r7, #14]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	32ae      	adds	r2, #174	@ 0xae
 800c5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	4798      	blx	r3
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c606:	e004      	b.n	800c612 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c608:	2303      	movs	r3, #3
 800c60a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c60c:	e001      	b.n	800c612 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c60e:	2303      	movs	r3, #3
 800c610:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88db      	ldrh	r3, [r3, #6]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d110      	bne.n	800c63c <USBD_StdItfReq+0xc0>
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10d      	bne.n	800c63c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fdd3 	bl	800d1cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c626:	e009      	b.n	800c63c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fcf7 	bl	800d01e <USBD_CtlError>
          break;
 800c630:	e004      	b.n	800c63c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fcf2 	bl	800d01e <USBD_CtlError>
          break;
 800c63a:	e000      	b.n	800c63e <USBD_StdItfReq+0xc2>
          break;
 800c63c:	bf00      	nop
      }
      break;
 800c63e:	e004      	b.n	800c64a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fceb 	bl	800d01e <USBD_CtlError>
      break;
 800c648:	bf00      	nop
  }

  return ret;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	889b      	ldrh	r3, [r3, #4]
 800c666:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c670:	2b40      	cmp	r3, #64	@ 0x40
 800c672:	d007      	beq.n	800c684 <USBD_StdEPReq+0x30>
 800c674:	2b40      	cmp	r3, #64	@ 0x40
 800c676:	f200 817f 	bhi.w	800c978 <USBD_StdEPReq+0x324>
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d02a      	beq.n	800c6d4 <USBD_StdEPReq+0x80>
 800c67e:	2b20      	cmp	r3, #32
 800c680:	f040 817a 	bne.w	800c978 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c684:	7bbb      	ldrb	r3, [r7, #14]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff fe85 	bl	800c398 <USBD_CoreFindEP>
 800c68e:	4603      	mov	r3, r0
 800c690:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c692:	7b7b      	ldrb	r3, [r7, #13]
 800c694:	2bff      	cmp	r3, #255	@ 0xff
 800c696:	f000 8174 	beq.w	800c982 <USBD_StdEPReq+0x32e>
 800c69a:	7b7b      	ldrb	r3, [r7, #13]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f040 8170 	bne.w	800c982 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c6a2:	7b7a      	ldrb	r2, [r7, #13]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c6aa:	7b7a      	ldrb	r2, [r7, #13]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	32ae      	adds	r2, #174	@ 0xae
 800c6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 8163 	beq.w	800c982 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c6bc:	7b7a      	ldrb	r2, [r7, #13]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	32ae      	adds	r2, #174	@ 0xae
 800c6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	4798      	blx	r3
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c6d2:	e156      	b.n	800c982 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	785b      	ldrb	r3, [r3, #1]
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	d008      	beq.n	800c6ee <USBD_StdEPReq+0x9a>
 800c6dc:	2b03      	cmp	r3, #3
 800c6de:	f300 8145 	bgt.w	800c96c <USBD_StdEPReq+0x318>
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 809b 	beq.w	800c81e <USBD_StdEPReq+0x1ca>
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d03c      	beq.n	800c766 <USBD_StdEPReq+0x112>
 800c6ec:	e13e      	b.n	800c96c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d002      	beq.n	800c700 <USBD_StdEPReq+0xac>
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	d016      	beq.n	800c72c <USBD_StdEPReq+0xd8>
 800c6fe:	e02c      	b.n	800c75a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c700:	7bbb      	ldrb	r3, [r7, #14]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00d      	beq.n	800c722 <USBD_StdEPReq+0xce>
 800c706:	7bbb      	ldrb	r3, [r7, #14]
 800c708:	2b80      	cmp	r3, #128	@ 0x80
 800c70a:	d00a      	beq.n	800c722 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c70c:	7bbb      	ldrb	r3, [r7, #14]
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f004 f923 	bl	801095c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c716:	2180      	movs	r1, #128	@ 0x80
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f004 f91f 	bl	801095c <USBD_LL_StallEP>
 800c71e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c720:	e020      	b.n	800c764 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fc7a 	bl	800d01e <USBD_CtlError>
              break;
 800c72a:	e01b      	b.n	800c764 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	885b      	ldrh	r3, [r3, #2]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10e      	bne.n	800c752 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00b      	beq.n	800c752 <USBD_StdEPReq+0xfe>
 800c73a:	7bbb      	ldrb	r3, [r7, #14]
 800c73c:	2b80      	cmp	r3, #128	@ 0x80
 800c73e:	d008      	beq.n	800c752 <USBD_StdEPReq+0xfe>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	88db      	ldrh	r3, [r3, #6]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d104      	bne.n	800c752 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c748:	7bbb      	ldrb	r3, [r7, #14]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f004 f905 	bl	801095c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fd3a 	bl	800d1cc <USBD_CtlSendStatus>

              break;
 800c758:	e004      	b.n	800c764 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fc5e 	bl	800d01e <USBD_CtlError>
              break;
 800c762:	bf00      	nop
          }
          break;
 800c764:	e107      	b.n	800c976 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d002      	beq.n	800c778 <USBD_StdEPReq+0x124>
 800c772:	2b03      	cmp	r3, #3
 800c774:	d016      	beq.n	800c7a4 <USBD_StdEPReq+0x150>
 800c776:	e04b      	b.n	800c810 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00d      	beq.n	800c79a <USBD_StdEPReq+0x146>
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	2b80      	cmp	r3, #128	@ 0x80
 800c782:	d00a      	beq.n	800c79a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c784:	7bbb      	ldrb	r3, [r7, #14]
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f004 f8e7 	bl	801095c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c78e:	2180      	movs	r1, #128	@ 0x80
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f004 f8e3 	bl	801095c <USBD_LL_StallEP>
 800c796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c798:	e040      	b.n	800c81c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fc3e 	bl	800d01e <USBD_CtlError>
              break;
 800c7a2:	e03b      	b.n	800c81c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	885b      	ldrh	r3, [r3, #2]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d136      	bne.n	800c81a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
 800c7ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d004      	beq.n	800c7c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f004 f8ed 	bl	801099a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fd03 	bl	800d1cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c7c6:	7bbb      	ldrb	r3, [r7, #14]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7ff fde4 	bl	800c398 <USBD_CoreFindEP>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7d4:	7b7b      	ldrb	r3, [r7, #13]
 800c7d6:	2bff      	cmp	r3, #255	@ 0xff
 800c7d8:	d01f      	beq.n	800c81a <USBD_StdEPReq+0x1c6>
 800c7da:	7b7b      	ldrb	r3, [r7, #13]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d11c      	bne.n	800c81a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c7e0:	7b7a      	ldrb	r2, [r7, #13]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c7e8:	7b7a      	ldrb	r2, [r7, #13]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	32ae      	adds	r2, #174	@ 0xae
 800c7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d010      	beq.n	800c81a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c7f8:	7b7a      	ldrb	r2, [r7, #13]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	32ae      	adds	r2, #174	@ 0xae
 800c7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	4798      	blx	r3
 800c80a:	4603      	mov	r3, r0
 800c80c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c80e:	e004      	b.n	800c81a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fc03 	bl	800d01e <USBD_CtlError>
              break;
 800c818:	e000      	b.n	800c81c <USBD_StdEPReq+0x1c8>
              break;
 800c81a:	bf00      	nop
          }
          break;
 800c81c:	e0ab      	b.n	800c976 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b02      	cmp	r3, #2
 800c828:	d002      	beq.n	800c830 <USBD_StdEPReq+0x1dc>
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d032      	beq.n	800c894 <USBD_StdEPReq+0x240>
 800c82e:	e097      	b.n	800c960 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c830:	7bbb      	ldrb	r3, [r7, #14]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d007      	beq.n	800c846 <USBD_StdEPReq+0x1f2>
 800c836:	7bbb      	ldrb	r3, [r7, #14]
 800c838:	2b80      	cmp	r3, #128	@ 0x80
 800c83a:	d004      	beq.n	800c846 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fbed 	bl	800d01e <USBD_CtlError>
                break;
 800c844:	e091      	b.n	800c96a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	da0b      	bge.n	800c866 <USBD_StdEPReq+0x212>
 800c84e:	7bbb      	ldrb	r3, [r7, #14]
 800c850:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c854:	4613      	mov	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4413      	add	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	3310      	adds	r3, #16
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4413      	add	r3, r2
 800c862:	3304      	adds	r3, #4
 800c864:	e00b      	b.n	800c87e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c866:	7bbb      	ldrb	r3, [r7, #14]
 800c868:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c86c:	4613      	mov	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	4413      	add	r3, r2
 800c87c:	3304      	adds	r3, #4
 800c87e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2200      	movs	r2, #0
 800c884:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2202      	movs	r2, #2
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fc43 	bl	800d118 <USBD_CtlSendData>
              break;
 800c892:	e06a      	b.n	800c96a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	da11      	bge.n	800c8c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c89c:	7bbb      	ldrb	r3, [r7, #14]
 800c89e:	f003 020f 	and.w	r2, r3, #15
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	3324      	adds	r3, #36	@ 0x24
 800c8b0:	881b      	ldrh	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d117      	bne.n	800c8e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fbb0 	bl	800d01e <USBD_CtlError>
                  break;
 800c8be:	e054      	b.n	800c96a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8c0:	7bbb      	ldrb	r3, [r7, #14]
 800c8c2:	f003 020f 	and.w	r2, r3, #15
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d104      	bne.n	800c8e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fb9d 	bl	800d01e <USBD_CtlError>
                  break;
 800c8e4:	e041      	b.n	800c96a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	da0b      	bge.n	800c906 <USBD_StdEPReq+0x2b2>
 800c8ee:	7bbb      	ldrb	r3, [r7, #14]
 800c8f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	3310      	adds	r3, #16
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	4413      	add	r3, r2
 800c902:	3304      	adds	r3, #4
 800c904:	e00b      	b.n	800c91e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c906:	7bbb      	ldrb	r3, [r7, #14]
 800c908:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c90c:	4613      	mov	r3, r2
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	4413      	add	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	4413      	add	r3, r2
 800c91c:	3304      	adds	r3, #4
 800c91e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c920:	7bbb      	ldrb	r3, [r7, #14]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <USBD_StdEPReq+0x2d8>
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	2b80      	cmp	r3, #128	@ 0x80
 800c92a:	d103      	bne.n	800c934 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2200      	movs	r2, #0
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	e00e      	b.n	800c952 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f004 f84d 	bl	80109d8 <USBD_LL_IsStallEP>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2201      	movs	r2, #1
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	e002      	b.n	800c952 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	2202      	movs	r2, #2
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fbdd 	bl	800d118 <USBD_CtlSendData>
              break;
 800c95e:	e004      	b.n	800c96a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fb5b 	bl	800d01e <USBD_CtlError>
              break;
 800c968:	bf00      	nop
          }
          break;
 800c96a:	e004      	b.n	800c976 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fb55 	bl	800d01e <USBD_CtlError>
          break;
 800c974:	bf00      	nop
      }
      break;
 800c976:	e005      	b.n	800c984 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c978:	6839      	ldr	r1, [r7, #0]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fb4f 	bl	800d01e <USBD_CtlError>
      break;
 800c980:	e000      	b.n	800c984 <USBD_StdEPReq+0x330>
      break;
 800c982:	bf00      	nop
  }

  return ret;
 800c984:	7bfb      	ldrb	r3, [r7, #15]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
	...

0800c990 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	885b      	ldrh	r3, [r3, #2]
 800c9aa:	0a1b      	lsrs	r3, r3, #8
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	2b06      	cmp	r3, #6
 800c9b2:	f200 8128 	bhi.w	800cc06 <USBD_GetDescriptor+0x276>
 800c9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9bc <USBD_GetDescriptor+0x2c>)
 800c9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9bc:	0800c9d9 	.word	0x0800c9d9
 800c9c0:	0800c9f1 	.word	0x0800c9f1
 800c9c4:	0800ca31 	.word	0x0800ca31
 800c9c8:	0800cc07 	.word	0x0800cc07
 800c9cc:	0800cc07 	.word	0x0800cc07
 800c9d0:	0800cba7 	.word	0x0800cba7
 800c9d4:	0800cbd3 	.word	0x0800cbd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	7c12      	ldrb	r2, [r2, #16]
 800c9e4:	f107 0108 	add.w	r1, r7, #8
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	4798      	blx	r3
 800c9ec:	60f8      	str	r0, [r7, #12]
      break;
 800c9ee:	e112      	b.n	800cc16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7c1b      	ldrb	r3, [r3, #16]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10d      	bne.n	800ca14 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca00:	f107 0208 	add.w	r2, r7, #8
 800ca04:	4610      	mov	r0, r2
 800ca06:	4798      	blx	r3
 800ca08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	2202      	movs	r2, #2
 800ca10:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ca12:	e100      	b.n	800cc16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca1c:	f107 0208 	add.w	r2, r7, #8
 800ca20:	4610      	mov	r0, r2
 800ca22:	4798      	blx	r3
 800ca24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	701a      	strb	r2, [r3, #0]
      break;
 800ca2e:	e0f2      	b.n	800cc16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	885b      	ldrh	r3, [r3, #2]
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b05      	cmp	r3, #5
 800ca38:	f200 80ac 	bhi.w	800cb94 <USBD_GetDescriptor+0x204>
 800ca3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca44 <USBD_GetDescriptor+0xb4>)
 800ca3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca42:	bf00      	nop
 800ca44:	0800ca5d 	.word	0x0800ca5d
 800ca48:	0800ca91 	.word	0x0800ca91
 800ca4c:	0800cac5 	.word	0x0800cac5
 800ca50:	0800caf9 	.word	0x0800caf9
 800ca54:	0800cb2d 	.word	0x0800cb2d
 800ca58:	0800cb61 	.word	0x0800cb61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00b      	beq.n	800ca80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	7c12      	ldrb	r2, [r2, #16]
 800ca74:	f107 0108 	add.w	r1, r7, #8
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4798      	blx	r3
 800ca7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca7e:	e091      	b.n	800cba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 facb 	bl	800d01e <USBD_CtlError>
            err++;
 800ca88:	7afb      	ldrb	r3, [r7, #11]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca8e:	e089      	b.n	800cba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00b      	beq.n	800cab4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	7c12      	ldrb	r2, [r2, #16]
 800caa8:	f107 0108 	add.w	r1, r7, #8
 800caac:	4610      	mov	r0, r2
 800caae:	4798      	blx	r3
 800cab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cab2:	e077      	b.n	800cba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fab1 	bl	800d01e <USBD_CtlError>
            err++;
 800cabc:	7afb      	ldrb	r3, [r7, #11]
 800cabe:	3301      	adds	r3, #1
 800cac0:	72fb      	strb	r3, [r7, #11]
          break;
 800cac2:	e06f      	b.n	800cba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00b      	beq.n	800cae8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	7c12      	ldrb	r2, [r2, #16]
 800cadc:	f107 0108 	add.w	r1, r7, #8
 800cae0:	4610      	mov	r0, r2
 800cae2:	4798      	blx	r3
 800cae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cae6:	e05d      	b.n	800cba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fa97 	bl	800d01e <USBD_CtlError>
            err++;
 800caf0:	7afb      	ldrb	r3, [r7, #11]
 800caf2:	3301      	adds	r3, #1
 800caf4:	72fb      	strb	r3, [r7, #11]
          break;
 800caf6:	e055      	b.n	800cba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	7c12      	ldrb	r2, [r2, #16]
 800cb10:	f107 0108 	add.w	r1, r7, #8
 800cb14:	4610      	mov	r0, r2
 800cb16:	4798      	blx	r3
 800cb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb1a:	e043      	b.n	800cba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fa7d 	bl	800d01e <USBD_CtlError>
            err++;
 800cb24:	7afb      	ldrb	r3, [r7, #11]
 800cb26:	3301      	adds	r3, #1
 800cb28:	72fb      	strb	r3, [r7, #11]
          break;
 800cb2a:	e03b      	b.n	800cba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00b      	beq.n	800cb50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb3e:	695b      	ldr	r3, [r3, #20]
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	7c12      	ldrb	r2, [r2, #16]
 800cb44:	f107 0108 	add.w	r1, r7, #8
 800cb48:	4610      	mov	r0, r2
 800cb4a:	4798      	blx	r3
 800cb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb4e:	e029      	b.n	800cba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fa63 	bl	800d01e <USBD_CtlError>
            err++;
 800cb58:	7afb      	ldrb	r3, [r7, #11]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb5e:	e021      	b.n	800cba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00b      	beq.n	800cb84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb72:	699b      	ldr	r3, [r3, #24]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	7c12      	ldrb	r2, [r2, #16]
 800cb78:	f107 0108 	add.w	r1, r7, #8
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4798      	blx	r3
 800cb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb82:	e00f      	b.n	800cba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fa49 	bl	800d01e <USBD_CtlError>
            err++;
 800cb8c:	7afb      	ldrb	r3, [r7, #11]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	72fb      	strb	r3, [r7, #11]
          break;
 800cb92:	e007      	b.n	800cba4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fa41 	bl	800d01e <USBD_CtlError>
          err++;
 800cb9c:	7afb      	ldrb	r3, [r7, #11]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cba2:	bf00      	nop
      }
      break;
 800cba4:	e037      	b.n	800cc16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7c1b      	ldrb	r3, [r3, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d109      	bne.n	800cbc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbb6:	f107 0208 	add.w	r2, r7, #8
 800cbba:	4610      	mov	r0, r2
 800cbbc:	4798      	blx	r3
 800cbbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbc0:	e029      	b.n	800cc16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fa2a 	bl	800d01e <USBD_CtlError>
        err++;
 800cbca:	7afb      	ldrb	r3, [r7, #11]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	72fb      	strb	r3, [r7, #11]
      break;
 800cbd0:	e021      	b.n	800cc16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	7c1b      	ldrb	r3, [r3, #16]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10d      	bne.n	800cbf6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbe2:	f107 0208 	add.w	r2, r7, #8
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	4798      	blx	r3
 800cbea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	2207      	movs	r2, #7
 800cbf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbf4:	e00f      	b.n	800cc16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fa10 	bl	800d01e <USBD_CtlError>
        err++;
 800cbfe:	7afb      	ldrb	r3, [r7, #11]
 800cc00:	3301      	adds	r3, #1
 800cc02:	72fb      	strb	r3, [r7, #11]
      break;
 800cc04:	e007      	b.n	800cc16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fa08 	bl	800d01e <USBD_CtlError>
      err++;
 800cc0e:	7afb      	ldrb	r3, [r7, #11]
 800cc10:	3301      	adds	r3, #1
 800cc12:	72fb      	strb	r3, [r7, #11]
      break;
 800cc14:	bf00      	nop
  }

  if (err != 0U)
 800cc16:	7afb      	ldrb	r3, [r7, #11]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d11e      	bne.n	800cc5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	88db      	ldrh	r3, [r3, #6]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d016      	beq.n	800cc52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cc24:	893b      	ldrh	r3, [r7, #8]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00e      	beq.n	800cc48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	88da      	ldrh	r2, [r3, #6]
 800cc2e:	893b      	ldrh	r3, [r7, #8]
 800cc30:	4293      	cmp	r3, r2
 800cc32:	bf28      	it	cs
 800cc34:	4613      	movcs	r3, r2
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc3a:	893b      	ldrh	r3, [r7, #8]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	68f9      	ldr	r1, [r7, #12]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fa69 	bl	800d118 <USBD_CtlSendData>
 800cc46:	e009      	b.n	800cc5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f9e7 	bl	800d01e <USBD_CtlError>
 800cc50:	e004      	b.n	800cc5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 faba 	bl	800d1cc <USBD_CtlSendStatus>
 800cc58:	e000      	b.n	800cc5c <USBD_GetDescriptor+0x2cc>
    return;
 800cc5a:	bf00      	nop
  }
}
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop

0800cc64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	889b      	ldrh	r3, [r3, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d131      	bne.n	800ccda <USBD_SetAddress+0x76>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	88db      	ldrh	r3, [r3, #6]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d12d      	bne.n	800ccda <USBD_SetAddress+0x76>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	885b      	ldrh	r3, [r3, #2]
 800cc82:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc84:	d829      	bhi.n	800ccda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	885b      	ldrh	r3, [r3, #2]
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d104      	bne.n	800cca8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f9bc 	bl	800d01e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cca6:	e01d      	b.n	800cce4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	7bfa      	ldrb	r2, [r7, #15]
 800ccac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f003 febb 	bl	8010a30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fa86 	bl	800d1cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d004      	beq.n	800ccd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2202      	movs	r2, #2
 800ccca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccce:	e009      	b.n	800cce4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccd8:	e004      	b.n	800cce4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f99e 	bl	800d01e <USBD_CtlError>
  }
}
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	885b      	ldrh	r3, [r3, #2]
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	4b4e      	ldr	r3, [pc, #312]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd04:	4b4d      	ldr	r3, [pc, #308]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d905      	bls.n	800cd18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f985 	bl	800d01e <USBD_CtlError>
    return USBD_FAIL;
 800cd14:	2303      	movs	r3, #3
 800cd16:	e08c      	b.n	800ce32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d002      	beq.n	800cd2a <USBD_SetConfig+0x3e>
 800cd24:	2b03      	cmp	r3, #3
 800cd26:	d029      	beq.n	800cd7c <USBD_SetConfig+0x90>
 800cd28:	e075      	b.n	800ce16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cd2a:	4b44      	ldr	r3, [pc, #272]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d020      	beq.n	800cd74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cd32:	4b42      	ldr	r3, [pc, #264]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	461a      	mov	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd3c:	4b3f      	ldr	r3, [pc, #252]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	4619      	mov	r1, r3
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7fe ffe3 	bl	800bd0e <USBD_SetClassConfig>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d008      	beq.n	800cd64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f962 	bl	800d01e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2202      	movs	r2, #2
 800cd5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd62:	e065      	b.n	800ce30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fa31 	bl	800d1cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2203      	movs	r2, #3
 800cd6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd72:	e05d      	b.n	800ce30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fa29 	bl	800d1cc <USBD_CtlSendStatus>
      break;
 800cd7a:	e059      	b.n	800ce30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd7c:	4b2f      	ldr	r3, [pc, #188]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d112      	bne.n	800cdaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cd8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	461a      	mov	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd96:	4b29      	ldr	r3, [pc, #164]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7fe ffd2 	bl	800bd46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 fa12 	bl	800d1cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cda8:	e042      	b.n	800ce30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cdaa:	4b24      	ldr	r3, [pc, #144]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d02a      	beq.n	800ce0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7fe ffc0 	bl	800bd46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cdc6:	4b1d      	ldr	r3, [pc, #116]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdd0:	4b1a      	ldr	r3, [pc, #104]	@ (800ce3c <USBD_SetConfig+0x150>)
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7fe ff99 	bl	800bd0e <USBD_SetClassConfig>
 800cddc:	4603      	mov	r3, r0
 800cdde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cde0:	7bfb      	ldrb	r3, [r7, #15]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00f      	beq.n	800ce06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cde6:	6839      	ldr	r1, [r7, #0]
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f918 	bl	800d01e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f7fe ffa5 	bl	800bd46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ce04:	e014      	b.n	800ce30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f9e0 	bl	800d1cc <USBD_CtlSendStatus>
      break;
 800ce0c:	e010      	b.n	800ce30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f9dc 	bl	800d1cc <USBD_CtlSendStatus>
      break;
 800ce14:	e00c      	b.n	800ce30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f900 	bl	800d01e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce1e:	4b07      	ldr	r3, [pc, #28]	@ (800ce3c <USBD_SetConfig+0x150>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7fe ff8e 	bl	800bd46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce2e:	bf00      	nop
  }

  return ret;
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20001b68 	.word	0x20001b68

0800ce40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	88db      	ldrh	r3, [r3, #6]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d004      	beq.n	800ce5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce52:	6839      	ldr	r1, [r7, #0]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f8e2 	bl	800d01e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce5a:	e023      	b.n	800cea4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	dc02      	bgt.n	800ce6e <USBD_GetConfig+0x2e>
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	dc03      	bgt.n	800ce74 <USBD_GetConfig+0x34>
 800ce6c:	e015      	b.n	800ce9a <USBD_GetConfig+0x5a>
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d00b      	beq.n	800ce8a <USBD_GetConfig+0x4a>
 800ce72:	e012      	b.n	800ce9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	3308      	adds	r3, #8
 800ce7e:	2201      	movs	r2, #1
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f948 	bl	800d118 <USBD_CtlSendData>
        break;
 800ce88:	e00c      	b.n	800cea4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	2201      	movs	r2, #1
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f940 	bl	800d118 <USBD_CtlSendData>
        break;
 800ce98:	e004      	b.n	800cea4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce9a:	6839      	ldr	r1, [r7, #0]
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f8be 	bl	800d01e <USBD_CtlError>
        break;
 800cea2:	bf00      	nop
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	3b01      	subs	r3, #1
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d81e      	bhi.n	800cf02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	88db      	ldrh	r3, [r3, #6]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d004      	beq.n	800ced6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f8a5 	bl	800d01e <USBD_CtlError>
        break;
 800ced4:	e01a      	b.n	800cf0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d005      	beq.n	800cef2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	f043 0202 	orr.w	r2, r3, #2
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	330c      	adds	r3, #12
 800cef6:	2202      	movs	r2, #2
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f90c 	bl	800d118 <USBD_CtlSendData>
      break;
 800cf00:	e004      	b.n	800cf0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 f88a 	bl	800d01e <USBD_CtlError>
      break;
 800cf0a:	bf00      	nop
  }
}
 800cf0c:	bf00      	nop
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	885b      	ldrh	r3, [r3, #2]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d107      	bne.n	800cf36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f94c 	bl	800d1cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cf34:	e013      	b.n	800cf5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	885b      	ldrh	r3, [r3, #2]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d10b      	bne.n	800cf56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	889b      	ldrh	r3, [r3, #4]
 800cf42:	0a1b      	lsrs	r3, r3, #8
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f93c 	bl	800d1cc <USBD_CtlSendStatus>
}
 800cf54:	e003      	b.n	800cf5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cf56:	6839      	ldr	r1, [r7, #0]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f860 	bl	800d01e <USBD_CtlError>
}
 800cf5e:	bf00      	nop
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b082      	sub	sp, #8
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
 800cf6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d80b      	bhi.n	800cf96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	885b      	ldrh	r3, [r3, #2]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d10c      	bne.n	800cfa0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f91c 	bl	800d1cc <USBD_CtlSendStatus>
      }
      break;
 800cf94:	e004      	b.n	800cfa0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f840 	bl	800d01e <USBD_CtlError>
      break;
 800cf9e:	e000      	b.n	800cfa2 <USBD_ClrFeature+0x3c>
      break;
 800cfa0:	bf00      	nop
  }
}
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	781a      	ldrb	r2, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	781a      	ldrb	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f7ff fa40 	bl	800c45a <SWAPBYTE>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	461a      	mov	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	3301      	adds	r3, #1
 800cfec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f7ff fa33 	bl	800c45a <SWAPBYTE>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3301      	adds	r3, #1
 800d000:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	3301      	adds	r3, #1
 800d006:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f7ff fa26 	bl	800c45a <SWAPBYTE>
 800d00e:	4603      	mov	r3, r0
 800d010:	461a      	mov	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	80da      	strh	r2, [r3, #6]
}
 800d016:	bf00      	nop
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b082      	sub	sp, #8
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d028:	2180      	movs	r1, #128	@ 0x80
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f003 fc96 	bl	801095c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d030:	2100      	movs	r1, #0
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f003 fc92 	bl	801095c <USBD_LL_StallEP>
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d04c:	2300      	movs	r3, #0
 800d04e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d042      	beq.n	800d0dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d05a:	6938      	ldr	r0, [r7, #16]
 800d05c:	f000 f842 	bl	800d0e4 <USBD_GetLen>
 800d060:	4603      	mov	r3, r0
 800d062:	3301      	adds	r3, #1
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d06a:	d808      	bhi.n	800d07e <USBD_GetString+0x3e>
 800d06c:	6938      	ldr	r0, [r7, #16]
 800d06e:	f000 f839 	bl	800d0e4 <USBD_GetLen>
 800d072:	4603      	mov	r3, r0
 800d074:	3301      	adds	r3, #1
 800d076:	b29b      	uxth	r3, r3
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	e001      	b.n	800d082 <USBD_GetString+0x42>
 800d07e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d086:	7dfb      	ldrb	r3, [r7, #23]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	4413      	add	r3, r2
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	7812      	ldrb	r2, [r2, #0]
 800d090:	701a      	strb	r2, [r3, #0]
  idx++;
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	3301      	adds	r3, #1
 800d096:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	4413      	add	r3, r2
 800d09e:	2203      	movs	r2, #3
 800d0a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d0a8:	e013      	b.n	800d0d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d0aa:	7dfb      	ldrb	r3, [r7, #23]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	7812      	ldrb	r2, [r2, #0]
 800d0b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	613b      	str	r3, [r7, #16]
    idx++;
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0cc:	7dfb      	ldrb	r3, [r7, #23]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1e7      	bne.n	800d0aa <USBD_GetString+0x6a>
 800d0da:	e000      	b.n	800d0de <USBD_GetString+0x9e>
    return;
 800d0dc:	bf00      	nop
  }
}
 800d0de:	3718      	adds	r7, #24
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0f4:	e005      	b.n	800d102 <USBD_GetLen+0x1e>
  {
    len++;
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	3301      	adds	r3, #1
 800d100:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1f5      	bne.n	800d0f6 <USBD_GetLen+0x12>
  }

  return len;
 800d10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2202      	movs	r2, #2
 800d128:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	2100      	movs	r1, #0
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f003 fc95 	bl	8010a6e <USBD_LL_Transmit>

  return USBD_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	2100      	movs	r1, #0
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f003 fc84 	bl	8010a6e <USBD_LL_Transmit>

  return USBD_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2203      	movs	r2, #3
 800d180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	2100      	movs	r1, #0
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f003 fc88 	bl	8010ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f003 fc77 	bl	8010ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2204      	movs	r2, #4
 800d1d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1dc:	2300      	movs	r3, #0
 800d1de:	2200      	movs	r2, #0
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f003 fc43 	bl	8010a6e <USBD_LL_Transmit>

  return USBD_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2205      	movs	r2, #5
 800d1fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d202:	2300      	movs	r3, #0
 800d204:	2200      	movs	r2, #0
 800d206:	2100      	movs	r1, #0
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f003 fc51 	bl	8010ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f103 0208 	add.w	r2, r3, #8
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295
 800d230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f103 0208 	add.w	r2, r3, #8
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f103 0208 	add.w	r2, r3, #8
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d266:	bf00      	nop
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d272:	b480      	push	{r7}
 800d274:	b085      	sub	sp, #20
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	689a      	ldr	r2, [r3, #8]
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	601a      	str	r2, [r3, #0]
}
 800d2ae:	bf00      	nop
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	b085      	sub	sp, #20
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d0:	d103      	bne.n	800d2da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	e00c      	b.n	800d2f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	3308      	adds	r3, #8
 800d2de:	60fb      	str	r3, [r7, #12]
 800d2e0:	e002      	b.n	800d2e8 <vListInsert+0x2e>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d2f6      	bcs.n	800d2e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	683a      	ldr	r2, [r7, #0]
 800d30e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	601a      	str	r2, [r3, #0]
}
 800d320:	bf00      	nop
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	6892      	ldr	r2, [r2, #8]
 800d342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	6852      	ldr	r2, [r2, #4]
 800d34c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	429a      	cmp	r2, r3
 800d356:	d103      	bne.n	800d360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689a      	ldr	r2, [r3, #8]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	1e5a      	subs	r2, r3, #1
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10b      	bne.n	800d3ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d3a6:	bf00      	nop
 800d3a8:	bf00      	nop
 800d3aa:	e7fd      	b.n	800d3a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d3ac:	f002 fbd4 	bl	800fb58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b8:	68f9      	ldr	r1, [r7, #12]
 800d3ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d3bc:	fb01 f303 	mul.w	r3, r1, r3
 800d3c0:	441a      	add	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	68f9      	ldr	r1, [r7, #12]
 800d3e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d3e2:	fb01 f303 	mul.w	r3, r1, r3
 800d3e6:	441a      	add	r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	22ff      	movs	r2, #255	@ 0xff
 800d3f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	22ff      	movs	r2, #255	@ 0xff
 800d3f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d114      	bne.n	800d42c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d01a      	beq.n	800d440 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3310      	adds	r3, #16
 800d40e:	4618      	mov	r0, r3
 800d410:	f001 fb4a 	bl	800eaa8 <xTaskRemoveFromEventList>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d012      	beq.n	800d440 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d41a:	4b0d      	ldr	r3, [pc, #52]	@ (800d450 <xQueueGenericReset+0xd0>)
 800d41c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	e009      	b.n	800d440 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	3310      	adds	r3, #16
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff fef1 	bl	800d218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	3324      	adds	r3, #36	@ 0x24
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7ff feec 	bl	800d218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d440:	f002 fbbc 	bl	800fbbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d444:	2301      	movs	r3, #1
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	e000ed04 	.word	0xe000ed04

0800d454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08e      	sub	sp, #56	@ 0x38
 800d458:	af02      	add	r7, sp, #8
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10b      	bne.n	800d480 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d47a:	bf00      	nop
 800d47c:	bf00      	nop
 800d47e:	e7fd      	b.n	800d47c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10b      	bne.n	800d49e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48a:	f383 8811 	msr	BASEPRI, r3
 800d48e:	f3bf 8f6f 	isb	sy
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
 800d49c:	e7fd      	b.n	800d49a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <xQueueGenericCreateStatic+0x56>
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <xQueueGenericCreateStatic+0x5a>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <xQueueGenericCreateStatic+0x5c>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10b      	bne.n	800d4cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	623b      	str	r3, [r7, #32]
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	e7fd      	b.n	800d4c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d102      	bne.n	800d4d8 <xQueueGenericCreateStatic+0x84>
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d101      	bne.n	800d4dc <xQueueGenericCreateStatic+0x88>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e000      	b.n	800d4de <xQueueGenericCreateStatic+0x8a>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10b      	bne.n	800d4fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	61fb      	str	r3, [r7, #28]
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop
 800d4f8:	e7fd      	b.n	800d4f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d4fa:	2348      	movs	r3, #72	@ 0x48
 800d4fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2b48      	cmp	r3, #72	@ 0x48
 800d502:	d00b      	beq.n	800d51c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	61bb      	str	r3, [r7, #24]
}
 800d516:	bf00      	nop
 800d518:	bf00      	nop
 800d51a:	e7fd      	b.n	800d518 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d51c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	2b00      	cmp	r3, #0
 800d526:	d00d      	beq.n	800d544 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d530:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	4613      	mov	r3, r2
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	68b9      	ldr	r1, [r7, #8]
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 f840 	bl	800d5c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d546:	4618      	mov	r0, r3
 800d548:	3730      	adds	r7, #48	@ 0x30
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b08a      	sub	sp, #40	@ 0x28
 800d552:	af02      	add	r7, sp, #8
 800d554:	60f8      	str	r0, [r7, #12]
 800d556:	60b9      	str	r1, [r7, #8]
 800d558:	4613      	mov	r3, r2
 800d55a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10b      	bne.n	800d57a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	613b      	str	r3, [r7, #16]
}
 800d574:	bf00      	nop
 800d576:	bf00      	nop
 800d578:	e7fd      	b.n	800d576 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	68ba      	ldr	r2, [r7, #8]
 800d57e:	fb02 f303 	mul.w	r3, r2, r3
 800d582:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	3348      	adds	r3, #72	@ 0x48
 800d588:	4618      	mov	r0, r3
 800d58a:	f002 fc07 	bl	800fd9c <pvPortMalloc>
 800d58e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d011      	beq.n	800d5ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	3348      	adds	r3, #72	@ 0x48
 800d59e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5a8:	79fa      	ldrb	r2, [r7, #7]
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	68b9      	ldr	r1, [r7, #8]
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f000 f805 	bl	800d5c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5ba:	69bb      	ldr	r3, [r7, #24]
	}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3720      	adds	r7, #32
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
 800d5d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d103      	bne.n	800d5e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	69ba      	ldr	r2, [r7, #24]
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	e002      	b.n	800d5e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5f2:	2101      	movs	r1, #1
 800d5f4:	69b8      	ldr	r0, [r7, #24]
 800d5f6:	f7ff fec3 	bl	800d380 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d5fa:	bf00      	nop
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d602:	b580      	push	{r7, lr}
 800d604:	b082      	sub	sp, #8
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00e      	beq.n	800d62e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d622:	2300      	movs	r3, #0
 800d624:	2200      	movs	r2, #0
 800d626:	2100      	movs	r1, #0
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f851 	bl	800d6d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d62e:	bf00      	nop
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d636:	b580      	push	{r7, lr}
 800d638:	b086      	sub	sp, #24
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	4603      	mov	r3, r0
 800d63e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d640:	2301      	movs	r3, #1
 800d642:	617b      	str	r3, [r7, #20]
 800d644:	2300      	movs	r3, #0
 800d646:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d648:	79fb      	ldrb	r3, [r7, #7]
 800d64a:	461a      	mov	r2, r3
 800d64c:	6939      	ldr	r1, [r7, #16]
 800d64e:	6978      	ldr	r0, [r7, #20]
 800d650:	f7ff ff7d 	bl	800d54e <xQueueGenericCreate>
 800d654:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f7ff ffd3 	bl	800d602 <prvInitialiseMutex>

		return xNewQueue;
 800d65c:	68fb      	ldr	r3, [r7, #12]
	}
 800d65e:	4618      	mov	r0, r3
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d666:	b580      	push	{r7, lr}
 800d668:	b086      	sub	sp, #24
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	613b      	str	r3, [r7, #16]
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	e7fd      	b.n	800d68a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d68e:	683a      	ldr	r2, [r7, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	429a      	cmp	r2, r3
 800d694:	d90b      	bls.n	800d6ae <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	60fb      	str	r3, [r7, #12]
}
 800d6a8:	bf00      	nop
 800d6aa:	bf00      	nop
 800d6ac:	e7fd      	b.n	800d6aa <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7ff ff4b 	bl	800d54e <xQueueGenericCreate>
 800d6b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d6c6:	697b      	ldr	r3, [r7, #20]
	}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b08e      	sub	sp, #56	@ 0x38
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10b      	bne.n	800d704 <xQueueGenericSend+0x34>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6fe:	bf00      	nop
 800d700:	bf00      	nop
 800d702:	e7fd      	b.n	800d700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d103      	bne.n	800d712 <xQueueGenericSend+0x42>
 800d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d101      	bne.n	800d716 <xQueueGenericSend+0x46>
 800d712:	2301      	movs	r3, #1
 800d714:	e000      	b.n	800d718 <xQueueGenericSend+0x48>
 800d716:	2300      	movs	r3, #0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10b      	bne.n	800d734 <xQueueGenericSend+0x64>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d72e:	bf00      	nop
 800d730:	bf00      	nop
 800d732:	e7fd      	b.n	800d730 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	2b02      	cmp	r3, #2
 800d738:	d103      	bne.n	800d742 <xQueueGenericSend+0x72>
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d101      	bne.n	800d746 <xQueueGenericSend+0x76>
 800d742:	2301      	movs	r3, #1
 800d744:	e000      	b.n	800d748 <xQueueGenericSend+0x78>
 800d746:	2300      	movs	r3, #0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10b      	bne.n	800d764 <xQueueGenericSend+0x94>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	623b      	str	r3, [r7, #32]
}
 800d75e:	bf00      	nop
 800d760:	bf00      	nop
 800d762:	e7fd      	b.n	800d760 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d764:	f001 fb62 	bl	800ee2c <xTaskGetSchedulerState>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <xQueueGenericSend+0xa4>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d101      	bne.n	800d778 <xQueueGenericSend+0xa8>
 800d774:	2301      	movs	r3, #1
 800d776:	e000      	b.n	800d77a <xQueueGenericSend+0xaa>
 800d778:	2300      	movs	r3, #0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10b      	bne.n	800d796 <xQueueGenericSend+0xc6>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	61fb      	str	r3, [r7, #28]
}
 800d790:	bf00      	nop
 800d792:	bf00      	nop
 800d794:	e7fd      	b.n	800d792 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d796:	f002 f9df 	bl	800fb58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d302      	bcc.n	800d7ac <xQueueGenericSend+0xdc>
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d129      	bne.n	800d800 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	68b9      	ldr	r1, [r7, #8]
 800d7b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7b2:	f000 fbe6 	bl	800df82 <prvCopyDataToQueue>
 800d7b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d010      	beq.n	800d7e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c2:	3324      	adds	r3, #36	@ 0x24
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f001 f96f 	bl	800eaa8 <xTaskRemoveFromEventList>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d013      	beq.n	800d7f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7d0:	4b3f      	ldr	r3, [pc, #252]	@ (800d8d0 <xQueueGenericSend+0x200>)
 800d7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7d6:	601a      	str	r2, [r3, #0]
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	e00a      	b.n	800d7f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d007      	beq.n	800d7f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7e8:	4b39      	ldr	r3, [pc, #228]	@ (800d8d0 <xQueueGenericSend+0x200>)
 800d7ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7f8:	f002 f9e0 	bl	800fbbc <vPortExitCritical>
				return pdPASS;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e063      	b.n	800d8c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d806:	f002 f9d9 	bl	800fbbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d80a:	2300      	movs	r3, #0
 800d80c:	e05c      	b.n	800d8c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d810:	2b00      	cmp	r3, #0
 800d812:	d106      	bne.n	800d822 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d814:	f107 0314 	add.w	r3, r7, #20
 800d818:	4618      	mov	r0, r3
 800d81a:	f001 f9a9 	bl	800eb70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d81e:	2301      	movs	r3, #1
 800d820:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d822:	f002 f9cb 	bl	800fbbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d826:	f000 ff1b 	bl	800e660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d82a:	f002 f995 	bl	800fb58 <vPortEnterCritical>
 800d82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d834:	b25b      	sxtb	r3, r3
 800d836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83a:	d103      	bne.n	800d844 <xQueueGenericSend+0x174>
 800d83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d84a:	b25b      	sxtb	r3, r3
 800d84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d850:	d103      	bne.n	800d85a <xQueueGenericSend+0x18a>
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d85a:	f002 f9af 	bl	800fbbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d85e:	1d3a      	adds	r2, r7, #4
 800d860:	f107 0314 	add.w	r3, r7, #20
 800d864:	4611      	mov	r1, r2
 800d866:	4618      	mov	r0, r3
 800d868:	f001 f998 	bl	800eb9c <xTaskCheckForTimeOut>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d124      	bne.n	800d8bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d872:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d874:	f000 fc7d 	bl	800e172 <prvIsQueueFull>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d018      	beq.n	800d8b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d880:	3310      	adds	r3, #16
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	4611      	mov	r1, r2
 800d886:	4618      	mov	r0, r3
 800d888:	f001 f8bc 	bl	800ea04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d88c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d88e:	f000 fc08 	bl	800e0a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d892:	f000 fef3 	bl	800e67c <xTaskResumeAll>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f47f af7c 	bne.w	800d796 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d89e:	4b0c      	ldr	r3, [pc, #48]	@ (800d8d0 <xQueueGenericSend+0x200>)
 800d8a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	f3bf 8f4f 	dsb	sy
 800d8aa:	f3bf 8f6f 	isb	sy
 800d8ae:	e772      	b.n	800d796 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8b2:	f000 fbf6 	bl	800e0a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8b6:	f000 fee1 	bl	800e67c <xTaskResumeAll>
 800d8ba:	e76c      	b.n	800d796 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8be:	f000 fbf0 	bl	800e0a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8c2:	f000 fedb 	bl	800e67c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3738      	adds	r7, #56	@ 0x38
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	e000ed04 	.word	0xe000ed04

0800d8d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b090      	sub	sp, #64	@ 0x40
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d10b      	bne.n	800d904 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f0:	f383 8811 	msr	BASEPRI, r3
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8fe:	bf00      	nop
 800d900:	bf00      	nop
 800d902:	e7fd      	b.n	800d900 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d103      	bne.n	800d912 <xQueueGenericSendFromISR+0x3e>
 800d90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d101      	bne.n	800d916 <xQueueGenericSendFromISR+0x42>
 800d912:	2301      	movs	r3, #1
 800d914:	e000      	b.n	800d918 <xQueueGenericSendFromISR+0x44>
 800d916:	2300      	movs	r3, #0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d10b      	bne.n	800d934 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d920:	f383 8811 	msr	BASEPRI, r3
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	f3bf 8f4f 	dsb	sy
 800d92c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d92e:	bf00      	nop
 800d930:	bf00      	nop
 800d932:	e7fd      	b.n	800d930 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b02      	cmp	r3, #2
 800d938:	d103      	bne.n	800d942 <xQueueGenericSendFromISR+0x6e>
 800d93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d101      	bne.n	800d946 <xQueueGenericSendFromISR+0x72>
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <xQueueGenericSendFromISR+0x74>
 800d946:	2300      	movs	r3, #0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10b      	bne.n	800d964 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	623b      	str	r3, [r7, #32]
}
 800d95e:	bf00      	nop
 800d960:	bf00      	nop
 800d962:	e7fd      	b.n	800d960 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d964:	f002 f9d8 	bl	800fd18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d968:	f3ef 8211 	mrs	r2, BASEPRI
 800d96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	61fa      	str	r2, [r7, #28]
 800d97e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d980:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d982:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d302      	bcc.n	800d996 <xQueueGenericSendFromISR+0xc2>
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d12f      	bne.n	800d9f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d99c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	68b9      	ldr	r1, [r7, #8]
 800d9aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d9ac:	f000 fae9 	bl	800df82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b8:	d112      	bne.n	800d9e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d016      	beq.n	800d9f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c4:	3324      	adds	r3, #36	@ 0x24
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f001 f86e 	bl	800eaa8 <xTaskRemoveFromEventList>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00e      	beq.n	800d9f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00b      	beq.n	800d9f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	e007      	b.n	800d9f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	b25a      	sxtb	r2, r3
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d9f4:	e001      	b.n	800d9fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3740      	adds	r7, #64	@ 0x40
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b08e      	sub	sp, #56	@ 0x38
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10b      	bne.n	800da3c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	623b      	str	r3, [r7, #32]
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00b      	beq.n	800da5c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	61fb      	str	r3, [r7, #28]
}
 800da56:	bf00      	nop
 800da58:	bf00      	nop
 800da5a:	e7fd      	b.n	800da58 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d103      	bne.n	800da6c <xQueueGiveFromISR+0x5c>
 800da64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <xQueueGiveFromISR+0x60>
 800da6c:	2301      	movs	r3, #1
 800da6e:	e000      	b.n	800da72 <xQueueGiveFromISR+0x62>
 800da70:	2300      	movs	r3, #0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10b      	bne.n	800da8e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	61bb      	str	r3, [r7, #24]
}
 800da88:	bf00      	nop
 800da8a:	bf00      	nop
 800da8c:	e7fd      	b.n	800da8a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da8e:	f002 f943 	bl	800fd18 <vPortValidateInterruptPriority>
	__asm volatile
 800da92:	f3ef 8211 	mrs	r2, BASEPRI
 800da96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	617a      	str	r2, [r7, #20]
 800daa8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800daaa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800daac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dab2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800daba:	429a      	cmp	r2, r3
 800dabc:	d22b      	bcs.n	800db16 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daca:	1c5a      	adds	r2, r3, #1
 800dacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dace:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dad0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad8:	d112      	bne.n	800db00 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d016      	beq.n	800db10 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae4:	3324      	adds	r3, #36	@ 0x24
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 ffde 	bl	800eaa8 <xTaskRemoveFromEventList>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00e      	beq.n	800db10 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00b      	beq.n	800db10 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2201      	movs	r2, #1
 800dafc:	601a      	str	r2, [r3, #0]
 800dafe:	e007      	b.n	800db10 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db04:	3301      	adds	r3, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	b25a      	sxtb	r2, r3
 800db0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800db10:	2301      	movs	r3, #1
 800db12:	637b      	str	r3, [r7, #52]	@ 0x34
 800db14:	e001      	b.n	800db1a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db16:	2300      	movs	r3, #0
 800db18:	637b      	str	r3, [r7, #52]	@ 0x34
 800db1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f383 8811 	msr	BASEPRI, r3
}
 800db24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3738      	adds	r7, #56	@ 0x38
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b08c      	sub	sp, #48	@ 0x30
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db3c:	2300      	movs	r3, #0
 800db3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10b      	bne.n	800db62 <xQueueReceive+0x32>
	__asm volatile
 800db4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	623b      	str	r3, [r7, #32]
}
 800db5c:	bf00      	nop
 800db5e:	bf00      	nop
 800db60:	e7fd      	b.n	800db5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d103      	bne.n	800db70 <xQueueReceive+0x40>
 800db68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d101      	bne.n	800db74 <xQueueReceive+0x44>
 800db70:	2301      	movs	r3, #1
 800db72:	e000      	b.n	800db76 <xQueueReceive+0x46>
 800db74:	2300      	movs	r3, #0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10b      	bne.n	800db92 <xQueueReceive+0x62>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	61fb      	str	r3, [r7, #28]
}
 800db8c:	bf00      	nop
 800db8e:	bf00      	nop
 800db90:	e7fd      	b.n	800db8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db92:	f001 f94b 	bl	800ee2c <xTaskGetSchedulerState>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <xQueueReceive+0x72>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <xQueueReceive+0x76>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e000      	b.n	800dba8 <xQueueReceive+0x78>
 800dba6:	2300      	movs	r3, #0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10b      	bne.n	800dbc4 <xQueueReceive+0x94>
	__asm volatile
 800dbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	61bb      	str	r3, [r7, #24]
}
 800dbbe:	bf00      	nop
 800dbc0:	bf00      	nop
 800dbc2:	e7fd      	b.n	800dbc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbc4:	f001 ffc8 	bl	800fb58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d01f      	beq.n	800dc14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbd8:	f000 fa3d 	bl	800e056 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbde:	1e5a      	subs	r2, r3, #1
 800dbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00f      	beq.n	800dc0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbee:	3310      	adds	r3, #16
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f000 ff59 	bl	800eaa8 <xTaskRemoveFromEventList>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d007      	beq.n	800dc0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbfc:	4b3c      	ldr	r3, [pc, #240]	@ (800dcf0 <xQueueReceive+0x1c0>)
 800dbfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc02:	601a      	str	r2, [r3, #0]
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc0c:	f001 ffd6 	bl	800fbbc <vPortExitCritical>
				return pdPASS;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e069      	b.n	800dce8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d103      	bne.n	800dc22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc1a:	f001 ffcf 	bl	800fbbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	e062      	b.n	800dce8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d106      	bne.n	800dc36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc28:	f107 0310 	add.w	r3, r7, #16
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 ff9f 	bl	800eb70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc32:	2301      	movs	r3, #1
 800dc34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc36:	f001 ffc1 	bl	800fbbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc3a:	f000 fd11 	bl	800e660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc3e:	f001 ff8b 	bl	800fb58 <vPortEnterCritical>
 800dc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc48:	b25b      	sxtb	r3, r3
 800dc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4e:	d103      	bne.n	800dc58 <xQueueReceive+0x128>
 800dc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc5e:	b25b      	sxtb	r3, r3
 800dc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc64:	d103      	bne.n	800dc6e <xQueueReceive+0x13e>
 800dc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc6e:	f001 ffa5 	bl	800fbbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc72:	1d3a      	adds	r2, r7, #4
 800dc74:	f107 0310 	add.w	r3, r7, #16
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 ff8e 	bl	800eb9c <xTaskCheckForTimeOut>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d123      	bne.n	800dcce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc88:	f000 fa5d 	bl	800e146 <prvIsQueueEmpty>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d017      	beq.n	800dcc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc94:	3324      	adds	r3, #36	@ 0x24
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 feb2 	bl	800ea04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dca2:	f000 f9fe 	bl	800e0a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dca6:	f000 fce9 	bl	800e67c <xTaskResumeAll>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d189      	bne.n	800dbc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dcb0:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf0 <xQueueReceive+0x1c0>)
 800dcb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	f3bf 8f6f 	isb	sy
 800dcc0:	e780      	b.n	800dbc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dcc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcc4:	f000 f9ed 	bl	800e0a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcc8:	f000 fcd8 	bl	800e67c <xTaskResumeAll>
 800dccc:	e77a      	b.n	800dbc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dcce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcd0:	f000 f9e7 	bl	800e0a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcd4:	f000 fcd2 	bl	800e67c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcda:	f000 fa34 	bl	800e146 <prvIsQueueEmpty>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f43f af6f 	beq.w	800dbc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dce6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3730      	adds	r7, #48	@ 0x30
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08e      	sub	sp, #56	@ 0x38
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10b      	bne.n	800dd28 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	623b      	str	r3, [r7, #32]
}
 800dd22:	bf00      	nop
 800dd24:	bf00      	nop
 800dd26:	e7fd      	b.n	800dd24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00b      	beq.n	800dd48 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	61fb      	str	r3, [r7, #28]
}
 800dd42:	bf00      	nop
 800dd44:	bf00      	nop
 800dd46:	e7fd      	b.n	800dd44 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd48:	f001 f870 	bl	800ee2c <xTaskGetSchedulerState>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d102      	bne.n	800dd58 <xQueueSemaphoreTake+0x64>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <xQueueSemaphoreTake+0x68>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e000      	b.n	800dd5e <xQueueSemaphoreTake+0x6a>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10b      	bne.n	800dd7a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	61bb      	str	r3, [r7, #24]
}
 800dd74:	bf00      	nop
 800dd76:	bf00      	nop
 800dd78:	e7fd      	b.n	800dd76 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd7a:	f001 feed 	bl	800fb58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd82:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d024      	beq.n	800ddd4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8c:	1e5a      	subs	r2, r3, #1
 800dd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd90:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d104      	bne.n	800dda4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dd9a:	f001 f9f3 	bl	800f184 <pvTaskIncrementMutexHeldCount>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00f      	beq.n	800ddcc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddae:	3310      	adds	r3, #16
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 fe79 	bl	800eaa8 <xTaskRemoveFromEventList>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d007      	beq.n	800ddcc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddbc:	4b54      	ldr	r3, [pc, #336]	@ (800df10 <xQueueSemaphoreTake+0x21c>)
 800ddbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddc2:	601a      	str	r2, [r3, #0]
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ddcc:	f001 fef6 	bl	800fbbc <vPortExitCritical>
				return pdPASS;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e098      	b.n	800df06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d112      	bne.n	800de00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ddda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00b      	beq.n	800ddf8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	617b      	str	r3, [r7, #20]
}
 800ddf2:	bf00      	nop
 800ddf4:	bf00      	nop
 800ddf6:	e7fd      	b.n	800ddf4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ddf8:	f001 fee0 	bl	800fbbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	e082      	b.n	800df06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de06:	f107 030c 	add.w	r3, r7, #12
 800de0a:	4618      	mov	r0, r3
 800de0c:	f000 feb0 	bl	800eb70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de10:	2301      	movs	r3, #1
 800de12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de14:	f001 fed2 	bl	800fbbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de18:	f000 fc22 	bl	800e660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de1c:	f001 fe9c 	bl	800fb58 <vPortEnterCritical>
 800de20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de26:	b25b      	sxtb	r3, r3
 800de28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2c:	d103      	bne.n	800de36 <xQueueSemaphoreTake+0x142>
 800de2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de30:	2200      	movs	r2, #0
 800de32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de42:	d103      	bne.n	800de4c <xQueueSemaphoreTake+0x158>
 800de44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de46:	2200      	movs	r2, #0
 800de48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de4c:	f001 feb6 	bl	800fbbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de50:	463a      	mov	r2, r7
 800de52:	f107 030c 	add.w	r3, r7, #12
 800de56:	4611      	mov	r1, r2
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 fe9f 	bl	800eb9c <xTaskCheckForTimeOut>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d132      	bne.n	800deca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de66:	f000 f96e 	bl	800e146 <prvIsQueueEmpty>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d026      	beq.n	800debe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d109      	bne.n	800de8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800de78:	f001 fe6e 	bl	800fb58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	4618      	mov	r0, r3
 800de82:	f000 fff1 	bl	800ee68 <xTaskPriorityInherit>
 800de86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800de88:	f001 fe98 	bl	800fbbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de8e:	3324      	adds	r3, #36	@ 0x24
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	4611      	mov	r1, r2
 800de94:	4618      	mov	r0, r3
 800de96:	f000 fdb5 	bl	800ea04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de9c:	f000 f901 	bl	800e0a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dea0:	f000 fbec 	bl	800e67c <xTaskResumeAll>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f47f af67 	bne.w	800dd7a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800deac:	4b18      	ldr	r3, [pc, #96]	@ (800df10 <xQueueSemaphoreTake+0x21c>)
 800deae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	e75d      	b.n	800dd7a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800debe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dec0:	f000 f8ef 	bl	800e0a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dec4:	f000 fbda 	bl	800e67c <xTaskResumeAll>
 800dec8:	e757      	b.n	800dd7a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800deca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800decc:	f000 f8e9 	bl	800e0a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ded0:	f000 fbd4 	bl	800e67c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ded4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ded6:	f000 f936 	bl	800e146 <prvIsQueueEmpty>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f43f af4c 	beq.w	800dd7a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00d      	beq.n	800df04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dee8:	f001 fe36 	bl	800fb58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800deec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800deee:	f000 f830 	bl	800df52 <prvGetDisinheritPriorityAfterTimeout>
 800def2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800def4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800defa:	4618      	mov	r0, r3
 800defc:	f001 f8b2 	bl	800f064 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800df00:	f001 fe5c 	bl	800fbbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df06:	4618      	mov	r0, r3
 800df08:	3738      	adds	r7, #56	@ 0x38
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	e000ed04 	.word	0xe000ed04

0800df14 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10b      	bne.n	800df3a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	60bb      	str	r3, [r7, #8]
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop
 800df38:	e7fd      	b.n	800df36 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800df3a:	f001 fe0d 	bl	800fb58 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df42:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800df44:	f001 fe3a 	bl	800fbbc <vPortExitCritical>

	return uxReturn;
 800df48:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800df4a:	4618      	mov	r0, r3
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800df52:	b480      	push	{r7}
 800df54:	b085      	sub	sp, #20
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d006      	beq.n	800df70 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f1c3 0307 	rsb	r3, r3, #7
 800df6c:	60fb      	str	r3, [r7, #12]
 800df6e:	e001      	b.n	800df74 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800df70:	2300      	movs	r3, #0
 800df72:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800df74:	68fb      	ldr	r3, [r7, #12]
	}
 800df76:	4618      	mov	r0, r3
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b086      	sub	sp, #24
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800df8e:	2300      	movs	r3, #0
 800df90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d10d      	bne.n	800dfbc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d14d      	bne.n	800e044 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f000 ffd1 	bl	800ef54 <xTaskPriorityDisinherit>
 800dfb2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	609a      	str	r2, [r3, #8]
 800dfba:	e043      	b.n	800e044 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d119      	bne.n	800dff6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6858      	ldr	r0, [r3, #4]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfca:	461a      	mov	r2, r3
 800dfcc:	68b9      	ldr	r1, [r7, #8]
 800dfce:	f002 ff09 	bl	8010de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfda:	441a      	add	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d32b      	bcc.n	800e044 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	605a      	str	r2, [r3, #4]
 800dff4:	e026      	b.n	800e044 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	68d8      	ldr	r0, [r3, #12]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dffe:	461a      	mov	r2, r3
 800e000:	68b9      	ldr	r1, [r7, #8]
 800e002:	f002 feef 	bl	8010de4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	68da      	ldr	r2, [r3, #12]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e00e:	425b      	negs	r3, r3
 800e010:	441a      	add	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	68da      	ldr	r2, [r3, #12]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d207      	bcs.n	800e032 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	689a      	ldr	r2, [r3, #8]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e02a:	425b      	negs	r3, r3
 800e02c:	441a      	add	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b02      	cmp	r3, #2
 800e036:	d105      	bne.n	800e044 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d002      	beq.n	800e044 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	3b01      	subs	r3, #1
 800e042:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e04c:	697b      	ldr	r3, [r7, #20]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b082      	sub	sp, #8
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
 800e05e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e064:	2b00      	cmp	r3, #0
 800e066:	d018      	beq.n	800e09a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	68da      	ldr	r2, [r3, #12]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e070:	441a      	add	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68da      	ldr	r2, [r3, #12]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d303      	bcc.n	800e08a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68d9      	ldr	r1, [r3, #12]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e092:	461a      	mov	r2, r3
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f002 fea5 	bl	8010de4 <memcpy>
	}
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0aa:	f001 fd55 	bl	800fb58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0b6:	e011      	b.n	800e0dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d012      	beq.n	800e0e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3324      	adds	r3, #36	@ 0x24
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 fcef 	bl	800eaa8 <xTaskRemoveFromEventList>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0d0:	f000 fdc8 	bl	800ec64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0d4:	7bfb      	ldrb	r3, [r7, #15]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dce9      	bgt.n	800e0b8 <prvUnlockQueue+0x16>
 800e0e4:	e000      	b.n	800e0e8 <prvUnlockQueue+0x46>
					break;
 800e0e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	22ff      	movs	r2, #255	@ 0xff
 800e0ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e0f0:	f001 fd64 	bl	800fbbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e0f4:	f001 fd30 	bl	800fb58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e100:	e011      	b.n	800e126 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d012      	beq.n	800e130 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3310      	adds	r3, #16
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 fcca 	bl	800eaa8 <xTaskRemoveFromEventList>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e11a:	f000 fda3 	bl	800ec64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e11e:	7bbb      	ldrb	r3, [r7, #14]
 800e120:	3b01      	subs	r3, #1
 800e122:	b2db      	uxtb	r3, r3
 800e124:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	dce9      	bgt.n	800e102 <prvUnlockQueue+0x60>
 800e12e:	e000      	b.n	800e132 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e130:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	22ff      	movs	r2, #255	@ 0xff
 800e136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e13a:	f001 fd3f 	bl	800fbbc <vPortExitCritical>
}
 800e13e:	bf00      	nop
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b084      	sub	sp, #16
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e14e:	f001 fd03 	bl	800fb58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e156:	2b00      	cmp	r3, #0
 800e158:	d102      	bne.n	800e160 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e15a:	2301      	movs	r3, #1
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	e001      	b.n	800e164 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e160:	2300      	movs	r3, #0
 800e162:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e164:	f001 fd2a 	bl	800fbbc <vPortExitCritical>

	return xReturn;
 800e168:	68fb      	ldr	r3, [r7, #12]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b084      	sub	sp, #16
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e17a:	f001 fced 	bl	800fb58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e186:	429a      	cmp	r2, r3
 800e188:	d102      	bne.n	800e190 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e18a:	2301      	movs	r3, #1
 800e18c:	60fb      	str	r3, [r7, #12]
 800e18e:	e001      	b.n	800e194 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e190:	2300      	movs	r3, #0
 800e192:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e194:	f001 fd12 	bl	800fbbc <vPortExitCritical>

	return xReturn;
 800e198:	68fb      	ldr	r3, [r7, #12]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
	...

0800e1a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	e014      	b.n	800e1de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e1b4:	4a0f      	ldr	r2, [pc, #60]	@ (800e1f4 <vQueueAddToRegistry+0x50>)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10b      	bne.n	800e1d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e1c0:	490c      	ldr	r1, [pc, #48]	@ (800e1f4 <vQueueAddToRegistry+0x50>)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e1ca:	4a0a      	ldr	r2, [pc, #40]	@ (800e1f4 <vQueueAddToRegistry+0x50>)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	4413      	add	r3, r2
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e1d6:	e006      	b.n	800e1e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2b07      	cmp	r3, #7
 800e1e2:	d9e7      	bls.n	800e1b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e1e4:	bf00      	nop
 800e1e6:	bf00      	nop
 800e1e8:	3714      	adds	r7, #20
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	20001b6c 	.word	0x20001b6c

0800e1f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e208:	f001 fca6 	bl	800fb58 <vPortEnterCritical>
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e212:	b25b      	sxtb	r3, r3
 800e214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e218:	d103      	bne.n	800e222 <vQueueWaitForMessageRestricted+0x2a>
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	2200      	movs	r2, #0
 800e21e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e228:	b25b      	sxtb	r3, r3
 800e22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22e:	d103      	bne.n	800e238 <vQueueWaitForMessageRestricted+0x40>
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e238:	f001 fcc0 	bl	800fbbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e240:	2b00      	cmp	r3, #0
 800e242:	d106      	bne.n	800e252 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	3324      	adds	r3, #36	@ 0x24
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	68b9      	ldr	r1, [r7, #8]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 fbff 	bl	800ea50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e252:	6978      	ldr	r0, [r7, #20]
 800e254:	f7ff ff25 	bl	800e0a2 <prvUnlockQueue>
	}
 800e258:	bf00      	nop
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e260:	b580      	push	{r7, lr}
 800e262:	b08e      	sub	sp, #56	@ 0x38
 800e264:	af04      	add	r7, sp, #16
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10b      	bne.n	800e28c <xTaskCreateStatic+0x2c>
	__asm volatile
 800e274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e278:	f383 8811 	msr	BASEPRI, r3
 800e27c:	f3bf 8f6f 	isb	sy
 800e280:	f3bf 8f4f 	dsb	sy
 800e284:	623b      	str	r3, [r7, #32]
}
 800e286:	bf00      	nop
 800e288:	bf00      	nop
 800e28a:	e7fd      	b.n	800e288 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <xTaskCreateStatic+0x4a>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	61fb      	str	r3, [r7, #28]
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e2aa:	2354      	movs	r3, #84	@ 0x54
 800e2ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b54      	cmp	r3, #84	@ 0x54
 800e2b2:	d00b      	beq.n	800e2cc <xTaskCreateStatic+0x6c>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	61bb      	str	r3, [r7, #24]
}
 800e2c6:	bf00      	nop
 800e2c8:	bf00      	nop
 800e2ca:	e7fd      	b.n	800e2c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e2cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d01e      	beq.n	800e312 <xTaskCreateStatic+0xb2>
 800e2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d01b      	beq.n	800e312 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	9303      	str	r3, [sp, #12]
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f2:	9302      	str	r3, [sp, #8]
 800e2f4:	f107 0314 	add.w	r3, r7, #20
 800e2f8:	9301      	str	r3, [sp, #4]
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	68b9      	ldr	r1, [r7, #8]
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f000 f850 	bl	800e3aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e30a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e30c:	f000 f8d6 	bl	800e4bc <prvAddNewTaskToReadyList>
 800e310:	e001      	b.n	800e316 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e316:	697b      	ldr	r3, [r7, #20]
	}
 800e318:	4618      	mov	r0, r3
 800e31a:	3728      	adds	r7, #40	@ 0x28
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08c      	sub	sp, #48	@ 0x30
 800e324:	af04      	add	r7, sp, #16
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	603b      	str	r3, [r7, #0]
 800e32c:	4613      	mov	r3, r2
 800e32e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e330:	88fb      	ldrh	r3, [r7, #6]
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4618      	mov	r0, r3
 800e336:	f001 fd31 	bl	800fd9c <pvPortMalloc>
 800e33a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00e      	beq.n	800e360 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e342:	2054      	movs	r0, #84	@ 0x54
 800e344:	f001 fd2a 	bl	800fd9c <pvPortMalloc>
 800e348:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d003      	beq.n	800e358 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	631a      	str	r2, [r3, #48]	@ 0x30
 800e356:	e005      	b.n	800e364 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e358:	6978      	ldr	r0, [r7, #20]
 800e35a:	f001 fded 	bl	800ff38 <vPortFree>
 800e35e:	e001      	b.n	800e364 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e360:	2300      	movs	r3, #0
 800e362:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d017      	beq.n	800e39a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e372:	88fa      	ldrh	r2, [r7, #6]
 800e374:	2300      	movs	r3, #0
 800e376:	9303      	str	r3, [sp, #12]
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	9302      	str	r3, [sp, #8]
 800e37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37e:	9301      	str	r3, [sp, #4]
 800e380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	68b9      	ldr	r1, [r7, #8]
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f000 f80e 	bl	800e3aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e38e:	69f8      	ldr	r0, [r7, #28]
 800e390:	f000 f894 	bl	800e4bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e394:	2301      	movs	r3, #1
 800e396:	61bb      	str	r3, [r7, #24]
 800e398:	e002      	b.n	800e3a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e39a:	f04f 33ff 	mov.w	r3, #4294967295
 800e39e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e3a0:	69bb      	ldr	r3, [r7, #24]
	}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3720      	adds	r7, #32
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b088      	sub	sp, #32
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	60f8      	str	r0, [r7, #12]
 800e3b2:	60b9      	str	r1, [r7, #8]
 800e3b4:	607a      	str	r2, [r7, #4]
 800e3b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	f023 0307 	bic.w	r3, r3, #7
 800e3d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	f003 0307 	and.w	r3, r3, #7
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00b      	beq.n	800e3f4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	617b      	str	r3, [r7, #20]
}
 800e3ee:	bf00      	nop
 800e3f0:	bf00      	nop
 800e3f2:	e7fd      	b.n	800e3f0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d01f      	beq.n	800e43a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	61fb      	str	r3, [r7, #28]
 800e3fe:	e012      	b.n	800e426 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e400:	68ba      	ldr	r2, [r7, #8]
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	4413      	add	r3, r2
 800e406:	7819      	ldrb	r1, [r3, #0]
 800e408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	4413      	add	r3, r2
 800e40e:	3334      	adds	r3, #52	@ 0x34
 800e410:	460a      	mov	r2, r1
 800e412:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	4413      	add	r3, r2
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d006      	beq.n	800e42e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	3301      	adds	r3, #1
 800e424:	61fb      	str	r3, [r7, #28]
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	2b0f      	cmp	r3, #15
 800e42a:	d9e9      	bls.n	800e400 <prvInitialiseNewTask+0x56>
 800e42c:	e000      	b.n	800e430 <prvInitialiseNewTask+0x86>
			{
				break;
 800e42e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e432:	2200      	movs	r2, #0
 800e434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e438:	e003      	b.n	800e442 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e444:	2b06      	cmp	r3, #6
 800e446:	d901      	bls.n	800e44c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e448:	2306      	movs	r3, #6
 800e44a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e450:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e456:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e45a:	2200      	movs	r2, #0
 800e45c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e460:	3304      	adds	r3, #4
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe fef8 	bl	800d258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46a:	3318      	adds	r3, #24
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe fef3 	bl	800d258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e476:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47a:	f1c3 0207 	rsb	r2, r3, #7
 800e47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e480:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e486:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e48a:	2200      	movs	r2, #0
 800e48c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	68f9      	ldr	r1, [r7, #12]
 800e49a:	69b8      	ldr	r0, [r7, #24]
 800e49c:	f001 fa2a 	bl	800f8f4 <pxPortInitialiseStack>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4b2:	bf00      	nop
 800e4b4:	3720      	adds	r7, #32
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e4c4:	f001 fb48 	bl	800fb58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e4c8:	4b2a      	ldr	r3, [pc, #168]	@ (800e574 <prvAddNewTaskToReadyList+0xb8>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	4a29      	ldr	r2, [pc, #164]	@ (800e574 <prvAddNewTaskToReadyList+0xb8>)
 800e4d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e4d2:	4b29      	ldr	r3, [pc, #164]	@ (800e578 <prvAddNewTaskToReadyList+0xbc>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d109      	bne.n	800e4ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e4da:	4a27      	ldr	r2, [pc, #156]	@ (800e578 <prvAddNewTaskToReadyList+0xbc>)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e4e0:	4b24      	ldr	r3, [pc, #144]	@ (800e574 <prvAddNewTaskToReadyList+0xb8>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d110      	bne.n	800e50a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e4e8:	f000 fbe2 	bl	800ecb0 <prvInitialiseTaskLists>
 800e4ec:	e00d      	b.n	800e50a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e4ee:	4b23      	ldr	r3, [pc, #140]	@ (800e57c <prvAddNewTaskToReadyList+0xc0>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d109      	bne.n	800e50a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e4f6:	4b20      	ldr	r3, [pc, #128]	@ (800e578 <prvAddNewTaskToReadyList+0xbc>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e500:	429a      	cmp	r2, r3
 800e502:	d802      	bhi.n	800e50a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e504:	4a1c      	ldr	r2, [pc, #112]	@ (800e578 <prvAddNewTaskToReadyList+0xbc>)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e50a:	4b1d      	ldr	r3, [pc, #116]	@ (800e580 <prvAddNewTaskToReadyList+0xc4>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3301      	adds	r3, #1
 800e510:	4a1b      	ldr	r2, [pc, #108]	@ (800e580 <prvAddNewTaskToReadyList+0xc4>)
 800e512:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e518:	2201      	movs	r2, #1
 800e51a:	409a      	lsls	r2, r3
 800e51c:	4b19      	ldr	r3, [pc, #100]	@ (800e584 <prvAddNewTaskToReadyList+0xc8>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4313      	orrs	r3, r2
 800e522:	4a18      	ldr	r2, [pc, #96]	@ (800e584 <prvAddNewTaskToReadyList+0xc8>)
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52a:	4613      	mov	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4a15      	ldr	r2, [pc, #84]	@ (800e588 <prvAddNewTaskToReadyList+0xcc>)
 800e534:	441a      	add	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	3304      	adds	r3, #4
 800e53a:	4619      	mov	r1, r3
 800e53c:	4610      	mov	r0, r2
 800e53e:	f7fe fe98 	bl	800d272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e542:	f001 fb3b 	bl	800fbbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e546:	4b0d      	ldr	r3, [pc, #52]	@ (800e57c <prvAddNewTaskToReadyList+0xc0>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00e      	beq.n	800e56c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e54e:	4b0a      	ldr	r3, [pc, #40]	@ (800e578 <prvAddNewTaskToReadyList+0xbc>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e558:	429a      	cmp	r2, r3
 800e55a:	d207      	bcs.n	800e56c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e55c:	4b0b      	ldr	r3, [pc, #44]	@ (800e58c <prvAddNewTaskToReadyList+0xd0>)
 800e55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e562:	601a      	str	r2, [r3, #0]
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e56c:	bf00      	nop
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20001cac 	.word	0x20001cac
 800e578:	20001bac 	.word	0x20001bac
 800e57c:	20001cb8 	.word	0x20001cb8
 800e580:	20001cc8 	.word	0x20001cc8
 800e584:	20001cb4 	.word	0x20001cb4
 800e588:	20001bb0 	.word	0x20001bb0
 800e58c:	e000ed04 	.word	0xe000ed04

0800e590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b08a      	sub	sp, #40	@ 0x28
 800e594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e596:	2300      	movs	r3, #0
 800e598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e59e:	463a      	mov	r2, r7
 800e5a0:	1d39      	adds	r1, r7, #4
 800e5a2:	f107 0308 	add.w	r3, r7, #8
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f3 fd1c 	bl	8001fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	9202      	str	r2, [sp, #8]
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	460a      	mov	r2, r1
 800e5be:	4922      	ldr	r1, [pc, #136]	@ (800e648 <vTaskStartScheduler+0xb8>)
 800e5c0:	4822      	ldr	r0, [pc, #136]	@ (800e64c <vTaskStartScheduler+0xbc>)
 800e5c2:	f7ff fe4d 	bl	800e260 <xTaskCreateStatic>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	4a21      	ldr	r2, [pc, #132]	@ (800e650 <vTaskStartScheduler+0xc0>)
 800e5ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5cc:	4b20      	ldr	r3, [pc, #128]	@ (800e650 <vTaskStartScheduler+0xc0>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	617b      	str	r3, [r7, #20]
 800e5d8:	e001      	b.n	800e5de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d102      	bne.n	800e5ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e5e4:	f000 fe48 	bl	800f278 <xTimerCreateTimerTask>
 800e5e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d116      	bne.n	800e61e <vTaskStartScheduler+0x8e>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	613b      	str	r3, [r7, #16]
}
 800e602:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e604:	4b13      	ldr	r3, [pc, #76]	@ (800e654 <vTaskStartScheduler+0xc4>)
 800e606:	f04f 32ff 	mov.w	r2, #4294967295
 800e60a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e60c:	4b12      	ldr	r3, [pc, #72]	@ (800e658 <vTaskStartScheduler+0xc8>)
 800e60e:	2201      	movs	r2, #1
 800e610:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e612:	4b12      	ldr	r3, [pc, #72]	@ (800e65c <vTaskStartScheduler+0xcc>)
 800e614:	2200      	movs	r2, #0
 800e616:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e618:	f001 f9fa 	bl	800fa10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e61c:	e00f      	b.n	800e63e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e624:	d10b      	bne.n	800e63e <vTaskStartScheduler+0xae>
	__asm volatile
 800e626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e62a:	f383 8811 	msr	BASEPRI, r3
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	60fb      	str	r3, [r7, #12]
}
 800e638:	bf00      	nop
 800e63a:	bf00      	nop
 800e63c:	e7fd      	b.n	800e63a <vTaskStartScheduler+0xaa>
}
 800e63e:	bf00      	nop
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	08011c20 	.word	0x08011c20
 800e64c:	0800ec7d 	.word	0x0800ec7d
 800e650:	20001cd0 	.word	0x20001cd0
 800e654:	20001ccc 	.word	0x20001ccc
 800e658:	20001cb8 	.word	0x20001cb8
 800e65c:	20001cb0 	.word	0x20001cb0

0800e660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e660:	b480      	push	{r7}
 800e662:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e664:	4b04      	ldr	r3, [pc, #16]	@ (800e678 <vTaskSuspendAll+0x18>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3301      	adds	r3, #1
 800e66a:	4a03      	ldr	r2, [pc, #12]	@ (800e678 <vTaskSuspendAll+0x18>)
 800e66c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e66e:	bf00      	nop
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	20001cd4 	.word	0x20001cd4

0800e67c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e686:	2300      	movs	r3, #0
 800e688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e68a:	4b42      	ldr	r3, [pc, #264]	@ (800e794 <xTaskResumeAll+0x118>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10b      	bne.n	800e6aa <xTaskResumeAll+0x2e>
	__asm volatile
 800e692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	603b      	str	r3, [r7, #0]
}
 800e6a4:	bf00      	nop
 800e6a6:	bf00      	nop
 800e6a8:	e7fd      	b.n	800e6a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6aa:	f001 fa55 	bl	800fb58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6ae:	4b39      	ldr	r3, [pc, #228]	@ (800e794 <xTaskResumeAll+0x118>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	4a37      	ldr	r2, [pc, #220]	@ (800e794 <xTaskResumeAll+0x118>)
 800e6b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6b8:	4b36      	ldr	r3, [pc, #216]	@ (800e794 <xTaskResumeAll+0x118>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d161      	bne.n	800e784 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6c0:	4b35      	ldr	r3, [pc, #212]	@ (800e798 <xTaskResumeAll+0x11c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d05d      	beq.n	800e784 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6c8:	e02e      	b.n	800e728 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ca:	4b34      	ldr	r3, [pc, #208]	@ (800e79c <xTaskResumeAll+0x120>)
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3318      	adds	r3, #24
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fe28 	bl	800d32c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3304      	adds	r3, #4
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fe fe23 	bl	800d32c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	409a      	lsls	r2, r3
 800e6ee:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a0 <xTaskResumeAll+0x124>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	4a2a      	ldr	r2, [pc, #168]	@ (800e7a0 <xTaskResumeAll+0x124>)
 800e6f6:	6013      	str	r3, [r2, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4a27      	ldr	r2, [pc, #156]	@ (800e7a4 <xTaskResumeAll+0x128>)
 800e706:	441a      	add	r2, r3
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4610      	mov	r0, r2
 800e710:	f7fe fdaf 	bl	800d272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e718:	4b23      	ldr	r3, [pc, #140]	@ (800e7a8 <xTaskResumeAll+0x12c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e71e:	429a      	cmp	r2, r3
 800e720:	d302      	bcc.n	800e728 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e722:	4b22      	ldr	r3, [pc, #136]	@ (800e7ac <xTaskResumeAll+0x130>)
 800e724:	2201      	movs	r2, #1
 800e726:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e728:	4b1c      	ldr	r3, [pc, #112]	@ (800e79c <xTaskResumeAll+0x120>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1cc      	bne.n	800e6ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e736:	f000 fb59 	bl	800edec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e73a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7b0 <xTaskResumeAll+0x134>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d010      	beq.n	800e768 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e746:	f000 f847 	bl	800e7d8 <xTaskIncrementTick>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d002      	beq.n	800e756 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e750:	4b16      	ldr	r3, [pc, #88]	@ (800e7ac <xTaskResumeAll+0x130>)
 800e752:	2201      	movs	r2, #1
 800e754:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3b01      	subs	r3, #1
 800e75a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1f1      	bne.n	800e746 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e762:	4b13      	ldr	r3, [pc, #76]	@ (800e7b0 <xTaskResumeAll+0x134>)
 800e764:	2200      	movs	r2, #0
 800e766:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e768:	4b10      	ldr	r3, [pc, #64]	@ (800e7ac <xTaskResumeAll+0x130>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d009      	beq.n	800e784 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e770:	2301      	movs	r3, #1
 800e772:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e774:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b4 <xTaskResumeAll+0x138>)
 800e776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e77a:	601a      	str	r2, [r3, #0]
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e784:	f001 fa1a 	bl	800fbbc <vPortExitCritical>

	return xAlreadyYielded;
 800e788:	68bb      	ldr	r3, [r7, #8]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	20001cd4 	.word	0x20001cd4
 800e798:	20001cac 	.word	0x20001cac
 800e79c:	20001c6c 	.word	0x20001c6c
 800e7a0:	20001cb4 	.word	0x20001cb4
 800e7a4:	20001bb0 	.word	0x20001bb0
 800e7a8:	20001bac 	.word	0x20001bac
 800e7ac:	20001cc0 	.word	0x20001cc0
 800e7b0:	20001cbc 	.word	0x20001cbc
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e7be:	4b05      	ldr	r3, [pc, #20]	@ (800e7d4 <xTaskGetTickCount+0x1c>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e7c4:	687b      	ldr	r3, [r7, #4]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20001cb0 	.word	0x20001cb0

0800e7d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7e2:	4b4f      	ldr	r3, [pc, #316]	@ (800e920 <xTaskIncrementTick+0x148>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f040 808f 	bne.w	800e90a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7ec:	4b4d      	ldr	r3, [pc, #308]	@ (800e924 <xTaskIncrementTick+0x14c>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7f4:	4a4b      	ldr	r2, [pc, #300]	@ (800e924 <xTaskIncrementTick+0x14c>)
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d121      	bne.n	800e844 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e800:	4b49      	ldr	r3, [pc, #292]	@ (800e928 <xTaskIncrementTick+0x150>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00b      	beq.n	800e822 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	603b      	str	r3, [r7, #0]
}
 800e81c:	bf00      	nop
 800e81e:	bf00      	nop
 800e820:	e7fd      	b.n	800e81e <xTaskIncrementTick+0x46>
 800e822:	4b41      	ldr	r3, [pc, #260]	@ (800e928 <xTaskIncrementTick+0x150>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	4b40      	ldr	r3, [pc, #256]	@ (800e92c <xTaskIncrementTick+0x154>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a3e      	ldr	r2, [pc, #248]	@ (800e928 <xTaskIncrementTick+0x150>)
 800e82e:	6013      	str	r3, [r2, #0]
 800e830:	4a3e      	ldr	r2, [pc, #248]	@ (800e92c <xTaskIncrementTick+0x154>)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	6013      	str	r3, [r2, #0]
 800e836:	4b3e      	ldr	r3, [pc, #248]	@ (800e930 <xTaskIncrementTick+0x158>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	3301      	adds	r3, #1
 800e83c:	4a3c      	ldr	r2, [pc, #240]	@ (800e930 <xTaskIncrementTick+0x158>)
 800e83e:	6013      	str	r3, [r2, #0]
 800e840:	f000 fad4 	bl	800edec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e844:	4b3b      	ldr	r3, [pc, #236]	@ (800e934 <xTaskIncrementTick+0x15c>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	693a      	ldr	r2, [r7, #16]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d348      	bcc.n	800e8e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e84e:	4b36      	ldr	r3, [pc, #216]	@ (800e928 <xTaskIncrementTick+0x150>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d104      	bne.n	800e862 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e858:	4b36      	ldr	r3, [pc, #216]	@ (800e934 <xTaskIncrementTick+0x15c>)
 800e85a:	f04f 32ff 	mov.w	r2, #4294967295
 800e85e:	601a      	str	r2, [r3, #0]
					break;
 800e860:	e03e      	b.n	800e8e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e862:	4b31      	ldr	r3, [pc, #196]	@ (800e928 <xTaskIncrementTick+0x150>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e872:	693a      	ldr	r2, [r7, #16]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	429a      	cmp	r2, r3
 800e878:	d203      	bcs.n	800e882 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e87a:	4a2e      	ldr	r2, [pc, #184]	@ (800e934 <xTaskIncrementTick+0x15c>)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e880:	e02e      	b.n	800e8e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	3304      	adds	r3, #4
 800e886:	4618      	mov	r0, r3
 800e888:	f7fe fd50 	bl	800d32c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e890:	2b00      	cmp	r3, #0
 800e892:	d004      	beq.n	800e89e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	3318      	adds	r3, #24
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fe fd47 	bl	800d32c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	409a      	lsls	r2, r3
 800e8a6:	4b24      	ldr	r3, [pc, #144]	@ (800e938 <xTaskIncrementTick+0x160>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	4a22      	ldr	r2, [pc, #136]	@ (800e938 <xTaskIncrementTick+0x160>)
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4413      	add	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4a1f      	ldr	r2, [pc, #124]	@ (800e93c <xTaskIncrementTick+0x164>)
 800e8be:	441a      	add	r2, r3
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f7fe fcd3 	bl	800d272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8d0:	4b1b      	ldr	r3, [pc, #108]	@ (800e940 <xTaskIncrementTick+0x168>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d3b9      	bcc.n	800e84e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8de:	e7b6      	b.n	800e84e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8e0:	4b17      	ldr	r3, [pc, #92]	@ (800e940 <xTaskIncrementTick+0x168>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e6:	4915      	ldr	r1, [pc, #84]	@ (800e93c <xTaskIncrementTick+0x164>)
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	440b      	add	r3, r1
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d901      	bls.n	800e8fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e8fc:	4b11      	ldr	r3, [pc, #68]	@ (800e944 <xTaskIncrementTick+0x16c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d007      	beq.n	800e914 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e904:	2301      	movs	r3, #1
 800e906:	617b      	str	r3, [r7, #20]
 800e908:	e004      	b.n	800e914 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e90a:	4b0f      	ldr	r3, [pc, #60]	@ (800e948 <xTaskIncrementTick+0x170>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3301      	adds	r3, #1
 800e910:	4a0d      	ldr	r2, [pc, #52]	@ (800e948 <xTaskIncrementTick+0x170>)
 800e912:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e914:	697b      	ldr	r3, [r7, #20]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3718      	adds	r7, #24
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20001cd4 	.word	0x20001cd4
 800e924:	20001cb0 	.word	0x20001cb0
 800e928:	20001c64 	.word	0x20001c64
 800e92c:	20001c68 	.word	0x20001c68
 800e930:	20001cc4 	.word	0x20001cc4
 800e934:	20001ccc 	.word	0x20001ccc
 800e938:	20001cb4 	.word	0x20001cb4
 800e93c:	20001bb0 	.word	0x20001bb0
 800e940:	20001bac 	.word	0x20001bac
 800e944:	20001cc0 	.word	0x20001cc0
 800e948:	20001cbc 	.word	0x20001cbc

0800e94c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e952:	4b27      	ldr	r3, [pc, #156]	@ (800e9f0 <vTaskSwitchContext+0xa4>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e95a:	4b26      	ldr	r3, [pc, #152]	@ (800e9f4 <vTaskSwitchContext+0xa8>)
 800e95c:	2201      	movs	r2, #1
 800e95e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e960:	e040      	b.n	800e9e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e962:	4b24      	ldr	r3, [pc, #144]	@ (800e9f4 <vTaskSwitchContext+0xa8>)
 800e964:	2200      	movs	r2, #0
 800e966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e968:	4b23      	ldr	r3, [pc, #140]	@ (800e9f8 <vTaskSwitchContext+0xac>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	fab3 f383 	clz	r3, r3
 800e974:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e976:	7afb      	ldrb	r3, [r7, #11]
 800e978:	f1c3 031f 	rsb	r3, r3, #31
 800e97c:	617b      	str	r3, [r7, #20]
 800e97e:	491f      	ldr	r1, [pc, #124]	@ (800e9fc <vTaskSwitchContext+0xb0>)
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	4613      	mov	r3, r2
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4413      	add	r3, r2
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	440b      	add	r3, r1
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10b      	bne.n	800e9aa <vTaskSwitchContext+0x5e>
	__asm volatile
 800e992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	607b      	str	r3, [r7, #4]
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	e7fd      	b.n	800e9a6 <vTaskSwitchContext+0x5a>
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	4a11      	ldr	r2, [pc, #68]	@ (800e9fc <vTaskSwitchContext+0xb0>)
 800e9b6:	4413      	add	r3, r2
 800e9b8:	613b      	str	r3, [r7, #16]
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	685a      	ldr	r2, [r3, #4]
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	605a      	str	r2, [r3, #4]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	685a      	ldr	r2, [r3, #4]
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d104      	bne.n	800e9da <vTaskSwitchContext+0x8e>
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	605a      	str	r2, [r3, #4]
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	4a07      	ldr	r2, [pc, #28]	@ (800ea00 <vTaskSwitchContext+0xb4>)
 800e9e2:	6013      	str	r3, [r2, #0]
}
 800e9e4:	bf00      	nop
 800e9e6:	371c      	adds	r7, #28
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	20001cd4 	.word	0x20001cd4
 800e9f4:	20001cc0 	.word	0x20001cc0
 800e9f8:	20001cb4 	.word	0x20001cb4
 800e9fc:	20001bb0 	.word	0x20001bb0
 800ea00:	20001bac 	.word	0x20001bac

0800ea04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10b      	bne.n	800ea2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ea14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	60fb      	str	r3, [r7, #12]
}
 800ea26:	bf00      	nop
 800ea28:	bf00      	nop
 800ea2a:	e7fd      	b.n	800ea28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea2c:	4b07      	ldr	r3, [pc, #28]	@ (800ea4c <vTaskPlaceOnEventList+0x48>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3318      	adds	r3, #24
 800ea32:	4619      	mov	r1, r3
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7fe fc40 	bl	800d2ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	6838      	ldr	r0, [r7, #0]
 800ea3e:	f000 fbb5 	bl	800f1ac <prvAddCurrentTaskToDelayedList>
}
 800ea42:	bf00      	nop
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20001bac 	.word	0x20001bac

0800ea50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10b      	bne.n	800ea7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ea62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	617b      	str	r3, [r7, #20]
}
 800ea74:	bf00      	nop
 800ea76:	bf00      	nop
 800ea78:	e7fd      	b.n	800ea76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea7a:	4b0a      	ldr	r3, [pc, #40]	@ (800eaa4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3318      	adds	r3, #24
 800ea80:	4619      	mov	r1, r3
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f7fe fbf5 	bl	800d272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d002      	beq.n	800ea94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ea8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	68b8      	ldr	r0, [r7, #8]
 800ea98:	f000 fb88 	bl	800f1ac <prvAddCurrentTaskToDelayedList>
	}
 800ea9c:	bf00      	nop
 800ea9e:	3718      	adds	r7, #24
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20001bac 	.word	0x20001bac

0800eaa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10b      	bne.n	800ead6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	60fb      	str	r3, [r7, #12]
}
 800ead0:	bf00      	nop
 800ead2:	bf00      	nop
 800ead4:	e7fd      	b.n	800ead2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	3318      	adds	r3, #24
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fe fc26 	bl	800d32c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eae0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb58 <xTaskRemoveFromEventList+0xb0>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d11c      	bne.n	800eb22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	3304      	adds	r3, #4
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe fc1d 	bl	800d32c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	409a      	lsls	r2, r3
 800eafa:	4b18      	ldr	r3, [pc, #96]	@ (800eb5c <xTaskRemoveFromEventList+0xb4>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	4a16      	ldr	r2, [pc, #88]	@ (800eb5c <xTaskRemoveFromEventList+0xb4>)
 800eb02:	6013      	str	r3, [r2, #0]
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb08:	4613      	mov	r3, r2
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	4413      	add	r3, r2
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	4a13      	ldr	r2, [pc, #76]	@ (800eb60 <xTaskRemoveFromEventList+0xb8>)
 800eb12:	441a      	add	r2, r3
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	3304      	adds	r3, #4
 800eb18:	4619      	mov	r1, r3
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	f7fe fba9 	bl	800d272 <vListInsertEnd>
 800eb20:	e005      	b.n	800eb2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	3318      	adds	r3, #24
 800eb26:	4619      	mov	r1, r3
 800eb28:	480e      	ldr	r0, [pc, #56]	@ (800eb64 <xTaskRemoveFromEventList+0xbc>)
 800eb2a:	f7fe fba2 	bl	800d272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb32:	4b0d      	ldr	r3, [pc, #52]	@ (800eb68 <xTaskRemoveFromEventList+0xc0>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d905      	bls.n	800eb48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb40:	4b0a      	ldr	r3, [pc, #40]	@ (800eb6c <xTaskRemoveFromEventList+0xc4>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	601a      	str	r2, [r3, #0]
 800eb46:	e001      	b.n	800eb4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb4c:	697b      	ldr	r3, [r7, #20]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3718      	adds	r7, #24
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	20001cd4 	.word	0x20001cd4
 800eb5c:	20001cb4 	.word	0x20001cb4
 800eb60:	20001bb0 	.word	0x20001bb0
 800eb64:	20001c6c 	.word	0x20001c6c
 800eb68:	20001bac 	.word	0x20001bac
 800eb6c:	20001cc0 	.word	0x20001cc0

0800eb70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb78:	4b06      	ldr	r3, [pc, #24]	@ (800eb94 <vTaskInternalSetTimeOutState+0x24>)
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb80:	4b05      	ldr	r3, [pc, #20]	@ (800eb98 <vTaskInternalSetTimeOutState+0x28>)
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	605a      	str	r2, [r3, #4]
}
 800eb88:	bf00      	nop
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	20001cc4 	.word	0x20001cc4
 800eb98:	20001cb0 	.word	0x20001cb0

0800eb9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b088      	sub	sp, #32
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10b      	bne.n	800ebc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	613b      	str	r3, [r7, #16]
}
 800ebbe:	bf00      	nop
 800ebc0:	bf00      	nop
 800ebc2:	e7fd      	b.n	800ebc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10b      	bne.n	800ebe2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	60fb      	str	r3, [r7, #12]
}
 800ebdc:	bf00      	nop
 800ebde:	bf00      	nop
 800ebe0:	e7fd      	b.n	800ebde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ebe2:	f000 ffb9 	bl	800fb58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ebe6:	4b1d      	ldr	r3, [pc, #116]	@ (800ec5c <xTaskCheckForTimeOut+0xc0>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	69ba      	ldr	r2, [r7, #24]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfe:	d102      	bne.n	800ec06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec00:	2300      	movs	r3, #0
 800ec02:	61fb      	str	r3, [r7, #28]
 800ec04:	e023      	b.n	800ec4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	4b15      	ldr	r3, [pc, #84]	@ (800ec60 <xTaskCheckForTimeOut+0xc4>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d007      	beq.n	800ec22 <xTaskCheckForTimeOut+0x86>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	69ba      	ldr	r2, [r7, #24]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d302      	bcc.n	800ec22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	61fb      	str	r3, [r7, #28]
 800ec20:	e015      	b.n	800ec4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	697a      	ldr	r2, [r7, #20]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d20b      	bcs.n	800ec44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	1ad2      	subs	r2, r2, r3
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f7ff ff99 	bl	800eb70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	61fb      	str	r3, [r7, #28]
 800ec42:	e004      	b.n	800ec4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	2200      	movs	r2, #0
 800ec48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec4e:	f000 ffb5 	bl	800fbbc <vPortExitCritical>

	return xReturn;
 800ec52:	69fb      	ldr	r3, [r7, #28]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3720      	adds	r7, #32
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	20001cb0 	.word	0x20001cb0
 800ec60:	20001cc4 	.word	0x20001cc4

0800ec64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec64:	b480      	push	{r7}
 800ec66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec68:	4b03      	ldr	r3, [pc, #12]	@ (800ec78 <vTaskMissedYield+0x14>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	601a      	str	r2, [r3, #0]
}
 800ec6e:	bf00      	nop
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	20001cc0 	.word	0x20001cc0

0800ec7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec84:	f000 f854 	bl	800ed30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec88:	4b07      	ldr	r3, [pc, #28]	@ (800eca8 <prvIdleTask+0x2c>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d907      	bls.n	800eca0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ec90:	4b06      	ldr	r3, [pc, #24]	@ (800ecac <prvIdleTask+0x30>)
 800ec92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec96:	601a      	str	r2, [r3, #0]
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800eca0:	f7f6 fb1e 	bl	80052e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800eca4:	e7ee      	b.n	800ec84 <prvIdleTask+0x8>
 800eca6:	bf00      	nop
 800eca8:	20001bb0 	.word	0x20001bb0
 800ecac:	e000ed04 	.word	0xe000ed04

0800ecb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	607b      	str	r3, [r7, #4]
 800ecba:	e00c      	b.n	800ecd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	4a12      	ldr	r2, [pc, #72]	@ (800ed10 <prvInitialiseTaskLists+0x60>)
 800ecc8:	4413      	add	r3, r2
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe faa4 	bl	800d218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	607b      	str	r3, [r7, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2b06      	cmp	r3, #6
 800ecda:	d9ef      	bls.n	800ecbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ecdc:	480d      	ldr	r0, [pc, #52]	@ (800ed14 <prvInitialiseTaskLists+0x64>)
 800ecde:	f7fe fa9b 	bl	800d218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ece2:	480d      	ldr	r0, [pc, #52]	@ (800ed18 <prvInitialiseTaskLists+0x68>)
 800ece4:	f7fe fa98 	bl	800d218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ece8:	480c      	ldr	r0, [pc, #48]	@ (800ed1c <prvInitialiseTaskLists+0x6c>)
 800ecea:	f7fe fa95 	bl	800d218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ecee:	480c      	ldr	r0, [pc, #48]	@ (800ed20 <prvInitialiseTaskLists+0x70>)
 800ecf0:	f7fe fa92 	bl	800d218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ecf4:	480b      	ldr	r0, [pc, #44]	@ (800ed24 <prvInitialiseTaskLists+0x74>)
 800ecf6:	f7fe fa8f 	bl	800d218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ecfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ed28 <prvInitialiseTaskLists+0x78>)
 800ecfc:	4a05      	ldr	r2, [pc, #20]	@ (800ed14 <prvInitialiseTaskLists+0x64>)
 800ecfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed00:	4b0a      	ldr	r3, [pc, #40]	@ (800ed2c <prvInitialiseTaskLists+0x7c>)
 800ed02:	4a05      	ldr	r2, [pc, #20]	@ (800ed18 <prvInitialiseTaskLists+0x68>)
 800ed04:	601a      	str	r2, [r3, #0]
}
 800ed06:	bf00      	nop
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	20001bb0 	.word	0x20001bb0
 800ed14:	20001c3c 	.word	0x20001c3c
 800ed18:	20001c50 	.word	0x20001c50
 800ed1c:	20001c6c 	.word	0x20001c6c
 800ed20:	20001c80 	.word	0x20001c80
 800ed24:	20001c98 	.word	0x20001c98
 800ed28:	20001c64 	.word	0x20001c64
 800ed2c:	20001c68 	.word	0x20001c68

0800ed30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed36:	e019      	b.n	800ed6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed38:	f000 ff0e 	bl	800fb58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed3c:	4b10      	ldr	r3, [pc, #64]	@ (800ed80 <prvCheckTasksWaitingTermination+0x50>)
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3304      	adds	r3, #4
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fe faef 	bl	800d32c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed84 <prvCheckTasksWaitingTermination+0x54>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	3b01      	subs	r3, #1
 800ed54:	4a0b      	ldr	r2, [pc, #44]	@ (800ed84 <prvCheckTasksWaitingTermination+0x54>)
 800ed56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed58:	4b0b      	ldr	r3, [pc, #44]	@ (800ed88 <prvCheckTasksWaitingTermination+0x58>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	4a0a      	ldr	r2, [pc, #40]	@ (800ed88 <prvCheckTasksWaitingTermination+0x58>)
 800ed60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed62:	f000 ff2b 	bl	800fbbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f810 	bl	800ed8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed6c:	4b06      	ldr	r3, [pc, #24]	@ (800ed88 <prvCheckTasksWaitingTermination+0x58>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1e1      	bne.n	800ed38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed74:	bf00      	nop
 800ed76:	bf00      	nop
 800ed78:	3708      	adds	r7, #8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	20001c80 	.word	0x20001c80
 800ed84:	20001cac 	.word	0x20001cac
 800ed88:	20001c94 	.word	0x20001c94

0800ed8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d108      	bne.n	800edb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eda2:	4618      	mov	r0, r3
 800eda4:	f001 f8c8 	bl	800ff38 <vPortFree>
				vPortFree( pxTCB );
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f001 f8c5 	bl	800ff38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edae:	e019      	b.n	800ede4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d103      	bne.n	800edc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f001 f8bc 	bl	800ff38 <vPortFree>
	}
 800edc0:	e010      	b.n	800ede4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d00b      	beq.n	800ede4 <prvDeleteTCB+0x58>
	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	60fb      	str	r3, [r7, #12]
}
 800edde:	bf00      	nop
 800ede0:	bf00      	nop
 800ede2:	e7fd      	b.n	800ede0 <prvDeleteTCB+0x54>
	}
 800ede4:	bf00      	nop
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ee24 <prvResetNextTaskUnblockTime+0x38>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d104      	bne.n	800ee06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800edfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ee28 <prvResetNextTaskUnblockTime+0x3c>)
 800edfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ee02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee04:	e008      	b.n	800ee18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee06:	4b07      	ldr	r3, [pc, #28]	@ (800ee24 <prvResetNextTaskUnblockTime+0x38>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	4a04      	ldr	r2, [pc, #16]	@ (800ee28 <prvResetNextTaskUnblockTime+0x3c>)
 800ee16:	6013      	str	r3, [r2, #0]
}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr
 800ee24:	20001c64 	.word	0x20001c64
 800ee28:	20001ccc 	.word	0x20001ccc

0800ee2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee32:	4b0b      	ldr	r3, [pc, #44]	@ (800ee60 <xTaskGetSchedulerState+0x34>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	607b      	str	r3, [r7, #4]
 800ee3e:	e008      	b.n	800ee52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee40:	4b08      	ldr	r3, [pc, #32]	@ (800ee64 <xTaskGetSchedulerState+0x38>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d102      	bne.n	800ee4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee48:	2302      	movs	r3, #2
 800ee4a:	607b      	str	r3, [r7, #4]
 800ee4c:	e001      	b.n	800ee52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee52:	687b      	ldr	r3, [r7, #4]
	}
 800ee54:	4618      	mov	r0, r3
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	20001cb8 	.word	0x20001cb8
 800ee64:	20001cd4 	.word	0x20001cd4

0800ee68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee74:	2300      	movs	r3, #0
 800ee76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d05e      	beq.n	800ef3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee82:	4b31      	ldr	r3, [pc, #196]	@ (800ef48 <xTaskPriorityInherit+0xe0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d24e      	bcs.n	800ef2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	db06      	blt.n	800eea2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee94:	4b2c      	ldr	r3, [pc, #176]	@ (800ef48 <xTaskPriorityInherit+0xe0>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee9a:	f1c3 0207 	rsb	r2, r3, #7
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	6959      	ldr	r1, [r3, #20]
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeaa:	4613      	mov	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4a26      	ldr	r2, [pc, #152]	@ (800ef4c <xTaskPriorityInherit+0xe4>)
 800eeb4:	4413      	add	r3, r2
 800eeb6:	4299      	cmp	r1, r3
 800eeb8:	d12f      	bne.n	800ef1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	3304      	adds	r3, #4
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fe fa34 	bl	800d32c <uxListRemove>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10a      	bne.n	800eee0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eece:	2201      	movs	r2, #1
 800eed0:	fa02 f303 	lsl.w	r3, r2, r3
 800eed4:	43da      	mvns	r2, r3
 800eed6:	4b1e      	ldr	r3, [pc, #120]	@ (800ef50 <xTaskPriorityInherit+0xe8>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4013      	ands	r3, r2
 800eedc:	4a1c      	ldr	r2, [pc, #112]	@ (800ef50 <xTaskPriorityInherit+0xe8>)
 800eede:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eee0:	4b19      	ldr	r3, [pc, #100]	@ (800ef48 <xTaskPriorityInherit+0xe0>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeee:	2201      	movs	r2, #1
 800eef0:	409a      	lsls	r2, r3
 800eef2:	4b17      	ldr	r3, [pc, #92]	@ (800ef50 <xTaskPriorityInherit+0xe8>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	4a15      	ldr	r2, [pc, #84]	@ (800ef50 <xTaskPriorityInherit+0xe8>)
 800eefa:	6013      	str	r3, [r2, #0]
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef00:	4613      	mov	r3, r2
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	4413      	add	r3, r2
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	4a10      	ldr	r2, [pc, #64]	@ (800ef4c <xTaskPriorityInherit+0xe4>)
 800ef0a:	441a      	add	r2, r3
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	3304      	adds	r3, #4
 800ef10:	4619      	mov	r1, r3
 800ef12:	4610      	mov	r0, r2
 800ef14:	f7fe f9ad 	bl	800d272 <vListInsertEnd>
 800ef18:	e004      	b.n	800ef24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef48 <xTaskPriorityInherit+0xe0>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef24:	2301      	movs	r3, #1
 800ef26:	60fb      	str	r3, [r7, #12]
 800ef28:	e008      	b.n	800ef3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ef2e:	4b06      	ldr	r3, [pc, #24]	@ (800ef48 <xTaskPriorityInherit+0xe0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d201      	bcs.n	800ef3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
	}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	20001bac 	.word	0x20001bac
 800ef4c:	20001bb0 	.word	0x20001bb0
 800ef50:	20001cb4 	.word	0x20001cb4

0800ef54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef60:	2300      	movs	r3, #0
 800ef62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d070      	beq.n	800f04c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef6a:	4b3b      	ldr	r3, [pc, #236]	@ (800f058 <xTaskPriorityDisinherit+0x104>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	693a      	ldr	r2, [r7, #16]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d00b      	beq.n	800ef8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ef74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef78:	f383 8811 	msr	BASEPRI, r3
 800ef7c:	f3bf 8f6f 	isb	sy
 800ef80:	f3bf 8f4f 	dsb	sy
 800ef84:	60fb      	str	r3, [r7, #12]
}
 800ef86:	bf00      	nop
 800ef88:	bf00      	nop
 800ef8a:	e7fd      	b.n	800ef88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d10b      	bne.n	800efac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ef94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	60bb      	str	r3, [r7, #8]
}
 800efa6:	bf00      	nop
 800efa8:	bf00      	nop
 800efaa:	e7fd      	b.n	800efa8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efb0:	1e5a      	subs	r2, r3, #1
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d044      	beq.n	800f04c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d140      	bne.n	800f04c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	3304      	adds	r3, #4
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fe f9ac 	bl	800d32c <uxListRemove>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d115      	bne.n	800f006 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efde:	491f      	ldr	r1, [pc, #124]	@ (800f05c <xTaskPriorityDisinherit+0x108>)
 800efe0:	4613      	mov	r3, r2
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	4413      	add	r3, r2
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	440b      	add	r3, r1
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10a      	bne.n	800f006 <xTaskPriorityDisinherit+0xb2>
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff4:	2201      	movs	r2, #1
 800eff6:	fa02 f303 	lsl.w	r3, r2, r3
 800effa:	43da      	mvns	r2, r3
 800effc:	4b18      	ldr	r3, [pc, #96]	@ (800f060 <xTaskPriorityDisinherit+0x10c>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4013      	ands	r3, r2
 800f002:	4a17      	ldr	r2, [pc, #92]	@ (800f060 <xTaskPriorityDisinherit+0x10c>)
 800f004:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f012:	f1c3 0207 	rsb	r2, r3, #7
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f01e:	2201      	movs	r2, #1
 800f020:	409a      	lsls	r2, r3
 800f022:	4b0f      	ldr	r3, [pc, #60]	@ (800f060 <xTaskPriorityDisinherit+0x10c>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4313      	orrs	r3, r2
 800f028:	4a0d      	ldr	r2, [pc, #52]	@ (800f060 <xTaskPriorityDisinherit+0x10c>)
 800f02a:	6013      	str	r3, [r2, #0]
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f030:	4613      	mov	r3, r2
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	4413      	add	r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	4a08      	ldr	r2, [pc, #32]	@ (800f05c <xTaskPriorityDisinherit+0x108>)
 800f03a:	441a      	add	r2, r3
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	3304      	adds	r3, #4
 800f040:	4619      	mov	r1, r3
 800f042:	4610      	mov	r0, r2
 800f044:	f7fe f915 	bl	800d272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f048:	2301      	movs	r3, #1
 800f04a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f04c:	697b      	ldr	r3, [r7, #20]
	}
 800f04e:	4618      	mov	r0, r3
 800f050:	3718      	adds	r7, #24
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	20001bac 	.word	0x20001bac
 800f05c:	20001bb0 	.word	0x20001bb0
 800f060:	20001cb4 	.word	0x20001cb4

0800f064 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f064:	b580      	push	{r7, lr}
 800f066:	b088      	sub	sp, #32
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f072:	2301      	movs	r3, #1
 800f074:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d079      	beq.n	800f170 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10b      	bne.n	800f09c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	60fb      	str	r3, [r7, #12]
}
 800f096:	bf00      	nop
 800f098:	bf00      	nop
 800f09a:	e7fd      	b.n	800f098 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0a0:	683a      	ldr	r2, [r7, #0]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d902      	bls.n	800f0ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	61fb      	str	r3, [r7, #28]
 800f0aa:	e002      	b.n	800f0b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0b6:	69fa      	ldr	r2, [r7, #28]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d059      	beq.n	800f170 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0c0:	697a      	ldr	r2, [r7, #20]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d154      	bne.n	800f170 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f0c6:	4b2c      	ldr	r3, [pc, #176]	@ (800f178 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	69ba      	ldr	r2, [r7, #24]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d10b      	bne.n	800f0e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	60bb      	str	r3, [r7, #8]
}
 800f0e2:	bf00      	nop
 800f0e4:	bf00      	nop
 800f0e6:	e7fd      	b.n	800f0e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	69fa      	ldr	r2, [r7, #28]
 800f0f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	db04      	blt.n	800f106 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	f1c3 0207 	rsb	r2, r3, #7
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	6959      	ldr	r1, [r3, #20]
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	4613      	mov	r3, r2
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	4413      	add	r3, r2
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4a19      	ldr	r2, [pc, #100]	@ (800f17c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f116:	4413      	add	r3, r2
 800f118:	4299      	cmp	r1, r3
 800f11a:	d129      	bne.n	800f170 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	3304      	adds	r3, #4
 800f120:	4618      	mov	r0, r3
 800f122:	f7fe f903 	bl	800d32c <uxListRemove>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d10a      	bne.n	800f142 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f130:	2201      	movs	r2, #1
 800f132:	fa02 f303 	lsl.w	r3, r2, r3
 800f136:	43da      	mvns	r2, r3
 800f138:	4b11      	ldr	r3, [pc, #68]	@ (800f180 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4013      	ands	r3, r2
 800f13e:	4a10      	ldr	r2, [pc, #64]	@ (800f180 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f140:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f146:	2201      	movs	r2, #1
 800f148:	409a      	lsls	r2, r3
 800f14a:	4b0d      	ldr	r3, [pc, #52]	@ (800f180 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4313      	orrs	r3, r2
 800f150:	4a0b      	ldr	r2, [pc, #44]	@ (800f180 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f158:	4613      	mov	r3, r2
 800f15a:	009b      	lsls	r3, r3, #2
 800f15c:	4413      	add	r3, r2
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	4a06      	ldr	r2, [pc, #24]	@ (800f17c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f162:	441a      	add	r2, r3
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	3304      	adds	r3, #4
 800f168:	4619      	mov	r1, r3
 800f16a:	4610      	mov	r0, r2
 800f16c:	f7fe f881 	bl	800d272 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f170:	bf00      	nop
 800f172:	3720      	adds	r7, #32
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	20001bac 	.word	0x20001bac
 800f17c:	20001bb0 	.word	0x20001bb0
 800f180:	20001cb4 	.word	0x20001cb4

0800f184 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f184:	b480      	push	{r7}
 800f186:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f188:	4b07      	ldr	r3, [pc, #28]	@ (800f1a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d004      	beq.n	800f19a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f190:	4b05      	ldr	r3, [pc, #20]	@ (800f1a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f196:	3201      	adds	r2, #1
 800f198:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f19a:	4b03      	ldr	r3, [pc, #12]	@ (800f1a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f19c:	681b      	ldr	r3, [r3, #0]
	}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr
 800f1a8:	20001bac 	.word	0x20001bac

0800f1ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1b6:	4b29      	ldr	r3, [pc, #164]	@ (800f25c <prvAddCurrentTaskToDelayedList+0xb0>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1bc:	4b28      	ldr	r3, [pc, #160]	@ (800f260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	3304      	adds	r3, #4
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fe f8b2 	bl	800d32c <uxListRemove>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10b      	bne.n	800f1e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f1ce:	4b24      	ldr	r3, [pc, #144]	@ (800f260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1da:	43da      	mvns	r2, r3
 800f1dc:	4b21      	ldr	r3, [pc, #132]	@ (800f264 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	4a20      	ldr	r2, [pc, #128]	@ (800f264 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ec:	d10a      	bne.n	800f204 <prvAddCurrentTaskToDelayedList+0x58>
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3304      	adds	r3, #4
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	481a      	ldr	r0, [pc, #104]	@ (800f268 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f1fe:	f7fe f838 	bl	800d272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f202:	e026      	b.n	800f252 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4413      	add	r3, r2
 800f20a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f20c:	4b14      	ldr	r3, [pc, #80]	@ (800f260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d209      	bcs.n	800f230 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f21c:	4b13      	ldr	r3, [pc, #76]	@ (800f26c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	4b0f      	ldr	r3, [pc, #60]	@ (800f260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	3304      	adds	r3, #4
 800f226:	4619      	mov	r1, r3
 800f228:	4610      	mov	r0, r2
 800f22a:	f7fe f846 	bl	800d2ba <vListInsert>
}
 800f22e:	e010      	b.n	800f252 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f230:	4b0f      	ldr	r3, [pc, #60]	@ (800f270 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	4b0a      	ldr	r3, [pc, #40]	@ (800f260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	3304      	adds	r3, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	4610      	mov	r0, r2
 800f23e:	f7fe f83c 	bl	800d2ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f242:	4b0c      	ldr	r3, [pc, #48]	@ (800f274 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d202      	bcs.n	800f252 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f24c:	4a09      	ldr	r2, [pc, #36]	@ (800f274 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	6013      	str	r3, [r2, #0]
}
 800f252:	bf00      	nop
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20001cb0 	.word	0x20001cb0
 800f260:	20001bac 	.word	0x20001bac
 800f264:	20001cb4 	.word	0x20001cb4
 800f268:	20001c98 	.word	0x20001c98
 800f26c:	20001c68 	.word	0x20001c68
 800f270:	20001c64 	.word	0x20001c64
 800f274:	20001ccc 	.word	0x20001ccc

0800f278 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08a      	sub	sp, #40	@ 0x28
 800f27c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f27e:	2300      	movs	r3, #0
 800f280:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f282:	f000 faf7 	bl	800f874 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f286:	4b1d      	ldr	r3, [pc, #116]	@ (800f2fc <xTimerCreateTimerTask+0x84>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d021      	beq.n	800f2d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f28e:	2300      	movs	r3, #0
 800f290:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f292:	2300      	movs	r3, #0
 800f294:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f296:	1d3a      	adds	r2, r7, #4
 800f298:	f107 0108 	add.w	r1, r7, #8
 800f29c:	f107 030c 	add.w	r3, r7, #12
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7f2 feb9 	bl	8002018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	9202      	str	r2, [sp, #8]
 800f2ae:	9301      	str	r3, [sp, #4]
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	9300      	str	r3, [sp, #0]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	460a      	mov	r2, r1
 800f2b8:	4911      	ldr	r1, [pc, #68]	@ (800f300 <xTimerCreateTimerTask+0x88>)
 800f2ba:	4812      	ldr	r0, [pc, #72]	@ (800f304 <xTimerCreateTimerTask+0x8c>)
 800f2bc:	f7fe ffd0 	bl	800e260 <xTaskCreateStatic>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	4a11      	ldr	r2, [pc, #68]	@ (800f308 <xTimerCreateTimerTask+0x90>)
 800f2c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f2c6:	4b10      	ldr	r3, [pc, #64]	@ (800f308 <xTimerCreateTimerTask+0x90>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10b      	bne.n	800f2f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2dc:	f383 8811 	msr	BASEPRI, r3
 800f2e0:	f3bf 8f6f 	isb	sy
 800f2e4:	f3bf 8f4f 	dsb	sy
 800f2e8:	613b      	str	r3, [r7, #16]
}
 800f2ea:	bf00      	nop
 800f2ec:	bf00      	nop
 800f2ee:	e7fd      	b.n	800f2ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2f0:	697b      	ldr	r3, [r7, #20]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3718      	adds	r7, #24
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20001d08 	.word	0x20001d08
 800f300:	08011c28 	.word	0x08011c28
 800f304:	0800f445 	.word	0x0800f445
 800f308:	20001d0c 	.word	0x20001d0c

0800f30c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b08a      	sub	sp, #40	@ 0x28
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f31a:	2300      	movs	r3, #0
 800f31c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d10b      	bne.n	800f33c <xTimerGenericCommand+0x30>
	__asm volatile
 800f324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	623b      	str	r3, [r7, #32]
}
 800f336:	bf00      	nop
 800f338:	bf00      	nop
 800f33a:	e7fd      	b.n	800f338 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f33c:	4b19      	ldr	r3, [pc, #100]	@ (800f3a4 <xTimerGenericCommand+0x98>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d02a      	beq.n	800f39a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b05      	cmp	r3, #5
 800f354:	dc18      	bgt.n	800f388 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f356:	f7ff fd69 	bl	800ee2c <xTaskGetSchedulerState>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	d109      	bne.n	800f374 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f360:	4b10      	ldr	r3, [pc, #64]	@ (800f3a4 <xTimerGenericCommand+0x98>)
 800f362:	6818      	ldr	r0, [r3, #0]
 800f364:	f107 0114 	add.w	r1, r7, #20
 800f368:	2300      	movs	r3, #0
 800f36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f36c:	f7fe f9b0 	bl	800d6d0 <xQueueGenericSend>
 800f370:	6278      	str	r0, [r7, #36]	@ 0x24
 800f372:	e012      	b.n	800f39a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f374:	4b0b      	ldr	r3, [pc, #44]	@ (800f3a4 <xTimerGenericCommand+0x98>)
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	f107 0114 	add.w	r1, r7, #20
 800f37c:	2300      	movs	r3, #0
 800f37e:	2200      	movs	r2, #0
 800f380:	f7fe f9a6 	bl	800d6d0 <xQueueGenericSend>
 800f384:	6278      	str	r0, [r7, #36]	@ 0x24
 800f386:	e008      	b.n	800f39a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f388:	4b06      	ldr	r3, [pc, #24]	@ (800f3a4 <xTimerGenericCommand+0x98>)
 800f38a:	6818      	ldr	r0, [r3, #0]
 800f38c:	f107 0114 	add.w	r1, r7, #20
 800f390:	2300      	movs	r3, #0
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	f7fe fa9e 	bl	800d8d4 <xQueueGenericSendFromISR>
 800f398:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3728      	adds	r7, #40	@ 0x28
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	20001d08 	.word	0x20001d08

0800f3a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b088      	sub	sp, #32
 800f3ac:	af02      	add	r7, sp, #8
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3b2:	4b23      	ldr	r3, [pc, #140]	@ (800f440 <prvProcessExpiredTimer+0x98>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	3304      	adds	r3, #4
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fd ffb3 	bl	800d32c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d023      	beq.n	800f41c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	699a      	ldr	r2, [r3, #24]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	18d1      	adds	r1, r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	6978      	ldr	r0, [r7, #20]
 800f3e2:	f000 f8d5 	bl	800f590 <prvInsertTimerInActiveList>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d020      	beq.n	800f42e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	6978      	ldr	r0, [r7, #20]
 800f3f8:	f7ff ff88 	bl	800f30c <xTimerGenericCommand>
 800f3fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d114      	bne.n	800f42e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	60fb      	str	r3, [r7, #12]
}
 800f416:	bf00      	nop
 800f418:	bf00      	nop
 800f41a:	e7fd      	b.n	800f418 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f422:	f023 0301 	bic.w	r3, r3, #1
 800f426:	b2da      	uxtb	r2, r3
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	6978      	ldr	r0, [r7, #20]
 800f434:	4798      	blx	r3
}
 800f436:	bf00      	nop
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	20001d00 	.word	0x20001d00

0800f444 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f44c:	f107 0308 	add.w	r3, r7, #8
 800f450:	4618      	mov	r0, r3
 800f452:	f000 f859 	bl	800f508 <prvGetNextExpireTime>
 800f456:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	4619      	mov	r1, r3
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f000 f805 	bl	800f46c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f462:	f000 f8d7 	bl	800f614 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f466:	bf00      	nop
 800f468:	e7f0      	b.n	800f44c <prvTimerTask+0x8>
	...

0800f46c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f476:	f7ff f8f3 	bl	800e660 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f47a:	f107 0308 	add.w	r3, r7, #8
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 f866 	bl	800f550 <prvSampleTimeNow>
 800f484:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d130      	bne.n	800f4ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d10a      	bne.n	800f4a8 <prvProcessTimerOrBlockTask+0x3c>
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	429a      	cmp	r2, r3
 800f498:	d806      	bhi.n	800f4a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f49a:	f7ff f8ef 	bl	800e67c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f49e:	68f9      	ldr	r1, [r7, #12]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7ff ff81 	bl	800f3a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f4a6:	e024      	b.n	800f4f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d008      	beq.n	800f4c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f4ae:	4b13      	ldr	r3, [pc, #76]	@ (800f4fc <prvProcessTimerOrBlockTask+0x90>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d101      	bne.n	800f4bc <prvProcessTimerOrBlockTask+0x50>
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e000      	b.n	800f4be <prvProcessTimerOrBlockTask+0x52>
 800f4bc:	2300      	movs	r3, #0
 800f4be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f4c0:	4b0f      	ldr	r3, [pc, #60]	@ (800f500 <prvProcessTimerOrBlockTask+0x94>)
 800f4c2:	6818      	ldr	r0, [r3, #0]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	f7fe fe93 	bl	800e1f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f4d2:	f7ff f8d3 	bl	800e67c <xTaskResumeAll>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d10a      	bne.n	800f4f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f4dc:	4b09      	ldr	r3, [pc, #36]	@ (800f504 <prvProcessTimerOrBlockTask+0x98>)
 800f4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	f3bf 8f4f 	dsb	sy
 800f4e8:	f3bf 8f6f 	isb	sy
}
 800f4ec:	e001      	b.n	800f4f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f4ee:	f7ff f8c5 	bl	800e67c <xTaskResumeAll>
}
 800f4f2:	bf00      	nop
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	20001d04 	.word	0x20001d04
 800f500:	20001d08 	.word	0x20001d08
 800f504:	e000ed04 	.word	0xe000ed04

0800f508 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f510:	4b0e      	ldr	r3, [pc, #56]	@ (800f54c <prvGetNextExpireTime+0x44>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d101      	bne.n	800f51e <prvGetNextExpireTime+0x16>
 800f51a:	2201      	movs	r2, #1
 800f51c:	e000      	b.n	800f520 <prvGetNextExpireTime+0x18>
 800f51e:	2200      	movs	r2, #0
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d105      	bne.n	800f538 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f52c:	4b07      	ldr	r3, [pc, #28]	@ (800f54c <prvGetNextExpireTime+0x44>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	e001      	b.n	800f53c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f538:	2300      	movs	r3, #0
 800f53a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f53c:	68fb      	ldr	r3, [r7, #12]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3714      	adds	r7, #20
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	20001d00 	.word	0x20001d00

0800f550 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f558:	f7ff f92e 	bl	800e7b8 <xTaskGetTickCount>
 800f55c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f55e:	4b0b      	ldr	r3, [pc, #44]	@ (800f58c <prvSampleTimeNow+0x3c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	429a      	cmp	r2, r3
 800f566:	d205      	bcs.n	800f574 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f568:	f000 f91e 	bl	800f7a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	e002      	b.n	800f57a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f57a:	4a04      	ldr	r2, [pc, #16]	@ (800f58c <prvSampleTimeNow+0x3c>)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f580:	68fb      	ldr	r3, [r7, #12]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	20001d10 	.word	0x20001d10

0800f590 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d812      	bhi.n	800f5dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	1ad2      	subs	r2, r2, r3
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	699b      	ldr	r3, [r3, #24]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d302      	bcc.n	800f5ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	617b      	str	r3, [r7, #20]
 800f5c8:	e01b      	b.n	800f602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f5ca:	4b10      	ldr	r3, [pc, #64]	@ (800f60c <prvInsertTimerInActiveList+0x7c>)
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	3304      	adds	r3, #4
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	f7fd fe70 	bl	800d2ba <vListInsert>
 800f5da:	e012      	b.n	800f602 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d206      	bcs.n	800f5f2 <prvInsertTimerInActiveList+0x62>
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d302      	bcc.n	800f5f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	617b      	str	r3, [r7, #20]
 800f5f0:	e007      	b.n	800f602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5f2:	4b07      	ldr	r3, [pc, #28]	@ (800f610 <prvInsertTimerInActiveList+0x80>)
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	3304      	adds	r3, #4
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	f7fd fe5c 	bl	800d2ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f602:	697b      	ldr	r3, [r7, #20]
}
 800f604:	4618      	mov	r0, r3
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	20001d04 	.word	0x20001d04
 800f610:	20001d00 	.word	0x20001d00

0800f614 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b08c      	sub	sp, #48	@ 0x30
 800f618:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f61a:	e0b2      	b.n	800f782 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f2c0 80af 	blt.w	800f782 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62a:	695b      	ldr	r3, [r3, #20]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d004      	beq.n	800f63a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f632:	3304      	adds	r3, #4
 800f634:	4618      	mov	r0, r3
 800f636:	f7fd fe79 	bl	800d32c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f63a:	1d3b      	adds	r3, r7, #4
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7ff ff87 	bl	800f550 <prvSampleTimeNow>
 800f642:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	2b09      	cmp	r3, #9
 800f648:	f200 8098 	bhi.w	800f77c <prvProcessReceivedCommands+0x168>
 800f64c:	a201      	add	r2, pc, #4	@ (adr r2, 800f654 <prvProcessReceivedCommands+0x40>)
 800f64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f652:	bf00      	nop
 800f654:	0800f67d 	.word	0x0800f67d
 800f658:	0800f67d 	.word	0x0800f67d
 800f65c:	0800f67d 	.word	0x0800f67d
 800f660:	0800f6f3 	.word	0x0800f6f3
 800f664:	0800f707 	.word	0x0800f707
 800f668:	0800f753 	.word	0x0800f753
 800f66c:	0800f67d 	.word	0x0800f67d
 800f670:	0800f67d 	.word	0x0800f67d
 800f674:	0800f6f3 	.word	0x0800f6f3
 800f678:	0800f707 	.word	0x0800f707
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f67e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f682:	f043 0301 	orr.w	r3, r3, #1
 800f686:	b2da      	uxtb	r2, r3
 800f688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f68e:	68fa      	ldr	r2, [r7, #12]
 800f690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f692:	699b      	ldr	r3, [r3, #24]
 800f694:	18d1      	adds	r1, r2, r3
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	6a3a      	ldr	r2, [r7, #32]
 800f69a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f69c:	f7ff ff78 	bl	800f590 <prvInsertTimerInActiveList>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d06c      	beq.n	800f780 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a8:	6a1b      	ldr	r3, [r3, #32]
 800f6aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f6ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f6b4:	f003 0304 	and.w	r3, r3, #4
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d061      	beq.n	800f780 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c0:	699b      	ldr	r3, [r3, #24]
 800f6c2:	441a      	add	r2, r3
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f6ce:	f7ff fe1d 	bl	800f30c <xTimerGenericCommand>
 800f6d2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d152      	bne.n	800f780 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800f6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6de:	f383 8811 	msr	BASEPRI, r3
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	61bb      	str	r3, [r7, #24]
}
 800f6ec:	bf00      	nop
 800f6ee:	bf00      	nop
 800f6f0:	e7fd      	b.n	800f6ee <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f6f8:	f023 0301 	bic.w	r3, r3, #1
 800f6fc:	b2da      	uxtb	r2, r3
 800f6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f704:	e03d      	b.n	800f782 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f708:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f70c:	f043 0301 	orr.w	r3, r3, #1
 800f710:	b2da      	uxtb	r2, r3
 800f712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f720:	699b      	ldr	r3, [r3, #24]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10b      	bne.n	800f73e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	617b      	str	r3, [r7, #20]
}
 800f738:	bf00      	nop
 800f73a:	bf00      	nop
 800f73c:	e7fd      	b.n	800f73a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f740:	699a      	ldr	r2, [r3, #24]
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	18d1      	adds	r1, r2, r3
 800f746:	6a3b      	ldr	r3, [r7, #32]
 800f748:	6a3a      	ldr	r2, [r7, #32]
 800f74a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f74c:	f7ff ff20 	bl	800f590 <prvInsertTimerInActiveList>
					break;
 800f750:	e017      	b.n	800f782 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f754:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f758:	f003 0302 	and.w	r3, r3, #2
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d103      	bne.n	800f768 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800f760:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f762:	f000 fbe9 	bl	800ff38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f766:	e00c      	b.n	800f782 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f76a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f76e:	f023 0301 	bic.w	r3, r3, #1
 800f772:	b2da      	uxtb	r2, r3
 800f774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f77a:	e002      	b.n	800f782 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800f77c:	bf00      	nop
 800f77e:	e000      	b.n	800f782 <prvProcessReceivedCommands+0x16e>
					break;
 800f780:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f782:	4b08      	ldr	r3, [pc, #32]	@ (800f7a4 <prvProcessReceivedCommands+0x190>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f107 0108 	add.w	r1, r7, #8
 800f78a:	2200      	movs	r2, #0
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fe f9cf 	bl	800db30 <xQueueReceive>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	f47f af41 	bne.w	800f61c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f79a:	bf00      	nop
 800f79c:	bf00      	nop
 800f79e:	3728      	adds	r7, #40	@ 0x28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	20001d08 	.word	0x20001d08

0800f7a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b088      	sub	sp, #32
 800f7ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f7ae:	e049      	b.n	800f844 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f7b0:	4b2e      	ldr	r3, [pc, #184]	@ (800f86c <prvSwitchTimerLists+0xc4>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ba:	4b2c      	ldr	r3, [pc, #176]	@ (800f86c <prvSwitchTimerLists+0xc4>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	3304      	adds	r3, #4
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fd fdaf 	bl	800d32c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6a1b      	ldr	r3, [r3, #32]
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f7dc:	f003 0304 	and.w	r3, r3, #4
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d02f      	beq.n	800f844 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	699b      	ldr	r3, [r3, #24]
 800f7e8:	693a      	ldr	r2, [r7, #16]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d90e      	bls.n	800f814 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f802:	4b1a      	ldr	r3, [pc, #104]	@ (800f86c <prvSwitchTimerLists+0xc4>)
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	3304      	adds	r3, #4
 800f80a:	4619      	mov	r1, r3
 800f80c:	4610      	mov	r0, r2
 800f80e:	f7fd fd54 	bl	800d2ba <vListInsert>
 800f812:	e017      	b.n	800f844 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f814:	2300      	movs	r3, #0
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	2300      	movs	r3, #0
 800f81a:	693a      	ldr	r2, [r7, #16]
 800f81c:	2100      	movs	r1, #0
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff fd74 	bl	800f30c <xTimerGenericCommand>
 800f824:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10b      	bne.n	800f844 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	603b      	str	r3, [r7, #0]
}
 800f83e:	bf00      	nop
 800f840:	bf00      	nop
 800f842:	e7fd      	b.n	800f840 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f844:	4b09      	ldr	r3, [pc, #36]	@ (800f86c <prvSwitchTimerLists+0xc4>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d1b0      	bne.n	800f7b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f84e:	4b07      	ldr	r3, [pc, #28]	@ (800f86c <prvSwitchTimerLists+0xc4>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f854:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <prvSwitchTimerLists+0xc8>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a04      	ldr	r2, [pc, #16]	@ (800f86c <prvSwitchTimerLists+0xc4>)
 800f85a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f85c:	4a04      	ldr	r2, [pc, #16]	@ (800f870 <prvSwitchTimerLists+0xc8>)
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	6013      	str	r3, [r2, #0]
}
 800f862:	bf00      	nop
 800f864:	3718      	adds	r7, #24
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20001d00 	.word	0x20001d00
 800f870:	20001d04 	.word	0x20001d04

0800f874 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f87a:	f000 f96d 	bl	800fb58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f87e:	4b15      	ldr	r3, [pc, #84]	@ (800f8d4 <prvCheckForValidListAndQueue+0x60>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d120      	bne.n	800f8c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f886:	4814      	ldr	r0, [pc, #80]	@ (800f8d8 <prvCheckForValidListAndQueue+0x64>)
 800f888:	f7fd fcc6 	bl	800d218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f88c:	4813      	ldr	r0, [pc, #76]	@ (800f8dc <prvCheckForValidListAndQueue+0x68>)
 800f88e:	f7fd fcc3 	bl	800d218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f892:	4b13      	ldr	r3, [pc, #76]	@ (800f8e0 <prvCheckForValidListAndQueue+0x6c>)
 800f894:	4a10      	ldr	r2, [pc, #64]	@ (800f8d8 <prvCheckForValidListAndQueue+0x64>)
 800f896:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f898:	4b12      	ldr	r3, [pc, #72]	@ (800f8e4 <prvCheckForValidListAndQueue+0x70>)
 800f89a:	4a10      	ldr	r2, [pc, #64]	@ (800f8dc <prvCheckForValidListAndQueue+0x68>)
 800f89c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f89e:	2300      	movs	r3, #0
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	4b11      	ldr	r3, [pc, #68]	@ (800f8e8 <prvCheckForValidListAndQueue+0x74>)
 800f8a4:	4a11      	ldr	r2, [pc, #68]	@ (800f8ec <prvCheckForValidListAndQueue+0x78>)
 800f8a6:	210c      	movs	r1, #12
 800f8a8:	200a      	movs	r0, #10
 800f8aa:	f7fd fdd3 	bl	800d454 <xQueueGenericCreateStatic>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	4a08      	ldr	r2, [pc, #32]	@ (800f8d4 <prvCheckForValidListAndQueue+0x60>)
 800f8b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f8b4:	4b07      	ldr	r3, [pc, #28]	@ (800f8d4 <prvCheckForValidListAndQueue+0x60>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d005      	beq.n	800f8c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f8bc:	4b05      	ldr	r3, [pc, #20]	@ (800f8d4 <prvCheckForValidListAndQueue+0x60>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	490b      	ldr	r1, [pc, #44]	@ (800f8f0 <prvCheckForValidListAndQueue+0x7c>)
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fe fc6e 	bl	800e1a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8c8:	f000 f978 	bl	800fbbc <vPortExitCritical>
}
 800f8cc:	bf00      	nop
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	20001d08 	.word	0x20001d08
 800f8d8:	20001cd8 	.word	0x20001cd8
 800f8dc:	20001cec 	.word	0x20001cec
 800f8e0:	20001d00 	.word	0x20001d00
 800f8e4:	20001d04 	.word	0x20001d04
 800f8e8:	20001d8c 	.word	0x20001d8c
 800f8ec:	20001d14 	.word	0x20001d14
 800f8f0:	08011c30 	.word	0x08011c30

0800f8f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	3b04      	subs	r3, #4
 800f904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f90c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	3b04      	subs	r3, #4
 800f912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	f023 0201 	bic.w	r2, r3, #1
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	3b04      	subs	r3, #4
 800f922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f924:	4a0c      	ldr	r2, [pc, #48]	@ (800f958 <pxPortInitialiseStack+0x64>)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	3b14      	subs	r3, #20
 800f92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	3b04      	subs	r3, #4
 800f93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f06f 0202 	mvn.w	r2, #2
 800f942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	3b20      	subs	r3, #32
 800f948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f94a:	68fb      	ldr	r3, [r7, #12]
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3714      	adds	r7, #20
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	0800f95d 	.word	0x0800f95d

0800f95c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f966:	4b13      	ldr	r3, [pc, #76]	@ (800f9b4 <prvTaskExitError+0x58>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f96e:	d00b      	beq.n	800f988 <prvTaskExitError+0x2c>
	__asm volatile
 800f970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f974:	f383 8811 	msr	BASEPRI, r3
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	60fb      	str	r3, [r7, #12]
}
 800f982:	bf00      	nop
 800f984:	bf00      	nop
 800f986:	e7fd      	b.n	800f984 <prvTaskExitError+0x28>
	__asm volatile
 800f988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f98c:	f383 8811 	msr	BASEPRI, r3
 800f990:	f3bf 8f6f 	isb	sy
 800f994:	f3bf 8f4f 	dsb	sy
 800f998:	60bb      	str	r3, [r7, #8]
}
 800f99a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f99c:	bf00      	nop
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d0fc      	beq.n	800f99e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f9a4:	bf00      	nop
 800f9a6:	bf00      	nop
 800f9a8:	3714      	adds	r7, #20
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	20000098 	.word	0x20000098
	...

0800f9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f9c0:	4b07      	ldr	r3, [pc, #28]	@ (800f9e0 <pxCurrentTCBConst2>)
 800f9c2:	6819      	ldr	r1, [r3, #0]
 800f9c4:	6808      	ldr	r0, [r1, #0]
 800f9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ca:	f380 8809 	msr	PSP, r0
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f04f 0000 	mov.w	r0, #0
 800f9d6:	f380 8811 	msr	BASEPRI, r0
 800f9da:	4770      	bx	lr
 800f9dc:	f3af 8000 	nop.w

0800f9e0 <pxCurrentTCBConst2>:
 800f9e0:	20001bac 	.word	0x20001bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f9e4:	bf00      	nop
 800f9e6:	bf00      	nop

0800f9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f9e8:	4808      	ldr	r0, [pc, #32]	@ (800fa0c <prvPortStartFirstTask+0x24>)
 800f9ea:	6800      	ldr	r0, [r0, #0]
 800f9ec:	6800      	ldr	r0, [r0, #0]
 800f9ee:	f380 8808 	msr	MSP, r0
 800f9f2:	f04f 0000 	mov.w	r0, #0
 800f9f6:	f380 8814 	msr	CONTROL, r0
 800f9fa:	b662      	cpsie	i
 800f9fc:	b661      	cpsie	f
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	df00      	svc	0
 800fa08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa0a:	bf00      	nop
 800fa0c:	e000ed08 	.word	0xe000ed08

0800fa10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa16:	4b47      	ldr	r3, [pc, #284]	@ (800fb34 <xPortStartScheduler+0x124>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4a47      	ldr	r2, [pc, #284]	@ (800fb38 <xPortStartScheduler+0x128>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d10b      	bne.n	800fa38 <xPortStartScheduler+0x28>
	__asm volatile
 800fa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa24:	f383 8811 	msr	BASEPRI, r3
 800fa28:	f3bf 8f6f 	isb	sy
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	613b      	str	r3, [r7, #16]
}
 800fa32:	bf00      	nop
 800fa34:	bf00      	nop
 800fa36:	e7fd      	b.n	800fa34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fa38:	4b3e      	ldr	r3, [pc, #248]	@ (800fb34 <xPortStartScheduler+0x124>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a3f      	ldr	r2, [pc, #252]	@ (800fb3c <xPortStartScheduler+0x12c>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d10b      	bne.n	800fa5a <xPortStartScheduler+0x4a>
	__asm volatile
 800fa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa46:	f383 8811 	msr	BASEPRI, r3
 800fa4a:	f3bf 8f6f 	isb	sy
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	60fb      	str	r3, [r7, #12]
}
 800fa54:	bf00      	nop
 800fa56:	bf00      	nop
 800fa58:	e7fd      	b.n	800fa56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa5a:	4b39      	ldr	r3, [pc, #228]	@ (800fb40 <xPortStartScheduler+0x130>)
 800fa5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	22ff      	movs	r2, #255	@ 0xff
 800fa6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa74:	78fb      	ldrb	r3, [r7, #3]
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fa7c:	b2da      	uxtb	r2, r3
 800fa7e:	4b31      	ldr	r3, [pc, #196]	@ (800fb44 <xPortStartScheduler+0x134>)
 800fa80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa82:	4b31      	ldr	r3, [pc, #196]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fa84:	2207      	movs	r2, #7
 800fa86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa88:	e009      	b.n	800fa9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fa8a:	4b2f      	ldr	r3, [pc, #188]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	4a2d      	ldr	r2, [pc, #180]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fa92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa94:	78fb      	ldrb	r3, [r7, #3]
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	005b      	lsls	r3, r3, #1
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa9e:	78fb      	ldrb	r3, [r7, #3]
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faa6:	2b80      	cmp	r3, #128	@ 0x80
 800faa8:	d0ef      	beq.n	800fa8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800faaa:	4b27      	ldr	r3, [pc, #156]	@ (800fb48 <xPortStartScheduler+0x138>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f1c3 0307 	rsb	r3, r3, #7
 800fab2:	2b04      	cmp	r3, #4
 800fab4:	d00b      	beq.n	800face <xPortStartScheduler+0xbe>
	__asm volatile
 800fab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faba:	f383 8811 	msr	BASEPRI, r3
 800fabe:	f3bf 8f6f 	isb	sy
 800fac2:	f3bf 8f4f 	dsb	sy
 800fac6:	60bb      	str	r3, [r7, #8]
}
 800fac8:	bf00      	nop
 800faca:	bf00      	nop
 800facc:	e7fd      	b.n	800faca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800face:	4b1e      	ldr	r3, [pc, #120]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	021b      	lsls	r3, r3, #8
 800fad4:	4a1c      	ldr	r2, [pc, #112]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fad8:	4b1b      	ldr	r3, [pc, #108]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fae0:	4a19      	ldr	r2, [pc, #100]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	b2da      	uxtb	r2, r3
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800faec:	4b17      	ldr	r3, [pc, #92]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a16      	ldr	r2, [pc, #88]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800faf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800faf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800faf8:	4b14      	ldr	r3, [pc, #80]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a13      	ldr	r2, [pc, #76]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800fafe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fb02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb04:	f000 f8da 	bl	800fcbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb08:	4b11      	ldr	r3, [pc, #68]	@ (800fb50 <xPortStartScheduler+0x140>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb0e:	f000 f8f9 	bl	800fd04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb12:	4b10      	ldr	r3, [pc, #64]	@ (800fb54 <xPortStartScheduler+0x144>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4a0f      	ldr	r2, [pc, #60]	@ (800fb54 <xPortStartScheduler+0x144>)
 800fb18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fb1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb1e:	f7ff ff63 	bl	800f9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb22:	f7fe ff13 	bl	800e94c <vTaskSwitchContext>
	prvTaskExitError();
 800fb26:	f7ff ff19 	bl	800f95c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	e000ed00 	.word	0xe000ed00
 800fb38:	410fc271 	.word	0x410fc271
 800fb3c:	410fc270 	.word	0x410fc270
 800fb40:	e000e400 	.word	0xe000e400
 800fb44:	20001dd4 	.word	0x20001dd4
 800fb48:	20001dd8 	.word	0x20001dd8
 800fb4c:	e000ed20 	.word	0xe000ed20
 800fb50:	20000098 	.word	0x20000098
 800fb54:	e000ef34 	.word	0xe000ef34

0800fb58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	607b      	str	r3, [r7, #4]
}
 800fb70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb72:	4b10      	ldr	r3, [pc, #64]	@ (800fbb4 <vPortEnterCritical+0x5c>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3301      	adds	r3, #1
 800fb78:	4a0e      	ldr	r2, [pc, #56]	@ (800fbb4 <vPortEnterCritical+0x5c>)
 800fb7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fbb4 <vPortEnterCritical+0x5c>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d110      	bne.n	800fba6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb84:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb8 <vPortEnterCritical+0x60>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00b      	beq.n	800fba6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	603b      	str	r3, [r7, #0]
}
 800fba0:	bf00      	nop
 800fba2:	bf00      	nop
 800fba4:	e7fd      	b.n	800fba2 <vPortEnterCritical+0x4a>
	}
}
 800fba6:	bf00      	nop
 800fba8:	370c      	adds	r7, #12
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	20000098 	.word	0x20000098
 800fbb8:	e000ed04 	.word	0xe000ed04

0800fbbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fbc2:	4b12      	ldr	r3, [pc, #72]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d10b      	bne.n	800fbe2 <vPortExitCritical+0x26>
	__asm volatile
 800fbca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	607b      	str	r3, [r7, #4]
}
 800fbdc:	bf00      	nop
 800fbde:	bf00      	nop
 800fbe0:	e7fd      	b.n	800fbde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fbe2:	4b0a      	ldr	r3, [pc, #40]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	4a08      	ldr	r2, [pc, #32]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fbec:	4b07      	ldr	r3, [pc, #28]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <vPortExitCritical+0x44>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	f383 8811 	msr	BASEPRI, r3
}
 800fbfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc00:	bf00      	nop
 800fc02:	370c      	adds	r7, #12
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	20000098 	.word	0x20000098

0800fc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc10:	f3ef 8009 	mrs	r0, PSP
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	4b15      	ldr	r3, [pc, #84]	@ (800fc70 <pxCurrentTCBConst>)
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	f01e 0f10 	tst.w	lr, #16
 800fc20:	bf08      	it	eq
 800fc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2a:	6010      	str	r0, [r2, #0]
 800fc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fc34:	f380 8811 	msr	BASEPRI, r0
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f7fe fe84 	bl	800e94c <vTaskSwitchContext>
 800fc44:	f04f 0000 	mov.w	r0, #0
 800fc48:	f380 8811 	msr	BASEPRI, r0
 800fc4c:	bc09      	pop	{r0, r3}
 800fc4e:	6819      	ldr	r1, [r3, #0]
 800fc50:	6808      	ldr	r0, [r1, #0]
 800fc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc56:	f01e 0f10 	tst.w	lr, #16
 800fc5a:	bf08      	it	eq
 800fc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc60:	f380 8809 	msr	PSP, r0
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	f3af 8000 	nop.w

0800fc70 <pxCurrentTCBConst>:
 800fc70:	20001bac 	.word	0x20001bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc74:	bf00      	nop
 800fc76:	bf00      	nop

0800fc78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	607b      	str	r3, [r7, #4]
}
 800fc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc92:	f7fe fda1 	bl	800e7d8 <xTaskIncrementTick>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d003      	beq.n	800fca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc9c:	4b06      	ldr	r3, [pc, #24]	@ (800fcb8 <SysTick_Handler+0x40>)
 800fc9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	2300      	movs	r3, #0
 800fca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	f383 8811 	msr	BASEPRI, r3
}
 800fcae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	e000ed04 	.word	0xe000ed04

0800fcbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcc0:	4b0b      	ldr	r3, [pc, #44]	@ (800fcf0 <vPortSetupTimerInterrupt+0x34>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fcc6:	4b0b      	ldr	r3, [pc, #44]	@ (800fcf4 <vPortSetupTimerInterrupt+0x38>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fccc:	4b0a      	ldr	r3, [pc, #40]	@ (800fcf8 <vPortSetupTimerInterrupt+0x3c>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4a0a      	ldr	r2, [pc, #40]	@ (800fcfc <vPortSetupTimerInterrupt+0x40>)
 800fcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800fcd6:	099b      	lsrs	r3, r3, #6
 800fcd8:	4a09      	ldr	r2, [pc, #36]	@ (800fd00 <vPortSetupTimerInterrupt+0x44>)
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fcde:	4b04      	ldr	r3, [pc, #16]	@ (800fcf0 <vPortSetupTimerInterrupt+0x34>)
 800fce0:	2207      	movs	r2, #7
 800fce2:	601a      	str	r2, [r3, #0]
}
 800fce4:	bf00      	nop
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	e000e010 	.word	0xe000e010
 800fcf4:	e000e018 	.word	0xe000e018
 800fcf8:	20000000 	.word	0x20000000
 800fcfc:	10624dd3 	.word	0x10624dd3
 800fd00:	e000e014 	.word	0xe000e014

0800fd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fd14 <vPortEnableVFP+0x10>
 800fd08:	6801      	ldr	r1, [r0, #0]
 800fd0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fd0e:	6001      	str	r1, [r0, #0]
 800fd10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd12:	bf00      	nop
 800fd14:	e000ed88 	.word	0xe000ed88

0800fd18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd1e:	f3ef 8305 	mrs	r3, IPSR
 800fd22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2b0f      	cmp	r3, #15
 800fd28:	d915      	bls.n	800fd56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd2a:	4a18      	ldr	r2, [pc, #96]	@ (800fd8c <vPortValidateInterruptPriority+0x74>)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd34:	4b16      	ldr	r3, [pc, #88]	@ (800fd90 <vPortValidateInterruptPriority+0x78>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	7afa      	ldrb	r2, [r7, #11]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d20b      	bcs.n	800fd56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	607b      	str	r3, [r7, #4]
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	e7fd      	b.n	800fd52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd56:	4b0f      	ldr	r3, [pc, #60]	@ (800fd94 <vPortValidateInterruptPriority+0x7c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fd5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fd98 <vPortValidateInterruptPriority+0x80>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d90b      	bls.n	800fd7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	603b      	str	r3, [r7, #0]
}
 800fd78:	bf00      	nop
 800fd7a:	bf00      	nop
 800fd7c:	e7fd      	b.n	800fd7a <vPortValidateInterruptPriority+0x62>
	}
 800fd7e:	bf00      	nop
 800fd80:	3714      	adds	r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop
 800fd8c:	e000e3f0 	.word	0xe000e3f0
 800fd90:	20001dd4 	.word	0x20001dd4
 800fd94:	e000ed0c 	.word	0xe000ed0c
 800fd98:	20001dd8 	.word	0x20001dd8

0800fd9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b08a      	sub	sp, #40	@ 0x28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fda8:	f7fe fc5a 	bl	800e660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fdac:	4b5c      	ldr	r3, [pc, #368]	@ (800ff20 <pvPortMalloc+0x184>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fdb4:	f000 f924 	bl	8010000 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fdb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ff24 <pvPortMalloc+0x188>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	4013      	ands	r3, r2
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f040 8095 	bne.w	800fef0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d01e      	beq.n	800fe0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fdcc:	2208      	movs	r2, #8
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f003 0307 	and.w	r3, r3, #7
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d015      	beq.n	800fe0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f023 0307 	bic.w	r3, r3, #7
 800fde4:	3308      	adds	r3, #8
 800fde6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f003 0307 	and.w	r3, r3, #7
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00b      	beq.n	800fe0a <pvPortMalloc+0x6e>
	__asm volatile
 800fdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	617b      	str	r3, [r7, #20]
}
 800fe04:	bf00      	nop
 800fe06:	bf00      	nop
 800fe08:	e7fd      	b.n	800fe06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d06f      	beq.n	800fef0 <pvPortMalloc+0x154>
 800fe10:	4b45      	ldr	r3, [pc, #276]	@ (800ff28 <pvPortMalloc+0x18c>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d86a      	bhi.n	800fef0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe1a:	4b44      	ldr	r3, [pc, #272]	@ (800ff2c <pvPortMalloc+0x190>)
 800fe1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe1e:	4b43      	ldr	r3, [pc, #268]	@ (800ff2c <pvPortMalloc+0x190>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe24:	e004      	b.n	800fe30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fe26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d903      	bls.n	800fe42 <pvPortMalloc+0xa6>
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1f1      	bne.n	800fe26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe42:	4b37      	ldr	r3, [pc, #220]	@ (800ff20 <pvPortMalloc+0x184>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d051      	beq.n	800fef0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fe4c:	6a3b      	ldr	r3, [r7, #32]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2208      	movs	r2, #8
 800fe52:	4413      	add	r3, r2
 800fe54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe60:	685a      	ldr	r2, [r3, #4]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	1ad2      	subs	r2, r2, r3
 800fe66:	2308      	movs	r3, #8
 800fe68:	005b      	lsls	r3, r3, #1
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d920      	bls.n	800feb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4413      	add	r3, r2
 800fe74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	f003 0307 	and.w	r3, r3, #7
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <pvPortMalloc+0xfc>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	613b      	str	r3, [r7, #16]
}
 800fe92:	bf00      	nop
 800fe94:	bf00      	nop
 800fe96:	e7fd      	b.n	800fe94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	1ad2      	subs	r2, r2, r3
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800feaa:	69b8      	ldr	r0, [r7, #24]
 800feac:	f000 f90a 	bl	80100c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800feb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ff28 <pvPortMalloc+0x18c>)
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	4a1b      	ldr	r2, [pc, #108]	@ (800ff28 <pvPortMalloc+0x18c>)
 800febc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800febe:	4b1a      	ldr	r3, [pc, #104]	@ (800ff28 <pvPortMalloc+0x18c>)
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	4b1b      	ldr	r3, [pc, #108]	@ (800ff30 <pvPortMalloc+0x194>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d203      	bcs.n	800fed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800feca:	4b17      	ldr	r3, [pc, #92]	@ (800ff28 <pvPortMalloc+0x18c>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a18      	ldr	r2, [pc, #96]	@ (800ff30 <pvPortMalloc+0x194>)
 800fed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed4:	685a      	ldr	r2, [r3, #4]
 800fed6:	4b13      	ldr	r3, [pc, #76]	@ (800ff24 <pvPortMalloc+0x188>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	431a      	orrs	r2, r3
 800fedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee2:	2200      	movs	r2, #0
 800fee4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fee6:	4b13      	ldr	r3, [pc, #76]	@ (800ff34 <pvPortMalloc+0x198>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	3301      	adds	r3, #1
 800feec:	4a11      	ldr	r2, [pc, #68]	@ (800ff34 <pvPortMalloc+0x198>)
 800feee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fef0:	f7fe fbc4 	bl	800e67c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	f003 0307 	and.w	r3, r3, #7
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00b      	beq.n	800ff16 <pvPortMalloc+0x17a>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	60fb      	str	r3, [r7, #12]
}
 800ff10:	bf00      	nop
 800ff12:	bf00      	nop
 800ff14:	e7fd      	b.n	800ff12 <pvPortMalloc+0x176>
	return pvReturn;
 800ff16:	69fb      	ldr	r3, [r7, #28]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3728      	adds	r7, #40	@ 0x28
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	2000bde4 	.word	0x2000bde4
 800ff24:	2000bdf8 	.word	0x2000bdf8
 800ff28:	2000bde8 	.word	0x2000bde8
 800ff2c:	2000bddc 	.word	0x2000bddc
 800ff30:	2000bdec 	.word	0x2000bdec
 800ff34:	2000bdf0 	.word	0x2000bdf0

0800ff38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d04f      	beq.n	800ffea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff4a:	2308      	movs	r3, #8
 800ff4c:	425b      	negs	r3, r3
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	4413      	add	r3, r2
 800ff52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	4b25      	ldr	r3, [pc, #148]	@ (800fff4 <vPortFree+0xbc>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4013      	ands	r3, r2
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10b      	bne.n	800ff7e <vPortFree+0x46>
	__asm volatile
 800ff66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	60fb      	str	r3, [r7, #12]
}
 800ff78:	bf00      	nop
 800ff7a:	bf00      	nop
 800ff7c:	e7fd      	b.n	800ff7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00b      	beq.n	800ff9e <vPortFree+0x66>
	__asm volatile
 800ff86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8a:	f383 8811 	msr	BASEPRI, r3
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	f3bf 8f4f 	dsb	sy
 800ff96:	60bb      	str	r3, [r7, #8]
}
 800ff98:	bf00      	nop
 800ff9a:	bf00      	nop
 800ff9c:	e7fd      	b.n	800ff9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	685a      	ldr	r2, [r3, #4]
 800ffa2:	4b14      	ldr	r3, [pc, #80]	@ (800fff4 <vPortFree+0xbc>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4013      	ands	r3, r2
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01e      	beq.n	800ffea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d11a      	bne.n	800ffea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	685a      	ldr	r2, [r3, #4]
 800ffb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fff4 <vPortFree+0xbc>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	43db      	mvns	r3, r3
 800ffbe:	401a      	ands	r2, r3
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ffc4:	f7fe fb4c 	bl	800e660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	685a      	ldr	r2, [r3, #4]
 800ffcc:	4b0a      	ldr	r3, [pc, #40]	@ (800fff8 <vPortFree+0xc0>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	4a09      	ldr	r2, [pc, #36]	@ (800fff8 <vPortFree+0xc0>)
 800ffd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ffd6:	6938      	ldr	r0, [r7, #16]
 800ffd8:	f000 f874 	bl	80100c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ffdc:	4b07      	ldr	r3, [pc, #28]	@ (800fffc <vPortFree+0xc4>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	4a06      	ldr	r2, [pc, #24]	@ (800fffc <vPortFree+0xc4>)
 800ffe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ffe6:	f7fe fb49 	bl	800e67c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ffea:	bf00      	nop
 800ffec:	3718      	adds	r7, #24
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	2000bdf8 	.word	0x2000bdf8
 800fff8:	2000bde8 	.word	0x2000bde8
 800fffc:	2000bdf4 	.word	0x2000bdf4

08010000 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010006:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 801000a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801000c:	4b27      	ldr	r3, [pc, #156]	@ (80100ac <prvHeapInit+0xac>)
 801000e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f003 0307 	and.w	r3, r3, #7
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00c      	beq.n	8010034 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	3307      	adds	r3, #7
 801001e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f023 0307 	bic.w	r3, r3, #7
 8010026:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010028:	68ba      	ldr	r2, [r7, #8]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	1ad3      	subs	r3, r2, r3
 801002e:	4a1f      	ldr	r2, [pc, #124]	@ (80100ac <prvHeapInit+0xac>)
 8010030:	4413      	add	r3, r2
 8010032:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010038:	4a1d      	ldr	r2, [pc, #116]	@ (80100b0 <prvHeapInit+0xb0>)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801003e:	4b1c      	ldr	r3, [pc, #112]	@ (80100b0 <prvHeapInit+0xb0>)
 8010040:	2200      	movs	r2, #0
 8010042:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	4413      	add	r3, r2
 801004a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801004c:	2208      	movs	r2, #8
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	1a9b      	subs	r3, r3, r2
 8010052:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f023 0307 	bic.w	r3, r3, #7
 801005a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	4a15      	ldr	r2, [pc, #84]	@ (80100b4 <prvHeapInit+0xb4>)
 8010060:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010062:	4b14      	ldr	r3, [pc, #80]	@ (80100b4 <prvHeapInit+0xb4>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2200      	movs	r2, #0
 8010068:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801006a:	4b12      	ldr	r3, [pc, #72]	@ (80100b4 <prvHeapInit+0xb4>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2200      	movs	r2, #0
 8010070:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	1ad2      	subs	r2, r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010080:	4b0c      	ldr	r3, [pc, #48]	@ (80100b4 <prvHeapInit+0xb4>)
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	4a0a      	ldr	r2, [pc, #40]	@ (80100b8 <prvHeapInit+0xb8>)
 801008e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	4a09      	ldr	r2, [pc, #36]	@ (80100bc <prvHeapInit+0xbc>)
 8010096:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010098:	4b09      	ldr	r3, [pc, #36]	@ (80100c0 <prvHeapInit+0xc0>)
 801009a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801009e:	601a      	str	r2, [r3, #0]
}
 80100a0:	bf00      	nop
 80100a2:	3714      	adds	r7, #20
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	20001ddc 	.word	0x20001ddc
 80100b0:	2000bddc 	.word	0x2000bddc
 80100b4:	2000bde4 	.word	0x2000bde4
 80100b8:	2000bdec 	.word	0x2000bdec
 80100bc:	2000bde8 	.word	0x2000bde8
 80100c0:	2000bdf8 	.word	0x2000bdf8

080100c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80100cc:	4b28      	ldr	r3, [pc, #160]	@ (8010170 <prvInsertBlockIntoFreeList+0xac>)
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e002      	b.n	80100d8 <prvInsertBlockIntoFreeList+0x14>
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d8f7      	bhi.n	80100d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	4413      	add	r3, r2
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d108      	bne.n	8010106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	685a      	ldr	r2, [r3, #4]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	441a      	add	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	441a      	add	r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	429a      	cmp	r2, r3
 8010118:	d118      	bne.n	801014c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	4b15      	ldr	r3, [pc, #84]	@ (8010174 <prvInsertBlockIntoFreeList+0xb0>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	d00d      	beq.n	8010142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	685a      	ldr	r2, [r3, #4]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	441a      	add	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	e008      	b.n	8010154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010142:	4b0c      	ldr	r3, [pc, #48]	@ (8010174 <prvInsertBlockIntoFreeList+0xb0>)
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	e003      	b.n	8010154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	429a      	cmp	r2, r3
 801015a:	d002      	beq.n	8010162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010162:	bf00      	nop
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	2000bddc 	.word	0x2000bddc
 8010174:	2000bde4 	.word	0x2000bde4

08010178 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801017c:	2200      	movs	r2, #0
 801017e:	4912      	ldr	r1, [pc, #72]	@ (80101c8 <MX_USB_DEVICE_Init+0x50>)
 8010180:	4812      	ldr	r0, [pc, #72]	@ (80101cc <MX_USB_DEVICE_Init+0x54>)
 8010182:	f7fb fd47 	bl	800bc14 <USBD_Init>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801018c:	f7f5 f8d0 	bl	8005330 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010190:	490f      	ldr	r1, [pc, #60]	@ (80101d0 <MX_USB_DEVICE_Init+0x58>)
 8010192:	480e      	ldr	r0, [pc, #56]	@ (80101cc <MX_USB_DEVICE_Init+0x54>)
 8010194:	f7fb fd6e 	bl	800bc74 <USBD_RegisterClass>
 8010198:	4603      	mov	r3, r0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801019e:	f7f5 f8c7 	bl	8005330 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80101a2:	490c      	ldr	r1, [pc, #48]	@ (80101d4 <MX_USB_DEVICE_Init+0x5c>)
 80101a4:	4809      	ldr	r0, [pc, #36]	@ (80101cc <MX_USB_DEVICE_Init+0x54>)
 80101a6:	f7fb fc65 	bl	800ba74 <USBD_CDC_RegisterInterface>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80101b0:	f7f5 f8be 	bl	8005330 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80101b4:	4805      	ldr	r0, [pc, #20]	@ (80101cc <MX_USB_DEVICE_Init+0x54>)
 80101b6:	f7fb fd93 	bl	800bce0 <USBD_Start>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80101c0:	f7f5 f8b6 	bl	8005330 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80101c4:	bf00      	nop
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	200000b0 	.word	0x200000b0
 80101cc:	2000bdfc 	.word	0x2000bdfc
 80101d0:	20000018 	.word	0x20000018
 80101d4:	2000009c 	.word	0x2000009c

080101d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80101dc:	2200      	movs	r2, #0
 80101de:	4905      	ldr	r1, [pc, #20]	@ (80101f4 <CDC_Init_FS+0x1c>)
 80101e0:	4805      	ldr	r0, [pc, #20]	@ (80101f8 <CDC_Init_FS+0x20>)
 80101e2:	f7fb fc61 	bl	800baa8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80101e6:	4905      	ldr	r1, [pc, #20]	@ (80101fc <CDC_Init_FS+0x24>)
 80101e8:	4803      	ldr	r0, [pc, #12]	@ (80101f8 <CDC_Init_FS+0x20>)
 80101ea:	f7fb fc7f 	bl	800baec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80101ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	2000c118 	.word	0x2000c118
 80101f8:	2000bdfc 	.word	0x2000bdfc
 80101fc:	2000c0d8 	.word	0x2000c0d8

08010200 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010200:	b480      	push	{r7}
 8010202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010204:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010206:	4618      	mov	r0, r3
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	6039      	str	r1, [r7, #0]
 801021a:	71fb      	strb	r3, [r7, #7]
 801021c:	4613      	mov	r3, r2
 801021e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	2b23      	cmp	r3, #35	@ 0x23
 8010224:	d84a      	bhi.n	80102bc <CDC_Control_FS+0xac>
 8010226:	a201      	add	r2, pc, #4	@ (adr r2, 801022c <CDC_Control_FS+0x1c>)
 8010228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022c:	080102bd 	.word	0x080102bd
 8010230:	080102bd 	.word	0x080102bd
 8010234:	080102bd 	.word	0x080102bd
 8010238:	080102bd 	.word	0x080102bd
 801023c:	080102bd 	.word	0x080102bd
 8010240:	080102bd 	.word	0x080102bd
 8010244:	080102bd 	.word	0x080102bd
 8010248:	080102bd 	.word	0x080102bd
 801024c:	080102bd 	.word	0x080102bd
 8010250:	080102bd 	.word	0x080102bd
 8010254:	080102bd 	.word	0x080102bd
 8010258:	080102bd 	.word	0x080102bd
 801025c:	080102bd 	.word	0x080102bd
 8010260:	080102bd 	.word	0x080102bd
 8010264:	080102bd 	.word	0x080102bd
 8010268:	080102bd 	.word	0x080102bd
 801026c:	080102bd 	.word	0x080102bd
 8010270:	080102bd 	.word	0x080102bd
 8010274:	080102bd 	.word	0x080102bd
 8010278:	080102bd 	.word	0x080102bd
 801027c:	080102bd 	.word	0x080102bd
 8010280:	080102bd 	.word	0x080102bd
 8010284:	080102bd 	.word	0x080102bd
 8010288:	080102bd 	.word	0x080102bd
 801028c:	080102bd 	.word	0x080102bd
 8010290:	080102bd 	.word	0x080102bd
 8010294:	080102bd 	.word	0x080102bd
 8010298:	080102bd 	.word	0x080102bd
 801029c:	080102bd 	.word	0x080102bd
 80102a0:	080102bd 	.word	0x080102bd
 80102a4:	080102bd 	.word	0x080102bd
 80102a8:	080102bd 	.word	0x080102bd
 80102ac:	080102bd 	.word	0x080102bd
 80102b0:	080102bd 	.word	0x080102bd
 80102b4:	080102bd 	.word	0x080102bd
 80102b8:	080102bd 	.word	0x080102bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80102bc:	bf00      	nop
  }

  return (USBD_OK);
 80102be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	4806      	ldr	r0, [pc, #24]	@ (80102f4 <CDC_Receive_FS+0x28>)
 80102da:	f7fb fc07 	bl	800baec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80102de:	4805      	ldr	r0, [pc, #20]	@ (80102f4 <CDC_Receive_FS+0x28>)
 80102e0:	f7fb fc62 	bl	800bba8 <USBD_CDC_ReceivePacket>

  pc_user_cmd_handle(UserRxBufferFS);
 80102e4:	4804      	ldr	r0, [pc, #16]	@ (80102f8 <CDC_Receive_FS+0x2c>)
 80102e6:	f7f3 fdeb 	bl	8003ec0 <pc_user_cmd_handle>

  return (USBD_OK);
 80102ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	2000bdfc 	.word	0x2000bdfc
 80102f8:	2000c0d8 	.word	0x2000c0d8

080102fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	460b      	mov	r3, r1
 8010306:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801030c:	4b0d      	ldr	r3, [pc, #52]	@ (8010344 <CDC_Transmit_FS+0x48>)
 801030e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010312:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801031a:	2b00      	cmp	r3, #0
 801031c:	d001      	beq.n	8010322 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801031e:	2301      	movs	r3, #1
 8010320:	e00b      	b.n	801033a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010322:	887b      	ldrh	r3, [r7, #2]
 8010324:	461a      	mov	r2, r3
 8010326:	6879      	ldr	r1, [r7, #4]
 8010328:	4806      	ldr	r0, [pc, #24]	@ (8010344 <CDC_Transmit_FS+0x48>)
 801032a:	f7fb fbbd 	bl	800baa8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801032e:	4805      	ldr	r0, [pc, #20]	@ (8010344 <CDC_Transmit_FS+0x48>)
 8010330:	f7fb fbfa 	bl	800bb28 <USBD_CDC_TransmitPacket>
 8010334:	4603      	mov	r3, r0
 8010336:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010338:	7bfb      	ldrb	r3, [r7, #15]
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	2000bdfc 	.word	0x2000bdfc

08010348 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010348:	b480      	push	{r7}
 801034a:	b087      	sub	sp, #28
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	4613      	mov	r3, r2
 8010354:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010356:	2300      	movs	r3, #0
 8010358:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801035a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801035e:	4618      	mov	r0, r3
 8010360:	371c      	adds	r7, #28
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
	...

0801036c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	6039      	str	r1, [r7, #0]
 8010376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	2212      	movs	r2, #18
 801037c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801037e:	4b03      	ldr	r3, [pc, #12]	@ (801038c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010380:	4618      	mov	r0, r3
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr
 801038c:	200000cc 	.word	0x200000cc

08010390 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	4603      	mov	r3, r0
 8010398:	6039      	str	r1, [r7, #0]
 801039a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	2204      	movs	r2, #4
 80103a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80103a2:	4b03      	ldr	r3, [pc, #12]	@ (80103b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	370c      	adds	r7, #12
 80103a8:	46bd      	mov	sp, r7
 80103aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ae:	4770      	bx	lr
 80103b0:	200000e0 	.word	0x200000e0

080103b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	6039      	str	r1, [r7, #0]
 80103be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80103c0:	79fb      	ldrb	r3, [r7, #7]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d105      	bne.n	80103d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103c6:	683a      	ldr	r2, [r7, #0]
 80103c8:	4907      	ldr	r1, [pc, #28]	@ (80103e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80103ca:	4808      	ldr	r0, [pc, #32]	@ (80103ec <USBD_FS_ProductStrDescriptor+0x38>)
 80103cc:	f7fc fe38 	bl	800d040 <USBD_GetString>
 80103d0:	e004      	b.n	80103dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103d2:	683a      	ldr	r2, [r7, #0]
 80103d4:	4904      	ldr	r1, [pc, #16]	@ (80103e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80103d6:	4805      	ldr	r0, [pc, #20]	@ (80103ec <USBD_FS_ProductStrDescriptor+0x38>)
 80103d8:	f7fc fe32 	bl	800d040 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103dc:	4b02      	ldr	r3, [pc, #8]	@ (80103e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3708      	adds	r7, #8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	2000c158 	.word	0x2000c158
 80103ec:	08011c38 	.word	0x08011c38

080103f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	4603      	mov	r3, r0
 80103f8:	6039      	str	r1, [r7, #0]
 80103fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	4904      	ldr	r1, [pc, #16]	@ (8010410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010400:	4804      	ldr	r0, [pc, #16]	@ (8010414 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010402:	f7fc fe1d 	bl	800d040 <USBD_GetString>
  return USBD_StrDesc;
 8010406:	4b02      	ldr	r3, [pc, #8]	@ (8010410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	2000c158 	.word	0x2000c158
 8010414:	08011c50 	.word	0x08011c50

08010418 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	4603      	mov	r3, r0
 8010420:	6039      	str	r1, [r7, #0]
 8010422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	221a      	movs	r2, #26
 8010428:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801042a:	f000 f843 	bl	80104b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801042e:	4b02      	ldr	r3, [pc, #8]	@ (8010438 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010430:	4618      	mov	r0, r3
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	200000e4 	.word	0x200000e4

0801043c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	6039      	str	r1, [r7, #0]
 8010446:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d105      	bne.n	801045a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801044e:	683a      	ldr	r2, [r7, #0]
 8010450:	4907      	ldr	r1, [pc, #28]	@ (8010470 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010452:	4808      	ldr	r0, [pc, #32]	@ (8010474 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010454:	f7fc fdf4 	bl	800d040 <USBD_GetString>
 8010458:	e004      	b.n	8010464 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801045a:	683a      	ldr	r2, [r7, #0]
 801045c:	4904      	ldr	r1, [pc, #16]	@ (8010470 <USBD_FS_ConfigStrDescriptor+0x34>)
 801045e:	4805      	ldr	r0, [pc, #20]	@ (8010474 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010460:	f7fc fdee 	bl	800d040 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010464:	4b02      	ldr	r3, [pc, #8]	@ (8010470 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010466:	4618      	mov	r0, r3
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	2000c158 	.word	0x2000c158
 8010474:	08011c64 	.word	0x08011c64

08010478 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	6039      	str	r1, [r7, #0]
 8010482:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d105      	bne.n	8010496 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801048a:	683a      	ldr	r2, [r7, #0]
 801048c:	4907      	ldr	r1, [pc, #28]	@ (80104ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801048e:	4808      	ldr	r0, [pc, #32]	@ (80104b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010490:	f7fc fdd6 	bl	800d040 <USBD_GetString>
 8010494:	e004      	b.n	80104a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010496:	683a      	ldr	r2, [r7, #0]
 8010498:	4904      	ldr	r1, [pc, #16]	@ (80104ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801049a:	4805      	ldr	r0, [pc, #20]	@ (80104b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801049c:	f7fc fdd0 	bl	800d040 <USBD_GetString>
  }
  return USBD_StrDesc;
 80104a0:	4b02      	ldr	r3, [pc, #8]	@ (80104ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	2000c158 	.word	0x2000c158
 80104b0:	08011c70 	.word	0x08011c70

080104b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80104ba:	4b0f      	ldr	r3, [pc, #60]	@ (80104f8 <Get_SerialNum+0x44>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80104c0:	4b0e      	ldr	r3, [pc, #56]	@ (80104fc <Get_SerialNum+0x48>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80104c6:	4b0e      	ldr	r3, [pc, #56]	@ (8010500 <Get_SerialNum+0x4c>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4413      	add	r3, r2
 80104d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d009      	beq.n	80104ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80104da:	2208      	movs	r2, #8
 80104dc:	4909      	ldr	r1, [pc, #36]	@ (8010504 <Get_SerialNum+0x50>)
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f000 f814 	bl	801050c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80104e4:	2204      	movs	r2, #4
 80104e6:	4908      	ldr	r1, [pc, #32]	@ (8010508 <Get_SerialNum+0x54>)
 80104e8:	68b8      	ldr	r0, [r7, #8]
 80104ea:	f000 f80f 	bl	801050c <IntToUnicode>
  }
}
 80104ee:	bf00      	nop
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	1fff7a10 	.word	0x1fff7a10
 80104fc:	1fff7a14 	.word	0x1fff7a14
 8010500:	1fff7a18 	.word	0x1fff7a18
 8010504:	200000e6 	.word	0x200000e6
 8010508:	200000f6 	.word	0x200000f6

0801050c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801050c:	b480      	push	{r7}
 801050e:	b087      	sub	sp, #28
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	60b9      	str	r1, [r7, #8]
 8010516:	4613      	mov	r3, r2
 8010518:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801051a:	2300      	movs	r3, #0
 801051c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801051e:	2300      	movs	r3, #0
 8010520:	75fb      	strb	r3, [r7, #23]
 8010522:	e027      	b.n	8010574 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	0f1b      	lsrs	r3, r3, #28
 8010528:	2b09      	cmp	r3, #9
 801052a:	d80b      	bhi.n	8010544 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	0f1b      	lsrs	r3, r3, #28
 8010530:	b2da      	uxtb	r2, r3
 8010532:	7dfb      	ldrb	r3, [r7, #23]
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	4619      	mov	r1, r3
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	440b      	add	r3, r1
 801053c:	3230      	adds	r2, #48	@ 0x30
 801053e:	b2d2      	uxtb	r2, r2
 8010540:	701a      	strb	r2, [r3, #0]
 8010542:	e00a      	b.n	801055a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	0f1b      	lsrs	r3, r3, #28
 8010548:	b2da      	uxtb	r2, r3
 801054a:	7dfb      	ldrb	r3, [r7, #23]
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	4619      	mov	r1, r3
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	440b      	add	r3, r1
 8010554:	3237      	adds	r2, #55	@ 0x37
 8010556:	b2d2      	uxtb	r2, r2
 8010558:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	011b      	lsls	r3, r3, #4
 801055e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010560:	7dfb      	ldrb	r3, [r7, #23]
 8010562:	005b      	lsls	r3, r3, #1
 8010564:	3301      	adds	r3, #1
 8010566:	68ba      	ldr	r2, [r7, #8]
 8010568:	4413      	add	r3, r2
 801056a:	2200      	movs	r2, #0
 801056c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801056e:	7dfb      	ldrb	r3, [r7, #23]
 8010570:	3301      	adds	r3, #1
 8010572:	75fb      	strb	r3, [r7, #23]
 8010574:	7dfa      	ldrb	r2, [r7, #23]
 8010576:	79fb      	ldrb	r3, [r7, #7]
 8010578:	429a      	cmp	r2, r3
 801057a:	d3d3      	bcc.n	8010524 <IntToUnicode+0x18>
  }
}
 801057c:	bf00      	nop
 801057e:	bf00      	nop
 8010580:	371c      	adds	r7, #28
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr
	...

0801058c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b08a      	sub	sp, #40	@ 0x28
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010594:	f107 0314 	add.w	r3, r7, #20
 8010598:	2200      	movs	r2, #0
 801059a:	601a      	str	r2, [r3, #0]
 801059c:	605a      	str	r2, [r3, #4]
 801059e:	609a      	str	r2, [r3, #8]
 80105a0:	60da      	str	r2, [r3, #12]
 80105a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80105ac:	d13a      	bne.n	8010624 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105ae:	2300      	movs	r3, #0
 80105b0:	613b      	str	r3, [r7, #16]
 80105b2:	4b1e      	ldr	r3, [pc, #120]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 80105b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105b6:	4a1d      	ldr	r2, [pc, #116]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 80105b8:	f043 0301 	orr.w	r3, r3, #1
 80105bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80105be:	4b1b      	ldr	r3, [pc, #108]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 80105c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105c2:	f003 0301 	and.w	r3, r3, #1
 80105c6:	613b      	str	r3, [r7, #16]
 80105c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80105ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80105ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105d0:	2302      	movs	r3, #2
 80105d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105d4:	2300      	movs	r3, #0
 80105d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105d8:	2303      	movs	r3, #3
 80105da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80105dc:	230a      	movs	r3, #10
 80105de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105e0:	f107 0314 	add.w	r3, r7, #20
 80105e4:	4619      	mov	r1, r3
 80105e6:	4812      	ldr	r0, [pc, #72]	@ (8010630 <HAL_PCD_MspInit+0xa4>)
 80105e8:	f7f5 faba 	bl	8005b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105ec:	4b0f      	ldr	r3, [pc, #60]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 80105ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105f0:	4a0e      	ldr	r2, [pc, #56]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 80105f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80105f8:	2300      	movs	r3, #0
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	4b0b      	ldr	r3, [pc, #44]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 80105fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010600:	4a0a      	ldr	r2, [pc, #40]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 8010602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010606:	6453      	str	r3, [r2, #68]	@ 0x44
 8010608:	4b08      	ldr	r3, [pc, #32]	@ (801062c <HAL_PCD_MspInit+0xa0>)
 801060a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801060c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010610:	60fb      	str	r3, [r7, #12]
 8010612:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010614:	2200      	movs	r2, #0
 8010616:	2105      	movs	r1, #5
 8010618:	2043      	movs	r0, #67	@ 0x43
 801061a:	f7f5 fa77 	bl	8005b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801061e:	2043      	movs	r0, #67	@ 0x43
 8010620:	f7f5 fa90 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010624:	bf00      	nop
 8010626:	3728      	adds	r7, #40	@ 0x28
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	40023800 	.word	0x40023800
 8010630:	40020000 	.word	0x40020000

08010634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010648:	4619      	mov	r1, r3
 801064a:	4610      	mov	r0, r2
 801064c:	f7fb fb95 	bl	800bd7a <USBD_LL_SetupStage>
}
 8010650:	bf00      	nop
 8010652:	3708      	adds	r7, #8
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	460b      	mov	r3, r1
 8010662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801066a:	78fa      	ldrb	r2, [r7, #3]
 801066c:	6879      	ldr	r1, [r7, #4]
 801066e:	4613      	mov	r3, r2
 8010670:	00db      	lsls	r3, r3, #3
 8010672:	4413      	add	r3, r2
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	440b      	add	r3, r1
 8010678:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	78fb      	ldrb	r3, [r7, #3]
 8010680:	4619      	mov	r1, r3
 8010682:	f7fb fbcf 	bl	800be24 <USBD_LL_DataOutStage>
}
 8010686:	bf00      	nop
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b082      	sub	sp, #8
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	460b      	mov	r3, r1
 8010698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80106a0:	78fa      	ldrb	r2, [r7, #3]
 80106a2:	6879      	ldr	r1, [r7, #4]
 80106a4:	4613      	mov	r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	4413      	add	r3, r2
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	440b      	add	r3, r1
 80106ae:	3320      	adds	r3, #32
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	78fb      	ldrb	r3, [r7, #3]
 80106b4:	4619      	mov	r1, r3
 80106b6:	f7fb fc68 	bl	800bf8a <USBD_LL_DataInStage>
}
 80106ba:	bf00      	nop
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b082      	sub	sp, #8
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fb fda2 	bl	800c21a <USBD_LL_SOF>
}
 80106d6:	bf00      	nop
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106e6:	2301      	movs	r3, #1
 80106e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	79db      	ldrb	r3, [r3, #7]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d001      	beq.n	80106f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80106f2:	f7f4 fe1d 	bl	8005330 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80106fc:	7bfa      	ldrb	r2, [r7, #15]
 80106fe:	4611      	mov	r1, r2
 8010700:	4618      	mov	r0, r3
 8010702:	f7fb fd46 	bl	800c192 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801070c:	4618      	mov	r0, r3
 801070e:	f7fb fcee 	bl	800c0ee <USBD_LL_Reset>
}
 8010712:	bf00      	nop
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
	...

0801071c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801072a:	4618      	mov	r0, r3
 801072c:	f7fb fd41 	bl	800c1b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010742:	f043 0301 	orr.w	r3, r3, #1
 8010746:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	7adb      	ldrb	r3, [r3, #11]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d005      	beq.n	801075c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010750:	4b04      	ldr	r3, [pc, #16]	@ (8010764 <HAL_PCD_SuspendCallback+0x48>)
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	4a03      	ldr	r2, [pc, #12]	@ (8010764 <HAL_PCD_SuspendCallback+0x48>)
 8010756:	f043 0306 	orr.w	r3, r3, #6
 801075a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801075c:	bf00      	nop
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	e000ed00 	.word	0xe000ed00

08010768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010776:	4618      	mov	r0, r3
 8010778:	f7fb fd37 	bl	800c1ea <USBD_LL_Resume>
}
 801077c:	bf00      	nop
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010796:	78fa      	ldrb	r2, [r7, #3]
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f7fb fd8f 	bl	800c2be <USBD_LL_IsoOUTIncomplete>
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	460b      	mov	r3, r1
 80107b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80107ba:	78fa      	ldrb	r2, [r7, #3]
 80107bc:	4611      	mov	r1, r2
 80107be:	4618      	mov	r0, r3
 80107c0:	f7fb fd4b 	bl	800c25a <USBD_LL_IsoINIncomplete>
}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fb fda1 	bl	800c322 <USBD_LL_DevConnected>
}
 80107e0:	bf00      	nop
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fb fd9e 	bl	800c338 <USBD_LL_DevDisconnected>
}
 80107fc:	bf00      	nop
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d13c      	bne.n	801088e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010814:	4a20      	ldr	r2, [pc, #128]	@ (8010898 <USBD_LL_Init+0x94>)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4a1e      	ldr	r2, [pc, #120]	@ (8010898 <USBD_LL_Init+0x94>)
 8010820:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010824:	4b1c      	ldr	r3, [pc, #112]	@ (8010898 <USBD_LL_Init+0x94>)
 8010826:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801082c:	4b1a      	ldr	r3, [pc, #104]	@ (8010898 <USBD_LL_Init+0x94>)
 801082e:	2204      	movs	r2, #4
 8010830:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010832:	4b19      	ldr	r3, [pc, #100]	@ (8010898 <USBD_LL_Init+0x94>)
 8010834:	2202      	movs	r2, #2
 8010836:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010838:	4b17      	ldr	r3, [pc, #92]	@ (8010898 <USBD_LL_Init+0x94>)
 801083a:	2200      	movs	r2, #0
 801083c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801083e:	4b16      	ldr	r3, [pc, #88]	@ (8010898 <USBD_LL_Init+0x94>)
 8010840:	2202      	movs	r2, #2
 8010842:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010844:	4b14      	ldr	r3, [pc, #80]	@ (8010898 <USBD_LL_Init+0x94>)
 8010846:	2200      	movs	r2, #0
 8010848:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801084a:	4b13      	ldr	r3, [pc, #76]	@ (8010898 <USBD_LL_Init+0x94>)
 801084c:	2200      	movs	r2, #0
 801084e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010850:	4b11      	ldr	r3, [pc, #68]	@ (8010898 <USBD_LL_Init+0x94>)
 8010852:	2200      	movs	r2, #0
 8010854:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010856:	4b10      	ldr	r3, [pc, #64]	@ (8010898 <USBD_LL_Init+0x94>)
 8010858:	2200      	movs	r2, #0
 801085a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801085c:	4b0e      	ldr	r3, [pc, #56]	@ (8010898 <USBD_LL_Init+0x94>)
 801085e:	2200      	movs	r2, #0
 8010860:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010862:	480d      	ldr	r0, [pc, #52]	@ (8010898 <USBD_LL_Init+0x94>)
 8010864:	f7f5 fc8e 	bl	8006184 <HAL_PCD_Init>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801086e:	f7f4 fd5f 	bl	8005330 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010872:	2180      	movs	r1, #128	@ 0x80
 8010874:	4808      	ldr	r0, [pc, #32]	@ (8010898 <USBD_LL_Init+0x94>)
 8010876:	f7f6 feba 	bl	80075ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801087a:	2240      	movs	r2, #64	@ 0x40
 801087c:	2100      	movs	r1, #0
 801087e:	4806      	ldr	r0, [pc, #24]	@ (8010898 <USBD_LL_Init+0x94>)
 8010880:	f7f6 fe6e 	bl	8007560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010884:	2280      	movs	r2, #128	@ 0x80
 8010886:	2101      	movs	r1, #1
 8010888:	4803      	ldr	r0, [pc, #12]	@ (8010898 <USBD_LL_Init+0x94>)
 801088a:	f7f6 fe69 	bl	8007560 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	2000c358 	.word	0x2000c358

0801089c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7f5 fd75 	bl	80063a2 <HAL_PCD_Start>
 80108b8:	4603      	mov	r3, r0
 80108ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108bc:	7bfb      	ldrb	r3, [r7, #15]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 f942 	bl	8010b48 <USBD_Get_USB_Status>
 80108c4:	4603      	mov	r3, r0
 80108c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b084      	sub	sp, #16
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	4608      	mov	r0, r1
 80108dc:	4611      	mov	r1, r2
 80108de:	461a      	mov	r2, r3
 80108e0:	4603      	mov	r3, r0
 80108e2:	70fb      	strb	r3, [r7, #3]
 80108e4:	460b      	mov	r3, r1
 80108e6:	70bb      	strb	r3, [r7, #2]
 80108e8:	4613      	mov	r3, r2
 80108ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108ec:	2300      	movs	r3, #0
 80108ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108fa:	78bb      	ldrb	r3, [r7, #2]
 80108fc:	883a      	ldrh	r2, [r7, #0]
 80108fe:	78f9      	ldrb	r1, [r7, #3]
 8010900:	f7f6 fa49 	bl	8006d96 <HAL_PCD_EP_Open>
 8010904:	4603      	mov	r3, r0
 8010906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010908:	7bfb      	ldrb	r3, [r7, #15]
 801090a:	4618      	mov	r0, r3
 801090c:	f000 f91c 	bl	8010b48 <USBD_Get_USB_Status>
 8010910:	4603      	mov	r3, r0
 8010912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010914:	7bbb      	ldrb	r3, [r7, #14]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}

0801091e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801091e:	b580      	push	{r7, lr}
 8010920:	b084      	sub	sp, #16
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
 8010926:	460b      	mov	r3, r1
 8010928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801092a:	2300      	movs	r3, #0
 801092c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801092e:	2300      	movs	r3, #0
 8010930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010938:	78fa      	ldrb	r2, [r7, #3]
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f7f6 fa94 	bl	8006e6a <HAL_PCD_EP_Close>
 8010942:	4603      	mov	r3, r0
 8010944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010946:	7bfb      	ldrb	r3, [r7, #15]
 8010948:	4618      	mov	r0, r3
 801094a:	f000 f8fd 	bl	8010b48 <USBD_Get_USB_Status>
 801094e:	4603      	mov	r3, r0
 8010950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010952:	7bbb      	ldrb	r3, [r7, #14]
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	460b      	mov	r3, r1
 8010966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010968:	2300      	movs	r3, #0
 801096a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801096c:	2300      	movs	r3, #0
 801096e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010976:	78fa      	ldrb	r2, [r7, #3]
 8010978:	4611      	mov	r1, r2
 801097a:	4618      	mov	r0, r3
 801097c:	f7f6 fb4c 	bl	8007018 <HAL_PCD_EP_SetStall>
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010984:	7bfb      	ldrb	r3, [r7, #15]
 8010986:	4618      	mov	r0, r3
 8010988:	f000 f8de 	bl	8010b48 <USBD_Get_USB_Status>
 801098c:	4603      	mov	r3, r0
 801098e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010990:	7bbb      	ldrb	r3, [r7, #14]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b084      	sub	sp, #16
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	460b      	mov	r3, r1
 80109a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109aa:	2300      	movs	r3, #0
 80109ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109b4:	78fa      	ldrb	r2, [r7, #3]
 80109b6:	4611      	mov	r1, r2
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7f6 fb90 	bl	80070de <HAL_PCD_EP_ClrStall>
 80109be:	4603      	mov	r3, r0
 80109c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 f8bf 	bl	8010b48 <USBD_Get_USB_Status>
 80109ca:	4603      	mov	r3, r0
 80109cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	460b      	mov	r3, r1
 80109e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80109ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	da0b      	bge.n	8010a0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109fa:	68f9      	ldr	r1, [r7, #12]
 80109fc:	4613      	mov	r3, r2
 80109fe:	00db      	lsls	r3, r3, #3
 8010a00:	4413      	add	r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	440b      	add	r3, r1
 8010a06:	3316      	adds	r3, #22
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	e00b      	b.n	8010a24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a0c:	78fb      	ldrb	r3, [r7, #3]
 8010a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a12:	68f9      	ldr	r1, [r7, #12]
 8010a14:	4613      	mov	r3, r2
 8010a16:	00db      	lsls	r3, r3, #3
 8010a18:	4413      	add	r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	440b      	add	r3, r1
 8010a1e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3714      	adds	r7, #20
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a40:	2300      	movs	r3, #0
 8010a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a4a:	78fa      	ldrb	r2, [r7, #3]
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7f6 f97d 	bl	8006d4e <HAL_PCD_SetAddress>
 8010a54:	4603      	mov	r3, r0
 8010a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a58:	7bfb      	ldrb	r3, [r7, #15]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f000 f874 	bl	8010b48 <USBD_Get_USB_Status>
 8010a60:	4603      	mov	r3, r0
 8010a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}

08010a6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a6e:	b580      	push	{r7, lr}
 8010a70:	b086      	sub	sp, #24
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	60f8      	str	r0, [r7, #12]
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	603b      	str	r3, [r7, #0]
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a8c:	7af9      	ldrb	r1, [r7, #11]
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	f7f6 fa87 	bl	8006fa4 <HAL_PCD_EP_Transmit>
 8010a96:	4603      	mov	r3, r0
 8010a98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a9a:	7dfb      	ldrb	r3, [r7, #23]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 f853 	bl	8010b48 <USBD_Get_USB_Status>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3718      	adds	r7, #24
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	607a      	str	r2, [r7, #4]
 8010aba:	603b      	str	r3, [r7, #0]
 8010abc:	460b      	mov	r3, r1
 8010abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010ace:	7af9      	ldrb	r1, [r7, #11]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	f7f6 fa13 	bl	8006efe <HAL_PCD_EP_Receive>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010adc:	7dfb      	ldrb	r3, [r7, #23]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 f832 	bl	8010b48 <USBD_Get_USB_Status>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010ae8:	7dbb      	ldrb	r3, [r7, #22]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3718      	adds	r7, #24
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b082      	sub	sp, #8
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	460b      	mov	r3, r1
 8010afc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b04:	78fa      	ldrb	r2, [r7, #3]
 8010b06:	4611      	mov	r1, r2
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f6 fa33 	bl	8006f74 <HAL_PCD_EP_GetRxCount>
 8010b0e:	4603      	mov	r3, r0
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010b20:	4b03      	ldr	r3, [pc, #12]	@ (8010b30 <USBD_static_malloc+0x18>)
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	2000c83c 	.word	0x2000c83c

08010b34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]

}
 8010b3c:	bf00      	nop
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	4603      	mov	r3, r0
 8010b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b52:	2300      	movs	r3, #0
 8010b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010b56:	79fb      	ldrb	r3, [r7, #7]
 8010b58:	2b03      	cmp	r3, #3
 8010b5a:	d817      	bhi.n	8010b8c <USBD_Get_USB_Status+0x44>
 8010b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8010b64 <USBD_Get_USB_Status+0x1c>)
 8010b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b62:	bf00      	nop
 8010b64:	08010b75 	.word	0x08010b75
 8010b68:	08010b7b 	.word	0x08010b7b
 8010b6c:	08010b81 	.word	0x08010b81
 8010b70:	08010b87 	.word	0x08010b87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	73fb      	strb	r3, [r7, #15]
    break;
 8010b78:	e00b      	b.n	8010b92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b7a:	2303      	movs	r3, #3
 8010b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8010b7e:	e008      	b.n	8010b92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b80:	2301      	movs	r3, #1
 8010b82:	73fb      	strb	r3, [r7, #15]
    break;
 8010b84:	e005      	b.n	8010b92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b86:	2303      	movs	r3, #3
 8010b88:	73fb      	strb	r3, [r7, #15]
    break;
 8010b8a:	e002      	b.n	8010b92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010b8c:	2303      	movs	r3, #3
 8010b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b90:	bf00      	nop
  }
  return usb_status;
 8010b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <malloc>:
 8010ba0:	4b02      	ldr	r3, [pc, #8]	@ (8010bac <malloc+0xc>)
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	6818      	ldr	r0, [r3, #0]
 8010ba6:	f000 b82d 	b.w	8010c04 <_malloc_r>
 8010baa:	bf00      	nop
 8010bac:	20000100 	.word	0x20000100

08010bb0 <free>:
 8010bb0:	4b02      	ldr	r3, [pc, #8]	@ (8010bbc <free+0xc>)
 8010bb2:	4601      	mov	r1, r0
 8010bb4:	6818      	ldr	r0, [r3, #0]
 8010bb6:	f000 b923 	b.w	8010e00 <_free_r>
 8010bba:	bf00      	nop
 8010bbc:	20000100 	.word	0x20000100

08010bc0 <sbrk_aligned>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8010c00 <sbrk_aligned+0x40>)
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	6831      	ldr	r1, [r6, #0]
 8010bc8:	4605      	mov	r5, r0
 8010bca:	b911      	cbnz	r1, 8010bd2 <sbrk_aligned+0x12>
 8010bcc:	f000 f8ce 	bl	8010d6c <_sbrk_r>
 8010bd0:	6030      	str	r0, [r6, #0]
 8010bd2:	4621      	mov	r1, r4
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f000 f8c9 	bl	8010d6c <_sbrk_r>
 8010bda:	1c43      	adds	r3, r0, #1
 8010bdc:	d103      	bne.n	8010be6 <sbrk_aligned+0x26>
 8010bde:	f04f 34ff 	mov.w	r4, #4294967295
 8010be2:	4620      	mov	r0, r4
 8010be4:	bd70      	pop	{r4, r5, r6, pc}
 8010be6:	1cc4      	adds	r4, r0, #3
 8010be8:	f024 0403 	bic.w	r4, r4, #3
 8010bec:	42a0      	cmp	r0, r4
 8010bee:	d0f8      	beq.n	8010be2 <sbrk_aligned+0x22>
 8010bf0:	1a21      	subs	r1, r4, r0
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f000 f8ba 	bl	8010d6c <_sbrk_r>
 8010bf8:	3001      	adds	r0, #1
 8010bfa:	d1f2      	bne.n	8010be2 <sbrk_aligned+0x22>
 8010bfc:	e7ef      	b.n	8010bde <sbrk_aligned+0x1e>
 8010bfe:	bf00      	nop
 8010c00:	2000ca5c 	.word	0x2000ca5c

08010c04 <_malloc_r>:
 8010c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c08:	1ccd      	adds	r5, r1, #3
 8010c0a:	f025 0503 	bic.w	r5, r5, #3
 8010c0e:	3508      	adds	r5, #8
 8010c10:	2d0c      	cmp	r5, #12
 8010c12:	bf38      	it	cc
 8010c14:	250c      	movcc	r5, #12
 8010c16:	2d00      	cmp	r5, #0
 8010c18:	4606      	mov	r6, r0
 8010c1a:	db01      	blt.n	8010c20 <_malloc_r+0x1c>
 8010c1c:	42a9      	cmp	r1, r5
 8010c1e:	d904      	bls.n	8010c2a <_malloc_r+0x26>
 8010c20:	230c      	movs	r3, #12
 8010c22:	6033      	str	r3, [r6, #0]
 8010c24:	2000      	movs	r0, #0
 8010c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d00 <_malloc_r+0xfc>
 8010c2e:	f000 f869 	bl	8010d04 <__malloc_lock>
 8010c32:	f8d8 3000 	ldr.w	r3, [r8]
 8010c36:	461c      	mov	r4, r3
 8010c38:	bb44      	cbnz	r4, 8010c8c <_malloc_r+0x88>
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f7ff ffbf 	bl	8010bc0 <sbrk_aligned>
 8010c42:	1c43      	adds	r3, r0, #1
 8010c44:	4604      	mov	r4, r0
 8010c46:	d158      	bne.n	8010cfa <_malloc_r+0xf6>
 8010c48:	f8d8 4000 	ldr.w	r4, [r8]
 8010c4c:	4627      	mov	r7, r4
 8010c4e:	2f00      	cmp	r7, #0
 8010c50:	d143      	bne.n	8010cda <_malloc_r+0xd6>
 8010c52:	2c00      	cmp	r4, #0
 8010c54:	d04b      	beq.n	8010cee <_malloc_r+0xea>
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	4639      	mov	r1, r7
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	eb04 0903 	add.w	r9, r4, r3
 8010c60:	f000 f884 	bl	8010d6c <_sbrk_r>
 8010c64:	4581      	cmp	r9, r0
 8010c66:	d142      	bne.n	8010cee <_malloc_r+0xea>
 8010c68:	6821      	ldr	r1, [r4, #0]
 8010c6a:	1a6d      	subs	r5, r5, r1
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	4630      	mov	r0, r6
 8010c70:	f7ff ffa6 	bl	8010bc0 <sbrk_aligned>
 8010c74:	3001      	adds	r0, #1
 8010c76:	d03a      	beq.n	8010cee <_malloc_r+0xea>
 8010c78:	6823      	ldr	r3, [r4, #0]
 8010c7a:	442b      	add	r3, r5
 8010c7c:	6023      	str	r3, [r4, #0]
 8010c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8010c82:	685a      	ldr	r2, [r3, #4]
 8010c84:	bb62      	cbnz	r2, 8010ce0 <_malloc_r+0xdc>
 8010c86:	f8c8 7000 	str.w	r7, [r8]
 8010c8a:	e00f      	b.n	8010cac <_malloc_r+0xa8>
 8010c8c:	6822      	ldr	r2, [r4, #0]
 8010c8e:	1b52      	subs	r2, r2, r5
 8010c90:	d420      	bmi.n	8010cd4 <_malloc_r+0xd0>
 8010c92:	2a0b      	cmp	r2, #11
 8010c94:	d917      	bls.n	8010cc6 <_malloc_r+0xc2>
 8010c96:	1961      	adds	r1, r4, r5
 8010c98:	42a3      	cmp	r3, r4
 8010c9a:	6025      	str	r5, [r4, #0]
 8010c9c:	bf18      	it	ne
 8010c9e:	6059      	strne	r1, [r3, #4]
 8010ca0:	6863      	ldr	r3, [r4, #4]
 8010ca2:	bf08      	it	eq
 8010ca4:	f8c8 1000 	streq.w	r1, [r8]
 8010ca8:	5162      	str	r2, [r4, r5]
 8010caa:	604b      	str	r3, [r1, #4]
 8010cac:	4630      	mov	r0, r6
 8010cae:	f000 f82f 	bl	8010d10 <__malloc_unlock>
 8010cb2:	f104 000b 	add.w	r0, r4, #11
 8010cb6:	1d23      	adds	r3, r4, #4
 8010cb8:	f020 0007 	bic.w	r0, r0, #7
 8010cbc:	1ac2      	subs	r2, r0, r3
 8010cbe:	bf1c      	itt	ne
 8010cc0:	1a1b      	subne	r3, r3, r0
 8010cc2:	50a3      	strne	r3, [r4, r2]
 8010cc4:	e7af      	b.n	8010c26 <_malloc_r+0x22>
 8010cc6:	6862      	ldr	r2, [r4, #4]
 8010cc8:	42a3      	cmp	r3, r4
 8010cca:	bf0c      	ite	eq
 8010ccc:	f8c8 2000 	streq.w	r2, [r8]
 8010cd0:	605a      	strne	r2, [r3, #4]
 8010cd2:	e7eb      	b.n	8010cac <_malloc_r+0xa8>
 8010cd4:	4623      	mov	r3, r4
 8010cd6:	6864      	ldr	r4, [r4, #4]
 8010cd8:	e7ae      	b.n	8010c38 <_malloc_r+0x34>
 8010cda:	463c      	mov	r4, r7
 8010cdc:	687f      	ldr	r7, [r7, #4]
 8010cde:	e7b6      	b.n	8010c4e <_malloc_r+0x4a>
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	42a3      	cmp	r3, r4
 8010ce6:	d1fb      	bne.n	8010ce0 <_malloc_r+0xdc>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	6053      	str	r3, [r2, #4]
 8010cec:	e7de      	b.n	8010cac <_malloc_r+0xa8>
 8010cee:	230c      	movs	r3, #12
 8010cf0:	6033      	str	r3, [r6, #0]
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	f000 f80c 	bl	8010d10 <__malloc_unlock>
 8010cf8:	e794      	b.n	8010c24 <_malloc_r+0x20>
 8010cfa:	6005      	str	r5, [r0, #0]
 8010cfc:	e7d6      	b.n	8010cac <_malloc_r+0xa8>
 8010cfe:	bf00      	nop
 8010d00:	2000ca60 	.word	0x2000ca60

08010d04 <__malloc_lock>:
 8010d04:	4801      	ldr	r0, [pc, #4]	@ (8010d0c <__malloc_lock+0x8>)
 8010d06:	f000 b86b 	b.w	8010de0 <__retarget_lock_acquire_recursive>
 8010d0a:	bf00      	nop
 8010d0c:	2000cba0 	.word	0x2000cba0

08010d10 <__malloc_unlock>:
 8010d10:	4801      	ldr	r0, [pc, #4]	@ (8010d18 <__malloc_unlock+0x8>)
 8010d12:	f000 b866 	b.w	8010de2 <__retarget_lock_release_recursive>
 8010d16:	bf00      	nop
 8010d18:	2000cba0 	.word	0x2000cba0

08010d1c <siprintf>:
 8010d1c:	b40e      	push	{r1, r2, r3}
 8010d1e:	b500      	push	{lr}
 8010d20:	b09c      	sub	sp, #112	@ 0x70
 8010d22:	ab1d      	add	r3, sp, #116	@ 0x74
 8010d24:	9002      	str	r0, [sp, #8]
 8010d26:	9006      	str	r0, [sp, #24]
 8010d28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010d2c:	4809      	ldr	r0, [pc, #36]	@ (8010d54 <siprintf+0x38>)
 8010d2e:	9107      	str	r1, [sp, #28]
 8010d30:	9104      	str	r1, [sp, #16]
 8010d32:	4909      	ldr	r1, [pc, #36]	@ (8010d58 <siprintf+0x3c>)
 8010d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d38:	9105      	str	r1, [sp, #20]
 8010d3a:	6800      	ldr	r0, [r0, #0]
 8010d3c:	9301      	str	r3, [sp, #4]
 8010d3e:	a902      	add	r1, sp, #8
 8010d40:	f000 f904 	bl	8010f4c <_svfiprintf_r>
 8010d44:	9b02      	ldr	r3, [sp, #8]
 8010d46:	2200      	movs	r2, #0
 8010d48:	701a      	strb	r2, [r3, #0]
 8010d4a:	b01c      	add	sp, #112	@ 0x70
 8010d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d50:	b003      	add	sp, #12
 8010d52:	4770      	bx	lr
 8010d54:	20000100 	.word	0x20000100
 8010d58:	ffff0208 	.word	0xffff0208

08010d5c <memset>:
 8010d5c:	4402      	add	r2, r0
 8010d5e:	4603      	mov	r3, r0
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d100      	bne.n	8010d66 <memset+0xa>
 8010d64:	4770      	bx	lr
 8010d66:	f803 1b01 	strb.w	r1, [r3], #1
 8010d6a:	e7f9      	b.n	8010d60 <memset+0x4>

08010d6c <_sbrk_r>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	4d06      	ldr	r5, [pc, #24]	@ (8010d88 <_sbrk_r+0x1c>)
 8010d70:	2300      	movs	r3, #0
 8010d72:	4604      	mov	r4, r0
 8010d74:	4608      	mov	r0, r1
 8010d76:	602b      	str	r3, [r5, #0]
 8010d78:	f7f4 fd38 	bl	80057ec <_sbrk>
 8010d7c:	1c43      	adds	r3, r0, #1
 8010d7e:	d102      	bne.n	8010d86 <_sbrk_r+0x1a>
 8010d80:	682b      	ldr	r3, [r5, #0]
 8010d82:	b103      	cbz	r3, 8010d86 <_sbrk_r+0x1a>
 8010d84:	6023      	str	r3, [r4, #0]
 8010d86:	bd38      	pop	{r3, r4, r5, pc}
 8010d88:	2000cb9c 	.word	0x2000cb9c

08010d8c <__errno>:
 8010d8c:	4b01      	ldr	r3, [pc, #4]	@ (8010d94 <__errno+0x8>)
 8010d8e:	6818      	ldr	r0, [r3, #0]
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	20000100 	.word	0x20000100

08010d98 <__libc_init_array>:
 8010d98:	b570      	push	{r4, r5, r6, lr}
 8010d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8010dd0 <__libc_init_array+0x38>)
 8010d9c:	4c0d      	ldr	r4, [pc, #52]	@ (8010dd4 <__libc_init_array+0x3c>)
 8010d9e:	1b64      	subs	r4, r4, r5
 8010da0:	10a4      	asrs	r4, r4, #2
 8010da2:	2600      	movs	r6, #0
 8010da4:	42a6      	cmp	r6, r4
 8010da6:	d109      	bne.n	8010dbc <__libc_init_array+0x24>
 8010da8:	4d0b      	ldr	r5, [pc, #44]	@ (8010dd8 <__libc_init_array+0x40>)
 8010daa:	4c0c      	ldr	r4, [pc, #48]	@ (8010ddc <__libc_init_array+0x44>)
 8010dac:	f000 fba8 	bl	8011500 <_init>
 8010db0:	1b64      	subs	r4, r4, r5
 8010db2:	10a4      	asrs	r4, r4, #2
 8010db4:	2600      	movs	r6, #0
 8010db6:	42a6      	cmp	r6, r4
 8010db8:	d105      	bne.n	8010dc6 <__libc_init_array+0x2e>
 8010dba:	bd70      	pop	{r4, r5, r6, pc}
 8010dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dc0:	4798      	blx	r3
 8010dc2:	3601      	adds	r6, #1
 8010dc4:	e7ee      	b.n	8010da4 <__libc_init_array+0xc>
 8010dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dca:	4798      	blx	r3
 8010dcc:	3601      	adds	r6, #1
 8010dce:	e7f2      	b.n	8010db6 <__libc_init_array+0x1e>
 8010dd0:	08011cd4 	.word	0x08011cd4
 8010dd4:	08011cd4 	.word	0x08011cd4
 8010dd8:	08011cd4 	.word	0x08011cd4
 8010ddc:	08011cd8 	.word	0x08011cd8

08010de0 <__retarget_lock_acquire_recursive>:
 8010de0:	4770      	bx	lr

08010de2 <__retarget_lock_release_recursive>:
 8010de2:	4770      	bx	lr

08010de4 <memcpy>:
 8010de4:	440a      	add	r2, r1
 8010de6:	4291      	cmp	r1, r2
 8010de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8010dec:	d100      	bne.n	8010df0 <memcpy+0xc>
 8010dee:	4770      	bx	lr
 8010df0:	b510      	push	{r4, lr}
 8010df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dfa:	4291      	cmp	r1, r2
 8010dfc:	d1f9      	bne.n	8010df2 <memcpy+0xe>
 8010dfe:	bd10      	pop	{r4, pc}

08010e00 <_free_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4605      	mov	r5, r0
 8010e04:	2900      	cmp	r1, #0
 8010e06:	d041      	beq.n	8010e8c <_free_r+0x8c>
 8010e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e0c:	1f0c      	subs	r4, r1, #4
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	bfb8      	it	lt
 8010e12:	18e4      	addlt	r4, r4, r3
 8010e14:	f7ff ff76 	bl	8010d04 <__malloc_lock>
 8010e18:	4a1d      	ldr	r2, [pc, #116]	@ (8010e90 <_free_r+0x90>)
 8010e1a:	6813      	ldr	r3, [r2, #0]
 8010e1c:	b933      	cbnz	r3, 8010e2c <_free_r+0x2c>
 8010e1e:	6063      	str	r3, [r4, #4]
 8010e20:	6014      	str	r4, [r2, #0]
 8010e22:	4628      	mov	r0, r5
 8010e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e28:	f7ff bf72 	b.w	8010d10 <__malloc_unlock>
 8010e2c:	42a3      	cmp	r3, r4
 8010e2e:	d908      	bls.n	8010e42 <_free_r+0x42>
 8010e30:	6820      	ldr	r0, [r4, #0]
 8010e32:	1821      	adds	r1, r4, r0
 8010e34:	428b      	cmp	r3, r1
 8010e36:	bf01      	itttt	eq
 8010e38:	6819      	ldreq	r1, [r3, #0]
 8010e3a:	685b      	ldreq	r3, [r3, #4]
 8010e3c:	1809      	addeq	r1, r1, r0
 8010e3e:	6021      	streq	r1, [r4, #0]
 8010e40:	e7ed      	b.n	8010e1e <_free_r+0x1e>
 8010e42:	461a      	mov	r2, r3
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	b10b      	cbz	r3, 8010e4c <_free_r+0x4c>
 8010e48:	42a3      	cmp	r3, r4
 8010e4a:	d9fa      	bls.n	8010e42 <_free_r+0x42>
 8010e4c:	6811      	ldr	r1, [r2, #0]
 8010e4e:	1850      	adds	r0, r2, r1
 8010e50:	42a0      	cmp	r0, r4
 8010e52:	d10b      	bne.n	8010e6c <_free_r+0x6c>
 8010e54:	6820      	ldr	r0, [r4, #0]
 8010e56:	4401      	add	r1, r0
 8010e58:	1850      	adds	r0, r2, r1
 8010e5a:	4283      	cmp	r3, r0
 8010e5c:	6011      	str	r1, [r2, #0]
 8010e5e:	d1e0      	bne.n	8010e22 <_free_r+0x22>
 8010e60:	6818      	ldr	r0, [r3, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	6053      	str	r3, [r2, #4]
 8010e66:	4408      	add	r0, r1
 8010e68:	6010      	str	r0, [r2, #0]
 8010e6a:	e7da      	b.n	8010e22 <_free_r+0x22>
 8010e6c:	d902      	bls.n	8010e74 <_free_r+0x74>
 8010e6e:	230c      	movs	r3, #12
 8010e70:	602b      	str	r3, [r5, #0]
 8010e72:	e7d6      	b.n	8010e22 <_free_r+0x22>
 8010e74:	6820      	ldr	r0, [r4, #0]
 8010e76:	1821      	adds	r1, r4, r0
 8010e78:	428b      	cmp	r3, r1
 8010e7a:	bf04      	itt	eq
 8010e7c:	6819      	ldreq	r1, [r3, #0]
 8010e7e:	685b      	ldreq	r3, [r3, #4]
 8010e80:	6063      	str	r3, [r4, #4]
 8010e82:	bf04      	itt	eq
 8010e84:	1809      	addeq	r1, r1, r0
 8010e86:	6021      	streq	r1, [r4, #0]
 8010e88:	6054      	str	r4, [r2, #4]
 8010e8a:	e7ca      	b.n	8010e22 <_free_r+0x22>
 8010e8c:	bd38      	pop	{r3, r4, r5, pc}
 8010e8e:	bf00      	nop
 8010e90:	2000ca60 	.word	0x2000ca60

08010e94 <__ssputs_r>:
 8010e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e98:	688e      	ldr	r6, [r1, #8]
 8010e9a:	461f      	mov	r7, r3
 8010e9c:	42be      	cmp	r6, r7
 8010e9e:	680b      	ldr	r3, [r1, #0]
 8010ea0:	4682      	mov	sl, r0
 8010ea2:	460c      	mov	r4, r1
 8010ea4:	4690      	mov	r8, r2
 8010ea6:	d82d      	bhi.n	8010f04 <__ssputs_r+0x70>
 8010ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010eac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010eb0:	d026      	beq.n	8010f00 <__ssputs_r+0x6c>
 8010eb2:	6965      	ldr	r5, [r4, #20]
 8010eb4:	6909      	ldr	r1, [r1, #16]
 8010eb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010eba:	eba3 0901 	sub.w	r9, r3, r1
 8010ebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ec2:	1c7b      	adds	r3, r7, #1
 8010ec4:	444b      	add	r3, r9
 8010ec6:	106d      	asrs	r5, r5, #1
 8010ec8:	429d      	cmp	r5, r3
 8010eca:	bf38      	it	cc
 8010ecc:	461d      	movcc	r5, r3
 8010ece:	0553      	lsls	r3, r2, #21
 8010ed0:	d527      	bpl.n	8010f22 <__ssputs_r+0x8e>
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	f7ff fe96 	bl	8010c04 <_malloc_r>
 8010ed8:	4606      	mov	r6, r0
 8010eda:	b360      	cbz	r0, 8010f36 <__ssputs_r+0xa2>
 8010edc:	6921      	ldr	r1, [r4, #16]
 8010ede:	464a      	mov	r2, r9
 8010ee0:	f7ff ff80 	bl	8010de4 <memcpy>
 8010ee4:	89a3      	ldrh	r3, [r4, #12]
 8010ee6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010eee:	81a3      	strh	r3, [r4, #12]
 8010ef0:	6126      	str	r6, [r4, #16]
 8010ef2:	6165      	str	r5, [r4, #20]
 8010ef4:	444e      	add	r6, r9
 8010ef6:	eba5 0509 	sub.w	r5, r5, r9
 8010efa:	6026      	str	r6, [r4, #0]
 8010efc:	60a5      	str	r5, [r4, #8]
 8010efe:	463e      	mov	r6, r7
 8010f00:	42be      	cmp	r6, r7
 8010f02:	d900      	bls.n	8010f06 <__ssputs_r+0x72>
 8010f04:	463e      	mov	r6, r7
 8010f06:	6820      	ldr	r0, [r4, #0]
 8010f08:	4632      	mov	r2, r6
 8010f0a:	4641      	mov	r1, r8
 8010f0c:	f000 faa8 	bl	8011460 <memmove>
 8010f10:	68a3      	ldr	r3, [r4, #8]
 8010f12:	1b9b      	subs	r3, r3, r6
 8010f14:	60a3      	str	r3, [r4, #8]
 8010f16:	6823      	ldr	r3, [r4, #0]
 8010f18:	4433      	add	r3, r6
 8010f1a:	6023      	str	r3, [r4, #0]
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f22:	462a      	mov	r2, r5
 8010f24:	f000 fab6 	bl	8011494 <_realloc_r>
 8010f28:	4606      	mov	r6, r0
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	d1e0      	bne.n	8010ef0 <__ssputs_r+0x5c>
 8010f2e:	6921      	ldr	r1, [r4, #16]
 8010f30:	4650      	mov	r0, sl
 8010f32:	f7ff ff65 	bl	8010e00 <_free_r>
 8010f36:	230c      	movs	r3, #12
 8010f38:	f8ca 3000 	str.w	r3, [sl]
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f42:	81a3      	strh	r3, [r4, #12]
 8010f44:	f04f 30ff 	mov.w	r0, #4294967295
 8010f48:	e7e9      	b.n	8010f1e <__ssputs_r+0x8a>
	...

08010f4c <_svfiprintf_r>:
 8010f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f50:	4698      	mov	r8, r3
 8010f52:	898b      	ldrh	r3, [r1, #12]
 8010f54:	061b      	lsls	r3, r3, #24
 8010f56:	b09d      	sub	sp, #116	@ 0x74
 8010f58:	4607      	mov	r7, r0
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	4614      	mov	r4, r2
 8010f5e:	d510      	bpl.n	8010f82 <_svfiprintf_r+0x36>
 8010f60:	690b      	ldr	r3, [r1, #16]
 8010f62:	b973      	cbnz	r3, 8010f82 <_svfiprintf_r+0x36>
 8010f64:	2140      	movs	r1, #64	@ 0x40
 8010f66:	f7ff fe4d 	bl	8010c04 <_malloc_r>
 8010f6a:	6028      	str	r0, [r5, #0]
 8010f6c:	6128      	str	r0, [r5, #16]
 8010f6e:	b930      	cbnz	r0, 8010f7e <_svfiprintf_r+0x32>
 8010f70:	230c      	movs	r3, #12
 8010f72:	603b      	str	r3, [r7, #0]
 8010f74:	f04f 30ff 	mov.w	r0, #4294967295
 8010f78:	b01d      	add	sp, #116	@ 0x74
 8010f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7e:	2340      	movs	r3, #64	@ 0x40
 8010f80:	616b      	str	r3, [r5, #20]
 8010f82:	2300      	movs	r3, #0
 8010f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f86:	2320      	movs	r3, #32
 8010f88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f90:	2330      	movs	r3, #48	@ 0x30
 8010f92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011130 <_svfiprintf_r+0x1e4>
 8010f96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f9a:	f04f 0901 	mov.w	r9, #1
 8010f9e:	4623      	mov	r3, r4
 8010fa0:	469a      	mov	sl, r3
 8010fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fa6:	b10a      	cbz	r2, 8010fac <_svfiprintf_r+0x60>
 8010fa8:	2a25      	cmp	r2, #37	@ 0x25
 8010faa:	d1f9      	bne.n	8010fa0 <_svfiprintf_r+0x54>
 8010fac:	ebba 0b04 	subs.w	fp, sl, r4
 8010fb0:	d00b      	beq.n	8010fca <_svfiprintf_r+0x7e>
 8010fb2:	465b      	mov	r3, fp
 8010fb4:	4622      	mov	r2, r4
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f7ff ff6b 	bl	8010e94 <__ssputs_r>
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f000 80a7 	beq.w	8011112 <_svfiprintf_r+0x1c6>
 8010fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fc6:	445a      	add	r2, fp
 8010fc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010fca:	f89a 3000 	ldrb.w	r3, [sl]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f000 809f 	beq.w	8011112 <_svfiprintf_r+0x1c6>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8010fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fde:	f10a 0a01 	add.w	sl, sl, #1
 8010fe2:	9304      	str	r3, [sp, #16]
 8010fe4:	9307      	str	r3, [sp, #28]
 8010fe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010fea:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fec:	4654      	mov	r4, sl
 8010fee:	2205      	movs	r2, #5
 8010ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ff4:	484e      	ldr	r0, [pc, #312]	@ (8011130 <_svfiprintf_r+0x1e4>)
 8010ff6:	f7ef f8fb 	bl	80001f0 <memchr>
 8010ffa:	9a04      	ldr	r2, [sp, #16]
 8010ffc:	b9d8      	cbnz	r0, 8011036 <_svfiprintf_r+0xea>
 8010ffe:	06d0      	lsls	r0, r2, #27
 8011000:	bf44      	itt	mi
 8011002:	2320      	movmi	r3, #32
 8011004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011008:	0711      	lsls	r1, r2, #28
 801100a:	bf44      	itt	mi
 801100c:	232b      	movmi	r3, #43	@ 0x2b
 801100e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011012:	f89a 3000 	ldrb.w	r3, [sl]
 8011016:	2b2a      	cmp	r3, #42	@ 0x2a
 8011018:	d015      	beq.n	8011046 <_svfiprintf_r+0xfa>
 801101a:	9a07      	ldr	r2, [sp, #28]
 801101c:	4654      	mov	r4, sl
 801101e:	2000      	movs	r0, #0
 8011020:	f04f 0c0a 	mov.w	ip, #10
 8011024:	4621      	mov	r1, r4
 8011026:	f811 3b01 	ldrb.w	r3, [r1], #1
 801102a:	3b30      	subs	r3, #48	@ 0x30
 801102c:	2b09      	cmp	r3, #9
 801102e:	d94b      	bls.n	80110c8 <_svfiprintf_r+0x17c>
 8011030:	b1b0      	cbz	r0, 8011060 <_svfiprintf_r+0x114>
 8011032:	9207      	str	r2, [sp, #28]
 8011034:	e014      	b.n	8011060 <_svfiprintf_r+0x114>
 8011036:	eba0 0308 	sub.w	r3, r0, r8
 801103a:	fa09 f303 	lsl.w	r3, r9, r3
 801103e:	4313      	orrs	r3, r2
 8011040:	9304      	str	r3, [sp, #16]
 8011042:	46a2      	mov	sl, r4
 8011044:	e7d2      	b.n	8010fec <_svfiprintf_r+0xa0>
 8011046:	9b03      	ldr	r3, [sp, #12]
 8011048:	1d19      	adds	r1, r3, #4
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	9103      	str	r1, [sp, #12]
 801104e:	2b00      	cmp	r3, #0
 8011050:	bfbb      	ittet	lt
 8011052:	425b      	neglt	r3, r3
 8011054:	f042 0202 	orrlt.w	r2, r2, #2
 8011058:	9307      	strge	r3, [sp, #28]
 801105a:	9307      	strlt	r3, [sp, #28]
 801105c:	bfb8      	it	lt
 801105e:	9204      	strlt	r2, [sp, #16]
 8011060:	7823      	ldrb	r3, [r4, #0]
 8011062:	2b2e      	cmp	r3, #46	@ 0x2e
 8011064:	d10a      	bne.n	801107c <_svfiprintf_r+0x130>
 8011066:	7863      	ldrb	r3, [r4, #1]
 8011068:	2b2a      	cmp	r3, #42	@ 0x2a
 801106a:	d132      	bne.n	80110d2 <_svfiprintf_r+0x186>
 801106c:	9b03      	ldr	r3, [sp, #12]
 801106e:	1d1a      	adds	r2, r3, #4
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	9203      	str	r2, [sp, #12]
 8011074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011078:	3402      	adds	r4, #2
 801107a:	9305      	str	r3, [sp, #20]
 801107c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011140 <_svfiprintf_r+0x1f4>
 8011080:	7821      	ldrb	r1, [r4, #0]
 8011082:	2203      	movs	r2, #3
 8011084:	4650      	mov	r0, sl
 8011086:	f7ef f8b3 	bl	80001f0 <memchr>
 801108a:	b138      	cbz	r0, 801109c <_svfiprintf_r+0x150>
 801108c:	9b04      	ldr	r3, [sp, #16]
 801108e:	eba0 000a 	sub.w	r0, r0, sl
 8011092:	2240      	movs	r2, #64	@ 0x40
 8011094:	4082      	lsls	r2, r0
 8011096:	4313      	orrs	r3, r2
 8011098:	3401      	adds	r4, #1
 801109a:	9304      	str	r3, [sp, #16]
 801109c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110a0:	4824      	ldr	r0, [pc, #144]	@ (8011134 <_svfiprintf_r+0x1e8>)
 80110a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80110a6:	2206      	movs	r2, #6
 80110a8:	f7ef f8a2 	bl	80001f0 <memchr>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d036      	beq.n	801111e <_svfiprintf_r+0x1d2>
 80110b0:	4b21      	ldr	r3, [pc, #132]	@ (8011138 <_svfiprintf_r+0x1ec>)
 80110b2:	bb1b      	cbnz	r3, 80110fc <_svfiprintf_r+0x1b0>
 80110b4:	9b03      	ldr	r3, [sp, #12]
 80110b6:	3307      	adds	r3, #7
 80110b8:	f023 0307 	bic.w	r3, r3, #7
 80110bc:	3308      	adds	r3, #8
 80110be:	9303      	str	r3, [sp, #12]
 80110c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110c2:	4433      	add	r3, r6
 80110c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80110c6:	e76a      	b.n	8010f9e <_svfiprintf_r+0x52>
 80110c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80110cc:	460c      	mov	r4, r1
 80110ce:	2001      	movs	r0, #1
 80110d0:	e7a8      	b.n	8011024 <_svfiprintf_r+0xd8>
 80110d2:	2300      	movs	r3, #0
 80110d4:	3401      	adds	r4, #1
 80110d6:	9305      	str	r3, [sp, #20]
 80110d8:	4619      	mov	r1, r3
 80110da:	f04f 0c0a 	mov.w	ip, #10
 80110de:	4620      	mov	r0, r4
 80110e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110e4:	3a30      	subs	r2, #48	@ 0x30
 80110e6:	2a09      	cmp	r2, #9
 80110e8:	d903      	bls.n	80110f2 <_svfiprintf_r+0x1a6>
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d0c6      	beq.n	801107c <_svfiprintf_r+0x130>
 80110ee:	9105      	str	r1, [sp, #20]
 80110f0:	e7c4      	b.n	801107c <_svfiprintf_r+0x130>
 80110f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80110f6:	4604      	mov	r4, r0
 80110f8:	2301      	movs	r3, #1
 80110fa:	e7f0      	b.n	80110de <_svfiprintf_r+0x192>
 80110fc:	ab03      	add	r3, sp, #12
 80110fe:	9300      	str	r3, [sp, #0]
 8011100:	462a      	mov	r2, r5
 8011102:	4b0e      	ldr	r3, [pc, #56]	@ (801113c <_svfiprintf_r+0x1f0>)
 8011104:	a904      	add	r1, sp, #16
 8011106:	4638      	mov	r0, r7
 8011108:	f3af 8000 	nop.w
 801110c:	1c42      	adds	r2, r0, #1
 801110e:	4606      	mov	r6, r0
 8011110:	d1d6      	bne.n	80110c0 <_svfiprintf_r+0x174>
 8011112:	89ab      	ldrh	r3, [r5, #12]
 8011114:	065b      	lsls	r3, r3, #25
 8011116:	f53f af2d 	bmi.w	8010f74 <_svfiprintf_r+0x28>
 801111a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801111c:	e72c      	b.n	8010f78 <_svfiprintf_r+0x2c>
 801111e:	ab03      	add	r3, sp, #12
 8011120:	9300      	str	r3, [sp, #0]
 8011122:	462a      	mov	r2, r5
 8011124:	4b05      	ldr	r3, [pc, #20]	@ (801113c <_svfiprintf_r+0x1f0>)
 8011126:	a904      	add	r1, sp, #16
 8011128:	4638      	mov	r0, r7
 801112a:	f000 f879 	bl	8011220 <_printf_i>
 801112e:	e7ed      	b.n	801110c <_svfiprintf_r+0x1c0>
 8011130:	08011c98 	.word	0x08011c98
 8011134:	08011ca2 	.word	0x08011ca2
 8011138:	00000000 	.word	0x00000000
 801113c:	08010e95 	.word	0x08010e95
 8011140:	08011c9e 	.word	0x08011c9e

08011144 <_printf_common>:
 8011144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011148:	4616      	mov	r6, r2
 801114a:	4698      	mov	r8, r3
 801114c:	688a      	ldr	r2, [r1, #8]
 801114e:	690b      	ldr	r3, [r1, #16]
 8011150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011154:	4293      	cmp	r3, r2
 8011156:	bfb8      	it	lt
 8011158:	4613      	movlt	r3, r2
 801115a:	6033      	str	r3, [r6, #0]
 801115c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011160:	4607      	mov	r7, r0
 8011162:	460c      	mov	r4, r1
 8011164:	b10a      	cbz	r2, 801116a <_printf_common+0x26>
 8011166:	3301      	adds	r3, #1
 8011168:	6033      	str	r3, [r6, #0]
 801116a:	6823      	ldr	r3, [r4, #0]
 801116c:	0699      	lsls	r1, r3, #26
 801116e:	bf42      	ittt	mi
 8011170:	6833      	ldrmi	r3, [r6, #0]
 8011172:	3302      	addmi	r3, #2
 8011174:	6033      	strmi	r3, [r6, #0]
 8011176:	6825      	ldr	r5, [r4, #0]
 8011178:	f015 0506 	ands.w	r5, r5, #6
 801117c:	d106      	bne.n	801118c <_printf_common+0x48>
 801117e:	f104 0a19 	add.w	sl, r4, #25
 8011182:	68e3      	ldr	r3, [r4, #12]
 8011184:	6832      	ldr	r2, [r6, #0]
 8011186:	1a9b      	subs	r3, r3, r2
 8011188:	42ab      	cmp	r3, r5
 801118a:	dc26      	bgt.n	80111da <_printf_common+0x96>
 801118c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011190:	6822      	ldr	r2, [r4, #0]
 8011192:	3b00      	subs	r3, #0
 8011194:	bf18      	it	ne
 8011196:	2301      	movne	r3, #1
 8011198:	0692      	lsls	r2, r2, #26
 801119a:	d42b      	bmi.n	80111f4 <_printf_common+0xb0>
 801119c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80111a0:	4641      	mov	r1, r8
 80111a2:	4638      	mov	r0, r7
 80111a4:	47c8      	blx	r9
 80111a6:	3001      	adds	r0, #1
 80111a8:	d01e      	beq.n	80111e8 <_printf_common+0xa4>
 80111aa:	6823      	ldr	r3, [r4, #0]
 80111ac:	6922      	ldr	r2, [r4, #16]
 80111ae:	f003 0306 	and.w	r3, r3, #6
 80111b2:	2b04      	cmp	r3, #4
 80111b4:	bf02      	ittt	eq
 80111b6:	68e5      	ldreq	r5, [r4, #12]
 80111b8:	6833      	ldreq	r3, [r6, #0]
 80111ba:	1aed      	subeq	r5, r5, r3
 80111bc:	68a3      	ldr	r3, [r4, #8]
 80111be:	bf0c      	ite	eq
 80111c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111c4:	2500      	movne	r5, #0
 80111c6:	4293      	cmp	r3, r2
 80111c8:	bfc4      	itt	gt
 80111ca:	1a9b      	subgt	r3, r3, r2
 80111cc:	18ed      	addgt	r5, r5, r3
 80111ce:	2600      	movs	r6, #0
 80111d0:	341a      	adds	r4, #26
 80111d2:	42b5      	cmp	r5, r6
 80111d4:	d11a      	bne.n	801120c <_printf_common+0xc8>
 80111d6:	2000      	movs	r0, #0
 80111d8:	e008      	b.n	80111ec <_printf_common+0xa8>
 80111da:	2301      	movs	r3, #1
 80111dc:	4652      	mov	r2, sl
 80111de:	4641      	mov	r1, r8
 80111e0:	4638      	mov	r0, r7
 80111e2:	47c8      	blx	r9
 80111e4:	3001      	adds	r0, #1
 80111e6:	d103      	bne.n	80111f0 <_printf_common+0xac>
 80111e8:	f04f 30ff 	mov.w	r0, #4294967295
 80111ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111f0:	3501      	adds	r5, #1
 80111f2:	e7c6      	b.n	8011182 <_printf_common+0x3e>
 80111f4:	18e1      	adds	r1, r4, r3
 80111f6:	1c5a      	adds	r2, r3, #1
 80111f8:	2030      	movs	r0, #48	@ 0x30
 80111fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80111fe:	4422      	add	r2, r4
 8011200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011208:	3302      	adds	r3, #2
 801120a:	e7c7      	b.n	801119c <_printf_common+0x58>
 801120c:	2301      	movs	r3, #1
 801120e:	4622      	mov	r2, r4
 8011210:	4641      	mov	r1, r8
 8011212:	4638      	mov	r0, r7
 8011214:	47c8      	blx	r9
 8011216:	3001      	adds	r0, #1
 8011218:	d0e6      	beq.n	80111e8 <_printf_common+0xa4>
 801121a:	3601      	adds	r6, #1
 801121c:	e7d9      	b.n	80111d2 <_printf_common+0x8e>
	...

08011220 <_printf_i>:
 8011220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011224:	7e0f      	ldrb	r7, [r1, #24]
 8011226:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011228:	2f78      	cmp	r7, #120	@ 0x78
 801122a:	4691      	mov	r9, r2
 801122c:	4680      	mov	r8, r0
 801122e:	460c      	mov	r4, r1
 8011230:	469a      	mov	sl, r3
 8011232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011236:	d807      	bhi.n	8011248 <_printf_i+0x28>
 8011238:	2f62      	cmp	r7, #98	@ 0x62
 801123a:	d80a      	bhi.n	8011252 <_printf_i+0x32>
 801123c:	2f00      	cmp	r7, #0
 801123e:	f000 80d2 	beq.w	80113e6 <_printf_i+0x1c6>
 8011242:	2f58      	cmp	r7, #88	@ 0x58
 8011244:	f000 80b9 	beq.w	80113ba <_printf_i+0x19a>
 8011248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801124c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011250:	e03a      	b.n	80112c8 <_printf_i+0xa8>
 8011252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011256:	2b15      	cmp	r3, #21
 8011258:	d8f6      	bhi.n	8011248 <_printf_i+0x28>
 801125a:	a101      	add	r1, pc, #4	@ (adr r1, 8011260 <_printf_i+0x40>)
 801125c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011260:	080112b9 	.word	0x080112b9
 8011264:	080112cd 	.word	0x080112cd
 8011268:	08011249 	.word	0x08011249
 801126c:	08011249 	.word	0x08011249
 8011270:	08011249 	.word	0x08011249
 8011274:	08011249 	.word	0x08011249
 8011278:	080112cd 	.word	0x080112cd
 801127c:	08011249 	.word	0x08011249
 8011280:	08011249 	.word	0x08011249
 8011284:	08011249 	.word	0x08011249
 8011288:	08011249 	.word	0x08011249
 801128c:	080113cd 	.word	0x080113cd
 8011290:	080112f7 	.word	0x080112f7
 8011294:	08011387 	.word	0x08011387
 8011298:	08011249 	.word	0x08011249
 801129c:	08011249 	.word	0x08011249
 80112a0:	080113ef 	.word	0x080113ef
 80112a4:	08011249 	.word	0x08011249
 80112a8:	080112f7 	.word	0x080112f7
 80112ac:	08011249 	.word	0x08011249
 80112b0:	08011249 	.word	0x08011249
 80112b4:	0801138f 	.word	0x0801138f
 80112b8:	6833      	ldr	r3, [r6, #0]
 80112ba:	1d1a      	adds	r2, r3, #4
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	6032      	str	r2, [r6, #0]
 80112c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80112c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80112c8:	2301      	movs	r3, #1
 80112ca:	e09d      	b.n	8011408 <_printf_i+0x1e8>
 80112cc:	6833      	ldr	r3, [r6, #0]
 80112ce:	6820      	ldr	r0, [r4, #0]
 80112d0:	1d19      	adds	r1, r3, #4
 80112d2:	6031      	str	r1, [r6, #0]
 80112d4:	0606      	lsls	r6, r0, #24
 80112d6:	d501      	bpl.n	80112dc <_printf_i+0xbc>
 80112d8:	681d      	ldr	r5, [r3, #0]
 80112da:	e003      	b.n	80112e4 <_printf_i+0xc4>
 80112dc:	0645      	lsls	r5, r0, #25
 80112de:	d5fb      	bpl.n	80112d8 <_printf_i+0xb8>
 80112e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80112e4:	2d00      	cmp	r5, #0
 80112e6:	da03      	bge.n	80112f0 <_printf_i+0xd0>
 80112e8:	232d      	movs	r3, #45	@ 0x2d
 80112ea:	426d      	negs	r5, r5
 80112ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112f0:	4859      	ldr	r0, [pc, #356]	@ (8011458 <_printf_i+0x238>)
 80112f2:	230a      	movs	r3, #10
 80112f4:	e011      	b.n	801131a <_printf_i+0xfa>
 80112f6:	6821      	ldr	r1, [r4, #0]
 80112f8:	6833      	ldr	r3, [r6, #0]
 80112fa:	0608      	lsls	r0, r1, #24
 80112fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8011300:	d402      	bmi.n	8011308 <_printf_i+0xe8>
 8011302:	0649      	lsls	r1, r1, #25
 8011304:	bf48      	it	mi
 8011306:	b2ad      	uxthmi	r5, r5
 8011308:	2f6f      	cmp	r7, #111	@ 0x6f
 801130a:	4853      	ldr	r0, [pc, #332]	@ (8011458 <_printf_i+0x238>)
 801130c:	6033      	str	r3, [r6, #0]
 801130e:	bf14      	ite	ne
 8011310:	230a      	movne	r3, #10
 8011312:	2308      	moveq	r3, #8
 8011314:	2100      	movs	r1, #0
 8011316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801131a:	6866      	ldr	r6, [r4, #4]
 801131c:	60a6      	str	r6, [r4, #8]
 801131e:	2e00      	cmp	r6, #0
 8011320:	bfa2      	ittt	ge
 8011322:	6821      	ldrge	r1, [r4, #0]
 8011324:	f021 0104 	bicge.w	r1, r1, #4
 8011328:	6021      	strge	r1, [r4, #0]
 801132a:	b90d      	cbnz	r5, 8011330 <_printf_i+0x110>
 801132c:	2e00      	cmp	r6, #0
 801132e:	d04b      	beq.n	80113c8 <_printf_i+0x1a8>
 8011330:	4616      	mov	r6, r2
 8011332:	fbb5 f1f3 	udiv	r1, r5, r3
 8011336:	fb03 5711 	mls	r7, r3, r1, r5
 801133a:	5dc7      	ldrb	r7, [r0, r7]
 801133c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011340:	462f      	mov	r7, r5
 8011342:	42bb      	cmp	r3, r7
 8011344:	460d      	mov	r5, r1
 8011346:	d9f4      	bls.n	8011332 <_printf_i+0x112>
 8011348:	2b08      	cmp	r3, #8
 801134a:	d10b      	bne.n	8011364 <_printf_i+0x144>
 801134c:	6823      	ldr	r3, [r4, #0]
 801134e:	07df      	lsls	r7, r3, #31
 8011350:	d508      	bpl.n	8011364 <_printf_i+0x144>
 8011352:	6923      	ldr	r3, [r4, #16]
 8011354:	6861      	ldr	r1, [r4, #4]
 8011356:	4299      	cmp	r1, r3
 8011358:	bfde      	ittt	le
 801135a:	2330      	movle	r3, #48	@ 0x30
 801135c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011360:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011364:	1b92      	subs	r2, r2, r6
 8011366:	6122      	str	r2, [r4, #16]
 8011368:	f8cd a000 	str.w	sl, [sp]
 801136c:	464b      	mov	r3, r9
 801136e:	aa03      	add	r2, sp, #12
 8011370:	4621      	mov	r1, r4
 8011372:	4640      	mov	r0, r8
 8011374:	f7ff fee6 	bl	8011144 <_printf_common>
 8011378:	3001      	adds	r0, #1
 801137a:	d14a      	bne.n	8011412 <_printf_i+0x1f2>
 801137c:	f04f 30ff 	mov.w	r0, #4294967295
 8011380:	b004      	add	sp, #16
 8011382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011386:	6823      	ldr	r3, [r4, #0]
 8011388:	f043 0320 	orr.w	r3, r3, #32
 801138c:	6023      	str	r3, [r4, #0]
 801138e:	4833      	ldr	r0, [pc, #204]	@ (801145c <_printf_i+0x23c>)
 8011390:	2778      	movs	r7, #120	@ 0x78
 8011392:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	6831      	ldr	r1, [r6, #0]
 801139a:	061f      	lsls	r7, r3, #24
 801139c:	f851 5b04 	ldr.w	r5, [r1], #4
 80113a0:	d402      	bmi.n	80113a8 <_printf_i+0x188>
 80113a2:	065f      	lsls	r7, r3, #25
 80113a4:	bf48      	it	mi
 80113a6:	b2ad      	uxthmi	r5, r5
 80113a8:	6031      	str	r1, [r6, #0]
 80113aa:	07d9      	lsls	r1, r3, #31
 80113ac:	bf44      	itt	mi
 80113ae:	f043 0320 	orrmi.w	r3, r3, #32
 80113b2:	6023      	strmi	r3, [r4, #0]
 80113b4:	b11d      	cbz	r5, 80113be <_printf_i+0x19e>
 80113b6:	2310      	movs	r3, #16
 80113b8:	e7ac      	b.n	8011314 <_printf_i+0xf4>
 80113ba:	4827      	ldr	r0, [pc, #156]	@ (8011458 <_printf_i+0x238>)
 80113bc:	e7e9      	b.n	8011392 <_printf_i+0x172>
 80113be:	6823      	ldr	r3, [r4, #0]
 80113c0:	f023 0320 	bic.w	r3, r3, #32
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	e7f6      	b.n	80113b6 <_printf_i+0x196>
 80113c8:	4616      	mov	r6, r2
 80113ca:	e7bd      	b.n	8011348 <_printf_i+0x128>
 80113cc:	6833      	ldr	r3, [r6, #0]
 80113ce:	6825      	ldr	r5, [r4, #0]
 80113d0:	6961      	ldr	r1, [r4, #20]
 80113d2:	1d18      	adds	r0, r3, #4
 80113d4:	6030      	str	r0, [r6, #0]
 80113d6:	062e      	lsls	r6, r5, #24
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	d501      	bpl.n	80113e0 <_printf_i+0x1c0>
 80113dc:	6019      	str	r1, [r3, #0]
 80113de:	e002      	b.n	80113e6 <_printf_i+0x1c6>
 80113e0:	0668      	lsls	r0, r5, #25
 80113e2:	d5fb      	bpl.n	80113dc <_printf_i+0x1bc>
 80113e4:	8019      	strh	r1, [r3, #0]
 80113e6:	2300      	movs	r3, #0
 80113e8:	6123      	str	r3, [r4, #16]
 80113ea:	4616      	mov	r6, r2
 80113ec:	e7bc      	b.n	8011368 <_printf_i+0x148>
 80113ee:	6833      	ldr	r3, [r6, #0]
 80113f0:	1d1a      	adds	r2, r3, #4
 80113f2:	6032      	str	r2, [r6, #0]
 80113f4:	681e      	ldr	r6, [r3, #0]
 80113f6:	6862      	ldr	r2, [r4, #4]
 80113f8:	2100      	movs	r1, #0
 80113fa:	4630      	mov	r0, r6
 80113fc:	f7ee fef8 	bl	80001f0 <memchr>
 8011400:	b108      	cbz	r0, 8011406 <_printf_i+0x1e6>
 8011402:	1b80      	subs	r0, r0, r6
 8011404:	6060      	str	r0, [r4, #4]
 8011406:	6863      	ldr	r3, [r4, #4]
 8011408:	6123      	str	r3, [r4, #16]
 801140a:	2300      	movs	r3, #0
 801140c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011410:	e7aa      	b.n	8011368 <_printf_i+0x148>
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	4632      	mov	r2, r6
 8011416:	4649      	mov	r1, r9
 8011418:	4640      	mov	r0, r8
 801141a:	47d0      	blx	sl
 801141c:	3001      	adds	r0, #1
 801141e:	d0ad      	beq.n	801137c <_printf_i+0x15c>
 8011420:	6823      	ldr	r3, [r4, #0]
 8011422:	079b      	lsls	r3, r3, #30
 8011424:	d413      	bmi.n	801144e <_printf_i+0x22e>
 8011426:	68e0      	ldr	r0, [r4, #12]
 8011428:	9b03      	ldr	r3, [sp, #12]
 801142a:	4298      	cmp	r0, r3
 801142c:	bfb8      	it	lt
 801142e:	4618      	movlt	r0, r3
 8011430:	e7a6      	b.n	8011380 <_printf_i+0x160>
 8011432:	2301      	movs	r3, #1
 8011434:	4632      	mov	r2, r6
 8011436:	4649      	mov	r1, r9
 8011438:	4640      	mov	r0, r8
 801143a:	47d0      	blx	sl
 801143c:	3001      	adds	r0, #1
 801143e:	d09d      	beq.n	801137c <_printf_i+0x15c>
 8011440:	3501      	adds	r5, #1
 8011442:	68e3      	ldr	r3, [r4, #12]
 8011444:	9903      	ldr	r1, [sp, #12]
 8011446:	1a5b      	subs	r3, r3, r1
 8011448:	42ab      	cmp	r3, r5
 801144a:	dcf2      	bgt.n	8011432 <_printf_i+0x212>
 801144c:	e7eb      	b.n	8011426 <_printf_i+0x206>
 801144e:	2500      	movs	r5, #0
 8011450:	f104 0619 	add.w	r6, r4, #25
 8011454:	e7f5      	b.n	8011442 <_printf_i+0x222>
 8011456:	bf00      	nop
 8011458:	08011ca9 	.word	0x08011ca9
 801145c:	08011cba 	.word	0x08011cba

08011460 <memmove>:
 8011460:	4288      	cmp	r0, r1
 8011462:	b510      	push	{r4, lr}
 8011464:	eb01 0402 	add.w	r4, r1, r2
 8011468:	d902      	bls.n	8011470 <memmove+0x10>
 801146a:	4284      	cmp	r4, r0
 801146c:	4623      	mov	r3, r4
 801146e:	d807      	bhi.n	8011480 <memmove+0x20>
 8011470:	1e43      	subs	r3, r0, #1
 8011472:	42a1      	cmp	r1, r4
 8011474:	d008      	beq.n	8011488 <memmove+0x28>
 8011476:	f811 2b01 	ldrb.w	r2, [r1], #1
 801147a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801147e:	e7f8      	b.n	8011472 <memmove+0x12>
 8011480:	4402      	add	r2, r0
 8011482:	4601      	mov	r1, r0
 8011484:	428a      	cmp	r2, r1
 8011486:	d100      	bne.n	801148a <memmove+0x2a>
 8011488:	bd10      	pop	{r4, pc}
 801148a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801148e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011492:	e7f7      	b.n	8011484 <memmove+0x24>

08011494 <_realloc_r>:
 8011494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011498:	4680      	mov	r8, r0
 801149a:	4615      	mov	r5, r2
 801149c:	460c      	mov	r4, r1
 801149e:	b921      	cbnz	r1, 80114aa <_realloc_r+0x16>
 80114a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114a4:	4611      	mov	r1, r2
 80114a6:	f7ff bbad 	b.w	8010c04 <_malloc_r>
 80114aa:	b92a      	cbnz	r2, 80114b8 <_realloc_r+0x24>
 80114ac:	f7ff fca8 	bl	8010e00 <_free_r>
 80114b0:	2400      	movs	r4, #0
 80114b2:	4620      	mov	r0, r4
 80114b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b8:	f000 f81a 	bl	80114f0 <_malloc_usable_size_r>
 80114bc:	4285      	cmp	r5, r0
 80114be:	4606      	mov	r6, r0
 80114c0:	d802      	bhi.n	80114c8 <_realloc_r+0x34>
 80114c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80114c6:	d8f4      	bhi.n	80114b2 <_realloc_r+0x1e>
 80114c8:	4629      	mov	r1, r5
 80114ca:	4640      	mov	r0, r8
 80114cc:	f7ff fb9a 	bl	8010c04 <_malloc_r>
 80114d0:	4607      	mov	r7, r0
 80114d2:	2800      	cmp	r0, #0
 80114d4:	d0ec      	beq.n	80114b0 <_realloc_r+0x1c>
 80114d6:	42b5      	cmp	r5, r6
 80114d8:	462a      	mov	r2, r5
 80114da:	4621      	mov	r1, r4
 80114dc:	bf28      	it	cs
 80114de:	4632      	movcs	r2, r6
 80114e0:	f7ff fc80 	bl	8010de4 <memcpy>
 80114e4:	4621      	mov	r1, r4
 80114e6:	4640      	mov	r0, r8
 80114e8:	f7ff fc8a 	bl	8010e00 <_free_r>
 80114ec:	463c      	mov	r4, r7
 80114ee:	e7e0      	b.n	80114b2 <_realloc_r+0x1e>

080114f0 <_malloc_usable_size_r>:
 80114f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114f4:	1f18      	subs	r0, r3, #4
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	bfbc      	itt	lt
 80114fa:	580b      	ldrlt	r3, [r1, r0]
 80114fc:	18c0      	addlt	r0, r0, r3
 80114fe:	4770      	bx	lr

08011500 <_init>:
 8011500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011502:	bf00      	nop
 8011504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011506:	bc08      	pop	{r3}
 8011508:	469e      	mov	lr, r3
 801150a:	4770      	bx	lr

0801150c <_fini>:
 801150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150e:	bf00      	nop
 8011510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011512:	bc08      	pop	{r3}
 8011514:	469e      	mov	lr, r3
 8011516:	4770      	bx	lr
