
user_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800edf0  0800edf0  0000fdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2bc  0800f2bc  00011060  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2bc  0800f2bc  000102bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2c4  0800f2c4  00011060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2c4  0800f2c4  000102c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2c8  0800f2c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800f2cc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010cd0  20000060  0800f32c  00011060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010d30  0800f32c  00011d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002284a  00000000  00000000  00011090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eb3  00000000  00000000  000338da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc8  00000000  00000000  00038790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017bc  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba0a  00000000  00000000  0003bd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c73  00000000  00000000  0005771e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0617  00000000  00000000  0007f391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f9a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  0011f9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  00127e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800edd4 	.word	0x0800edd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800edd4 	.word	0x0800edd4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000d6c:	b4b0      	push	{r4, r5, r7}
 8000d6e:	b08f      	sub	sp, #60	@ 0x3c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000d74:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d8c:	23ff      	movs	r3, #255	@ 0xff
 8000d8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d92:	2364      	movs	r3, #100	@ 0x64
 8000d94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	461d      	mov	r5, r3
 8000da0:	f107 040c 	add.w	r4, r7, #12
 8000da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000db0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	373c      	adds	r7, #60	@ 0x3c
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bcb0      	pop	{r4, r5, r7}
 8000dbc:	4770      	bx	lr

08000dbe <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6898      	ldr	r0, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	899b      	ldrh	r3, [r3, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f004 fb41 	bl	8005458 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f004 f89c 	bl	8004f14 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6898      	ldr	r0, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	899b      	ldrh	r3, [r3, #12]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4619      	mov	r1, r3
 8000de8:	f004 fb36 	bl	8005458 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000dec:	2064      	movs	r0, #100	@ 0x64
 8000dee:	f004 f891 	bl	8004f14 <HAL_Delay>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000e04:	2101      	movs	r1, #1
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 fa15 	bl	8001236 <LoRa_read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d107      	bne.n	8000e2a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	f023 0307 	bic.w	r3, r3, #7
 8000e20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
 8000e28:	e049      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == STNBY_MODE){
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10c      	bne.n	8000e4a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e34:	f023 0307 	bic.w	r3, r3, #7
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	61da      	str	r2, [r3, #28]
 8000e48:	e039      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == TRANSMIT_MODE){
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d10c      	bne.n	8000e6a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e54:	f023 0307 	bic.w	r3, r3, #7
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f043 0303 	orr.w	r3, r3, #3
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2203      	movs	r2, #3
 8000e66:	61da      	str	r2, [r3, #28]
 8000e68:	e029      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == RXCONTIN_MODE){
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d10c      	bne.n	8000e8a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e74:	f023 0307 	bic.w	r3, r3, #7
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	f043 0305 	orr.w	r3, r3, #5
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2205      	movs	r2, #5
 8000e86:	61da      	str	r2, [r3, #28]
 8000e88:	e019      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == RXSINGLE_MODE){
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b06      	cmp	r3, #6
 8000e8e:	d10c      	bne.n	8000eaa <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x06;
 8000e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e94:	f023 0307 	bic.w	r3, r3, #7
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	f043 0306 	orr.w	r3, r3, #6
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	61da      	str	r2, [r3, #28]
 8000ea8:	e009      	b.n	8000ebe <LoRa_gotoMode+0xc4>
	}else if (mode == CAD_MODE) {   // Thêm chế độ CAD
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	d106      	bne.n	8000ebe <LoRa_gotoMode+0xc4>
        data = (read & 0xF8) | 0x07;
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	f043 0307 	orr.w	r3, r3, #7
 8000eb6:	73fb      	strb	r3, [r7, #15]
        _LoRa->current_mode = CAD_MODE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2207      	movs	r2, #7
 8000ebc:	61da      	str	r2, [r3, #28]
    }

	LoRa_write(_LoRa, RegOpMode, data);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f9d0 	bl	800126a <LoRa_write>
	//HAL_Delay(10);
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	889b      	ldrh	r3, [r3, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	4619      	mov	r1, r3
 8000eee:	f004 fab3 	bl	8005458 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	f006 f988 	bl	8007212 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY){
 8000f02:	bf00      	nop
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 fd88 	bl	8007a1e <HAL_SPI_GetState>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1f7      	bne.n	8000f04 <LoRa_readReg+0x32>
	}
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6998      	ldr	r0, [r3, #24]
 8000f18:	8b3a      	ldrh	r2, [r7, #24]
 8000f1a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000f1e:	6839      	ldr	r1, [r7, #0]
 8000f20:	f006 fabb 	bl	800749a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY){
 8000f24:	bf00      	nop
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f006 fd77 	bl	8007a1e <HAL_SPI_GetState>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d1f7      	bne.n	8000f26 <LoRa_readReg+0x54>
	}
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	889b      	ldrh	r3, [r3, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	f004 fa89 	bl	8005458 <HAL_GPIO_WritePin>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	889b      	ldrh	r3, [r3, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f004 fa75 	bl	8005458 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f003 ffd0 	bl	8004f14 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	889b      	ldrh	r3, [r3, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f004 fa6a 	bl	8005458 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6998      	ldr	r0, [r3, #24]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	f006 f93f 	bl	8007212 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f94:	bf00      	nop
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 fd3f 	bl	8007a1e <HAL_SPI_GetState>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d1f7      	bne.n	8000f96 <LoRa_writeReg+0x48>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6998      	ldr	r0, [r3, #24]
 8000faa:	8b3a      	ldrh	r2, [r7, #24]
 8000fac:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	f006 f92e 	bl	8007212 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fb6:	bf00      	nop
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f006 fd2e 	bl	8007a1e <HAL_SPI_GetState>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1f7      	bne.n	8000fb8 <LoRa_writeReg+0x6a>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	889b      	ldrh	r3, [r3, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f004 fa40 	bl	8005458 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000fec:	2126      	movs	r1, #38	@ 0x26
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f921 	bl	8001236 <LoRa_read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e003      	b.n	8001010 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	f023 0308 	bic.w	r3, r3, #8
 800100e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	461a      	mov	r2, r3
 8001014:	2126      	movs	r1, #38	@ 0x26
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f927 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f003 ff79 	bl	8004f14 <HAL_Delay>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800102c:	b580      	push	{r7, lr}
 800102e:	b096      	sub	sp, #88	@ 0x58
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <LoRa_setAutoLDO+0x68>)
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4611      	mov	r1, r2
 800103c:	2250      	movs	r2, #80	@ 0x50
 800103e:	4618      	mov	r0, r3
 8001040:	f00d fb3a 	bl	800e6b8 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	4093      	lsls	r3, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa6f 	bl	8000534 <__aeabi_i2d>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	3358      	adds	r3, #88	@ 0x58
 8001060:	443b      	add	r3, r7
 8001062:	3b50      	subs	r3, #80	@ 0x50
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fbf8 	bl	800085c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fcda 	bl	8000a2c <__aeabi_d2iz>
 8001078:	4603      	mov	r3, r0
 800107a:	2b10      	cmp	r3, #16
 800107c:	bfcc      	ite	gt
 800107e:	2301      	movgt	r3, #1
 8001080:	2300      	movle	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffaa 	bl	8000fe0 <LoRa_setLowDaraRateOptimization>
}
 800108c:	bf00      	nop
 800108e:	3758      	adds	r7, #88	@ 0x58
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	0800edf0 	.word	0x0800edf0

08001098 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	04db      	lsls	r3, r3, #19
 80010a6:	115b      	asrs	r3, r3, #5
 80010a8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c1b      	lsrs	r3, r3, #16
 80010ae:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2106      	movs	r1, #6
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f8d7 	bl	800126a <LoRa_write>
	HAL_Delay(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f003 ff29 	bl	8004f14 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2107      	movs	r1, #7
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f8cb 	bl	800126a <LoRa_write>
	HAL_Delay(5);
 80010d4:	2005      	movs	r0, #5
 80010d6:	f003 ff1d 	bl	8004f14 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	461a      	mov	r2, r3
 80010e2:	2108      	movs	r1, #8
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f8c0 	bl	800126a <LoRa_write>
	HAL_Delay(5);
 80010ea:	2005      	movs	r0, #5
 80010ec:	f003 ff12 	bl	8004f14 <HAL_Delay>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b0c      	cmp	r3, #12
 8001106:	dd01      	ble.n	800110c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001108:	230c      	movs	r3, #12
 800110a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b06      	cmp	r3, #6
 8001110:	dc01      	bgt.n	8001116 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001112:	2307      	movs	r3, #7
 8001114:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001116:	211e      	movs	r1, #30
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f88c 	bl	8001236 <LoRa_read>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f003 fef6 	bl	8004f14 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	461a      	mov	r2, r3
 8001140:	211e      	movs	r1, #30
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f891 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f003 fee3 	bl	8004f14 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff6c 	bl	800102c <LoRa_setAutoLDO>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	461a      	mov	r2, r3
 800116c:	2109      	movs	r1, #9
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f87b 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f003 fecd 	bl	8004f14 <HAL_Delay>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b2c      	cmp	r3, #44	@ 0x2c
 8001198:	d801      	bhi.n	800119e <LoRa_setOCP+0x1a>
		current = 45;
 800119a:	232d      	movs	r3, #45	@ 0x2d
 800119c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80011a2:	d901      	bls.n	80011a8 <LoRa_setOCP+0x24>
		current = 240;
 80011a4:	23f0      	movs	r3, #240	@ 0xf0
 80011a6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b78      	cmp	r3, #120	@ 0x78
 80011ac:	d809      	bhi.n	80011c2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	3b2d      	subs	r3, #45	@ 0x2d
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <LoRa_setOCP+0x78>)
 80011b4:	fb82 1203 	smull	r1, r2, r2, r3
 80011b8:	1052      	asrs	r2, r2, #1
 80011ba:	17db      	asrs	r3, r3, #31
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e00b      	b.n	80011da <LoRa_setOCP+0x56>
	else if(current <= 240)
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80011c6:	d808      	bhi.n	80011da <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	331e      	adds	r3, #30
 80011cc:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <LoRa_setOCP+0x78>)
 80011ce:	fb82 1203 	smull	r1, r2, r2, r3
 80011d2:	1092      	asrs	r2, r2, #2
 80011d4:	17db      	asrs	r3, r3, #31
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3320      	adds	r3, #32
 80011de:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	461a      	mov	r2, r3
 80011e4:	210b      	movs	r1, #11
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f83f 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f003 fe91 	bl	8004f14 <HAL_Delay>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	66666667 	.word	0x66666667

08001200 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001208:	211e      	movs	r1, #30
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f813 	bl	8001236 <LoRa_read>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f043 0307 	orr.w	r3, r3, #7
 800121a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	461a      	mov	r2, r3
 8001220:	211e      	movs	r1, #30
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f821 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f003 fe73 	bl	8004f14 <HAL_Delay>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af02      	add	r7, sp, #8
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800124c:	f107 030f 	add.w	r3, r7, #15
 8001250:	f107 010e 	add.w	r1, r7, #14
 8001254:	2201      	movs	r2, #1
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe39 	bl	8000ed2 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af02      	add	r7, sp, #8
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
 8001276:	4613      	mov	r3, r2
 8001278:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001280:	b2db      	uxtb	r3, r3
 8001282:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001288:	f107 030f 	add.w	r3, r7, #15
 800128c:	f107 010e 	add.w	r1, r7, #14
 8001290:	2201      	movs	r2, #1
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe59 	bl	8000f4e <LoRa_writeReg>
	//HAL_Delay(5);
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	461a      	mov	r2, r3
 80012b0:	460b      	mov	r3, r1
 80012b2:	72fb      	strb	r3, [r7, #11]
 80012b4:	4613      	mov	r3, r2
 80012b6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	889b      	ldrh	r3, [r3, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	f004 f8c3 	bl	8005458 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6998      	ldr	r0, [r3, #24]
 80012d6:	f107 0117 	add.w	r1, r7, #23
 80012da:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80012de:	2201      	movs	r2, #1
 80012e0:	f005 ff97 	bl	8007212 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012e4:	bf00      	nop
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f006 fb97 	bl	8007a1e <HAL_SPI_GetState>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d1f7      	bne.n	80012e6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6998      	ldr	r0, [r3, #24]
 80012fa:	7abb      	ldrb	r3, [r7, #10]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f005 ff85 	bl	8007212 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001308:	bf00      	nop
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fb85 	bl	8007a1e <HAL_SPI_GetState>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d1f7      	bne.n	800130a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	889b      	ldrh	r3, [r3, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	f004 f897 	bl	8005458 <HAL_GPIO_WritePin>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]

	return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	460b      	mov	r3, r1
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4613      	mov	r3, r2
 800135c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001364:	2101      	movs	r1, #1
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff fd47 	bl	8000dfa <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800136c:	210e      	movs	r1, #14
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff ff61 	bl	8001236 <LoRa_read>
 8001374:	4603      	mov	r3, r0
 8001376:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	461a      	mov	r2, r3
 800137c:	210d      	movs	r1, #13
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff ff73 	bl	800126a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	461a      	mov	r2, r3
 8001388:	2122      	movs	r1, #34	@ 0x22
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff ff6d 	bl	800126a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff ff84 	bl	80012a4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800139c:	2103      	movs	r1, #3
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fd2b 	bl	8000dfa <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013a4:	2112      	movs	r1, #18
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff ff45 	bl	8001236 <LoRa_read>
 80013ac:	4603      	mov	r3, r0
 80013ae:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80013b0:	7cfb      	ldrb	r3, [r7, #19]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00a      	beq.n	80013d0 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013ba:	22ff      	movs	r2, #255	@ 0xff
 80013bc:	2112      	movs	r1, #18
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff ff53 	bl	800126a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80013c4:	6979      	ldr	r1, [r7, #20]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff fd17 	bl	8000dfa <LoRa_gotoMode>
			return 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e00f      	b.n	80013f0 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	80bb      	strh	r3, [r7, #4]
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80013dc:	6979      	ldr	r1, [r7, #20]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff fd0b 	bl	8000dfa <LoRa_gotoMode>
				return 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e003      	b.n	80013f0 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f003 fd93 	bl	8004f14 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013ee:	e7d9      	b.n	80013a4 <LoRa_transmit+0x5c>
	}
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001400:	2105      	movs	r1, #5
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fcf9 	bl	8000dfa <LoRa_gotoMode>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <LoRa_startCAD>:

// Channel Activity Detection
void LoRa_startCAD(LoRa* _LoRa){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, CAD_MODE);
 8001418:	2107      	movs	r1, #7
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fced 	bl	8000dfa <LoRa_gotoMode>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b089      	sub	sp, #36	@ 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	e007      	b.n	8001450 <LoRa_receive+0x28>
		data[i]=0;
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	4413      	add	r3, r2
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	3301      	adds	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbf3      	blt.n	8001440 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001458:	2101      	movs	r1, #1
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff fccd 	bl	8000dfa <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001460:	2112      	movs	r1, #18
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fee7 	bl	8001236 <LoRa_read>
 8001468:	4603      	mov	r3, r0
 800146a:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800146c:	7cfb      	ldrb	r3, [r7, #19]
 800146e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d02f      	beq.n	80014d6 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001476:	22ff      	movs	r2, #255	@ 0xff
 8001478:	2112      	movs	r1, #18
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff fef5 	bl	800126a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001480:	2113      	movs	r1, #19
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff fed7 	bl	8001236 <LoRa_read>
 8001488:	4603      	mov	r3, r0
 800148a:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800148c:	2110      	movs	r1, #16
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f7ff fed1 	bl	8001236 <LoRa_read>
 8001494:	4603      	mov	r3, r0
 8001496:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001498:	7cfb      	ldrb	r3, [r7, #19]
 800149a:	461a      	mov	r2, r3
 800149c:	210d      	movs	r1, #13
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff fee3 	bl	800126a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80014a4:	7cba      	ldrb	r2, [r7, #18]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4293      	cmp	r3, r2
 80014aa:	bf28      	it	cs
 80014ac:	4613      	movcs	r3, r2
 80014ae:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e00b      	b.n	80014ce <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	18d4      	adds	r4, r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff feb9 	bl	8001236 <LoRa_read>
 80014c4:	4603      	mov	r3, r0
 80014c6:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbef      	blt.n	80014b6 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80014d6:	2105      	movs	r1, #5
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff fc8e 	bl	8000dfa <LoRa_gotoMode>
    return min;
 80014de:	7ffb      	ldrb	r3, [r7, #31]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3724      	adds	r7, #36	@ 0x24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd90      	pop	{r4, r7, pc}

080014e8 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff1e 	bl	8001332 <LoRa_isvalid>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8096 	beq.w	800162a <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fc7a 	bl	8000dfa <LoRa_gotoMode>
			HAL_Delay(10);
 8001506:	200a      	movs	r0, #10
 8001508:	f003 fd04 	bl	8004f14 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800150c:	2101      	movs	r1, #1
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe91 	bl	8001236 <LoRa_read>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001518:	200a      	movs	r0, #10
 800151a:	f003 fcfb 	bl	8004f14 <HAL_Delay>
			data = read | 0x80;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001524:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001526:	7bbb      	ldrb	r3, [r7, #14]
 8001528:	461a      	mov	r2, r3
 800152a:	2101      	movs	r1, #1
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fe9c 	bl	800126a <LoRa_write>
			HAL_Delay(100);
 8001532:	2064      	movs	r0, #100	@ 0x64
 8001534:	f003 fcee 	bl	8004f14 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fdaa 	bl	8001098 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800154a:	4619      	mov	r1, r3
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fe05 	bl	800115c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fe12 	bl	8001184 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001560:	2223      	movs	r2, #35	@ 0x23
 8001562:	210c      	movs	r1, #12
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fe80 	bl	800126a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fe48 	bl	8001200 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fdbd 	bl	80010f8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800157e:	22ff      	movs	r2, #255	@ 0xff
 8001580:	211f      	movs	r1, #31
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fe71 	bl	800126a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	b2da      	uxtb	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	461a      	mov	r2, r3
 80015a8:	211d      	movs	r1, #29
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fe5d 	bl	800126a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fd3b 	bl	800102c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	2120      	movs	r1, #32
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fe50 	bl	800126a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	2121      	movs	r1, #33	@ 0x21
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe48 	bl	800126a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80015da:	2140      	movs	r1, #64	@ 0x40
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fe2a 	bl	8001236 <LoRa_read>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80015ec:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	461a      	mov	r2, r3
 80015f2:	2140      	movs	r1, #64	@ 0x40
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fe38 	bl	800126a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015fa:	2101      	movs	r1, #1
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fbfc 	bl	8000dfa <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001608:	200a      	movs	r0, #10
 800160a:	f003 fc83 	bl	8004f14 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800160e:	2142      	movs	r1, #66	@ 0x42
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fe10 	bl	8001236 <LoRa_read>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b12      	cmp	r3, #18
 800161e:	d101      	bne.n	8001624 <LoRa_init+0x13c>
				return LORA_OK;
 8001620:	23c8      	movs	r3, #200	@ 0xc8
 8001622:	e004      	b.n	800162e <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001624:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001628:	e001      	b.n	800162e <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800162a:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4907      	ldr	r1, [pc, #28]	@ (8001670 <__NVIC_EnableIRQ+0x38>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db12      	blt.n	80016ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	490a      	ldr	r1, [pc, #40]	@ (80016b8 <__NVIC_DisableIRQ+0x44>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	3320      	adds	r3, #32
 800169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016a0:	f3bf 8f4f 	dsb	sy
}
 80016a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016a6:	f3bf 8f6f 	isb	sy
}
 80016aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100

080016bc <bsp_lora_enter_safe_mode>:

lora_packet_t lora_send_packet_buffer = {0};
lora_packet_t lora_receive_packet_buffer = {0};


void bsp_lora_enter_safe_mode(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(OTG_FS_IRQn);
 80016c0:	2043      	movs	r0, #67	@ 0x43
 80016c2:	f7ff ffd7 	bl	8001674 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI0_IRQn);
 80016c6:	2006      	movs	r0, #6
 80016c8:	f7ff ffd4 	bl	8001674 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI1_IRQn);
 80016cc:	2007      	movs	r0, #7
 80016ce:	f7ff ffd1 	bl	8001674 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI2_IRQn);
 80016d2:	2008      	movs	r0, #8
 80016d4:	f7ff ffce 	bl	8001674 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI3_IRQn);
 80016d8:	2009      	movs	r0, #9
 80016da:	f7ff ffcb 	bl	8001674 <__NVIC_DisableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <bsp_lora_exit_safe_mode>:

void bsp_lora_exit_safe_mode(){
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(OTG_FS_IRQn);
 80016e6:	2043      	movs	r0, #67	@ 0x43
 80016e8:	f7ff ffa6 	bl	8001638 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80016ec:	2006      	movs	r0, #6
 80016ee:	f7ff ffa3 	bl	8001638 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f7ff ffa0 	bl	8001638 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 80016f8:	2008      	movs	r0, #8
 80016fa:	f7ff ff9d 	bl	8001638 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 80016fe:	2009      	movs	r0, #9
 8001700:	f7ff ff9a 	bl	8001638 <__NVIC_EnableIRQ>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <STM_LOG>:


void STM_LOG(char *str, int c, uint8_t size){
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	71fb      	strb	r3, [r7, #7]
	char *buf = (char *)malloc(size * sizeof(char));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f00c feab 	bl	800e474 <malloc>
 800171e:	4603      	mov	r3, r0
 8001720:	617b      	str	r3, [r7, #20]
	sprintf(buf, str, c);
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	68f9      	ldr	r1, [r7, #12]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f00c ff62 	bl	800e5f0 <siprintf>
	HAL_UART_Transmit(&huart2, buf, size, 1000);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	b29a      	uxth	r2, r3
 8001730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001734:	6979      	ldr	r1, [r7, #20]
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <STM_LOG+0x44>)
 8001738:	f006 ff7a 	bl	8008630 <HAL_UART_Transmit>
	free(buf);
 800173c:	6978      	ldr	r0, [r7, #20]
 800173e:	f00c fea1 	bl	800e484 <free>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20001978 	.word	0x20001978

08001750 <bsp_lora_spi_is_free>:

int bsp_lora_spi_is_free(){
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	if( (hspi1.Instance->SR & (SPI_SR_BSY | SPI_SR_TXE | SPI_SR_RXNE)) == SPI_SR_TXE )
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <bsp_lora_spi_is_free+0x24>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0383 	and.w	r3, r3, #131	@ 0x83
 800175e:	2b02      	cmp	r3, #2
 8001760:	d101      	bne.n	8001766 <bsp_lora_spi_is_free+0x16>
		return 1;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <bsp_lora_spi_is_free+0x18>
	return 0;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20001890 	.word	0x20001890

08001778 <bsp_lora_set_receive_mode>:


void bsp_lora_set_receive_mode(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	bsp_lora_enter_safe_mode();
 800177c:	f7ff ff9e 	bl	80016bc <bsp_lora_enter_safe_mode>
	LoRa_startReceiving(&myLoRa);
 8001780:	4803      	ldr	r0, [pc, #12]	@ (8001790 <bsp_lora_set_receive_mode+0x18>)
 8001782:	f7ff fe39 	bl	80013f8 <LoRa_startReceiving>
	bsp_lora_exit_safe_mode();
 8001786:	f7ff ffac 	bl	80016e2 <bsp_lora_exit_safe_mode>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000007c 	.word	0x2000007c

08001794 <bsp_lora_set_cad_mode>:

void bsp_lora_set_cad_mode(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	bsp_lora_enter_safe_mode();
 8001798:	f7ff ff90 	bl	80016bc <bsp_lora_enter_safe_mode>
	LoRa_startCAD(&myLoRa);
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <bsp_lora_set_cad_mode+0x18>)
 800179e:	f7ff fe37 	bl	8001410 <LoRa_startCAD>
	bsp_lora_exit_safe_mode();
 80017a2:	f7ff ff9e 	bl	80016e2 <bsp_lora_exit_safe_mode>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000007c 	.word	0x2000007c

080017b0 <bsp_lora_check_cad>:
/**
 * check if the bus is free or busy
 * @return: 1-bus is busy
 * 			0-bus is free
 * **/
uint8_t bsp_lora_check_cad() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	bsp_lora_set_cad_mode();
 80017b6:	f7ff ffed 	bl	8001794 <bsp_lora_set_cad_mode>
	uint32_t startTime = HAL_GetTick();
 80017ba:	f003 fb9f 	bl	8004efc <HAL_GetTick>
 80017be:	6078      	str	r0, [r7, #4]
    while (!(LoRa_read(&myLoRa, RegIrqFlags) & 0x04)){
 80017c0:	e009      	b.n	80017d6 <bsp_lora_check_cad+0x26>
    	if (HAL_GetTick() - startTime > 1000) { // Timeout sau 500ms
 80017c2:	f003 fb9b 	bl	8004efc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017d0:	d901      	bls.n	80017d6 <bsp_lora_check_cad+0x26>
    		return 0; // Không phát hiện tín hiệu LoRa
 80017d2:	2300      	movs	r3, #0
 80017d4:	e016      	b.n	8001804 <bsp_lora_check_cad+0x54>
    while (!(LoRa_read(&myLoRa, RegIrqFlags) & 0x04)){
 80017d6:	2112      	movs	r1, #18
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <bsp_lora_check_cad+0x5c>)
 80017da:	f7ff fd2c 	bl	8001236 <LoRa_read>
 80017de:	4603      	mov	r3, r0
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ec      	beq.n	80017c2 <bsp_lora_check_cad+0x12>
    	}
    } // Chờ CAD hoàn thành
    uint8_t cadDetected = LoRa_read(&myLoRa, RegIrqFlags) & 0x01;
 80017e8:	2112      	movs	r1, #18
 80017ea:	4808      	ldr	r0, [pc, #32]	@ (800180c <bsp_lora_check_cad+0x5c>)
 80017ec:	f7ff fd23 	bl	8001236 <LoRa_read>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	70fb      	strb	r3, [r7, #3]
    LoRa_write(&myLoRa, RegIrqFlags, 0xFF); // Xóa cờ ngắt
 80017f8:	22ff      	movs	r2, #255	@ 0xff
 80017fa:	2112      	movs	r1, #18
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <bsp_lora_check_cad+0x5c>)
 80017fe:	f7ff fd34 	bl	800126a <LoRa_write>
    return cadDetected;
 8001802:	78fb      	ldrb	r3, [r7, #3]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000007c 	.word	0x2000007c

08001810 <bsp_lora_init>:

void bsp_lora_init(){
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b08c      	sub	sp, #48	@ 0x30
 8001814:	af00      	add	r7, sp, #0
	// Initiate lora gateway object
	myLoRa = newLoRa();
 8001816:	4c2f      	ldr	r4, [pc, #188]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001818:	463b      	mov	r3, r7
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff faa6 	bl	8000d6c <newLoRa>
 8001820:	4625      	mov	r5, r4
 8001822:	463c      	mov	r4, r7
 8001824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001830:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port         = SPI1_NSS_GPIO_Port;
 8001834:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001836:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <bsp_lora_init+0xc8>)
 8001838:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = SPI1_NSS_Pin;
 800183a:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <bsp_lora_init+0xc4>)
 800183c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001840:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001844:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <bsp_lora_init+0xc8>)
 8001846:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = LORA_RST_Pin;
 8001848:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <bsp_lora_init+0xc4>)
 800184a:	2210      	movs	r2, #16
 800184c:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001850:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <bsp_lora_init+0xcc>)
 8001852:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001856:	2201      	movs	r2, #1
 8001858:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx           = &hspi1;
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <bsp_lora_init+0xc4>)
 800185c:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <bsp_lora_init+0xd0>)
 800185e:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = 433;
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001862:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001866:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <bsp_lora_init+0xc4>)
 800186a:	2207      	movs	r2, #7
 800186c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	myLoRa.bandWidth             = BW_250KHz;
 8001870:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001872:	2208      	movs	r2, #8
 8001874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate               = CR_4_5;
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <bsp_lora_init+0xc4>)
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.power                 = POWER_17db;
 8001880:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001882:	22fc      	movs	r2, #252	@ 0xfc
 8001884:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	myLoRa.overCurrentProtection = 150;
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <bsp_lora_init+0xc4>)
 800188a:	2296      	movs	r2, #150	@ 0x96
 800188c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	myLoRa.preamble              = 10;
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001892:	220a      	movs	r2, #10
 8001894:	851a      	strh	r2, [r3, #40]	@ 0x28



	LoRa_reset(&myLoRa);
 8001896:	480f      	ldr	r0, [pc, #60]	@ (80018d4 <bsp_lora_init+0xc4>)
 8001898:	f7ff fa91 	bl	8000dbe <LoRa_reset>
	if(LoRa_init(&myLoRa)==LORA_OK){
 800189c:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <bsp_lora_init+0xc4>)
 800189e:	f7ff fe23 	bl	80014e8 <LoRa_init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80018a6:	d107      	bne.n	80018b8 <bsp_lora_init+0xa8>
		HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa Init Success\n", 18, 2000);
 80018a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018ac:	2212      	movs	r2, #18
 80018ae:	490d      	ldr	r1, [pc, #52]	@ (80018e4 <bsp_lora_init+0xd4>)
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <bsp_lora_init+0xd8>)
 80018b2:	f006 febd 	bl	8008630 <HAL_UART_Transmit>
 80018b6:	e006      	b.n	80018c6 <bsp_lora_init+0xb6>
	}

	else{
		HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa Init Failed\n", 18, 2000);
 80018b8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018bc:	2212      	movs	r2, #18
 80018be:	490b      	ldr	r1, [pc, #44]	@ (80018ec <bsp_lora_init+0xdc>)
 80018c0:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <bsp_lora_init+0xd8>)
 80018c2:	f006 feb5 	bl	8008630 <HAL_UART_Transmit>
	}

	LoRa_startReceiving(&myLoRa);
 80018c6:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <bsp_lora_init+0xc4>)
 80018c8:	f7ff fd96 	bl	80013f8 <LoRa_startReceiving>
	lora_node2.id = DEVICE2_ID;
	memset(&lora_node1.last_lora_send_packet, 0, sizeof(lora_packet_t));
	memset(&lora_node2.last_lora_send_packet, 0, sizeof(lora_packet_t));
	memset(&lora_node1.last_lora_receive_packet, 0, sizeof(lora_packet_t));
	memset(&lora_node2.last_lora_receive_packet, 0, sizeof(lora_packet_t));*/
}
 80018cc:	bf00      	nop
 80018ce:	3730      	adds	r7, #48	@ 0x30
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdb0      	pop	{r4, r5, r7, pc}
 80018d4:	2000007c 	.word	0x2000007c
 80018d8:	40020000 	.word	0x40020000
 80018dc:	40020400 	.word	0x40020400
 80018e0:	20001890 	.word	0x20001890
 80018e4:	0800ee40 	.word	0x0800ee40
 80018e8:	20001978 	.word	0x20001978
 80018ec:	0800ee54 	.word	0x0800ee54

080018f0 <checksum_calculate>:

uint32_t checksum_calculate(uint8_t *data, uint8_t len){
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
	if(data != NULL){
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d015      	beq.n	800192e <checksum_calculate+0x3e>
		uint32_t checksum = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < len; i++){
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	e00a      	b.n	8001922 <checksum_calculate+0x32>
			checksum += *(data + i);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4413      	add	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < len; i++){
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3301      	adds	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbf0      	blt.n	800190c <checksum_calculate+0x1c>
		}
		return checksum;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	e000      	b.n	8001930 <checksum_calculate+0x40>
	}
	return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <bsp_lora_send_packet>:
 * @param des_id: destination id
 * @param cmd: command send to destination
 * @param data: pointer to the sending data
 * @param len: data's length
 */
void bsp_lora_send_packet(uint8_t source_id, uint8_t des_id, uint8_t packet_id, uint8_t cmd, uint32_t mem_addr, uint8_t *data, uint8_t len, uint8_t ttl){
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	4603      	mov	r3, r0
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	460b      	mov	r3, r1
 8001954:	717b      	strb	r3, [r7, #5]
 8001956:	4613      	mov	r3, r2
 8001958:	713b      	strb	r3, [r7, #4]
	bsp_lora_enter_safe_mode();
 800195a:	f7ff feaf 	bl	80016bc <bsp_lora_enter_safe_mode>

	lora_send_packet_buffer.packet_id = packet_id;
 800195e:	4a20      	ldr	r2, [pc, #128]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 8001960:	797b      	ldrb	r3, [r7, #5]
 8001962:	7013      	strb	r3, [r2, #0]
	lora_send_packet_buffer.source_id = source_id;
 8001964:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	7053      	strb	r3, [r2, #1]
	lora_send_packet_buffer.destination_id = des_id;
 800196a:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	7093      	strb	r3, [r2, #2]
	lora_send_packet_buffer.ttl = ttl;
 8001970:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 8001972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001976:	70d3      	strb	r3, [r2, #3]
	lora_send_packet_buffer.responsed = 0;
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 800197a:	2200      	movs	r2, #0
 800197c:	711a      	strb	r2, [r3, #4]
	lora_send_packet_buffer.cmd = cmd;
 800197e:	4a18      	ldr	r2, [pc, #96]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 8001980:	793b      	ldrb	r3, [r7, #4]
 8001982:	7153      	strb	r3, [r2, #5]
	lora_send_packet_buffer.payload_length = len;
 8001984:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 8001986:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800198a:	7393      	strb	r3, [r2, #14]
	lora_send_packet_buffer.mem_addr = mem_addr;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f8c2 3006 	str.w	r3, [r2, #6]
	lora_send_packet_buffer.checksum = checksum_calculate(data, len);
 8001994:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001998:	4619      	mov	r1, r3
 800199a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800199c:	f7ff ffa8 	bl	80018f0 <checksum_calculate>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 80019a4:	f8c2 300a 	str.w	r3, [r2, #10]

	memcpy(lora_send_packet_buffer.payload, data, len);
 80019a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ac:	461a      	mov	r2, r3
 80019ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <bsp_lora_send_packet+0xa8>)
 80019b2:	f00c fe81 	bl	800e6b8 <memcpy>

	uint8_t *buffer = (uint8_t *) (&lora_send_packet_buffer);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <bsp_lora_send_packet+0xa4>)
 80019b8:	60fb      	str	r3, [r7, #12]

	LoRa_transmit(&myLoRa, buffer, sizeof(lora_packet_t), 4000);
 80019ba:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80019be:	222f      	movs	r2, #47	@ 0x2f
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <bsp_lora_send_packet+0xac>)
 80019c4:	f7ff fcc0 	bl	8001348 <LoRa_transmit>

	STM_LOG("pid: %3d\n", packet_id, 9);
 80019c8:	797b      	ldrb	r3, [r7, #5]
 80019ca:	2209      	movs	r2, #9
 80019cc:	4619      	mov	r1, r3
 80019ce:	4807      	ldr	r0, [pc, #28]	@ (80019ec <bsp_lora_send_packet+0xb0>)
 80019d0:	f7ff fe9a 	bl	8001708 <STM_LOG>

	bsp_lora_exit_safe_mode();
 80019d4:	f7ff fe85 	bl	80016e2 <bsp_lora_exit_safe_mode>
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}
 80019e0:	200000a8 	.word	0x200000a8
 80019e4:	200000b7 	.word	0x200000b7
 80019e8:	2000007c 	.word	0x2000007c
 80019ec:	0800ee68 	.word	0x0800ee68

080019f0 <bsp_lora_get_node_send_packet_index>:

int bsp_lora_get_node_send_packet_index(lora_node_t *lora_node){
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e010      	b.n	8001a20 <bsp_lora_get_node_send_packet_index+0x30>
		if(lora_node->last_lora_send_packet[i].packet_id == 0)
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3305      	adds	r3, #5
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <bsp_lora_get_node_send_packet_index+0x2a>
			return i;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	e007      	b.n	8001a2a <bsp_lora_get_node_send_packet_index+0x3a>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d9eb      	bls.n	80019fe <bsp_lora_get_node_send_packet_index+0xe>
	}
	return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <bsp_lora_check_cmd_in_node_send_packets>:

int bsp_lora_check_cmd_in_node_send_packets(lora_node_t *lora_node, uint8_t lora_cmd){
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e01d      	b.n	8001a84 <bsp_lora_check_cmd_in_node_send_packets+0x4e>
		if(lora_node->last_lora_send_packet[i].packet_id != 0 && lora_node->last_lora_send_packet[i].cmd == lora_cmd)
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00e      	beq.n	8001a7e <bsp_lora_check_cmd_in_node_send_packets+0x48>
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	330a      	adds	r3, #10
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d101      	bne.n	8001a7e <bsp_lora_check_cmd_in_node_send_packets+0x48>
			return i;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	e007      	b.n	8001a8e <bsp_lora_check_cmd_in_node_send_packets+0x58>
	for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++){
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d9de      	bls.n	8001a48 <bsp_lora_check_cmd_in_node_send_packets+0x12>
	}
	return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <bsp_lora_remove_packet_from_node_send_packets>:

void bsp_lora_remove_packet_from_node_send_packets(lora_node_t *lora_node, uint8_t index){
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = index; i < MAX_NODE_PACKET_ITEMS - 1; i++){
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e019      	b.n	8001ae0 <bsp_lora_remove_packet_from_node_send_packets+0x46>
		memcpy(&lora_node->last_lora_send_packet[i], &lora_node->last_lora_send_packet[i + 1], sizeof(lora_packet_t));
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	1d58      	adds	r0, r3, #5
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	3305      	adds	r3, #5
 8001ad2:	222f      	movs	r2, #47	@ 0x2f
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f00c fdef 	bl	800e6b8 <memcpy>
	for(uint8_t i = index; i < MAX_NODE_PACKET_ITEMS - 1; i++){
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3301      	adds	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d9e2      	bls.n	8001aac <bsp_lora_remove_packet_from_node_send_packets+0x12>
	}
	memset(&lora_node->last_lora_send_packet[MAX_NODE_PACKET_ITEMS - 1], 0, sizeof(lora_packet_t));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3363      	adds	r3, #99	@ 0x63
 8001aea:	222f      	movs	r2, #47	@ 0x2f
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00c fd9e 	bl	800e630 <memset>
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <bsp_lora_send_packet_to_node>:

/**
 * Send packet to a specific node
 * **/
void bsp_lora_send_packet_to_node(lora_node_t *des_node, uint8_t cmd, uint32_t mem_addr, uint8_t *data, uint8_t len, uint8_t ttl){
 8001afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afe:	b08b      	sub	sp, #44	@ 0x2c
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	72fb      	strb	r3, [r7, #11]
	if(bsp_lora_check_cmd_in_node_send_packets(des_node, cmd) == -1){
 8001b0c:	7afb      	ldrb	r3, [r7, #11]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff ff90 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	f040 80e4 	bne.w	8001ce8 <bsp_lora_send_packet_to_node+0x1ec>
		if(cmd == LORA_CMD_CONNECT){
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d13c      	bne.n	8001ba0 <bsp_lora_send_packet_to_node+0xa4>
			if(des_node->connected == 0){
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	789b      	ldrb	r3, [r3, #2]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d130      	bne.n	8001b90 <bsp_lora_send_packet_to_node+0x94>
				HAL_UART_Transmit(&huart2, "connecting\n", 12, 2000);
 8001b2e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b32:	220c      	movs	r2, #12
 8001b34:	496e      	ldr	r1, [pc, #440]	@ (8001cf0 <bsp_lora_send_packet_to_node+0x1f4>)
 8001b36:	486f      	ldr	r0, [pc, #444]	@ (8001cf4 <bsp_lora_send_packet_to_node+0x1f8>)
 8001b38:	f006 fd7a 	bl	8008630 <HAL_UART_Transmit>
				bsp_lora_send_packet(GATEWAY_ID, des_node->id, ((lora_send_packet_buffer.packet_id + 1) % (MAX_PACKET_ID + 1)) + 1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	7818      	ldrb	r0, [r3, #0]
 8001b40:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf8 <bsp_lora_send_packet_to_node+0x1fc>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	4b6d      	ldr	r3, [pc, #436]	@ (8001cfc <bsp_lora_send_packet_to_node+0x200>)
 8001b48:	fb83 1302 	smull	r1, r3, r3, r2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	11d9      	asrs	r1, r3, #7
 8001b50:	17d3      	asrs	r3, r2, #31
 8001b52:	1ac9      	subs	r1, r1, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	019b      	lsls	r3, r3, #6
 8001b58:	1a5b      	subs	r3, r3, r1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	1a5b      	subs	r3, r3, r1
 8001b5e:	1ad1      	subs	r1, r2, r3
 8001b60:	b2cb      	uxtb	r3, r1
 8001b62:	3301      	adds	r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	2303      	movs	r3, #3
 8001b68:	9303      	str	r3, [sp, #12]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	4601      	mov	r1, r0
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fede 	bl	800193c <bsp_lora_send_packet>
								, LORA_CMD_CONNECT, 0, NULL, 0, 3);
				HAL_UART_Transmit(&huart2, "sendcn\n", 7, 2000);
 8001b80:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b84:	2207      	movs	r2, #7
 8001b86:	495e      	ldr	r1, [pc, #376]	@ (8001d00 <bsp_lora_send_packet_to_node+0x204>)
 8001b88:	485a      	ldr	r0, [pc, #360]	@ (8001cf4 <bsp_lora_send_packet_to_node+0x1f8>)
 8001b8a:	f006 fd51 	bl	8008630 <HAL_UART_Transmit>
 8001b8e:	e065      	b.n	8001c5c <bsp_lora_send_packet_to_node+0x160>
			}
			else{
				HAL_UART_Transmit(&huart2, "Node is connected\n", 19, 2000);
 8001b90:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b94:	2213      	movs	r2, #19
 8001b96:	495b      	ldr	r1, [pc, #364]	@ (8001d04 <bsp_lora_send_packet_to_node+0x208>)
 8001b98:	4856      	ldr	r0, [pc, #344]	@ (8001cf4 <bsp_lora_send_packet_to_node+0x1f8>)
 8001b9a:	f006 fd49 	bl	8008630 <HAL_UART_Transmit>
 8001b9e:	e05d      	b.n	8001c5c <bsp_lora_send_packet_to_node+0x160>
			}
		}

		else if(cmd == LORA_CMD_DISCONNECT){
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d12e      	bne.n	8001c04 <bsp_lora_send_packet_to_node+0x108>
			if(des_node->connected == 1){
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	789b      	ldrb	r3, [r3, #2]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d122      	bne.n	8001bf4 <bsp_lora_send_packet_to_node+0xf8>
				bsp_lora_send_packet(GATEWAY_ID, des_node->id, ((lora_send_packet_buffer.packet_id + 1) % (MAX_PACKET_ID + 1)) + 1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	7818      	ldrb	r0, [r3, #0]
 8001bb2:	4b51      	ldr	r3, [pc, #324]	@ (8001cf8 <bsp_lora_send_packet_to_node+0x1fc>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <bsp_lora_send_packet_to_node+0x200>)
 8001bba:	fb83 1302 	smull	r1, r3, r3, r2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	11d9      	asrs	r1, r3, #7
 8001bc2:	17d3      	asrs	r3, r2, #31
 8001bc4:	1ac9      	subs	r1, r1, r3
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	1a5b      	subs	r3, r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	1a5b      	subs	r3, r3, r1
 8001bd0:	1ad1      	subs	r1, r2, r3
 8001bd2:	b2cb      	uxtb	r3, r1
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	2303      	movs	r3, #3
 8001bda:	9303      	str	r3, [sp, #12]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2301      	movs	r3, #1
 8001bea:	4601      	mov	r1, r0
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff fea5 	bl	800193c <bsp_lora_send_packet>
 8001bf2:	e033      	b.n	8001c5c <bsp_lora_send_packet_to_node+0x160>
											, LORA_CMD_DISCONNECT, 0, NULL, 0, 3);
			}
			else{
				HAL_UART_Transmit(&huart2, "Node is disconnected\n", 21, 2000);
 8001bf4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bf8:	2215      	movs	r2, #21
 8001bfa:	4943      	ldr	r1, [pc, #268]	@ (8001d08 <bsp_lora_send_packet_to_node+0x20c>)
 8001bfc:	483d      	ldr	r0, [pc, #244]	@ (8001cf4 <bsp_lora_send_packet_to_node+0x1f8>)
 8001bfe:	f006 fd17 	bl	8008630 <HAL_UART_Transmit>
 8001c02:	e02b      	b.n	8001c5c <bsp_lora_send_packet_to_node+0x160>
			}
		}

		else{
			HAL_UART_Transmit(&huart2, "read request\n", 13, 2000);
 8001c04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c08:	220d      	movs	r2, #13
 8001c0a:	4940      	ldr	r1, [pc, #256]	@ (8001d0c <bsp_lora_send_packet_to_node+0x210>)
 8001c0c:	4839      	ldr	r0, [pc, #228]	@ (8001cf4 <bsp_lora_send_packet_to_node+0x1f8>)
 8001c0e:	f006 fd0f 	bl	8008630 <HAL_UART_Transmit>
			bsp_lora_send_packet(GATEWAY_ID, des_node->id, ((lora_send_packet_buffer.packet_id + 1) % (MAX_PACKET_ID + 1)) + 1,
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	7818      	ldrb	r0, [r3, #0]
 8001c16:	4b38      	ldr	r3, [pc, #224]	@ (8001cf8 <bsp_lora_send_packet_to_node+0x1fc>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <bsp_lora_send_packet_to_node+0x200>)
 8001c1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c22:	4413      	add	r3, r2
 8001c24:	11d9      	asrs	r1, r3, #7
 8001c26:	17d3      	asrs	r3, r2, #31
 8001c28:	1ac9      	subs	r1, r1, r3
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	1a5b      	subs	r3, r3, r1
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	1a5b      	subs	r3, r3, r1
 8001c34:	1ad1      	subs	r1, r2, r3
 8001c36:	b2cb      	uxtb	r3, r1
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	7af9      	ldrb	r1, [r7, #11]
 8001c3e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c42:	9303      	str	r3, [sp, #12]
 8001c44:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	460b      	mov	r3, r1
 8001c54:	4601      	mov	r1, r0
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fe70 	bl	800193c <bsp_lora_send_packet>
					cmd, mem_addr, data, len, ttl);
		}

		if(bsp_lora_get_node_send_packet_index(des_node) != -1){
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff fec7 	bl	80019f0 <bsp_lora_get_node_send_packet_index>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d03e      	beq.n	8001ce8 <bsp_lora_send_packet_to_node+0x1ec>
			uint8_t i = bsp_lora_get_node_send_packet_index(des_node);
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff fec0 	bl	80019f0 <bsp_lora_get_node_send_packet_index>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]
			memcpy(&des_node->last_lora_send_packet[i], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8001c74:	7dfa      	ldrb	r2, [r7, #23]
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	3305      	adds	r3, #5
 8001c86:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf8 <bsp_lora_send_packet_to_node+0x1fc>)
 8001c88:	4615      	mov	r5, r2
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	f105 0e20 	add.w	lr, r5, #32
 8001c90:	4664      	mov	r4, ip
 8001c92:	462e      	mov	r6, r5
 8001c94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c96:	6020      	str	r0, [r4, #0]
 8001c98:	6061      	str	r1, [r4, #4]
 8001c9a:	60a2      	str	r2, [r4, #8]
 8001c9c:	60e3      	str	r3, [r4, #12]
 8001c9e:	3510      	adds	r5, #16
 8001ca0:	f10c 0c10 	add.w	ip, ip, #16
 8001ca4:	4575      	cmp	r5, lr
 8001ca6:	d1f3      	bne.n	8001c90 <bsp_lora_send_packet_to_node+0x194>
 8001ca8:	4664      	mov	r4, ip
 8001caa:	462b      	mov	r3, r5
 8001cac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001cae:	6020      	str	r0, [r4, #0]
 8001cb0:	6061      	str	r1, [r4, #4]
 8001cb2:	60a2      	str	r2, [r4, #8]
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	789b      	ldrb	r3, [r3, #2]
 8001cb8:	81a2      	strh	r2, [r4, #12]
 8001cba:	73a3      	strb	r3, [r4, #14]
			des_node->last_lora_send_packet[i].ttl--;
 8001cbc:	7dfa      	ldrb	r2, [r7, #23]
 8001cbe:	68f9      	ldr	r1, [r7, #12]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3308      	adds	r3, #8
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b2d8      	uxtb	r0, r3
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf0:	0800ee74 	.word	0x0800ee74
 8001cf4:	20001978 	.word	0x20001978
 8001cf8:	200000a8 	.word	0x200000a8
 8001cfc:	828cbfbf 	.word	0x828cbfbf
 8001d00:	0800ee80 	.word	0x0800ee80
 8001d04:	0800ee88 	.word	0x0800ee88
 8001d08:	0800ee9c 	.word	0x0800ee9c
 8001d0c:	0800eeb4 	.word	0x0800eeb4

08001d10 <bsp_lora_resend_packet>:

/**
 * Resend a specific lora packet
 * **/
void bsp_lora_resend_packet(lora_packet_t *lora_packet){
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af04      	add	r7, sp, #16
 8001d16:	6078      	str	r0, [r7, #4]
	if(lora_packet->ttl > 0){
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01e      	beq.n	8001d5e <bsp_lora_resend_packet+0x4e>
		bsp_lora_send_packet(GATEWAY_ID, lora_packet->destination_id, lora_packet->packet_id, lora_packet->cmd,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	789c      	ldrb	r4, [r3, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	781d      	ldrb	r5, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	795e      	ldrb	r6, [r3, #5]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 3006 	ldr.w	r3, [r3, #6]
				lora_packet->mem_addr, lora_packet->payload, lora_packet->payload_length, lora_packet->ttl);
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	320f      	adds	r2, #15
		bsp_lora_send_packet(GATEWAY_ID, lora_packet->destination_id, lora_packet->packet_id, lora_packet->cmd,
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	7b89      	ldrb	r1, [r1, #14]
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	78c0      	ldrb	r0, [r0, #3]
 8001d3e:	9003      	str	r0, [sp, #12]
 8001d40:	9102      	str	r1, [sp, #8]
 8001d42:	9201      	str	r2, [sp, #4]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4633      	mov	r3, r6
 8001d48:	462a      	mov	r2, r5
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff fdf5 	bl	800193c <bsp_lora_send_packet>
		lora_packet->ttl--;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	78db      	ldrb	r3, [r3, #3]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	70da      	strb	r2, [r3, #3]
	}
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d68 <bsp_lora_receive_packet>:


/**
 * A function used to receive packet from other devices
 */
void bsp_lora_receive_packet(){
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b0b2      	sub	sp, #200	@ 0xc8
 8001d6c:	af00      	add	r7, sp, #0
	uint8_t u8lora_receive_packet_buffer[MAX_PACKET_LENGTH] = {0};
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	22c4      	movs	r2, #196	@ 0xc4
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00c fc59 	bl	800e630 <memset>
	LoRa_receive(&myLoRa, u8lora_receive_packet_buffer, MAX_PACKET_LENGTH);
 8001d7e:	463b      	mov	r3, r7
 8001d80:	22c8      	movs	r2, #200	@ 0xc8
 8001d82:	4619      	mov	r1, r3
 8001d84:	480a      	ldr	r0, [pc, #40]	@ (8001db0 <bsp_lora_receive_packet+0x48>)
 8001d86:	f7ff fb4f 	bl	8001428 <LoRa_receive>
	memcpy(&lora_receive_packet_buffer, u8lora_receive_packet_buffer, sizeof(lora_packet_t));
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <bsp_lora_receive_packet+0x4c>)
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	463d      	mov	r5, r7
 8001d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d9c:	c407      	stmia	r4!, {r0, r1, r2}
 8001d9e:	8023      	strh	r3, [r4, #0]
 8001da0:	3402      	adds	r4, #2
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	7023      	strb	r3, [r4, #0]
}
 8001da6:	bf00      	nop
 8001da8:	37c8      	adds	r7, #200	@ 0xc8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000007c 	.word	0x2000007c
 8001db4:	200000d8 	.word	0x200000d8

08001db8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <vApplicationGetIdleTaskMemory+0x30>)
 8001dce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2280      	movs	r2, #128	@ 0x80
 8001dd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000108 	.word	0x20000108
 8001de8:	2000015c 	.word	0x2000015c

08001dec <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <vApplicationGetTimerTaskMemory+0x2c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4a06      	ldr	r2, [pc, #24]	@ (8001e1c <vApplicationGetTimerTaskMemory+0x30>)
 8001e02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e0a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	2000035c 	.word	0x2000035c
 8001e1c:	200003b0 	.word	0x200003b0

08001e20 <lora_network_init>:
	else if(lora_node->class == DEVICE_CLASS_C)
		return DEVICE_CLASS_C_TIME_PERIOD;
	return -1;
}

void lora_network_init(uint8_t node_quantity){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	bsp_lora_init();
 8001e2a:	f7ff fcf1 	bl	8001810 <bsp_lora_init>
	lr_nw_node_quantity = node_quantity;
 8001e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f60 <lora_network_init+0x140>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	7013      	strb	r3, [r2, #0]
	STM_LOG("node numbers: %d\n", lr_nw_node_quantity, 17);
 8001e34:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <lora_network_init+0x140>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2211      	movs	r2, #17
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4849      	ldr	r0, [pc, #292]	@ (8001f64 <lora_network_init+0x144>)
 8001e3e:	f7ff fc63 	bl	8001708 <STM_LOG>
	for(int i = 0; i < lr_nw_node_quantity; i++){
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e02a      	b.n	8001e9e <lora_network_init+0x7e>
		NODE_DEVICE[i].id = i + 1;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2d8      	uxtb	r0, r3
 8001e50:	4945      	ldr	r1, [pc, #276]	@ (8001f68 <lora_network_init+0x148>)
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	015b      	lsls	r3, r3, #5
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	4602      	mov	r2, r0
 8001e62:	701a      	strb	r2, [r3, #0]
		NODE_DEVICE[i].class = NODE_DEVICE_CLASS[i];
 8001e64:	4a41      	ldr	r2, [pc, #260]	@ (8001f6c <lora_network_init+0x14c>)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	7818      	ldrb	r0, [r3, #0]
 8001e6c:	493e      	ldr	r1, [pc, #248]	@ (8001f68 <lora_network_init+0x148>)
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4602      	mov	r2, r0
 8001e80:	701a      	strb	r2, [r3, #0]
		NODE_DEVICE[i].connected = 0;
 8001e82:	4939      	ldr	r1, [pc, #228]	@ (8001f68 <lora_network_init+0x148>)
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	015b      	lsls	r3, r3, #5
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	3302      	adds	r3, #2
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < lr_nw_node_quantity; i++){
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b30      	ldr	r3, [pc, #192]	@ (8001f60 <lora_network_init+0x140>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	dbce      	blt.n	8001e48 <lora_network_init+0x28>
	}
	spi_mutex = xSemaphoreCreateMutex();
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f009 fab9 	bl	800b422 <xQueueCreateMutex>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f70 <lora_network_init+0x150>)
 8001eb4:	6013      	str	r3, [r2, #0]
	last_lora_send_packet_counting_semaphore = xSemaphoreCreateCounting(NUMBER_OF_LAST_LORA_SEND_PACKET, 0);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f009 faca 	bl	800b452 <xQueueCreateCountingSemaphore>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f74 <lora_network_init+0x154>)
 8001ec2:	6013      	str	r3, [r2, #0]

	xTaskCreate(lora_network_connect_to_all_nodes_task, "connect_all_nodes", 1024, NULL, 4, &connect_to_all_nodes_task_handle);
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f78 <lora_network_init+0x158>)
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2304      	movs	r3, #4
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed2:	492a      	ldr	r1, [pc, #168]	@ (8001f7c <lora_network_init+0x15c>)
 8001ed4:	482a      	ldr	r0, [pc, #168]	@ (8001f80 <lora_network_init+0x160>)
 8001ed6:	f00a f8f9 	bl	800c0cc <xTaskCreate>
	xTaskCreate(lora_network_disconnect_to_all_nodes_task, "disconnect_all_nodes", 1024, NULL, 4, &disconnect_to_all_nodes_task_handle);
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <lora_network_init+0x164>)
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2304      	movs	r3, #4
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee8:	4927      	ldr	r1, [pc, #156]	@ (8001f88 <lora_network_init+0x168>)
 8001eea:	4828      	ldr	r0, [pc, #160]	@ (8001f8c <lora_network_init+0x16c>)
 8001eec:	f00a f8ee 	bl	800c0cc <xTaskCreate>
	xTaskCreate(lora_network_send_read_request_to_all_nodes_task, "send_request_all_nodes", 512, NULL, 2, &send_read_request_to_all_nodes_task_handle);
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <lora_network_init+0x170>)
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efe:	4925      	ldr	r1, [pc, #148]	@ (8001f94 <lora_network_init+0x174>)
 8001f00:	4825      	ldr	r0, [pc, #148]	@ (8001f98 <lora_network_init+0x178>)
 8001f02:	f00a f8e3 	bl	800c0cc <xTaskCreate>
	xTaskCreate(lora_network_handle_last_lora_send_packets_task, "handle_last_packets", 512, NULL, 3, &handle_last_lora_send_packets_handle);
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <lora_network_init+0x17c>)
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f14:	4922      	ldr	r1, [pc, #136]	@ (8001fa0 <lora_network_init+0x180>)
 8001f16:	4823      	ldr	r0, [pc, #140]	@ (8001fa4 <lora_network_init+0x184>)
 8001f18:	f00a f8d8 	bl	800c0cc <xTaskCreate>

	all_connect_queue = xQueueCreate(3, sizeof(connection_task_notification_value_t));
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2102      	movs	r1, #2
 8001f20:	2003      	movs	r0, #3
 8001f22:	f009 fa0a 	bl	800b33a <xQueueGenericCreate>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <lora_network_init+0x188>)
 8001f2a:	6013      	str	r3, [r2, #0]
	all_disconnect_queue = xQueueCreate(3, sizeof(connection_task_notification_value_t));
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2102      	movs	r1, #2
 8001f30:	2003      	movs	r0, #3
 8001f32:	f009 fa02 	bl	800b33a <xQueueGenericCreate>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a1c      	ldr	r2, [pc, #112]	@ (8001fac <lora_network_init+0x18c>)
 8001f3a:	6013      	str	r3, [r2, #0]
	send_request_queue = xQueueCreate(3, sizeof(connection_task_notification_value_t));
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2102      	movs	r1, #2
 8001f40:	2003      	movs	r0, #3
 8001f42:	f009 f9fa 	bl	800b33a <xQueueGenericCreate>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <lora_network_init+0x190>)
 8001f4a:	6013      	str	r3, [r2, #0]



	lr_nw_connect_mode = LORA_STATUS_IDLE;
 8001f4c:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <lora_network_init+0x194>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
	lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 8001f52:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <lora_network_init+0x198>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200007b0 	.word	0x200007b0
 8001f64:	0800eec4 	.word	0x0800eec4
 8001f68:	200007c0 	.word	0x200007c0
 8001f6c:	200007b8 	.word	0x200007b8
 8001f70:	200017a0 	.word	0x200017a0
 8001f74:	200017a4 	.word	0x200017a4
 8001f78:	20001778 	.word	0x20001778
 8001f7c:	0800eed8 	.word	0x0800eed8
 8001f80:	080025cd 	.word	0x080025cd
 8001f84:	2000177c 	.word	0x2000177c
 8001f88:	0800eeec 	.word	0x0800eeec
 8001f8c:	08001fbd 	.word	0x08001fbd
 8001f90:	20001780 	.word	0x20001780
 8001f94:	0800ef04 	.word	0x0800ef04
 8001f98:	08002bdd 	.word	0x08002bdd
 8001f9c:	20001784 	.word	0x20001784
 8001fa0:	0800ef1c 	.word	0x0800ef1c
 8001fa4:	08003021 	.word	0x08003021
 8001fa8:	20001794 	.word	0x20001794
 8001fac:	20001798 	.word	0x20001798
 8001fb0:	2000179c 	.word	0x2000179c
 8001fb4:	200007b6 	.word	0x200007b6
 8001fb8:	200007b7 	.word	0x200007b7

08001fbc <lora_network_disconnect_to_all_nodes_task>:


void lora_network_disconnect_to_all_nodes_task(void *param){
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b091      	sub	sp, #68	@ 0x44
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	all_disconnect_timer = xTimerCreate("disconnect_all", pdMS_TO_TICKS(1000), pdTRUE, (void *)SW_TIMER_DISCONNECT_ALL, lora_network_timer_task);
 8001fc4:	4b7f      	ldr	r3, [pc, #508]	@ (80021c4 <lora_network_disconnect_to_all_nodes_task+0x208>)
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd0:	487d      	ldr	r0, [pc, #500]	@ (80021c8 <lora_network_disconnect_to_all_nodes_task+0x20c>)
 8001fd2:	f00b f871 	bl	800d0b8 <xTimerCreate>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a7c      	ldr	r2, [pc, #496]	@ (80021cc <lora_network_disconnect_to_all_nodes_task+0x210>)
 8001fda:	6013      	str	r3, [r2, #0]
	vTimerSetTimerID(all_disconnect_timer, (void *)SW_TIMER_DISCONNECT_ALL);
 8001fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80021cc <lora_network_disconnect_to_all_nodes_task+0x210>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00b fbdb 	bl	800d79e <vTimerSetTimerID>

	while(1){
		if(xQueueReceive(all_disconnect_queue, &NotificationValue, portMAX_DELAY)){
 8001fe8:	4b79      	ldr	r3, [pc, #484]	@ (80021d0 <lora_network_disconnect_to_all_nodes_task+0x214>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f009 fc91 	bl	800b91c <xQueueReceive>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f3      	beq.n	8001fe8 <lora_network_disconnect_to_all_nodes_task+0x2c>
			xSemaphoreTake(spi_mutex, portMAX_DELAY);
 8002000:	4b74      	ldr	r3, [pc, #464]	@ (80021d4 <lora_network_disconnect_to_all_nodes_task+0x218>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	4618      	mov	r0, r3
 800200a:	f009 fd69 	bl	800bae0 <xQueueSemaphoreTake>
			bsp_lora_enter_safe_mode();
 800200e:	f7ff fb55 	bl	80016bc <bsp_lora_enter_safe_mode>
			lora_network_send_request_stop_scheduler();
 8002012:	f000 ff33 	bl	8002e7c <lora_network_send_request_stop_scheduler>

			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002016:	bf00      	nop
 8002018:	4b6f      	ldr	r3, [pc, #444]	@ (80021d8 <lora_network_disconnect_to_all_nodes_task+0x21c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4618      	mov	r0, r3
 800201e:	f005 fcfe 	bl	8007a1e <HAL_SPI_GetState>
 8002022:	4603      	mov	r3, r0
 8002024:	2b01      	cmp	r3, #1
 8002026:	d1f7      	bne.n	8002018 <lora_network_disconnect_to_all_nodes_task+0x5c>
			while(bsp_lora_check_cad() == 1);
 8002028:	bf00      	nop
 800202a:	f7ff fbc1 	bl	80017b0 <bsp_lora_check_cad>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d0fa      	beq.n	800202a <lora_network_disconnect_to_all_nodes_task+0x6e>
			bsp_lora_set_receive_mode();
 8002034:	f7ff fba0 	bl	8001778 <bsp_lora_set_receive_mode>
			if(NotificationValue.cmd == STOP_ALL){
 8002038:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800203c:	2b02      	cmp	r3, #2
 800203e:	d157      	bne.n	80020f0 <lora_network_disconnect_to_all_nodes_task+0x134>
				while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity){
 8002040:	e005      	b.n	800204e <lora_network_disconnect_to_all_nodes_task+0x92>
					lr_nw_node_index1++;
 8002042:	4b66      	ldr	r3, [pc, #408]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b64      	ldr	r3, [pc, #400]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 800204c:	701a      	strb	r2, [r3, #0]
				while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity){
 800204e:	4b63      	ldr	r3, [pc, #396]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	4962      	ldr	r1, [pc, #392]	@ (80021e0 <lora_network_disconnect_to_all_nodes_task+0x224>)
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	015b      	lsls	r3, r3, #5
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	440b      	add	r3, r1
 8002062:	3302      	adds	r3, #2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <lora_network_disconnect_to_all_nodes_task+0xba>
 800206a:	4b5c      	ldr	r3, [pc, #368]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	4b5d      	ldr	r3, [pc, #372]	@ (80021e4 <lora_network_disconnect_to_all_nodes_task+0x228>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d3e5      	bcc.n	8002042 <lora_network_disconnect_to_all_nodes_task+0x86>
				}
				if(lr_nw_node_index1 < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index1].connected == 1){
 8002076:	4b59      	ldr	r3, [pc, #356]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	4b5a      	ldr	r3, [pc, #360]	@ (80021e4 <lora_network_disconnect_to_all_nodes_task+0x228>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	f080 8261 	bcs.w	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
 8002084:	4b55      	ldr	r3, [pc, #340]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4955      	ldr	r1, [pc, #340]	@ (80021e0 <lora_network_disconnect_to_all_nodes_task+0x224>)
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	015b      	lsls	r3, r3, #5
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	440b      	add	r3, r1
 8002098:	3302      	adds	r3, #2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8252 	bne.w	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
					HAL_UART_Transmit(&huart2, "Start disconnect\n", 18, 2000);
 80020a2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80020a6:	2212      	movs	r2, #18
 80020a8:	494f      	ldr	r1, [pc, #316]	@ (80021e8 <lora_network_disconnect_to_all_nodes_task+0x22c>)
 80020aa:	4850      	ldr	r0, [pc, #320]	@ (80021ec <lora_network_disconnect_to_all_nodes_task+0x230>)
 80020ac:	f006 fac0 	bl	8008630 <HAL_UART_Transmit>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, 0, 0, 3);
 80020b0:	4b4a      	ldr	r3, [pc, #296]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	015b      	lsls	r3, r3, #5
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	4a47      	ldr	r2, [pc, #284]	@ (80021e0 <lora_network_disconnect_to_all_nodes_task+0x224>)
 80020c2:	1898      	adds	r0, r3, r2
 80020c4:	2303      	movs	r3, #3
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	f7ff fd13 	bl	8001afc <bsp_lora_send_packet_to_node>
					xTimerStart(all_disconnect_timer, 0);
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <lora_network_disconnect_to_all_nodes_task+0x210>)
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	f00a fa43 	bl	800c564 <xTaskGetTickCount>
 80020de:	4602      	mov	r2, r0
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	4620      	mov	r0, r4
 80020ea:	f00b f843 	bl	800d174 <xTimerGenericCommand>
 80020ee:	e22a      	b.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
				}
			}


			/* connect to specific device here */
			else if(NotificationValue.cmd == STOP_SPECIFIC){
 80020f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	f040 8081 	bne.w	80021fc <lora_network_disconnect_to_all_nodes_task+0x240>
				HAL_UART_Transmit(&huart2, "Stop specific\n", 16, 2000);
 80020fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80020fe:	2210      	movs	r2, #16
 8002100:	493b      	ldr	r1, [pc, #236]	@ (80021f0 <lora_network_disconnect_to_all_nodes_task+0x234>)
 8002102:	483a      	ldr	r0, [pc, #232]	@ (80021ec <lora_network_disconnect_to_all_nodes_task+0x230>)
 8002104:	f006 fa94 	bl	8008630 <HAL_UART_Transmit>
				for(int i = 0; i < lr_nw_node_quantity; i++){
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
 800210c:	e014      	b.n	8002138 <lora_network_disconnect_to_all_nodes_task+0x17c>
					if(NODE_DEVICE[i].id == NotificationValue.value){
 800210e:	4934      	ldr	r1, [pc, #208]	@ (80021e0 <lora_network_disconnect_to_all_nodes_task+0x224>)
 8002110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	440b      	add	r3, r1
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002124:	429a      	cmp	r2, r3
 8002126:	d104      	bne.n	8002132 <lora_network_disconnect_to_all_nodes_task+0x176>
						lr_nw_node_index1 = i;
 8002128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b2b      	ldr	r3, [pc, #172]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 800212e:	701a      	strb	r2, [r3, #0]
						break;
 8002130:	e008      	b.n	8002144 <lora_network_disconnect_to_all_nodes_task+0x188>
				for(int i = 0; i < lr_nw_node_quantity; i++){
 8002132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002134:	3301      	adds	r3, #1
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
 8002138:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <lora_network_disconnect_to_all_nodes_task+0x228>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002140:	4293      	cmp	r3, r2
 8002142:	dbe4      	blt.n	800210e <lora_network_disconnect_to_all_nodes_task+0x152>
					}
				}
				if(NODE_DEVICE[lr_nw_node_index1].connected == 1){
 8002144:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4925      	ldr	r1, [pc, #148]	@ (80021e0 <lora_network_disconnect_to_all_nodes_task+0x224>)
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	015b      	lsls	r3, r3, #5
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	440b      	add	r3, r1
 8002158:	3302      	adds	r3, #2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d11f      	bne.n	80021a0 <lora_network_disconnect_to_all_nodes_task+0x1e4>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, 0, 0, 3);
 8002160:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	015b      	lsls	r3, r3, #5
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <lora_network_disconnect_to_all_nodes_task+0x224>)
 8002172:	1898      	adds	r0, r3, r2
 8002174:	2303      	movs	r3, #3
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	f7ff fcbb 	bl	8001afc <bsp_lora_send_packet_to_node>
					xTimerStart(all_disconnect_timer, 0);
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <lora_network_disconnect_to_all_nodes_task+0x210>)
 8002188:	681c      	ldr	r4, [r3, #0]
 800218a:	f00a f9eb 	bl	800c564 <xTaskGetTickCount>
 800218e:	4602      	mov	r2, r0
 8002190:	2300      	movs	r3, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	2101      	movs	r1, #1
 8002198:	4620      	mov	r0, r4
 800219a:	f00a ffeb 	bl	800d174 <xTimerGenericCommand>
 800219e:	e1d2      	b.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
				}
				else{
					HAL_UART_Transmit(&huart2, "Node's disconnected\n", 20, 2000);
 80021a0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80021a4:	2214      	movs	r2, #20
 80021a6:	4913      	ldr	r1, [pc, #76]	@ (80021f4 <lora_network_disconnect_to_all_nodes_task+0x238>)
 80021a8:	4810      	ldr	r0, [pc, #64]	@ (80021ec <lora_network_disconnect_to_all_nodes_task+0x230>)
 80021aa:	f006 fa41 	bl	8008630 <HAL_UART_Transmit>
					lr_nw_node_index1 = 0;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <lora_network_disconnect_to_all_nodes_task+0x220>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]

					taskENTER_CRITICAL();
 80021b4:	f00b fc48 	bl	800da48 <vPortEnterCritical>
					lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <lora_network_disconnect_to_all_nodes_task+0x23c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 80021be:	f00b fc75 	bl	800daac <vPortExitCritical>
 80021c2:	e1c0      	b.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
 80021c4:	0800319d 	.word	0x0800319d
 80021c8:	0800ef30 	.word	0x0800ef30
 80021cc:	2000178c 	.word	0x2000178c
 80021d0:	20001798 	.word	0x20001798
 80021d4:	200017a0 	.word	0x200017a0
 80021d8:	2000007c 	.word	0x2000007c
 80021dc:	200007b4 	.word	0x200007b4
 80021e0:	200007c0 	.word	0x200007c0
 80021e4:	200007b0 	.word	0x200007b0
 80021e8:	0800ef40 	.word	0x0800ef40
 80021ec:	20001978 	.word	0x20001978
 80021f0:	0800ef54 	.word	0x0800ef54
 80021f4:	0800ef64 	.word	0x0800ef64
 80021f8:	200007b7 	.word	0x200007b7
				}
			}

			/* when receive ack cmd from the node that the gw is requesting to connect to */
			else if(NotificationValue.cmd == ACK){
 80021fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002200:	2b05      	cmp	r3, #5
 8002202:	f040 80a3 	bne.w	800234c <lora_network_disconnect_to_all_nodes_task+0x390>
				uint8_t buf[30];
				sprintf(buf, "disconnect to node %d\n", lr_nw_node_index1 + 1);
 8002206:	4b85      	ldr	r3, [pc, #532]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	4983      	ldr	r1, [pc, #524]	@ (8002420 <lora_network_disconnect_to_all_nodes_task+0x464>)
 8002212:	4618      	mov	r0, r3
 8002214:	f00c f9ec 	bl	800e5f0 <siprintf>
				HAL_UART_Transmit(&huart2, buf, strlen(buf), 2000);
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	4618      	mov	r0, r3
 800221e:	f7fd ffdf 	bl	80001e0 <strlen>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	f107 0108 	add.w	r1, r7, #8
 800222a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800222e:	487d      	ldr	r0, [pc, #500]	@ (8002424 <lora_network_disconnect_to_all_nodes_task+0x468>)
 8002230:	f006 f9fe 	bl	8008630 <HAL_UART_Transmit>

				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT);
 8002234:	4b79      	ldr	r3, [pc, #484]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	015b      	lsls	r3, r3, #5
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	4a78      	ldr	r2, [pc, #480]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 8002246:	4413      	add	r3, r2
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fbf3 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8002250:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if(packet_index != -1){
 8002252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d00d      	beq.n	8002276 <lora_network_disconnect_to_all_nodes_task+0x2ba>
					bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], packet_index);
 800225a:	4b70      	ldr	r3, [pc, #448]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	015b      	lsls	r3, r3, #5
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	4a6f      	ldr	r2, [pc, #444]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 800226c:	4413      	add	r3, r2
 800226e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fc12 	bl	8001a9a <bsp_lora_remove_packet_from_node_send_packets>
				}

				if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_ALL){
 8002276:	4b6d      	ldr	r3, [pc, #436]	@ (800242c <lora_network_disconnect_to_all_nodes_task+0x470>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d156      	bne.n	800232c <lora_network_disconnect_to_all_nodes_task+0x370>
					do{
						lr_nw_node_index1++;
 800227e:	4b67      	ldr	r3, [pc, #412]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b65      	ldr	r3, [pc, #404]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 8002288:	701a      	strb	r2, [r3, #0]
					}while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity);
 800228a:	4b64      	ldr	r3, [pc, #400]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	4965      	ldr	r1, [pc, #404]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	015b      	lsls	r3, r3, #5
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	440b      	add	r3, r1
 800229e:	3302      	adds	r3, #2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <lora_network_disconnect_to_all_nodes_task+0x2f6>
 80022a6:	4b5d      	ldr	r3, [pc, #372]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	4b61      	ldr	r3, [pc, #388]	@ (8002430 <lora_network_disconnect_to_all_nodes_task+0x474>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3e5      	bcc.n	800227e <lora_network_disconnect_to_all_nodes_task+0x2c2>

					if(lr_nw_node_index1 < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index1].connected == 1){
 80022b2:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b5e      	ldr	r3, [pc, #376]	@ (8002430 <lora_network_disconnect_to_all_nodes_task+0x474>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	f080 8143 	bcs.w	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
 80022c0:	4b56      	ldr	r3, [pc, #344]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4958      	ldr	r1, [pc, #352]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	3302      	adds	r3, #2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 8134 	bne.w	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
						HAL_UART_Transmit(&huart2, "ack notify\n", 11, 2000);
 80022de:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80022e2:	220b      	movs	r2, #11
 80022e4:	4953      	ldr	r1, [pc, #332]	@ (8002434 <lora_network_disconnect_to_all_nodes_task+0x478>)
 80022e6:	484f      	ldr	r0, [pc, #316]	@ (8002424 <lora_network_disconnect_to_all_nodes_task+0x468>)
 80022e8:	f006 f9a2 	bl	8008630 <HAL_UART_Transmit>
						bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, 0, 0, 3);
 80022ec:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 80022fe:	1898      	adds	r0, r3, r2
 8002300:	2303      	movs	r3, #3
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2300      	movs	r3, #0
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2300      	movs	r3, #0
 800230a:	2200      	movs	r2, #0
 800230c:	2101      	movs	r1, #1
 800230e:	f7ff fbf5 	bl	8001afc <bsp_lora_send_packet_to_node>
						xTimerStart(all_disconnect_timer, 0);
 8002312:	4b49      	ldr	r3, [pc, #292]	@ (8002438 <lora_network_disconnect_to_all_nodes_task+0x47c>)
 8002314:	681c      	ldr	r4, [r3, #0]
 8002316:	f00a f925 	bl	800c564 <xTaskGetTickCount>
 800231a:	4602      	mov	r2, r0
 800231c:	2300      	movs	r3, #0
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	2101      	movs	r1, #1
 8002324:	4620      	mov	r0, r4
 8002326:	f00a ff25 	bl	800d174 <xTimerGenericCommand>
 800232a:	e10c      	b.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
					}
				}
				else if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_SPECIFIC){
 800232c:	4b3f      	ldr	r3, [pc, #252]	@ (800242c <lora_network_disconnect_to_all_nodes_task+0x470>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b04      	cmp	r3, #4
 8002332:	f040 8108 	bne.w	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
					lr_nw_node_index1 = 0;
 8002336:	4b39      	ldr	r3, [pc, #228]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]

					taskENTER_CRITICAL();
 800233c:	f00b fb84 	bl	800da48 <vPortEnterCritical>
					lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 8002340:	4b3a      	ldr	r3, [pc, #232]	@ (800242c <lora_network_disconnect_to_all_nodes_task+0x470>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 8002346:	f00b fbb1 	bl	800daac <vPortExitCritical>
 800234a:	e0fc      	b.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
				}
			}

			/* receive nak or timeout */
			else if(NotificationValue.cmd == NAK || NotificationValue.cmd == TIMEOUT){
 800234c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002350:	2b06      	cmp	r3, #6
 8002352:	d004      	beq.n	800235e <lora_network_disconnect_to_all_nodes_task+0x3a2>
 8002354:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002358:	2b07      	cmp	r3, #7
 800235a:	f040 80f4 	bne.w	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
				HAL_UART_Transmit(&huart2, "timeout\n", 8, 2000);
 800235e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002362:	2208      	movs	r2, #8
 8002364:	4935      	ldr	r1, [pc, #212]	@ (800243c <lora_network_disconnect_to_all_nodes_task+0x480>)
 8002366:	482f      	ldr	r0, [pc, #188]	@ (8002424 <lora_network_disconnect_to_all_nodes_task+0x468>)
 8002368:	f006 f962 	bl	8008630 <HAL_UART_Transmit>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT);
 800236c:	4b2b      	ldr	r3, [pc, #172]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	015b      	lsls	r3, r3, #5
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	4a2a      	ldr	r2, [pc, #168]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 800237e:	4413      	add	r3, r2
 8002380:	2101      	movs	r1, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fb57 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8002388:	6338      	str	r0, [r7, #48]	@ 0x30
				if(packet_index != -1){
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	f000 80d9 	beq.w	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
					if(NODE_DEVICE[lr_nw_node_index1].last_lora_send_packet[packet_index].ttl > 0){
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	4823      	ldr	r0, [pc, #140]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 800239c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239e:	461a      	mov	r2, r3
 80023a0:	0052      	lsls	r2, r2, #1
 80023a2:	441a      	add	r2, r3
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	1ad2      	subs	r2, r2, r3
 80023a8:	460b      	mov	r3, r1
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	015b      	lsls	r3, r3, #5
 80023b0:	1a5b      	subs	r3, r3, r1
 80023b2:	4413      	add	r3, r2
 80023b4:	4403      	add	r3, r0
 80023b6:	3308      	adds	r3, #8
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d040      	beq.n	8002440 <lora_network_disconnect_to_all_nodes_task+0x484>
						NODE_DEVICE[lr_nw_node_index1].error = 1;
 80023be:	4b17      	ldr	r3, [pc, #92]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4918      	ldr	r1, [pc, #96]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	015b      	lsls	r3, r3, #5
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	3304      	adds	r3, #4
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
						bsp_lora_resend_packet(&NODE_DEVICE[lr_nw_node_index1].last_lora_send_packet[packet_index]);
 80023d8:	4b10      	ldr	r3, [pc, #64]	@ (800241c <lora_network_disconnect_to_all_nodes_task+0x460>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	461a      	mov	r2, r3
 80023e2:	0052      	lsls	r2, r2, #1
 80023e4:	441a      	add	r2, r3
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	1ad2      	subs	r2, r2, r3
 80023ea:	460b      	mov	r3, r1
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	015b      	lsls	r3, r3, #5
 80023f2:	1a5b      	subs	r3, r3, r1
 80023f4:	4413      	add	r3, r2
 80023f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002428 <lora_network_disconnect_to_all_nodes_task+0x46c>)
 80023f8:	4413      	add	r3, r2
 80023fa:	3305      	adds	r3, #5
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fc87 	bl	8001d10 <bsp_lora_resend_packet>
						xTimerStart(all_disconnect_timer, 0);
 8002402:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <lora_network_disconnect_to_all_nodes_task+0x47c>)
 8002404:	681c      	ldr	r4, [r3, #0]
 8002406:	f00a f8ad 	bl	800c564 <xTaskGetTickCount>
 800240a:	4602      	mov	r2, r0
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	2101      	movs	r1, #1
 8002414:	4620      	mov	r0, r4
 8002416:	f00a fead 	bl	800d174 <xTimerGenericCommand>
 800241a:	e094      	b.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
 800241c:	200007b4 	.word	0x200007b4
 8002420:	0800ef7c 	.word	0x0800ef7c
 8002424:	20001978 	.word	0x20001978
 8002428:	200007c0 	.word	0x200007c0
 800242c:	200007b7 	.word	0x200007b7
 8002430:	200007b0 	.word	0x200007b0
 8002434:	0800ef94 	.word	0x0800ef94
 8002438:	2000178c 	.word	0x2000178c
 800243c:	0800efa0 	.word	0x0800efa0

					}
					else{
						STM_LOG("Can't disconnect node %3d\n", lr_nw_node_index1 + 1, 27);
 8002440:	4b58      	ldr	r3, [pc, #352]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	221b      	movs	r2, #27
 8002448:	4619      	mov	r1, r3
 800244a:	4857      	ldr	r0, [pc, #348]	@ (80025a8 <lora_network_disconnect_to_all_nodes_task+0x5ec>)
 800244c:	f7ff f95c 	bl	8001708 <STM_LOG>
						NODE_DEVICE[lr_nw_node_index1].error = 2;
 8002450:	4b54      	ldr	r3, [pc, #336]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4955      	ldr	r1, [pc, #340]	@ (80025ac <lora_network_disconnect_to_all_nodes_task+0x5f0>)
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	015b      	lsls	r3, r3, #5
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	440b      	add	r3, r1
 8002464:	3304      	adds	r3, #4
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
						bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index1], packet_index);
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	4a4c      	ldr	r2, [pc, #304]	@ (80025ac <lora_network_disconnect_to_all_nodes_task+0x5f0>)
 800247c:	4413      	add	r3, r2
 800247e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fb0a 	bl	8001a9a <bsp_lora_remove_packet_from_node_send_packets>

						if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_ALL){
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <lora_network_disconnect_to_all_nodes_task+0x5f4>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d14d      	bne.n	800252a <lora_network_disconnect_to_all_nodes_task+0x56e>
							do{
								lr_nw_node_index1++;
 800248e:	4b45      	ldr	r3, [pc, #276]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b43      	ldr	r3, [pc, #268]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002498:	701a      	strb	r2, [r3, #0]
							}while(NODE_DEVICE[lr_nw_node_index1].connected == 0 && lr_nw_node_index1 < lr_nw_node_quantity);
 800249a:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	4942      	ldr	r1, [pc, #264]	@ (80025ac <lora_network_disconnect_to_all_nodes_task+0x5f0>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	015b      	lsls	r3, r3, #5
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	3302      	adds	r3, #2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <lora_network_disconnect_to_all_nodes_task+0x506>
 80024b6:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <lora_network_disconnect_to_all_nodes_task+0x5f8>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3e5      	bcc.n	800248e <lora_network_disconnect_to_all_nodes_task+0x4d2>
							if(lr_nw_node_index1 < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index1].connected == 1){
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <lora_network_disconnect_to_all_nodes_task+0x5f8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d23b      	bcs.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
 80024ce:	4b35      	ldr	r3, [pc, #212]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4935      	ldr	r1, [pc, #212]	@ (80025ac <lora_network_disconnect_to_all_nodes_task+0x5f0>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	3302      	adds	r3, #2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d12d      	bne.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
								bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index1], LORA_CMD_DISCONNECT, 0, NULL, 0, 3);
 80024ea:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	015b      	lsls	r3, r3, #5
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	4a2c      	ldr	r2, [pc, #176]	@ (80025ac <lora_network_disconnect_to_all_nodes_task+0x5f0>)
 80024fc:	1898      	adds	r0, r3, r2
 80024fe:	2303      	movs	r3, #3
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	2300      	movs	r3, #0
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	2200      	movs	r2, #0
 800250a:	2101      	movs	r1, #1
 800250c:	f7ff faf6 	bl	8001afc <bsp_lora_send_packet_to_node>
								xTimerStart(all_disconnect_timer, 0);
 8002510:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <lora_network_disconnect_to_all_nodes_task+0x5fc>)
 8002512:	681c      	ldr	r4, [r3, #0]
 8002514:	f00a f826 	bl	800c564 <xTaskGetTickCount>
 8002518:	4602      	mov	r2, r0
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2300      	movs	r3, #0
 8002520:	2101      	movs	r1, #1
 8002522:	4620      	mov	r0, r4
 8002524:	f00a fe26 	bl	800d174 <xTimerGenericCommand>
 8002528:	e00d      	b.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
							}
						}
						else if(lr_nw_disconnect_mode == LORA_DISCONNECT_MODE_SPECIFIC){
 800252a:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <lora_network_disconnect_to_all_nodes_task+0x5f4>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d109      	bne.n	8002546 <lora_network_disconnect_to_all_nodes_task+0x58a>
							lr_nw_node_index1 = 0;
 8002532:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
							taskENTER_CRITICAL();
 8002538:	f00b fa86 	bl	800da48 <vPortEnterCritical>
							lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 800253c:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <lora_network_disconnect_to_all_nodes_task+0x5f4>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
							taskEXIT_CRITICAL();
 8002542:	f00b fab3 	bl	800daac <vPortExitCritical>
				}

			}


			if(lr_nw_node_index1 >= lr_nw_node_quantity){
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <lora_network_disconnect_to_all_nodes_task+0x5f8>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d310      	bcc.n	8002574 <lora_network_disconnect_to_all_nodes_task+0x5b8>

				HAL_UART_Transmit(&huart2, "Empty nodes\n", 12, 2000);
 8002552:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002556:	220c      	movs	r2, #12
 8002558:	4918      	ldr	r1, [pc, #96]	@ (80025bc <lora_network_disconnect_to_all_nodes_task+0x600>)
 800255a:	4819      	ldr	r0, [pc, #100]	@ (80025c0 <lora_network_disconnect_to_all_nodes_task+0x604>)
 800255c:	f006 f868 	bl	8008630 <HAL_UART_Transmit>
				lr_nw_node_index1 = 0;
 8002560:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]

				taskENTER_CRITICAL();
 8002566:	f00b fa6f 	bl	800da48 <vPortEnterCritical>
				lr_nw_disconnect_mode = LORA_STATUS_IDLE;
 800256a:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <lora_network_disconnect_to_all_nodes_task+0x5f4>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
				taskEXIT_CRITICAL();
 8002570:	f00b fa9c 	bl	800daac <vPortExitCritical>

			}
			STM_LOG("node device: %d\n", lr_nw_node_index1 + 1, 14);
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <lora_network_disconnect_to_all_nodes_task+0x5e8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	220e      	movs	r2, #14
 800257c:	4619      	mov	r1, r3
 800257e:	4811      	ldr	r0, [pc, #68]	@ (80025c4 <lora_network_disconnect_to_all_nodes_task+0x608>)
 8002580:	f7ff f8c2 	bl	8001708 <STM_LOG>
			if(lr_nw_disconnect_mode == LORA_STATUS_IDLE){
 8002584:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <lora_network_disconnect_to_all_nodes_task+0x5f4>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <lora_network_disconnect_to_all_nodes_task+0x5d4>
				lora_network_send_request_setup_scheduler();
 800258c:	f000 fcca 	bl	8002f24 <lora_network_send_request_setup_scheduler>
			}
			bsp_lora_exit_safe_mode();
 8002590:	f7ff f8a7 	bl	80016e2 <bsp_lora_exit_safe_mode>
			xSemaphoreGive(spi_mutex);
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <lora_network_disconnect_to_all_nodes_task+0x60c>)
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	2300      	movs	r3, #0
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	f008 ff8d 	bl	800b4bc <xQueueGenericSend>
		if(xQueueReceive(all_disconnect_queue, &NotificationValue, portMAX_DELAY)){
 80025a2:	e521      	b.n	8001fe8 <lora_network_disconnect_to_all_nodes_task+0x2c>
 80025a4:	200007b4 	.word	0x200007b4
 80025a8:	0800efac 	.word	0x0800efac
 80025ac:	200007c0 	.word	0x200007c0
 80025b0:	200007b7 	.word	0x200007b7
 80025b4:	200007b0 	.word	0x200007b0
 80025b8:	2000178c 	.word	0x2000178c
 80025bc:	0800efc8 	.word	0x0800efc8
 80025c0:	20001978 	.word	0x20001978
 80025c4:	0800efd8 	.word	0x0800efd8
 80025c8:	200017a0 	.word	0x200017a0

080025cc <lora_network_connect_to_all_nodes_task>:

	}
	vTaskDelete(NULL);
}

void lora_network_connect_to_all_nodes_task(void *param){
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b091      	sub	sp, #68	@ 0x44
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	all_connect_timer = xTimerCreate("connect_all", pdMS_TO_TICKS(1000), pdTRUE, 0, lora_network_timer_task);
 80025d4:	4b7f      	ldr	r3, [pc, #508]	@ (80027d4 <lora_network_connect_to_all_nodes_task+0x208>)
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2300      	movs	r3, #0
 80025da:	2201      	movs	r2, #1
 80025dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025e0:	487d      	ldr	r0, [pc, #500]	@ (80027d8 <lora_network_connect_to_all_nodes_task+0x20c>)
 80025e2:	f00a fd69 	bl	800d0b8 <xTimerCreate>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a7c      	ldr	r2, [pc, #496]	@ (80027dc <lora_network_connect_to_all_nodes_task+0x210>)
 80025ea:	6013      	str	r3, [r2, #0]
	vTimerSetTimerID(all_connect_timer, (void *)SW_TIMER_CONNECT_ALL);
 80025ec:	4b7b      	ldr	r3, [pc, #492]	@ (80027dc <lora_network_connect_to_all_nodes_task+0x210>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00b f8d3 	bl	800d79e <vTimerSetTimerID>

	while(1){
		if(xQueueReceive(all_connect_queue, &NotificationValue, portMAX_DELAY)){
 80025f8:	4b79      	ldr	r3, [pc, #484]	@ (80027e0 <lora_network_connect_to_all_nodes_task+0x214>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	4618      	mov	r0, r3
 8002606:	f009 f989 	bl	800b91c <xQueueReceive>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f3      	beq.n	80025f8 <lora_network_connect_to_all_nodes_task+0x2c>
			xSemaphoreTake(spi_mutex, portMAX_DELAY);
 8002610:	4b74      	ldr	r3, [pc, #464]	@ (80027e4 <lora_network_connect_to_all_nodes_task+0x218>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	4618      	mov	r0, r3
 800261a:	f009 fa61 	bl	800bae0 <xQueueSemaphoreTake>
			bsp_lora_enter_safe_mode();
 800261e:	f7ff f84d 	bl	80016bc <bsp_lora_enter_safe_mode>
			lora_network_send_request_stop_scheduler();
 8002622:	f000 fc2b 	bl	8002e7c <lora_network_send_request_stop_scheduler>

			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002626:	bf00      	nop
 8002628:	4b6f      	ldr	r3, [pc, #444]	@ (80027e8 <lora_network_connect_to_all_nodes_task+0x21c>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4618      	mov	r0, r3
 800262e:	f005 f9f6 	bl	8007a1e <HAL_SPI_GetState>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d1f7      	bne.n	8002628 <lora_network_connect_to_all_nodes_task+0x5c>
			while(bsp_lora_check_cad() == 1);
 8002638:	bf00      	nop
 800263a:	f7ff f8b9 	bl	80017b0 <bsp_lora_check_cad>
 800263e:	4603      	mov	r3, r0
 8002640:	2b01      	cmp	r3, #1
 8002642:	d0fa      	beq.n	800263a <lora_network_connect_to_all_nodes_task+0x6e>
			bsp_lora_set_receive_mode();
 8002644:	f7ff f898 	bl	8001778 <bsp_lora_set_receive_mode>
			if(NotificationValue.cmd == START_ALL){
 8002648:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <lora_network_connect_to_all_nodes_task+0x134>
				while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity){
 8002650:	e005      	b.n	800265e <lora_network_connect_to_all_nodes_task+0x92>
					lr_nw_node_index++;
 8002652:	4b66      	ldr	r3, [pc, #408]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b64      	ldr	r3, [pc, #400]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 800265c:	701a      	strb	r2, [r3, #0]
				while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity){
 800265e:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	4962      	ldr	r1, [pc, #392]	@ (80027f0 <lora_network_connect_to_all_nodes_task+0x224>)
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	440b      	add	r3, r1
 8002672:	3302      	adds	r3, #2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <lora_network_connect_to_all_nodes_task+0xba>
 800267a:	4b5c      	ldr	r3, [pc, #368]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	4b5d      	ldr	r3, [pc, #372]	@ (80027f4 <lora_network_connect_to_all_nodes_task+0x228>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d3e5      	bcc.n	8002652 <lora_network_connect_to_all_nodes_task+0x86>
				}
				if(NODE_DEVICE[lr_nw_node_index].connected == 0 && lr_nw_node_index < lr_nw_node_quantity){
 8002686:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4958      	ldr	r1, [pc, #352]	@ (80027f0 <lora_network_connect_to_all_nodes_task+0x224>)
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	440b      	add	r3, r1
 800269a:	3302      	adds	r3, #2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8259 	bne.w	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
 80026a4:	4b51      	ldr	r3, [pc, #324]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	4b52      	ldr	r3, [pc, #328]	@ (80027f4 <lora_network_connect_to_all_nodes_task+0x228>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f080 8252 	bcs.w	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
					HAL_UART_Transmit(&huart2, "Start connect\n", 15, 2000);
 80026b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80026b6:	220f      	movs	r2, #15
 80026b8:	494f      	ldr	r1, [pc, #316]	@ (80027f8 <lora_network_connect_to_all_nodes_task+0x22c>)
 80026ba:	4850      	ldr	r0, [pc, #320]	@ (80027fc <lora_network_connect_to_all_nodes_task+0x230>)
 80026bc:	f005 ffb8 	bl	8008630 <HAL_UART_Transmit>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 80026c0:	4b4a      	ldr	r3, [pc, #296]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	015b      	lsls	r3, r3, #5
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	4a47      	ldr	r2, [pc, #284]	@ (80027f0 <lora_network_connect_to_all_nodes_task+0x224>)
 80026d2:	1898      	adds	r0, r3, r2
 80026d4:	2303      	movs	r3, #3
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2300      	movs	r3, #0
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	f7ff fa0b 	bl	8001afc <bsp_lora_send_packet_to_node>
					xTimerStart(all_connect_timer, 0);
 80026e6:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <lora_network_connect_to_all_nodes_task+0x210>)
 80026e8:	681c      	ldr	r4, [r3, #0]
 80026ea:	f009 ff3b 	bl	800c564 <xTaskGetTickCount>
 80026ee:	4602      	mov	r2, r0
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2300      	movs	r3, #0
 80026f6:	2101      	movs	r1, #1
 80026f8:	4620      	mov	r0, r4
 80026fa:	f00a fd3b 	bl	800d174 <xTimerGenericCommand>
 80026fe:	e22a      	b.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
				}
			}
			/* connect to specific device here */
			else if(NotificationValue.cmd == START_SPECIFIC){
 8002700:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8081 	bne.w	800280c <lora_network_connect_to_all_nodes_task+0x240>
				HAL_UART_Transmit(&huart2, "Start specific\n", 16, 2000);
 800270a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800270e:	2210      	movs	r2, #16
 8002710:	493b      	ldr	r1, [pc, #236]	@ (8002800 <lora_network_connect_to_all_nodes_task+0x234>)
 8002712:	483a      	ldr	r0, [pc, #232]	@ (80027fc <lora_network_connect_to_all_nodes_task+0x230>)
 8002714:	f005 ff8c 	bl	8008630 <HAL_UART_Transmit>
				for(int i = 0; i < lr_nw_node_quantity; i++){
 8002718:	2300      	movs	r3, #0
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
 800271c:	e014      	b.n	8002748 <lora_network_connect_to_all_nodes_task+0x17c>
					if(NODE_DEVICE[i].id == NotificationValue.value){
 800271e:	4934      	ldr	r1, [pc, #208]	@ (80027f0 <lora_network_connect_to_all_nodes_task+0x224>)
 8002720:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	015b      	lsls	r3, r3, #5
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	440b      	add	r3, r1
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002734:	429a      	cmp	r2, r3
 8002736:	d104      	bne.n	8002742 <lora_network_connect_to_all_nodes_task+0x176>
						lr_nw_node_index = i;
 8002738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4b2b      	ldr	r3, [pc, #172]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 800273e:	701a      	strb	r2, [r3, #0]
						break;
 8002740:	e008      	b.n	8002754 <lora_network_connect_to_all_nodes_task+0x188>
				for(int i = 0; i < lr_nw_node_quantity; i++){
 8002742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002744:	3301      	adds	r3, #1
 8002746:	637b      	str	r3, [r7, #52]	@ 0x34
 8002748:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <lora_network_connect_to_all_nodes_task+0x228>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	4293      	cmp	r3, r2
 8002752:	dbe4      	blt.n	800271e <lora_network_connect_to_all_nodes_task+0x152>
					}
				}
				if(NODE_DEVICE[lr_nw_node_index].connected == 0){
 8002754:	4b25      	ldr	r3, [pc, #148]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4925      	ldr	r1, [pc, #148]	@ (80027f0 <lora_network_connect_to_all_nodes_task+0x224>)
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	440b      	add	r3, r1
 8002768:	3302      	adds	r3, #2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11f      	bne.n	80027b0 <lora_network_connect_to_all_nodes_task+0x1e4>
					bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 8002770:	4b1e      	ldr	r3, [pc, #120]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	015b      	lsls	r3, r3, #5
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	4a1b      	ldr	r2, [pc, #108]	@ (80027f0 <lora_network_connect_to_all_nodes_task+0x224>)
 8002782:	1898      	adds	r0, r3, r2
 8002784:	2303      	movs	r3, #3
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2300      	movs	r3, #0
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	f7ff f9b3 	bl	8001afc <bsp_lora_send_packet_to_node>
					xTimerStart(all_connect_timer, 0);
 8002796:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <lora_network_connect_to_all_nodes_task+0x210>)
 8002798:	681c      	ldr	r4, [r3, #0]
 800279a:	f009 fee3 	bl	800c564 <xTaskGetTickCount>
 800279e:	4602      	mov	r2, r0
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	2101      	movs	r1, #1
 80027a8:	4620      	mov	r0, r4
 80027aa:	f00a fce3 	bl	800d174 <xTimerGenericCommand>
 80027ae:	e1d2      	b.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
				}
				else{
					HAL_UART_Transmit(&huart2, "Node's connected\n", 17, 2000);
 80027b0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80027b4:	2211      	movs	r2, #17
 80027b6:	4913      	ldr	r1, [pc, #76]	@ (8002804 <lora_network_connect_to_all_nodes_task+0x238>)
 80027b8:	4810      	ldr	r0, [pc, #64]	@ (80027fc <lora_network_connect_to_all_nodes_task+0x230>)
 80027ba:	f005 ff39 	bl	8008630 <HAL_UART_Transmit>
					lr_nw_node_index = 0;
 80027be:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <lora_network_connect_to_all_nodes_task+0x220>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]

					taskENTER_CRITICAL();
 80027c4:	f00b f940 	bl	800da48 <vPortEnterCritical>
					lr_nw_connect_mode = LORA_STATUS_IDLE;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <lora_network_connect_to_all_nodes_task+0x23c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 80027ce:	f00b f96d 	bl	800daac <vPortExitCritical>
 80027d2:	e1c0      	b.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
 80027d4:	0800319d 	.word	0x0800319d
 80027d8:	0800efec 	.word	0x0800efec
 80027dc:	20001788 	.word	0x20001788
 80027e0:	20001794 	.word	0x20001794
 80027e4:	200017a0 	.word	0x200017a0
 80027e8:	2000007c 	.word	0x2000007c
 80027ec:	200007b3 	.word	0x200007b3
 80027f0:	200007c0 	.word	0x200007c0
 80027f4:	200007b0 	.word	0x200007b0
 80027f8:	0800eff8 	.word	0x0800eff8
 80027fc:	20001978 	.word	0x20001978
 8002800:	0800f008 	.word	0x0800f008
 8002804:	0800f018 	.word	0x0800f018
 8002808:	200007b6 	.word	0x200007b6
				}
			}

			/* when receive ack cmd from the node that the gw is requesting to connect to */
			else if(NotificationValue.cmd == ACK){
 800280c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002810:	2b05      	cmp	r3, #5
 8002812:	f040 80a3 	bne.w	800295c <lora_network_connect_to_all_nodes_task+0x390>
				uint8_t buf[30];
				sprintf(buf, "Connect to node %d", lr_nw_node_index + 1);
 8002816:	4b85      	ldr	r3, [pc, #532]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	f107 0308 	add.w	r3, r7, #8
 8002820:	4983      	ldr	r1, [pc, #524]	@ (8002a30 <lora_network_connect_to_all_nodes_task+0x464>)
 8002822:	4618      	mov	r0, r3
 8002824:	f00b fee4 	bl	800e5f0 <siprintf>
				HAL_UART_Transmit(&huart2, buf, strlen(buf), 2000);
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fcd7 	bl	80001e0 <strlen>
 8002832:	4603      	mov	r3, r0
 8002834:	b29a      	uxth	r2, r3
 8002836:	f107 0108 	add.w	r1, r7, #8
 800283a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800283e:	487d      	ldr	r0, [pc, #500]	@ (8002a34 <lora_network_connect_to_all_nodes_task+0x468>)
 8002840:	f005 fef6 	bl	8008630 <HAL_UART_Transmit>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT);
 8002844:	4b79      	ldr	r3, [pc, #484]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	4a78      	ldr	r2, [pc, #480]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 8002856:	4413      	add	r3, r2
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f8eb 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8002860:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if(packet_index != -1){
 8002862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d00d      	beq.n	8002886 <lora_network_connect_to_all_nodes_task+0x2ba>
					bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index], packet_index);
 800286a:	4b70      	ldr	r3, [pc, #448]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	015b      	lsls	r3, r3, #5
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 800287c:	4413      	add	r3, r2
 800287e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f90a 	bl	8001a9a <bsp_lora_remove_packet_from_node_send_packets>
				}

				if(lr_nw_connect_mode == LORA_CONNECT_MODE_ALL){
 8002886:	4b6d      	ldr	r3, [pc, #436]	@ (8002a3c <lora_network_connect_to_all_nodes_task+0x470>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d156      	bne.n	800293c <lora_network_connect_to_all_nodes_task+0x370>
					do{
						lr_nw_node_index++;
 800288e:	4b67      	ldr	r3, [pc, #412]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b65      	ldr	r3, [pc, #404]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 8002898:	701a      	strb	r2, [r3, #0]
					}while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity);
 800289a:	4b64      	ldr	r3, [pc, #400]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	4965      	ldr	r1, [pc, #404]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	3302      	adds	r3, #2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <lora_network_connect_to_all_nodes_task+0x2f6>
 80028b6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	4b61      	ldr	r3, [pc, #388]	@ (8002a40 <lora_network_connect_to_all_nodes_task+0x474>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3e5      	bcc.n	800288e <lora_network_connect_to_all_nodes_task+0x2c2>

					if(lr_nw_node_index < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index].connected == 0){
 80028c2:	4b5a      	ldr	r3, [pc, #360]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002a40 <lora_network_connect_to_all_nodes_task+0x474>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	f080 8143 	bcs.w	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
 80028d0:	4b56      	ldr	r3, [pc, #344]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4958      	ldr	r1, [pc, #352]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	3302      	adds	r3, #2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 8134 	bne.w	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
						HAL_UART_Transmit(&huart2, "ack notify\n", 11, 2000);
 80028ee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80028f2:	220b      	movs	r2, #11
 80028f4:	4953      	ldr	r1, [pc, #332]	@ (8002a44 <lora_network_connect_to_all_nodes_task+0x478>)
 80028f6:	484f      	ldr	r0, [pc, #316]	@ (8002a34 <lora_network_connect_to_all_nodes_task+0x468>)
 80028f8:	f005 fe9a 	bl	8008630 <HAL_UART_Transmit>
						bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 80028fc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 800290e:	1898      	adds	r0, r3, r2
 8002910:	2303      	movs	r3, #3
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2300      	movs	r3, #0
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	f7ff f8ed 	bl	8001afc <bsp_lora_send_packet_to_node>
						xTimerStart(all_connect_timer, 0);
 8002922:	4b49      	ldr	r3, [pc, #292]	@ (8002a48 <lora_network_connect_to_all_nodes_task+0x47c>)
 8002924:	681c      	ldr	r4, [r3, #0]
 8002926:	f009 fe1d 	bl	800c564 <xTaskGetTickCount>
 800292a:	4602      	mov	r2, r0
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2300      	movs	r3, #0
 8002932:	2101      	movs	r1, #1
 8002934:	4620      	mov	r0, r4
 8002936:	f00a fc1d 	bl	800d174 <xTimerGenericCommand>
 800293a:	e10c      	b.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
					}
				}
				else if(lr_nw_connect_mode == LORA_CONNECT_MODE_SPECIFIC){
 800293c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <lora_network_connect_to_all_nodes_task+0x470>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b02      	cmp	r3, #2
 8002942:	f040 8108 	bne.w	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
					lr_nw_node_index = 0;
 8002946:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]

					taskENTER_CRITICAL();
 800294c:	f00b f87c 	bl	800da48 <vPortEnterCritical>
					lr_nw_connect_mode = LORA_STATUS_IDLE;
 8002950:	4b3a      	ldr	r3, [pc, #232]	@ (8002a3c <lora_network_connect_to_all_nodes_task+0x470>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
					taskEXIT_CRITICAL();
 8002956:	f00b f8a9 	bl	800daac <vPortExitCritical>
 800295a:	e0fc      	b.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
				}

			}

			/* receive nak or timeout */
			else if(NotificationValue.cmd == NAK || NotificationValue.cmd == TIMEOUT){
 800295c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002960:	2b06      	cmp	r3, #6
 8002962:	d004      	beq.n	800296e <lora_network_connect_to_all_nodes_task+0x3a2>
 8002964:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002968:	2b07      	cmp	r3, #7
 800296a:	f040 80f4 	bne.w	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
				HAL_UART_Transmit(&huart2, "timeout\n", 8, 2000);
 800296e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002972:	2208      	movs	r2, #8
 8002974:	4935      	ldr	r1, [pc, #212]	@ (8002a4c <lora_network_connect_to_all_nodes_task+0x480>)
 8002976:	482f      	ldr	r0, [pc, #188]	@ (8002a34 <lora_network_connect_to_all_nodes_task+0x468>)
 8002978:	f005 fe5a 	bl	8008630 <HAL_UART_Transmit>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT);
 800297c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 800298e:	4413      	add	r3, r2
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f84f 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8002998:	6338      	str	r0, [r7, #48]	@ 0x30
				if(packet_index != -1){
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	f000 80d9 	beq.w	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
					if(NODE_DEVICE[lr_nw_node_index].last_lora_send_packet[packet_index].ttl > 0){
 80029a4:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4823      	ldr	r0, [pc, #140]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 80029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ae:	461a      	mov	r2, r3
 80029b0:	0052      	lsls	r2, r2, #1
 80029b2:	441a      	add	r2, r3
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	1ad2      	subs	r2, r2, r3
 80029b8:	460b      	mov	r3, r1
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	1a5b      	subs	r3, r3, r1
 80029c2:	4413      	add	r3, r2
 80029c4:	4403      	add	r3, r0
 80029c6:	3308      	adds	r3, #8
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d040      	beq.n	8002a50 <lora_network_connect_to_all_nodes_task+0x484>
						NODE_DEVICE[lr_nw_node_index].error = 1;
 80029ce:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4918      	ldr	r1, [pc, #96]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	015b      	lsls	r3, r3, #5
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	3304      	adds	r3, #4
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
						bsp_lora_resend_packet(&NODE_DEVICE[lr_nw_node_index].last_lora_send_packet[packet_index]);
 80029e8:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <lora_network_connect_to_all_nodes_task+0x460>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	461a      	mov	r2, r3
 80029f2:	0052      	lsls	r2, r2, #1
 80029f4:	441a      	add	r2, r3
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	1ad2      	subs	r2, r2, r3
 80029fa:	460b      	mov	r3, r1
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	015b      	lsls	r3, r3, #5
 8002a02:	1a5b      	subs	r3, r3, r1
 8002a04:	4413      	add	r3, r2
 8002a06:	4a0c      	ldr	r2, [pc, #48]	@ (8002a38 <lora_network_connect_to_all_nodes_task+0x46c>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	3305      	adds	r3, #5
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f97f 	bl	8001d10 <bsp_lora_resend_packet>

						xTimerStart(all_connect_timer, 0);
 8002a12:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <lora_network_connect_to_all_nodes_task+0x47c>)
 8002a14:	681c      	ldr	r4, [r3, #0]
 8002a16:	f009 fda5 	bl	800c564 <xTaskGetTickCount>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2300      	movs	r3, #0
 8002a22:	2101      	movs	r1, #1
 8002a24:	4620      	mov	r0, r4
 8002a26:	f00a fba5 	bl	800d174 <xTimerGenericCommand>
 8002a2a:	e094      	b.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
 8002a2c:	200007b3 	.word	0x200007b3
 8002a30:	0800f02c 	.word	0x0800f02c
 8002a34:	20001978 	.word	0x20001978
 8002a38:	200007c0 	.word	0x200007c0
 8002a3c:	200007b6 	.word	0x200007b6
 8002a40:	200007b0 	.word	0x200007b0
 8002a44:	0800ef94 	.word	0x0800ef94
 8002a48:	20001788 	.word	0x20001788
 8002a4c:	0800efa0 	.word	0x0800efa0
					}
					else{
						STM_LOG("Can't connect to node %3d\n", lr_nw_node_index + 1, 27);
 8002a50:	4b58      	ldr	r3, [pc, #352]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	221b      	movs	r2, #27
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4857      	ldr	r0, [pc, #348]	@ (8002bb8 <lora_network_connect_to_all_nodes_task+0x5ec>)
 8002a5c:	f7fe fe54 	bl	8001708 <STM_LOG>
						NODE_DEVICE[lr_nw_node_index].error = 2;
 8002a60:	4b54      	ldr	r3, [pc, #336]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4955      	ldr	r1, [pc, #340]	@ (8002bbc <lora_network_connect_to_all_nodes_task+0x5f0>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	3304      	adds	r3, #4
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
						bsp_lora_remove_packet_from_node_send_packets(&NODE_DEVICE[lr_nw_node_index], packet_index);
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	015b      	lsls	r3, r3, #5
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8002bbc <lora_network_connect_to_all_nodes_task+0x5f0>)
 8002a8c:	4413      	add	r3, r2
 8002a8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f802 	bl	8001a9a <bsp_lora_remove_packet_from_node_send_packets>

						if(lr_nw_connect_mode == LORA_CONNECT_MODE_ALL){
 8002a96:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc0 <lora_network_connect_to_all_nodes_task+0x5f4>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d14d      	bne.n	8002b3a <lora_network_connect_to_all_nodes_task+0x56e>
							do{
								lr_nw_node_index++;
 8002a9e:	4b45      	ldr	r3, [pc, #276]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b43      	ldr	r3, [pc, #268]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002aa8:	701a      	strb	r2, [r3, #0]
							}while(NODE_DEVICE[lr_nw_node_index].connected == 1 && lr_nw_node_index < lr_nw_node_quantity);
 8002aaa:	4b42      	ldr	r3, [pc, #264]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4942      	ldr	r1, [pc, #264]	@ (8002bbc <lora_network_connect_to_all_nodes_task+0x5f0>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	015b      	lsls	r3, r3, #5
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	3302      	adds	r3, #2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <lora_network_connect_to_all_nodes_task+0x506>
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4b3e      	ldr	r3, [pc, #248]	@ (8002bc4 <lora_network_connect_to_all_nodes_task+0x5f8>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d3e5      	bcc.n	8002a9e <lora_network_connect_to_all_nodes_task+0x4d2>
							if(lr_nw_node_index < lr_nw_node_quantity && NODE_DEVICE[lr_nw_node_index].connected == 0){
 8002ad2:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc4 <lora_network_connect_to_all_nodes_task+0x5f8>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d23b      	bcs.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
 8002ade:	4b35      	ldr	r3, [pc, #212]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4935      	ldr	r1, [pc, #212]	@ (8002bbc <lora_network_connect_to_all_nodes_task+0x5f0>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	015b      	lsls	r3, r3, #5
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	3302      	adds	r3, #2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d12d      	bne.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
								bsp_lora_send_packet_to_node(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT, 0, NULL, 0, 3);
 8002afa:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	015b      	lsls	r3, r3, #5
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002bbc <lora_network_connect_to_all_nodes_task+0x5f0>)
 8002b0c:	1898      	adds	r0, r3, r2
 8002b0e:	2303      	movs	r3, #3
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	2300      	movs	r3, #0
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2300      	movs	r3, #0
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f7fe ffee 	bl	8001afc <bsp_lora_send_packet_to_node>
								xTimerStart(all_connect_timer, 0);
 8002b20:	4b29      	ldr	r3, [pc, #164]	@ (8002bc8 <lora_network_connect_to_all_nodes_task+0x5fc>)
 8002b22:	681c      	ldr	r4, [r3, #0]
 8002b24:	f009 fd1e 	bl	800c564 <xTaskGetTickCount>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2101      	movs	r1, #1
 8002b32:	4620      	mov	r0, r4
 8002b34:	f00a fb1e 	bl	800d174 <xTimerGenericCommand>
 8002b38:	e00d      	b.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
							}
						}
						else if(lr_nw_connect_mode == LORA_CONNECT_MODE_SPECIFIC){
 8002b3a:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <lora_network_connect_to_all_nodes_task+0x5f4>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d109      	bne.n	8002b56 <lora_network_connect_to_all_nodes_task+0x58a>
							lr_nw_node_index = 0;
 8002b42:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
							taskENTER_CRITICAL();
 8002b48:	f00a ff7e 	bl	800da48 <vPortEnterCritical>
							lr_nw_connect_mode = LORA_STATUS_IDLE;
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <lora_network_connect_to_all_nodes_task+0x5f4>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
							taskEXIT_CRITICAL();
 8002b52:	f00a ffab 	bl	800daac <vPortExitCritical>
				}

			}


			if(lr_nw_node_index >= lr_nw_node_quantity){
 8002b56:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <lora_network_connect_to_all_nodes_task+0x5f8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d310      	bcc.n	8002b84 <lora_network_connect_to_all_nodes_task+0x5b8>

				HAL_UART_Transmit(&huart2, "Full nodes\n", 11, 2000);
 8002b62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b66:	220b      	movs	r2, #11
 8002b68:	4918      	ldr	r1, [pc, #96]	@ (8002bcc <lora_network_connect_to_all_nodes_task+0x600>)
 8002b6a:	4819      	ldr	r0, [pc, #100]	@ (8002bd0 <lora_network_connect_to_all_nodes_task+0x604>)
 8002b6c:	f005 fd60 	bl	8008630 <HAL_UART_Transmit>
				lr_nw_node_index = 0;
 8002b70:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]

				taskENTER_CRITICAL();
 8002b76:	f00a ff67 	bl	800da48 <vPortEnterCritical>
				lr_nw_connect_mode = LORA_STATUS_IDLE;
 8002b7a:	4b11      	ldr	r3, [pc, #68]	@ (8002bc0 <lora_network_connect_to_all_nodes_task+0x5f4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
				taskEXIT_CRITICAL();
 8002b80:	f00a ff94 	bl	800daac <vPortExitCritical>

			}
			STM_LOG("node device: %d\n", lr_nw_node_index + 1, 14);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <lora_network_connect_to_all_nodes_task+0x5e8>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	220e      	movs	r2, #14
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4811      	ldr	r0, [pc, #68]	@ (8002bd4 <lora_network_connect_to_all_nodes_task+0x608>)
 8002b90:	f7fe fdba 	bl	8001708 <STM_LOG>

			if(lr_nw_connect_mode == LORA_STATUS_IDLE){
 8002b94:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <lora_network_connect_to_all_nodes_task+0x5f4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <lora_network_connect_to_all_nodes_task+0x5d4>
				lora_network_send_request_setup_scheduler();
 8002b9c:	f000 f9c2 	bl	8002f24 <lora_network_send_request_setup_scheduler>
			}
			bsp_lora_exit_safe_mode();
 8002ba0:	f7fe fd9f 	bl	80016e2 <bsp_lora_exit_safe_mode>
			xSemaphoreGive(spi_mutex);
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <lora_network_connect_to_all_nodes_task+0x60c>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	f008 fc85 	bl	800b4bc <xQueueGenericSend>
		if(xQueueReceive(all_connect_queue, &NotificationValue, portMAX_DELAY)){
 8002bb2:	e521      	b.n	80025f8 <lora_network_connect_to_all_nodes_task+0x2c>
 8002bb4:	200007b3 	.word	0x200007b3
 8002bb8:	0800f040 	.word	0x0800f040
 8002bbc:	200007c0 	.word	0x200007c0
 8002bc0:	200007b6 	.word	0x200007b6
 8002bc4:	200007b0 	.word	0x200007b0
 8002bc8:	20001788 	.word	0x20001788
 8002bcc:	0800f05c 	.word	0x0800f05c
 8002bd0:	20001978 	.word	0x20001978
 8002bd4:	0800efd8 	.word	0x0800efd8
 8002bd8:	200017a0 	.word	0x200017a0

08002bdc <lora_network_send_read_request_to_all_nodes_task>:

	}
	vTaskDelete(NULL);
}

void lora_network_send_read_request_to_all_nodes_task(void *param){
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b089      	sub	sp, #36	@ 0x24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	send_data_timer = xTimerCreate("send_data", pdMS_TO_TICKS(1000), pdTRUE, 0, lora_network_timer_task);
 8002be4:	4b97      	ldr	r3, [pc, #604]	@ (8002e44 <lora_network_send_read_request_to_all_nodes_task+0x268>)
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	2201      	movs	r2, #1
 8002bec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bf0:	4895      	ldr	r0, [pc, #596]	@ (8002e48 <lora_network_send_read_request_to_all_nodes_task+0x26c>)
 8002bf2:	f00a fa61 	bl	800d0b8 <xTimerCreate>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4a94      	ldr	r2, [pc, #592]	@ (8002e4c <lora_network_send_read_request_to_all_nodes_task+0x270>)
 8002bfa:	6013      	str	r3, [r2, #0]
	vTimerSetTimerID(send_data_timer, (void *)SW_TIMER_SEND_REQUEST);
 8002bfc:	4b93      	ldr	r3, [pc, #588]	@ (8002e4c <lora_network_send_read_request_to_all_nodes_task+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2102      	movs	r1, #2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f00a fdcb 	bl	800d79e <vTimerSetTimerID>
	while(1){
		if(xQueueReceive(send_request_queue, &NotificationValue, portMAX_DELAY)){
 8002c08:	4b91      	ldr	r3, [pc, #580]	@ (8002e50 <lora_network_send_read_request_to_all_nodes_task+0x274>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f107 010c 	add.w	r1, r7, #12
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	4618      	mov	r0, r3
 8002c16:	f008 fe81 	bl	800b91c <xQueueReceive>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f3      	beq.n	8002c08 <lora_network_send_read_request_to_all_nodes_task+0x2c>
			xSemaphoreTake(spi_mutex, portMAX_DELAY);
 8002c20:	4b8c      	ldr	r3, [pc, #560]	@ (8002e54 <lora_network_send_read_request_to_all_nodes_task+0x278>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f008 ff59 	bl	800bae0 <xQueueSemaphoreTake>
			bsp_lora_enter_safe_mode();
 8002c2e:	f7fe fd45 	bl	80016bc <bsp_lora_enter_safe_mode>

			while(HAL_SPI_GetState(myLoRa.hSPIx) != HAL_SPI_STATE_READY);
 8002c32:	bf00      	nop
 8002c34:	4b88      	ldr	r3, [pc, #544]	@ (8002e58 <lora_network_send_read_request_to_all_nodes_task+0x27c>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f004 fef0 	bl	8007a1e <HAL_SPI_GetState>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d1f7      	bne.n	8002c34 <lora_network_send_read_request_to_all_nodes_task+0x58>
			while(bsp_lora_check_cad() == 1);
 8002c44:	bf00      	nop
 8002c46:	f7fe fdb3 	bl	80017b0 <bsp_lora_check_cad>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d0fa      	beq.n	8002c46 <lora_network_send_read_request_to_all_nodes_task+0x6a>

			STM_LOG("send notice v: %2d\n", NotificationValue.cmd, 19);
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	2213      	movs	r2, #19
 8002c54:	4619      	mov	r1, r3
 8002c56:	4881      	ldr	r0, [pc, #516]	@ (8002e5c <lora_network_send_read_request_to_all_nodes_task+0x280>)
 8002c58:	f7fe fd56 	bl	8001708 <STM_LOG>

			if(NotificationValue.cmd == START_SEND_REQUEST){
 8002c5c:	7b3b      	ldrb	r3, [r7, #12]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d126      	bne.n	8002cb0 <lora_network_send_read_request_to_all_nodes_task+0xd4>
				STM_LOG("send request n%2d\n", lr_nw_send_request_index, 17);
 8002c62:	4b7f      	ldr	r3, [pc, #508]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2211      	movs	r2, #17
 8002c68:	4619      	mov	r1, r3
 8002c6a:	487e      	ldr	r0, [pc, #504]	@ (8002e64 <lora_network_send_read_request_to_all_nodes_task+0x288>)
 8002c6c:	f7fe fd4c 	bl	8001708 <STM_LOG>
				bsp_lora_send_packet_to_node(&CONNECTED_NODE[lr_nw_send_request_index], LORA_CMD_READ_DATA, 0, NULL, 0, 3);
 8002c70:	4b7b      	ldr	r3, [pc, #492]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	015b      	lsls	r3, r3, #5
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	4a79      	ldr	r2, [pc, #484]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002c82:	1898      	adds	r0, r3, r2
 8002c84:	2303      	movs	r3, #3
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2103      	movs	r1, #3
 8002c92:	f7fe ff33 	bl	8001afc <bsp_lora_send_packet_to_node>
				xTimerStart(send_data_timer, 0);
 8002c96:	4b6d      	ldr	r3, [pc, #436]	@ (8002e4c <lora_network_send_read_request_to_all_nodes_task+0x270>)
 8002c98:	681c      	ldr	r4, [r3, #0]
 8002c9a:	f009 fc63 	bl	800c564 <xTaskGetTickCount>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f00a fa63 	bl	800d174 <xTimerGenericCommand>
 8002cae:	e0b6      	b.n	8002e1e <lora_network_send_read_request_to_all_nodes_task+0x242>
			}

			else if(NotificationValue.cmd == ACK){
 8002cb0:	7b3b      	ldrb	r3, [r7, #12]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d12e      	bne.n	8002d14 <lora_network_send_read_request_to_all_nodes_task+0x138>
				STM_LOG("ack send request n%2d\n", lr_nw_send_request_index, 22);
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2216      	movs	r2, #22
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	486b      	ldr	r0, [pc, #428]	@ (8002e6c <lora_network_send_read_request_to_all_nodes_task+0x290>)
 8002cc0:	f7fe fd22 	bl	8001708 <STM_LOG>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], LORA_CMD_READ_DATA);
 8002cc4:	4b66      	ldr	r3, [pc, #408]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	015b      	lsls	r3, r3, #5
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	4a64      	ldr	r2, [pc, #400]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	2103      	movs	r1, #3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe feab 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8002ce0:	6138      	str	r0, [r7, #16]
				if(packet_index != -1){
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d00d      	beq.n	8002d06 <lora_network_send_read_request_to_all_nodes_task+0x12a>
					bsp_lora_remove_packet_from_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], packet_index);
 8002cea:	4b5d      	ldr	r3, [pc, #372]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	015b      	lsls	r3, r3, #5
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	6939      	ldr	r1, [r7, #16]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe feca 	bl	8001a9a <bsp_lora_remove_packet_from_node_send_packets>
				}
				lr_nw_send_request_index++;
 8002d06:	4b56      	ldr	r3, [pc, #344]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b54      	ldr	r3, [pc, #336]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e084      	b.n	8002e1e <lora_network_send_read_request_to_all_nodes_task+0x242>
			}

			else if(NotificationValue.cmd == NAK || NotificationValue.cmd == TIMEOUT){
 8002d14:	7b3b      	ldrb	r3, [r7, #12]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d002      	beq.n	8002d20 <lora_network_send_read_request_to_all_nodes_task+0x144>
 8002d1a:	7b3b      	ldrb	r3, [r7, #12]
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	d17e      	bne.n	8002e1e <lora_network_send_read_request_to_all_nodes_task+0x242>
				STM_LOG("timeout or nak n%2d\n", lr_nw_send_request_index, 19);
 8002d20:	4b4f      	ldr	r3, [pc, #316]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2213      	movs	r2, #19
 8002d26:	4619      	mov	r1, r3
 8002d28:	4851      	ldr	r0, [pc, #324]	@ (8002e70 <lora_network_send_read_request_to_all_nodes_task+0x294>)
 8002d2a:	f7fe fced 	bl	8001708 <STM_LOG>
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], LORA_CMD_READ_DATA);
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002d40:	4413      	add	r3, r2
 8002d42:	2103      	movs	r1, #3
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe fe76 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8002d4a:	6178      	str	r0, [r7, #20]
				if(packet_index != -1){
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d064      	beq.n	8002e1e <lora_network_send_read_request_to_all_nodes_task+0x242>
					if(CONNECTED_NODE[lr_nw_send_request_index].last_lora_send_packet[packet_index].ttl > 0){
 8002d54:	4b42      	ldr	r3, [pc, #264]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4843      	ldr	r0, [pc, #268]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	0052      	lsls	r2, r2, #1
 8002d62:	441a      	add	r2, r3
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	1ad2      	subs	r2, r2, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	1a5b      	subs	r3, r3, r1
 8002d72:	4413      	add	r3, r2
 8002d74:	4403      	add	r3, r0
 8002d76:	3308      	adds	r3, #8
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d027      	beq.n	8002dce <lora_network_send_read_request_to_all_nodes_task+0x1f2>
						CONNECTED_NODE[lr_nw_send_request_index].error = 1;
 8002d7e:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	4938      	ldr	r1, [pc, #224]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	015b      	lsls	r3, r3, #5
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	3304      	adds	r3, #4
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
						bsp_lora_resend_packet(&CONNECTED_NODE[lr_nw_send_request_index].last_lora_send_packet);
 8002d98:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	015b      	lsls	r3, r3, #5
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	4a2f      	ldr	r2, [pc, #188]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002daa:	4413      	add	r3, r2
 8002dac:	3305      	adds	r3, #5
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe ffae 	bl	8001d10 <bsp_lora_resend_packet>
						xTimerStart(send_data_timer, 0);
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <lora_network_send_read_request_to_all_nodes_task+0x270>)
 8002db6:	681c      	ldr	r4, [r3, #0]
 8002db8:	f009 fbd4 	bl	800c564 <xTaskGetTickCount>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f00a f9d4 	bl	800d174 <xTimerGenericCommand>
 8002dcc:	e027      	b.n	8002e1e <lora_network_send_read_request_to_all_nodes_task+0x242>
					}
					else{
						CONNECTED_NODE[lr_nw_send_request_index].error = 2;
 8002dce:	4b24      	ldr	r3, [pc, #144]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4924      	ldr	r1, [pc, #144]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	3304      	adds	r3, #4
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
						bsp_lora_remove_packet_from_node_send_packets(&CONNECTED_NODE[lr_nw_send_request_index], packet_index);
 8002de8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	015b      	lsls	r3, r3, #5
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e68 <lora_network_send_read_request_to_all_nodes_task+0x28c>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fe4b 	bl	8001a9a <bsp_lora_remove_packet_from_node_send_packets>
						STM_LOG("error n%2d\n", lr_nw_send_request_index, 10);
 8002e04:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	220a      	movs	r2, #10
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4819      	ldr	r0, [pc, #100]	@ (8002e74 <lora_network_send_read_request_to_all_nodes_task+0x298>)
 8002e0e:	f7fe fc7b 	bl	8001708 <STM_LOG>
						lr_nw_send_request_index++;
 8002e12:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002e1c:	701a      	strb	r2, [r3, #0]
					}
				}


			}
			if(lr_nw_send_request_index >= lr_nw_connected_node_quantity)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <lora_network_send_read_request_to_all_nodes_task+0x29c>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <lora_network_send_read_request_to_all_nodes_task+0x254>
				lr_nw_send_request_index = 0;
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <lora_network_send_read_request_to_all_nodes_task+0x284>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]

			bsp_lora_exit_safe_mode();
 8002e30:	f7fe fc57 	bl	80016e2 <bsp_lora_exit_safe_mode>
			xSemaphoreGive(spi_mutex);
 8002e34:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <lora_network_send_read_request_to_all_nodes_task+0x278>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f008 fb3d 	bl	800b4bc <xQueueGenericSend>
		if(xQueueReceive(send_request_queue, &NotificationValue, portMAX_DELAY)){
 8002e42:	e6e1      	b.n	8002c08 <lora_network_send_read_request_to_all_nodes_task+0x2c>
 8002e44:	0800319d 	.word	0x0800319d
 8002e48:	0800f068 	.word	0x0800f068
 8002e4c:	20001790 	.word	0x20001790
 8002e50:	2000179c 	.word	0x2000179c
 8002e54:	200017a0 	.word	0x200017a0
 8002e58:	2000007c 	.word	0x2000007c
 8002e5c:	0800f074 	.word	0x0800f074
 8002e60:	200007b5 	.word	0x200007b5
 8002e64:	0800f088 	.word	0x0800f088
 8002e68:	20000f9c 	.word	0x20000f9c
 8002e6c:	0800f09c 	.word	0x0800f09c
 8002e70:	0800f0b4 	.word	0x0800f0b4
 8002e74:	0800f0cc 	.word	0x0800f0cc
 8002e78:	200007b1 	.word	0x200007b1

08002e7c <lora_network_send_request_stop_scheduler>:
		}

	}
}

void lora_network_send_request_stop_scheduler(){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8002e80:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <lora_network_send_request_stop_scheduler+0x30>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0201 	mvn.w	r2, #1
 8002e88:	611a      	str	r2, [r3, #16]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8002e8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 8002e9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Stop_IT(&htim2);
 8002ea2:	4802      	ldr	r0, [pc, #8]	@ (8002eac <lora_network_send_request_stop_scheduler+0x30>)
 8002ea4:	f004 ffbe 	bl	8007e24 <HAL_TIM_Base_Stop_IT>
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200018e8 	.word	0x200018e8

08002eb0 <lora_network_send_request_start_scheduler>:

void lora_network_send_request_start_scheduler(){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8002eb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 8002ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ec8:	2200      	movs	r2, #0
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8002ecc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8002edc:	4802      	ldr	r0, [pc, #8]	@ (8002ee8 <lora_network_send_request_start_scheduler+0x38>)
 8002ede:	f004 ff3f 	bl	8007d60 <HAL_TIM_Base_Start_IT>
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200018e8 	.word	0x200018e8

08002eec <lora_network_send_request_reset_scheduler>:

void lora_network_send_request_reset_scheduler(){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	lora_network_send_request_stop_scheduler();
 8002ef0:	f7ff ffc4 	bl	8002e7c <lora_network_send_request_stop_scheduler>
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8002ef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 8002f04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f08:	2200      	movs	r2, #0
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8002f0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]
	lora_network_send_request_start_scheduler();
 8002f1c:	f7ff ffc8 	bl	8002eb0 <lora_network_send_request_start_scheduler>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <lora_network_send_request_setup_scheduler>:


void lora_network_send_request_setup_scheduler(){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
	if(lr_nw_connected_node_quantity > 0){
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <lora_network_send_request_setup_scheduler+0x80>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d032      	beq.n	8002f98 <lora_network_send_request_setup_scheduler+0x74>
		HAL_UART_Transmit(&huart2, "setup\n", 6, 2000);
 8002f32:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f36:	2206      	movs	r2, #6
 8002f38:	491b      	ldr	r1, [pc, #108]	@ (8002fa8 <lora_network_send_request_setup_scheduler+0x84>)
 8002f3a:	481c      	ldr	r0, [pc, #112]	@ (8002fac <lora_network_send_request_setup_scheduler+0x88>)
 8002f3c:	f005 fb78 	bl	8008630 <HAL_UART_Transmit>
		STM_LOG("nqtt: %2d\n", lr_nw_connected_node_quantity, 10);
 8002f40:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <lora_network_send_request_setup_scheduler+0x80>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	220a      	movs	r2, #10
 8002f46:	4619      	mov	r1, r3
 8002f48:	4819      	ldr	r0, [pc, #100]	@ (8002fb0 <lora_network_send_request_setup_scheduler+0x8c>)
 8002f4a:	f7fe fbdd 	bl	8001708 <STM_LOG>

		lr_nw_last_connected_node_quantity = lr_nw_connected_node_quantity;
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <lora_network_send_request_setup_scheduler+0x80>)
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <lora_network_send_request_setup_scheduler+0x90>)
 8002f54:	701a      	strb	r2, [r3, #0]
		uint32_t time_interval = SEND_REQUEST_TIME_PERIOD / lr_nw_connected_node_quantity;
 8002f56:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <lora_network_send_request_setup_scheduler+0x80>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f64:	607b      	str	r3, [r7, #4]
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8002f66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;
 8002f76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM2->ARR = time_interval - 1;
 8002f7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

		if(semaphore_count == 0){
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <lora_network_send_request_setup_scheduler+0x94>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <lora_network_send_request_setup_scheduler+0x78>
			lora_network_send_request_start_scheduler();
 8002f92:	f7ff ff8d 	bl	8002eb0 <lora_network_send_request_start_scheduler>
	}

	else{
		lora_network_send_request_stop_scheduler();
	}
}
 8002f96:	e001      	b.n	8002f9c <lora_network_send_request_setup_scheduler+0x78>
		lora_network_send_request_stop_scheduler();
 8002f98:	f7ff ff70 	bl	8002e7c <lora_network_send_request_stop_scheduler>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200007b1 	.word	0x200007b1
 8002fa8:	0800f0d8 	.word	0x0800f0d8
 8002fac:	20001978 	.word	0x20001978
 8002fb0:	0800f0e0 	.word	0x0800f0e0
 8002fb4:	200007b2 	.word	0x200007b2
 8002fb8:	200017a8 	.word	0x200017a8

08002fbc <lora_network_send_request_scheduler>:

void lora_network_send_request_scheduler(){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
	if(semaphore_count == 0){
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <lora_network_send_request_scheduler+0x54>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11c      	bne.n	8003006 <lora_network_send_request_scheduler+0x4a>
		STM_LOG("lr_nw_scheduler\n", 0, 16);
 8002fcc:	2210      	movs	r2, #16
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4810      	ldr	r0, [pc, #64]	@ (8003014 <lora_network_send_request_scheduler+0x58>)
 8002fd2:	f7fe fb99 	bl	8001708 <STM_LOG>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
		connection_task_notification_value_t NotificationValue;
		NotificationValue.cmd = START_SEND_REQUEST;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	703b      	strb	r3, [r7, #0]
		NotificationValue.value = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	707b      	strb	r3, [r7, #1]
		xQueueSendFromISR(send_request_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <lora_network_send_request_scheduler+0x5c>)
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	1d3a      	adds	r2, r7, #4
 8002fe8:	4639      	mov	r1, r7
 8002fea:	2300      	movs	r3, #0
 8002fec:	f008 fb68 	bl	800b6c0 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <lora_network_send_request_scheduler+0x4a>
 8002ff6:	4b09      	ldr	r3, [pc, #36]	@ (800301c <lora_network_send_request_scheduler+0x60>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
	}

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200017a8 	.word	0x200017a8
 8003014:	0800f0ec 	.word	0x0800f0ec
 8003018:	2000179c 	.word	0x2000179c
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <lora_network_handle_last_lora_send_packets_task>:

void lora_network_handle_last_lora_send_packets_task(void *param){
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	connection_task_notification_value_t NotificationValue;
	while(1){
		xSemaphoreTake(last_lora_send_packet_counting_semaphore, portMAX_DELAY);
 8003028:	4b50      	ldr	r3, [pc, #320]	@ (800316c <lora_network_handle_last_lora_send_packets_task+0x14c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	4618      	mov	r0, r3
 8003032:	f008 fd55 	bl	800bae0 <xQueueSemaphoreTake>
		xSemaphoreTake(spi_mutex, portMAX_DELAY);
 8003036:	4b4e      	ldr	r3, [pc, #312]	@ (8003170 <lora_network_handle_last_lora_send_packets_task+0x150>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f04f 31ff 	mov.w	r1, #4294967295
 800303e:	4618      	mov	r0, r3
 8003040:	f008 fd4e 	bl	800bae0 <xQueueSemaphoreTake>
		bsp_lora_enter_safe_mode();
 8003044:	f7fe fb3a 	bl	80016bc <bsp_lora_enter_safe_mode>

		STM_LOG("handle last packet\n", 0, 19);
 8003048:	2213      	movs	r2, #19
 800304a:	2100      	movs	r1, #0
 800304c:	4849      	ldr	r0, [pc, #292]	@ (8003174 <lora_network_handle_last_lora_send_packets_task+0x154>)
 800304e:	f7fe fb5b 	bl	8001708 <STM_LOG>



		STM_LOG("rp cmd2: %2d\n", last_lora_send_packet_buffer[0].cmd, 12);
 8003052:	4b49      	ldr	r3, [pc, #292]	@ (8003178 <lora_network_handle_last_lora_send_packets_task+0x158>)
 8003054:	795b      	ldrb	r3, [r3, #5]
 8003056:	220c      	movs	r2, #12
 8003058:	4619      	mov	r1, r3
 800305a:	4848      	ldr	r0, [pc, #288]	@ (800317c <lora_network_handle_last_lora_send_packets_task+0x15c>)
 800305c:	f7fe fb54 	bl	8001708 <STM_LOG>
		if(last_lora_send_packet_buffer[0].cmd == LORA_CMD_CONNECT){
 8003060:	4b45      	ldr	r3, [pc, #276]	@ (8003178 <lora_network_handle_last_lora_send_packets_task+0x158>)
 8003062:	795b      	ldrb	r3, [r3, #5]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d110      	bne.n	800308a <lora_network_handle_last_lora_send_packets_task+0x6a>
			STM_LOG("last packet cn\n", 0, 15);
 8003068:	220f      	movs	r2, #15
 800306a:	2100      	movs	r1, #0
 800306c:	4844      	ldr	r0, [pc, #272]	@ (8003180 <lora_network_handle_last_lora_send_packets_task+0x160>)
 800306e:	f7fe fb4b 	bl	8001708 <STM_LOG>
			NotificationValue.cmd = NAK;
 8003072:	2306      	movs	r3, #6
 8003074:	733b      	strb	r3, [r7, #12]
			xQueueSend(all_connect_queue, &NotificationValue, portMAX_DELAY);
 8003076:	4b43      	ldr	r3, [pc, #268]	@ (8003184 <lora_network_handle_last_lora_send_packets_task+0x164>)
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	f107 010c 	add.w	r1, r7, #12
 800307e:	2300      	movs	r3, #0
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	f008 fa1a 	bl	800b4bc <xQueueGenericSend>
 8003088:	e02c      	b.n	80030e4 <lora_network_handle_last_lora_send_packets_task+0xc4>
		}

		else if(last_lora_send_packet_buffer[0].cmd == LORA_CMD_DISCONNECT){
 800308a:	4b3b      	ldr	r3, [pc, #236]	@ (8003178 <lora_network_handle_last_lora_send_packets_task+0x158>)
 800308c:	795b      	ldrb	r3, [r3, #5]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d110      	bne.n	80030b4 <lora_network_handle_last_lora_send_packets_task+0x94>
			STM_LOG("last packet dn\n", 0, 15);
 8003092:	220f      	movs	r2, #15
 8003094:	2100      	movs	r1, #0
 8003096:	483c      	ldr	r0, [pc, #240]	@ (8003188 <lora_network_handle_last_lora_send_packets_task+0x168>)
 8003098:	f7fe fb36 	bl	8001708 <STM_LOG>
			NotificationValue.cmd = NAK;
 800309c:	2306      	movs	r3, #6
 800309e:	733b      	strb	r3, [r7, #12]
			xQueueSend(all_disconnect_queue, &NotificationValue, portMAX_DELAY);
 80030a0:	4b3a      	ldr	r3, [pc, #232]	@ (800318c <lora_network_handle_last_lora_send_packets_task+0x16c>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	f107 010c 	add.w	r1, r7, #12
 80030a8:	2300      	movs	r3, #0
 80030aa:	f04f 32ff 	mov.w	r2, #4294967295
 80030ae:	f008 fa05 	bl	800b4bc <xQueueGenericSend>
 80030b2:	e017      	b.n	80030e4 <lora_network_handle_last_lora_send_packets_task+0xc4>
		}

		else if(last_lora_send_packet_buffer[0].cmd == LORA_CMD_READ_DATA){
 80030b4:	4b30      	ldr	r3, [pc, #192]	@ (8003178 <lora_network_handle_last_lora_send_packets_task+0x158>)
 80030b6:	795b      	ldrb	r3, [r3, #5]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d113      	bne.n	80030e4 <lora_network_handle_last_lora_send_packets_task+0xc4>
			lora_network_send_request_reset_scheduler();
 80030bc:	f7ff ff16 	bl	8002eec <lora_network_send_request_reset_scheduler>
			STM_LOG("last packet send\n", 0, 17);
 80030c0:	2211      	movs	r2, #17
 80030c2:	2100      	movs	r1, #0
 80030c4:	4832      	ldr	r0, [pc, #200]	@ (8003190 <lora_network_handle_last_lora_send_packets_task+0x170>)
 80030c6:	f7fe fb1f 	bl	8001708 <STM_LOG>
			NotificationValue.cmd = NAK;
 80030ca:	2306      	movs	r3, #6
 80030cc:	733b      	strb	r3, [r7, #12]
			NotificationValue.value = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	737b      	strb	r3, [r7, #13]
			xQueueSend(send_request_queue, &NotificationValue, portMAX_DELAY);
 80030d2:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <lora_network_handle_last_lora_send_packets_task+0x174>)
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	f107 010c 	add.w	r1, r7, #12
 80030da:	2300      	movs	r3, #0
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	f008 f9ec 	bl	800b4bc <xQueueGenericSend>
		}

		for(uint8_t i = 0; i < semaphore_count - 1; i++){
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e017      	b.n	800311a <lora_network_handle_last_lora_send_packets_task+0xfa>
			memcpy(&last_lora_send_packet_buffer[i], &last_lora_send_packet_buffer[i + 1], sizeof(lora_packet_t));
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	4a20      	ldr	r2, [pc, #128]	@ (8003178 <lora_network_handle_last_lora_send_packets_task+0x158>)
 80030f8:	1898      	adds	r0, r3, r2
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <lora_network_handle_last_lora_send_packets_task+0x158>)
 800310a:	4413      	add	r3, r2
 800310c:	222f      	movs	r2, #47	@ 0x2f
 800310e:	4619      	mov	r1, r3
 8003110:	f00b fad2 	bl	800e6b8 <memcpy>
		for(uint8_t i = 0; i < semaphore_count - 1; i++){
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	3301      	adds	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	4b1e      	ldr	r3, [pc, #120]	@ (8003198 <lora_network_handle_last_lora_send_packets_task+0x178>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	429a      	cmp	r2, r3
 8003126:	dbe0      	blt.n	80030ea <lora_network_handle_last_lora_send_packets_task+0xca>
		}
		memset(&last_lora_send_packet_buffer[semaphore_count - 1], 0, sizeof(lora_packet_t));
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <lora_network_handle_last_lora_send_packets_task+0x178>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	1e5a      	subs	r2, r3, #1
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	4a0f      	ldr	r2, [pc, #60]	@ (8003178 <lora_network_handle_last_lora_send_packets_task+0x158>)
 800313c:	4413      	add	r3, r2
 800313e:	222f      	movs	r2, #47	@ 0x2f
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f00b fa74 	bl	800e630 <memset>
		semaphore_count--;
 8003148:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <lora_network_handle_last_lora_send_packets_task+0x178>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <lora_network_handle_last_lora_send_packets_task+0x178>)
 8003154:	701a      	strb	r2, [r3, #0]

		bsp_lora_exit_safe_mode();
 8003156:	f7fe fac4 	bl	80016e2 <bsp_lora_exit_safe_mode>
		xSemaphoreGive(spi_mutex);
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <lora_network_handle_last_lora_send_packets_task+0x150>)
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	2300      	movs	r3, #0
 8003160:	2200      	movs	r2, #0
 8003162:	2100      	movs	r1, #0
 8003164:	f008 f9aa 	bl	800b4bc <xQueueGenericSend>
	while(1){
 8003168:	e75e      	b.n	8003028 <lora_network_handle_last_lora_send_packets_task+0x8>
 800316a:	bf00      	nop
 800316c:	200017a4 	.word	0x200017a4
 8003170:	200017a0 	.word	0x200017a0
 8003174:	0800f100 	.word	0x0800f100
 8003178:	200017ac 	.word	0x200017ac
 800317c:	0800f114 	.word	0x0800f114
 8003180:	0800f124 	.word	0x0800f124
 8003184:	20001794 	.word	0x20001794
 8003188:	0800f134 	.word	0x0800f134
 800318c:	20001798 	.word	0x20001798
 8003190:	0800f144 	.word	0x0800f144
 8003194:	2000179c 	.word	0x2000179c
 8003198:	200017a8 	.word	0x200017a8

0800319c <lora_network_timer_task>:
	}
}


void lora_network_timer_task(TimerHandle_t xTimer){
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	6078      	str	r0, [r7, #4]
	uint8_t sw_timer_id = (uint8_t) pvTimerGetTimerID(xTimer);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f00a fad9 	bl	800d75c <pvTimerGetTimerID>
 80031aa:	4603      	mov	r3, r0
 80031ac:	77fb      	strb	r3, [r7, #31]
	if(sw_timer_id == SW_TIMER_CONNECT_ALL){
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d129      	bne.n	8003208 <lora_network_timer_task+0x6c>
		connection_task_notification_value_t NotificationValue;
		NotificationValue.cmd = TIMEOUT;
 80031b4:	2307      	movs	r3, #7
 80031b6:	773b      	strb	r3, [r7, #28]
		NotificationValue.value = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	777b      	strb	r3, [r7, #29]
		HAL_UART_Transmit(&huart2, "swtimer\n", 8, 2000);
 80031bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80031c0:	2208      	movs	r2, #8
 80031c2:	4940      	ldr	r1, [pc, #256]	@ (80032c4 <lora_network_timer_task+0x128>)
 80031c4:	4840      	ldr	r0, [pc, #256]	@ (80032c8 <lora_network_timer_task+0x12c>)
 80031c6:	f005 fa33 	bl	8008630 <HAL_UART_Transmit>
		xTimerStop(xTimer, 0);
 80031ca:	2300      	movs	r3, #0
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	2200      	movs	r2, #0
 80031d2:	2103      	movs	r1, #3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f009 ffcd 	bl	800d174 <xTimerGenericCommand>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
		xQueueSendFromISR(all_connect_queue, &NotificationValue, &xHigherPriorityTaskWoken);
 80031de:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <lora_network_timer_task+0x130>)
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	f107 0218 	add.w	r2, r7, #24
 80031e6:	f107 011c 	add.w	r1, r7, #28
 80031ea:	2300      	movs	r3, #0
 80031ec:	f008 fa68 	bl	800b6c0 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d061      	beq.n	80032ba <lora_network_timer_task+0x11e>
 80031f6:	4b36      	ldr	r3, [pc, #216]	@ (80032d0 <lora_network_timer_task+0x134>)
 80031f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
		xTimerStop(xTimer, 0);
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		xQueueSendFromISR(send_request_queue, &NotificationValue, &xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 8003206:	e058      	b.n	80032ba <lora_network_timer_task+0x11e>
	else if(sw_timer_id == SW_TIMER_DISCONNECT_ALL){
 8003208:	7ffb      	ldrb	r3, [r7, #31]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d129      	bne.n	8003262 <lora_network_timer_task+0xc6>
		NotificationValue.cmd = TIMEOUT;
 800320e:	2307      	movs	r3, #7
 8003210:	753b      	strb	r3, [r7, #20]
		NotificationValue.value = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	757b      	strb	r3, [r7, #21]
		HAL_UART_Transmit(&huart2, "swtimer\n", 8, 2000);
 8003216:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800321a:	2208      	movs	r2, #8
 800321c:	4929      	ldr	r1, [pc, #164]	@ (80032c4 <lora_network_timer_task+0x128>)
 800321e:	482a      	ldr	r0, [pc, #168]	@ (80032c8 <lora_network_timer_task+0x12c>)
 8003220:	f005 fa06 	bl	8008630 <HAL_UART_Transmit>
		xTimerStop(xTimer, 0);
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	2200      	movs	r2, #0
 800322c:	2103      	movs	r1, #3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f009 ffa0 	bl	800d174 <xTimerGenericCommand>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
		xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &xHigherPriorityTaskWoken);
 8003238:	4b26      	ldr	r3, [pc, #152]	@ (80032d4 <lora_network_timer_task+0x138>)
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	f107 0210 	add.w	r2, r7, #16
 8003240:	f107 0114 	add.w	r1, r7, #20
 8003244:	2300      	movs	r3, #0
 8003246:	f008 fa3b 	bl	800b6c0 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d034      	beq.n	80032ba <lora_network_timer_task+0x11e>
 8003250:	4b1f      	ldr	r3, [pc, #124]	@ (80032d0 <lora_network_timer_task+0x134>)
 8003252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
}
 8003260:	e02b      	b.n	80032ba <lora_network_timer_task+0x11e>
	else if(sw_timer_id == SW_TIMER_SEND_REQUEST){
 8003262:	7ffb      	ldrb	r3, [r7, #31]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d128      	bne.n	80032ba <lora_network_timer_task+0x11e>
		NotificationValue.cmd = TIMEOUT;
 8003268:	2307      	movs	r3, #7
 800326a:	733b      	strb	r3, [r7, #12]
		NotificationValue.value = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&huart2, "swtimer\n", 8, 2000);
 8003270:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003274:	2208      	movs	r2, #8
 8003276:	4913      	ldr	r1, [pc, #76]	@ (80032c4 <lora_network_timer_task+0x128>)
 8003278:	4813      	ldr	r0, [pc, #76]	@ (80032c8 <lora_network_timer_task+0x12c>)
 800327a:	f005 f9d9 	bl	8008630 <HAL_UART_Transmit>
		xTimerStop(xTimer, 0);
 800327e:	2300      	movs	r3, #0
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	2200      	movs	r2, #0
 8003286:	2103      	movs	r1, #3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f009 ff73 	bl	800d174 <xTimerGenericCommand>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
		xQueueSendFromISR(send_request_queue, &NotificationValue, &xHigherPriorityTaskWoken);
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <lora_network_timer_task+0x13c>)
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	f107 0208 	add.w	r2, r7, #8
 800329a:	f107 010c 	add.w	r1, r7, #12
 800329e:	2300      	movs	r3, #0
 80032a0:	f008 fa0e 	bl	800b6c0 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <lora_network_timer_task+0x11e>
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <lora_network_timer_task+0x134>)
 80032ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	f3bf 8f6f 	isb	sy
}
 80032ba:	bf00      	nop
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	0800f158 	.word	0x0800f158
 80032c8:	20001978 	.word	0x20001978
 80032cc:	20001794 	.word	0x20001794
 80032d0:	e000ed04 	.word	0xe000ed04
 80032d4:	20001798 	.word	0x20001798
 80032d8:	2000179c 	.word	0x2000179c

080032dc <lora_network_save_current_work>:

void lora_network_save_current_work(){
 80032dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032de:	b087      	sub	sp, #28
 80032e0:	af02      	add	r7, sp, #8
	if(lora_send_packet_buffer.destination_id != 0){
 80032e2:	4ba9      	ldr	r3, [pc, #676]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 80032e4:	789b      	ldrb	r3, [r3, #2]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 829c 	beq.w	8003824 <lora_network_save_current_work+0x548>
		if(lora_send_packet_buffer.responsed == 0){
 80032ec:	4ba6      	ldr	r3, [pc, #664]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 8297 	bne.w	8003824 <lora_network_save_current_work+0x548>

			STM_LOG("save curent task\n", 0, 17);
 80032f6:	2211      	movs	r2, #17
 80032f8:	2100      	movs	r1, #0
 80032fa:	48a4      	ldr	r0, [pc, #656]	@ (800358c <lora_network_save_current_work+0x2b0>)
 80032fc:	f7fe fa04 	bl	8001708 <STM_LOG>

			if(lora_send_packet_buffer.ttl > 0){
 8003300:	4ba1      	ldr	r3, [pc, #644]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 8003302:	78db      	ldrb	r3, [r3, #3]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d07f      	beq.n	8003408 <lora_network_save_current_work+0x12c>
				STM_LOG("save curent task1\n", 0, 18);
 8003308:	2212      	movs	r2, #18
 800330a:	2100      	movs	r1, #0
 800330c:	48a0      	ldr	r0, [pc, #640]	@ (8003590 <lora_network_save_current_work+0x2b4>)
 800330e:	f7fe f9fb 	bl	8001708 <STM_LOG>
				xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 8003312:	4ba0      	ldr	r3, [pc, #640]	@ (8003594 <lora_network_save_current_work+0x2b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f008 fa6f 	bl	800b7fc <xQueueGiveFromISR>
				semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 800331e:	4b9e      	ldr	r3, [pc, #632]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d805      	bhi.n	8003334 <lora_network_save_current_work+0x58>
 8003328:	4b9b      	ldr	r3, [pc, #620]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e000      	b.n	8003336 <lora_network_save_current_work+0x5a>
 8003334:	2303      	movs	r3, #3
 8003336:	4a98      	ldr	r2, [pc, #608]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 8003338:	7013      	strb	r3, [r2, #0]
				STM_LOG("smph c: %2d\n", semaphore_count, 11);
 800333a:	4b97      	ldr	r3, [pc, #604]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	220b      	movs	r2, #11
 8003342:	4619      	mov	r1, r3
 8003344:	4895      	ldr	r0, [pc, #596]	@ (800359c <lora_network_save_current_work+0x2c0>)
 8003346:	f7fe f9df 	bl	8001708 <STM_LOG>
				memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 800334a:	4b93      	ldr	r3, [pc, #588]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	1e5a      	subs	r2, r3, #1
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	4a90      	ldr	r2, [pc, #576]	@ (80035a0 <lora_network_save_current_work+0x2c4>)
 800335e:	4413      	add	r3, r2
 8003360:	4a89      	ldr	r2, [pc, #548]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 8003362:	4618      	mov	r0, r3
 8003364:	f102 0420 	add.w	r4, r2, #32
 8003368:	4603      	mov	r3, r0
 800336a:	4611      	mov	r1, r2
 800336c:	f8d1 c000 	ldr.w	ip, [r1]
 8003370:	684e      	ldr	r6, [r1, #4]
 8003372:	688d      	ldr	r5, [r1, #8]
 8003374:	68c9      	ldr	r1, [r1, #12]
 8003376:	f8c3 c000 	str.w	ip, [r3]
 800337a:	605e      	str	r6, [r3, #4]
 800337c:	609d      	str	r5, [r3, #8]
 800337e:	60d9      	str	r1, [r3, #12]
 8003380:	3210      	adds	r2, #16
 8003382:	3010      	adds	r0, #16
 8003384:	42a2      	cmp	r2, r4
 8003386:	d1ef      	bne.n	8003368 <lora_network_save_current_work+0x8c>
 8003388:	4603      	mov	r3, r0
 800338a:	6814      	ldr	r4, [r2, #0]
 800338c:	6850      	ldr	r0, [r2, #4]
 800338e:	6891      	ldr	r1, [r2, #8]
 8003390:	601c      	str	r4, [r3, #0]
 8003392:	6058      	str	r0, [r3, #4]
 8003394:	6099      	str	r1, [r3, #8]
 8003396:	8991      	ldrh	r1, [r2, #12]
 8003398:	7b92      	ldrb	r2, [r2, #14]
 800339a:	8199      	strh	r1, [r3, #12]
 800339c:	739a      	strb	r2, [r3, #14]


				if(lora_send_packet_buffer.cmd == LORA_CMD_CONNECT){
 800339e:	4b7a      	ldr	r3, [pc, #488]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 80033a0:	795b      	ldrb	r3, [r3, #5]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <lora_network_save_current_work+0xde>
					xTimerStopFromISR(all_connect_timer, NULL);
 80033a6:	4b7f      	ldr	r3, [pc, #508]	@ (80035a4 <lora_network_save_current_work+0x2c8>)
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	2200      	movs	r2, #0
 80033b2:	2108      	movs	r1, #8
 80033b4:	f009 fede 	bl	800d174 <xTimerGenericCommand>
 80033b8:	e22d      	b.n	8003816 <lora_network_save_current_work+0x53a>
				}

				else if(lora_send_packet_buffer.cmd == LORA_CMD_DISCONNECT){
 80033ba:	4b73      	ldr	r3, [pc, #460]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 80033bc:	795b      	ldrb	r3, [r3, #5]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d109      	bne.n	80033d6 <lora_network_save_current_work+0xfa>
					xTimerStopFromISR(all_disconnect_timer, NULL);
 80033c2:	4b79      	ldr	r3, [pc, #484]	@ (80035a8 <lora_network_save_current_work+0x2cc>)
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	2200      	movs	r2, #0
 80033ce:	2108      	movs	r1, #8
 80033d0:	f009 fed0 	bl	800d174 <xTimerGenericCommand>
 80033d4:	e21f      	b.n	8003816 <lora_network_save_current_work+0x53a>
				}

				else if(lora_send_packet_buffer.cmd == LORA_CMD_READ_DATA){
 80033d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 80033d8:	795b      	ldrb	r3, [r3, #5]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	f040 821b 	bne.w	8003816 <lora_network_save_current_work+0x53a>
					STM_LOG("save curent task2\n", 0, 18);
 80033e0:	2212      	movs	r2, #18
 80033e2:	2100      	movs	r1, #0
 80033e4:	4871      	ldr	r0, [pc, #452]	@ (80035ac <lora_network_save_current_work+0x2d0>)
 80033e6:	f7fe f98f 	bl	8001708 <STM_LOG>
					STM_LOG("save curent task3\n", 0, 18);
 80033ea:	2212      	movs	r2, #18
 80033ec:	2100      	movs	r1, #0
 80033ee:	4870      	ldr	r0, [pc, #448]	@ (80035b0 <lora_network_save_current_work+0x2d4>)
 80033f0:	f7fe f98a 	bl	8001708 <STM_LOG>
					xTimerStopFromISR(send_data_timer, NULL);
 80033f4:	4b6f      	ldr	r3, [pc, #444]	@ (80035b4 <lora_network_save_current_work+0x2d8>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	2200      	movs	r2, #0
 8003400:	2108      	movs	r1, #8
 8003402:	f009 feb7 	bl	800d174 <xTimerGenericCommand>
 8003406:	e206      	b.n	8003816 <lora_network_save_current_work+0x53a>
				}
			}

			else{
				if(lora_send_packet_buffer.cmd == LORA_CMD_CONNECT){
 8003408:	4b5f      	ldr	r3, [pc, #380]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 800340a:	795b      	ldrb	r3, [r3, #5]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 8096 	bne.w	800353e <lora_network_save_current_work+0x262>
					if(NODE_DEVICE[lr_nw_node_index].error <= 1){
 8003412:	4b69      	ldr	r3, [pc, #420]	@ (80035b8 <lora_network_save_current_work+0x2dc>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	4968      	ldr	r1, [pc, #416]	@ (80035bc <lora_network_save_current_work+0x2e0>)
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	440b      	add	r3, r1
 8003426:	3304      	adds	r3, #4
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	f200 81f3 	bhi.w	8003816 <lora_network_save_current_work+0x53a>
						xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 8003430:	4b58      	ldr	r3, [pc, #352]	@ (8003594 <lora_network_save_current_work+0x2b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f008 f9e0 	bl	800b7fc <xQueueGiveFromISR>
						semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 800343c:	4b56      	ldr	r3, [pc, #344]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d805      	bhi.n	8003452 <lora_network_save_current_work+0x176>
 8003446:	4b54      	ldr	r3, [pc, #336]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	3301      	adds	r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e000      	b.n	8003454 <lora_network_save_current_work+0x178>
 8003452:	2303      	movs	r3, #3
 8003454:	4a50      	ldr	r2, [pc, #320]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 8003456:	7013      	strb	r3, [r2, #0]
						lora_send_packet_buffer.ttl++;
 8003458:	4b4b      	ldr	r3, [pc, #300]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 800345a:	78db      	ldrb	r3, [r3, #3]
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b49      	ldr	r3, [pc, #292]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 8003462:	70da      	strb	r2, [r3, #3]
						int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_CONNECT);
 8003464:	4b54      	ldr	r3, [pc, #336]	@ (80035b8 <lora_network_save_current_work+0x2dc>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	015b      	lsls	r3, r3, #5
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	4a51      	ldr	r2, [pc, #324]	@ (80035bc <lora_network_save_current_work+0x2e0>)
 8003476:	4413      	add	r3, r2
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fadb 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8003480:	6038      	str	r0, [r7, #0]
						if(packet_index != -1){
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d025      	beq.n	80034d6 <lora_network_save_current_work+0x1fa>
							NODE_DEVICE[lr_nw_node_index].last_lora_send_packet[packet_index].ttl++;
 800348a:	4b4b      	ldr	r3, [pc, #300]	@ (80035b8 <lora_network_save_current_work+0x2dc>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	484a      	ldr	r0, [pc, #296]	@ (80035bc <lora_network_save_current_work+0x2e0>)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	441a      	add	r2, r3
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	1ad2      	subs	r2, r2, r3
 800349e:	460b      	mov	r3, r1
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	015b      	lsls	r3, r3, #5
 80034a6:	1a5b      	subs	r3, r3, r1
 80034a8:	4413      	add	r3, r2
 80034aa:	4403      	add	r3, r0
 80034ac:	3308      	adds	r3, #8
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	b2dc      	uxtb	r4, r3
 80034b4:	4841      	ldr	r0, [pc, #260]	@ (80035bc <lora_network_save_current_work+0x2e0>)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	0052      	lsls	r2, r2, #1
 80034bc:	441a      	add	r2, r3
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	1ad2      	subs	r2, r2, r3
 80034c2:	460b      	mov	r3, r1
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	015b      	lsls	r3, r3, #5
 80034ca:	1a5b      	subs	r3, r3, r1
 80034cc:	4413      	add	r3, r2
 80034ce:	4403      	add	r3, r0
 80034d0:	3308      	adds	r3, #8
 80034d2:	4622      	mov	r2, r4
 80034d4:	701a      	strb	r2, [r3, #0]
						}
						memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 80034d6:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	4a2d      	ldr	r2, [pc, #180]	@ (80035a0 <lora_network_save_current_work+0x2c4>)
 80034ea:	4413      	add	r3, r2
 80034ec:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f102 0420 	add.w	r4, r2, #32
 80034f4:	4603      	mov	r3, r0
 80034f6:	4611      	mov	r1, r2
 80034f8:	f8d1 c000 	ldr.w	ip, [r1]
 80034fc:	684e      	ldr	r6, [r1, #4]
 80034fe:	688d      	ldr	r5, [r1, #8]
 8003500:	68c9      	ldr	r1, [r1, #12]
 8003502:	f8c3 c000 	str.w	ip, [r3]
 8003506:	605e      	str	r6, [r3, #4]
 8003508:	609d      	str	r5, [r3, #8]
 800350a:	60d9      	str	r1, [r3, #12]
 800350c:	3210      	adds	r2, #16
 800350e:	3010      	adds	r0, #16
 8003510:	42a2      	cmp	r2, r4
 8003512:	d1ef      	bne.n	80034f4 <lora_network_save_current_work+0x218>
 8003514:	4603      	mov	r3, r0
 8003516:	6814      	ldr	r4, [r2, #0]
 8003518:	6850      	ldr	r0, [r2, #4]
 800351a:	6891      	ldr	r1, [r2, #8]
 800351c:	601c      	str	r4, [r3, #0]
 800351e:	6058      	str	r0, [r3, #4]
 8003520:	6099      	str	r1, [r3, #8]
 8003522:	8991      	ldrh	r1, [r2, #12]
 8003524:	7b92      	ldrb	r2, [r2, #14]
 8003526:	8199      	strh	r1, [r3, #12]
 8003528:	739a      	strb	r2, [r3, #14]
						xTimerStopFromISR(all_connect_timer, NULL);
 800352a:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <lora_network_save_current_work+0x2c8>)
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	2200      	movs	r2, #0
 8003536:	2108      	movs	r1, #8
 8003538:	f009 fe1c 	bl	800d174 <xTimerGenericCommand>
 800353c:	e16b      	b.n	8003816 <lora_network_save_current_work+0x53a>
					}
				}

				else if(lora_send_packet_buffer.cmd == LORA_CMD_DISCONNECT){
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <lora_network_save_current_work+0x2ac>)
 8003540:	795b      	ldrb	r3, [r3, #5]
 8003542:	2b01      	cmp	r3, #1
 8003544:	f040 80b4 	bne.w	80036b0 <lora_network_save_current_work+0x3d4>
					if(NODE_DEVICE[lr_nw_node_index1].error <= 1){
 8003548:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <lora_network_save_current_work+0x2e4>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	491b      	ldr	r1, [pc, #108]	@ (80035bc <lora_network_save_current_work+0x2e0>)
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	015b      	lsls	r3, r3, #5
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	440b      	add	r3, r1
 800355c:	3304      	adds	r3, #4
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f200 8158 	bhi.w	8003816 <lora_network_save_current_work+0x53a>
						xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 8003566:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <lora_network_save_current_work+0x2b8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f008 f945 	bl	800b7fc <xQueueGiveFromISR>
						semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d823      	bhi.n	80035c4 <lora_network_save_current_work+0x2e8>
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <lora_network_save_current_work+0x2bc>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e01e      	b.n	80035c6 <lora_network_save_current_work+0x2ea>
 8003588:	200000a8 	.word	0x200000a8
 800358c:	0800f164 	.word	0x0800f164
 8003590:	0800f178 	.word	0x0800f178
 8003594:	200017a4 	.word	0x200017a4
 8003598:	200017a8 	.word	0x200017a8
 800359c:	0800f18c 	.word	0x0800f18c
 80035a0:	200017ac 	.word	0x200017ac
 80035a4:	20001788 	.word	0x20001788
 80035a8:	2000178c 	.word	0x2000178c
 80035ac:	0800f19c 	.word	0x0800f19c
 80035b0:	0800f1b0 	.word	0x0800f1b0
 80035b4:	20001790 	.word	0x20001790
 80035b8:	200007b3 	.word	0x200007b3
 80035bc:	200007c0 	.word	0x200007c0
 80035c0:	200007b4 	.word	0x200007b4
 80035c4:	2303      	movs	r3, #3
 80035c6:	4a99      	ldr	r2, [pc, #612]	@ (800382c <lora_network_save_current_work+0x550>)
 80035c8:	7013      	strb	r3, [r2, #0]
						lora_send_packet_buffer.ttl++;
 80035ca:	4b99      	ldr	r3, [pc, #612]	@ (8003830 <lora_network_save_current_work+0x554>)
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	3301      	adds	r3, #1
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b97      	ldr	r3, [pc, #604]	@ (8003830 <lora_network_save_current_work+0x554>)
 80035d4:	70da      	strb	r2, [r3, #3]
						int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_DISCONNECT);
 80035d6:	4b97      	ldr	r3, [pc, #604]	@ (8003834 <lora_network_save_current_work+0x558>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	015b      	lsls	r3, r3, #5
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	4a94      	ldr	r2, [pc, #592]	@ (8003838 <lora_network_save_current_work+0x55c>)
 80035e8:	4413      	add	r3, r2
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fa22 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 80035f2:	6078      	str	r0, [r7, #4]
						if(packet_index != -1){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d025      	beq.n	8003648 <lora_network_save_current_work+0x36c>
							NODE_DEVICE[lr_nw_node_index1].last_lora_send_packet[packet_index].ttl++;
 80035fc:	4b8f      	ldr	r3, [pc, #572]	@ (800383c <lora_network_save_current_work+0x560>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	488d      	ldr	r0, [pc, #564]	@ (8003838 <lora_network_save_current_work+0x55c>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	461a      	mov	r2, r3
 8003608:	0052      	lsls	r2, r2, #1
 800360a:	441a      	add	r2, r3
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	460b      	mov	r3, r1
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	015b      	lsls	r3, r3, #5
 8003618:	1a5b      	subs	r3, r3, r1
 800361a:	4413      	add	r3, r2
 800361c:	4403      	add	r3, r0
 800361e:	3308      	adds	r3, #8
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	b2dc      	uxtb	r4, r3
 8003626:	4884      	ldr	r0, [pc, #528]	@ (8003838 <lora_network_save_current_work+0x55c>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	0052      	lsls	r2, r2, #1
 800362e:	441a      	add	r2, r3
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	1ad2      	subs	r2, r2, r3
 8003634:	460b      	mov	r3, r1
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	015b      	lsls	r3, r3, #5
 800363c:	1a5b      	subs	r3, r3, r1
 800363e:	4413      	add	r3, r2
 8003640:	4403      	add	r3, r0
 8003642:	3308      	adds	r3, #8
 8003644:	4622      	mov	r2, r4
 8003646:	701a      	strb	r2, [r3, #0]
						}
						memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 8003648:	4b78      	ldr	r3, [pc, #480]	@ (800382c <lora_network_save_current_work+0x550>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	4a79      	ldr	r2, [pc, #484]	@ (8003840 <lora_network_save_current_work+0x564>)
 800365c:	4413      	add	r3, r2
 800365e:	4a74      	ldr	r2, [pc, #464]	@ (8003830 <lora_network_save_current_work+0x554>)
 8003660:	4618      	mov	r0, r3
 8003662:	f102 0420 	add.w	r4, r2, #32
 8003666:	4603      	mov	r3, r0
 8003668:	4611      	mov	r1, r2
 800366a:	f8d1 c000 	ldr.w	ip, [r1]
 800366e:	684e      	ldr	r6, [r1, #4]
 8003670:	688d      	ldr	r5, [r1, #8]
 8003672:	68c9      	ldr	r1, [r1, #12]
 8003674:	f8c3 c000 	str.w	ip, [r3]
 8003678:	605e      	str	r6, [r3, #4]
 800367a:	609d      	str	r5, [r3, #8]
 800367c:	60d9      	str	r1, [r3, #12]
 800367e:	3210      	adds	r2, #16
 8003680:	3010      	adds	r0, #16
 8003682:	42a2      	cmp	r2, r4
 8003684:	d1ef      	bne.n	8003666 <lora_network_save_current_work+0x38a>
 8003686:	4603      	mov	r3, r0
 8003688:	6814      	ldr	r4, [r2, #0]
 800368a:	6850      	ldr	r0, [r2, #4]
 800368c:	6891      	ldr	r1, [r2, #8]
 800368e:	601c      	str	r4, [r3, #0]
 8003690:	6058      	str	r0, [r3, #4]
 8003692:	6099      	str	r1, [r3, #8]
 8003694:	8991      	ldrh	r1, [r2, #12]
 8003696:	7b92      	ldrb	r2, [r2, #14]
 8003698:	8199      	strh	r1, [r3, #12]
 800369a:	739a      	strb	r2, [r3, #14]
						xTimerStopFromISR(all_disconnect_timer, NULL);
 800369c:	4b69      	ldr	r3, [pc, #420]	@ (8003844 <lora_network_save_current_work+0x568>)
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	2200      	movs	r2, #0
 80036a8:	2108      	movs	r1, #8
 80036aa:	f009 fd63 	bl	800d174 <xTimerGenericCommand>
 80036ae:	e0b2      	b.n	8003816 <lora_network_save_current_work+0x53a>
					}
				}

				else if(lora_send_packet_buffer.cmd == LORA_CMD_READ_DATA){
 80036b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003830 <lora_network_save_current_work+0x554>)
 80036b2:	795b      	ldrb	r3, [r3, #5]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	f040 80ae 	bne.w	8003816 <lora_network_save_current_work+0x53a>
					if(CONNECTED_NODE[lr_nw_send_request_index].error <= 1){
 80036ba:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <lora_network_save_current_work+0x56c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	4962      	ldr	r1, [pc, #392]	@ (800384c <lora_network_save_current_work+0x570>)
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	015b      	lsls	r3, r3, #5
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	440b      	add	r3, r1
 80036ce:	3304      	adds	r3, #4
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f200 809f 	bhi.w	8003816 <lora_network_save_current_work+0x53a>
						xSemaphoreGiveFromISR(last_lora_send_packet_counting_semaphore, NULL);
 80036d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <lora_network_save_current_work+0x574>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f008 f88c 	bl	800b7fc <xQueueGiveFromISR>
						semaphore_count = (semaphore_count < NUMBER_OF_LAST_LORA_SEND_PACKET) ? semaphore_count + 1 : NUMBER_OF_LAST_LORA_SEND_PACKET;
 80036e4:	4b51      	ldr	r3, [pc, #324]	@ (800382c <lora_network_save_current_work+0x550>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d805      	bhi.n	80036fa <lora_network_save_current_work+0x41e>
 80036ee:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <lora_network_save_current_work+0x550>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e000      	b.n	80036fc <lora_network_save_current_work+0x420>
 80036fa:	2303      	movs	r3, #3
 80036fc:	4a4b      	ldr	r2, [pc, #300]	@ (800382c <lora_network_save_current_work+0x550>)
 80036fe:	7013      	strb	r3, [r2, #0]
						lora_send_packet_buffer.ttl++;
 8003700:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <lora_network_save_current_work+0x554>)
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	3301      	adds	r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	4b49      	ldr	r3, [pc, #292]	@ (8003830 <lora_network_save_current_work+0x554>)
 800370a:	70da      	strb	r2, [r3, #3]
						for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e047      	b.n	80037a2 <lora_network_save_current_work+0x4c6>
							if(CONNECTED_NODE[i].id == lora_send_packet_buffer.destination_id){
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	494d      	ldr	r1, [pc, #308]	@ (800384c <lora_network_save_current_work+0x570>)
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	015b      	lsls	r3, r3, #5
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	440b      	add	r3, r1
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	4b42      	ldr	r3, [pc, #264]	@ (8003830 <lora_network_save_current_work+0x554>)
 8003726:	789b      	ldrb	r3, [r3, #2]
 8003728:	429a      	cmp	r2, r3
 800372a:	d137      	bne.n	800379c <lora_network_save_current_work+0x4c0>
								int packet_index = bsp_lora_check_cmd_in_node_send_packets(&NODE_DEVICE[lr_nw_node_index], LORA_CMD_READ_DATA);
 800372c:	4b41      	ldr	r3, [pc, #260]	@ (8003834 <lora_network_save_current_work+0x558>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	015b      	lsls	r3, r3, #5
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	4a3e      	ldr	r2, [pc, #248]	@ (8003838 <lora_network_save_current_work+0x55c>)
 800373e:	4413      	add	r3, r2
 8003740:	2103      	movs	r1, #3
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe f977 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8003748:	60b8      	str	r0, [r7, #8]
								if(packet_index != -1){
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d02d      	beq.n	80037ae <lora_network_save_current_work+0x4d2>
									CONNECTED_NODE[i].last_lora_receive_packet[packet_index].ttl++;
 8003752:	7bf9      	ldrb	r1, [r7, #15]
 8003754:	483d      	ldr	r0, [pc, #244]	@ (800384c <lora_network_save_current_work+0x570>)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	461a      	mov	r2, r3
 800375a:	0052      	lsls	r2, r2, #1
 800375c:	441a      	add	r2, r3
 800375e:	0112      	lsls	r2, r2, #4
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	460b      	mov	r3, r1
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	015b      	lsls	r3, r3, #5
 800376a:	1a5b      	subs	r3, r3, r1
 800376c:	4413      	add	r3, r2
 800376e:	4403      	add	r3, r0
 8003770:	3395      	adds	r3, #149	@ 0x95
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	b2dc      	uxtb	r4, r3
 8003778:	4834      	ldr	r0, [pc, #208]	@ (800384c <lora_network_save_current_work+0x570>)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	461a      	mov	r2, r3
 800377e:	0052      	lsls	r2, r2, #1
 8003780:	441a      	add	r2, r3
 8003782:	0112      	lsls	r2, r2, #4
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	460b      	mov	r3, r1
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	015b      	lsls	r3, r3, #5
 800378e:	1a5b      	subs	r3, r3, r1
 8003790:	4413      	add	r3, r2
 8003792:	4403      	add	r3, r0
 8003794:	3395      	adds	r3, #149	@ 0x95
 8003796:	4622      	mov	r2, r4
 8003798:	701a      	strb	r2, [r3, #0]
								}
								break;
 800379a:	e008      	b.n	80037ae <lora_network_save_current_work+0x4d2>
						for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	3301      	adds	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003854 <lora_network_save_current_work+0x578>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d3b2      	bcc.n	8003712 <lora_network_save_current_work+0x436>
 80037ac:	e000      	b.n	80037b0 <lora_network_save_current_work+0x4d4>
								break;
 80037ae:	bf00      	nop
							}
						}
						memcpy(&last_lora_send_packet_buffer[semaphore_count - 1], &lora_send_packet_buffer, sizeof(lora_packet_t));
 80037b0:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <lora_network_save_current_work+0x550>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <lora_network_save_current_work+0x564>)
 80037c4:	4413      	add	r3, r2
 80037c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <lora_network_save_current_work+0x554>)
 80037c8:	4618      	mov	r0, r3
 80037ca:	f102 0420 	add.w	r4, r2, #32
 80037ce:	4603      	mov	r3, r0
 80037d0:	4611      	mov	r1, r2
 80037d2:	f8d1 c000 	ldr.w	ip, [r1]
 80037d6:	684e      	ldr	r6, [r1, #4]
 80037d8:	688d      	ldr	r5, [r1, #8]
 80037da:	68c9      	ldr	r1, [r1, #12]
 80037dc:	f8c3 c000 	str.w	ip, [r3]
 80037e0:	605e      	str	r6, [r3, #4]
 80037e2:	609d      	str	r5, [r3, #8]
 80037e4:	60d9      	str	r1, [r3, #12]
 80037e6:	3210      	adds	r2, #16
 80037e8:	3010      	adds	r0, #16
 80037ea:	42a2      	cmp	r2, r4
 80037ec:	d1ef      	bne.n	80037ce <lora_network_save_current_work+0x4f2>
 80037ee:	4603      	mov	r3, r0
 80037f0:	6814      	ldr	r4, [r2, #0]
 80037f2:	6850      	ldr	r0, [r2, #4]
 80037f4:	6891      	ldr	r1, [r2, #8]
 80037f6:	601c      	str	r4, [r3, #0]
 80037f8:	6058      	str	r0, [r3, #4]
 80037fa:	6099      	str	r1, [r3, #8]
 80037fc:	8991      	ldrh	r1, [r2, #12]
 80037fe:	7b92      	ldrb	r2, [r2, #14]
 8003800:	8199      	strh	r1, [r3, #12]
 8003802:	739a      	strb	r2, [r3, #14]
						xTimerStopFromISR(send_data_timer, NULL);
 8003804:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <lora_network_save_current_work+0x57c>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2300      	movs	r3, #0
 800380e:	2200      	movs	r2, #0
 8003810:	2108      	movs	r1, #8
 8003812:	f009 fcaf 	bl	800d174 <xTimerGenericCommand>
					}
				}
			}
			STM_LOG("rp cmd: %2d\n", last_lora_send_packet_buffer[0].cmd, 11);
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <lora_network_save_current_work+0x564>)
 8003818:	795b      	ldrb	r3, [r3, #5]
 800381a:	220b      	movs	r2, #11
 800381c:	4619      	mov	r1, r3
 800381e:	480f      	ldr	r0, [pc, #60]	@ (800385c <lora_network_save_current_work+0x580>)
 8003820:	f7fd ff72 	bl	8001708 <STM_LOG>
		}
	}
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	200017a8 	.word	0x200017a8
 8003830:	200000a8 	.word	0x200000a8
 8003834:	200007b3 	.word	0x200007b3
 8003838:	200007c0 	.word	0x200007c0
 800383c:	200007b4 	.word	0x200007b4
 8003840:	200017ac 	.word	0x200017ac
 8003844:	2000178c 	.word	0x2000178c
 8003848:	200007b5 	.word	0x200007b5
 800384c:	20000f9c 	.word	0x20000f9c
 8003850:	200017a4 	.word	0x200017a4
 8003854:	200007b1 	.word	0x200007b1
 8003858:	20001790 	.word	0x20001790
 800385c:	0800f1c4 	.word	0x0800f1c4

08003860 <pc_user_cmd_handle>:

void pc_user_cmd_handle(uint8_t *test_buffer){
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	uint8_t cmd = test_buffer[1];
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	75fb      	strb	r3, [r7, #23]
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
	connection_task_notification_value_t NotificationValue;
	switch(cmd){
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b03      	cmp	r3, #3
 8003876:	f200 80ae 	bhi.w	80039d6 <pc_user_cmd_handle+0x176>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <pc_user_cmd_handle+0x20>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003891 	.word	0x08003891
 8003884:	080038e1 	.word	0x080038e1
 8003888:	0800392f 	.word	0x0800392f
 800388c:	0800397b 	.word	0x0800397b
	case PC_CMD_CONNECT_TO_ALL_NODES:
		if(lr_nw_connect_mode == LORA_STATUS_IDLE && lr_nw_disconnect_mode == LORA_STATUS_IDLE){
 8003890:	4b53      	ldr	r3, [pc, #332]	@ (80039e0 <pc_user_cmd_handle+0x180>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 8097 	bne.w	80039c8 <pc_user_cmd_handle+0x168>
 800389a:	4b52      	ldr	r3, [pc, #328]	@ (80039e4 <pc_user_cmd_handle+0x184>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 8092 	bne.w	80039c8 <pc_user_cmd_handle+0x168>
			lora_network_save_current_work();
 80038a4:	f7ff fd1a 	bl	80032dc <lora_network_save_current_work>
			lr_nw_connect_mode = LORA_CONNECT_MODE_ALL;
 80038a8:	4b4d      	ldr	r3, [pc, #308]	@ (80039e0 <pc_user_cmd_handle+0x180>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = START_ALL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	733b      	strb	r3, [r7, #12]
			NotificationValue.value = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 80038b6:	4b4c      	ldr	r3, [pc, #304]	@ (80039e8 <pc_user_cmd_handle+0x188>)
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f107 0210 	add.w	r2, r7, #16
 80038be:	f107 010c 	add.w	r1, r7, #12
 80038c2:	2300      	movs	r3, #0
 80038c4:	f007 fefc 	bl	800b6c0 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d07c      	beq.n	80039c8 <pc_user_cmd_handle+0x168>
 80038ce:	4b47      	ldr	r3, [pc, #284]	@ (80039ec <pc_user_cmd_handle+0x18c>)
 80038d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	f3bf 8f6f 	isb	sy
		}
		break;
 80038de:	e073      	b.n	80039c8 <pc_user_cmd_handle+0x168>

	case PC_CMD_CONNECT_TO_SPECIFIC_NODE:
		if(lr_nw_connect_mode == LORA_STATUS_IDLE && lr_nw_disconnect_mode == LORA_STATUS_IDLE){
 80038e0:	4b3f      	ldr	r3, [pc, #252]	@ (80039e0 <pc_user_cmd_handle+0x180>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d171      	bne.n	80039cc <pc_user_cmd_handle+0x16c>
 80038e8:	4b3e      	ldr	r3, [pc, #248]	@ (80039e4 <pc_user_cmd_handle+0x184>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d16d      	bne.n	80039cc <pc_user_cmd_handle+0x16c>
			lora_network_save_current_work();
 80038f0:	f7ff fcf4 	bl	80032dc <lora_network_save_current_work>
			lr_nw_connect_mode = LORA_CONNECT_MODE_SPECIFIC;
 80038f4:	4b3a      	ldr	r3, [pc, #232]	@ (80039e0 <pc_user_cmd_handle+0x180>)
 80038f6:	2202      	movs	r2, #2
 80038f8:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = START_SPECIFIC;
 80038fa:	2301      	movs	r3, #1
 80038fc:	733b      	strb	r3, [r7, #12]
			NotificationValue.value = test_buffer[2];
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	789b      	ldrb	r3, [r3, #2]
 8003902:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003904:	4b38      	ldr	r3, [pc, #224]	@ (80039e8 <pc_user_cmd_handle+0x188>)
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	f107 0210 	add.w	r2, r7, #16
 800390c:	f107 010c 	add.w	r1, r7, #12
 8003910:	2300      	movs	r3, #0
 8003912:	f007 fed5 	bl	800b6c0 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d057      	beq.n	80039cc <pc_user_cmd_handle+0x16c>
 800391c:	4b33      	ldr	r3, [pc, #204]	@ (80039ec <pc_user_cmd_handle+0x18c>)
 800391e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	f3bf 8f6f 	isb	sy
		}
		break;
 800392c:	e04e      	b.n	80039cc <pc_user_cmd_handle+0x16c>

	case PC_CMD_DISCONNECT_TO_ALL_NODES:
		if(lr_nw_disconnect_mode == LORA_STATUS_IDLE && lr_nw_connect_mode == LORA_STATUS_IDLE){
 800392e:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <pc_user_cmd_handle+0x184>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d14c      	bne.n	80039d0 <pc_user_cmd_handle+0x170>
 8003936:	4b2a      	ldr	r3, [pc, #168]	@ (80039e0 <pc_user_cmd_handle+0x180>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d148      	bne.n	80039d0 <pc_user_cmd_handle+0x170>
			lora_network_save_current_work();
 800393e:	f7ff fccd 	bl	80032dc <lora_network_save_current_work>
			lr_nw_disconnect_mode = LORA_DISCONNECT_MODE_ALL;
 8003942:	4b28      	ldr	r3, [pc, #160]	@ (80039e4 <pc_user_cmd_handle+0x184>)
 8003944:	2203      	movs	r2, #3
 8003946:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = STOP_ALL;
 8003948:	2302      	movs	r3, #2
 800394a:	733b      	strb	r3, [r7, #12]
			NotificationValue.value = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <pc_user_cmd_handle+0x190>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	f107 0210 	add.w	r2, r7, #16
 8003958:	f107 010c 	add.w	r1, r7, #12
 800395c:	2300      	movs	r3, #0
 800395e:	f007 feaf 	bl	800b6c0 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d033      	beq.n	80039d0 <pc_user_cmd_handle+0x170>
 8003968:	4b20      	ldr	r3, [pc, #128]	@ (80039ec <pc_user_cmd_handle+0x18c>)
 800396a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	f3bf 8f6f 	isb	sy
		}
		break;
 8003978:	e02a      	b.n	80039d0 <pc_user_cmd_handle+0x170>

	case PC_CMD_DISCONNECT_TO_SPECIFIC_NODE:
		if(lr_nw_disconnect_mode == LORA_STATUS_IDLE && lr_nw_connect_mode == LORA_STATUS_IDLE){
 800397a:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <pc_user_cmd_handle+0x184>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d128      	bne.n	80039d4 <pc_user_cmd_handle+0x174>
 8003982:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <pc_user_cmd_handle+0x180>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d124      	bne.n	80039d4 <pc_user_cmd_handle+0x174>
			lora_network_save_current_work();
 800398a:	f7ff fca7 	bl	80032dc <lora_network_save_current_work>
			lr_nw_connect_mode = LORA_DISCONNECT_MODE_SPECIFIC;
 800398e:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <pc_user_cmd_handle+0x180>)
 8003990:	2204      	movs	r2, #4
 8003992:	701a      	strb	r2, [r3, #0]
			NotificationValue.cmd = STOP_SPECIFIC;
 8003994:	2303      	movs	r3, #3
 8003996:	733b      	strb	r3, [r7, #12]
			NotificationValue.value = test_buffer[2];
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	789b      	ldrb	r3, [r3, #2]
 800399c:	737b      	strb	r3, [r7, #13]
			xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 800399e:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <pc_user_cmd_handle+0x190>)
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	f107 0210 	add.w	r2, r7, #16
 80039a6:	f107 010c 	add.w	r1, r7, #12
 80039aa:	2300      	movs	r3, #0
 80039ac:	f007 fe88 	bl	800b6c0 <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00e      	beq.n	80039d4 <pc_user_cmd_handle+0x174>
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <pc_user_cmd_handle+0x18c>)
 80039b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	f3bf 8f6f 	isb	sy
		}
		break;
 80039c6:	e005      	b.n	80039d4 <pc_user_cmd_handle+0x174>
		break;
 80039c8:	bf00      	nop
 80039ca:	e004      	b.n	80039d6 <pc_user_cmd_handle+0x176>
		break;
 80039cc:	bf00      	nop
 80039ce:	e002      	b.n	80039d6 <pc_user_cmd_handle+0x176>
		break;
 80039d0:	bf00      	nop
 80039d2:	e000      	b.n	80039d6 <pc_user_cmd_handle+0x176>
		break;
 80039d4:	bf00      	nop
	}

}
 80039d6:	bf00      	nop
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200007b6 	.word	0x200007b6
 80039e4:	200007b7 	.word	0x200007b7
 80039e8:	20001794 	.word	0x20001794
 80039ec:	e000ed04 	.word	0xe000ed04
 80039f0:	20001798 	.word	0x20001798

080039f4 <lora_network_cmd_ack_handle>:

/**
 * this function is used to handle ack from nodes
 * e.g. ack from node 1 to indicate that node 1 received sucessfully connect cmd from gw
 * **/
void lora_network_cmd_ack_handle(){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b090      	sub	sp, #64	@ 0x40
 80039f8:	af02      	add	r7, sp, #8
	uint8_t k = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t responsed = lora_receive_packet_buffer.responsed;
 8003a00:	4bbc      	ldr	r3, [pc, #752]	@ (8003cf4 <lora_network_cmd_ack_handle+0x300>)
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	76fb      	strb	r3, [r7, #27]
	uint8_t handling_last_buffer = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
	connection_task_notification_value_t NotificationValue;
	lora_packet_t * lora_buffer;

	// check if this is ack for lora_send_buffer or last_lora_send_buffers
	// if this ack is for lora_send_buffer
	if(responsed == lora_send_packet_buffer.packet_id){
 8003a10:	4bb9      	ldr	r3, [pc, #740]	@ (8003cf8 <lora_network_cmd_ack_handle+0x304>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	7efa      	ldrb	r2, [r7, #27]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d102      	bne.n	8003a20 <lora_network_cmd_ack_handle+0x2c>
		// get node object which the gateway received from
		lora_buffer = &lora_send_packet_buffer;
 8003a1a:	4bb7      	ldr	r3, [pc, #732]	@ (8003cf8 <lora_network_cmd_ack_handle+0x304>)
 8003a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a1e:	e02a      	b.n	8003a76 <lora_network_cmd_ack_handle+0x82>
	}

	else{
		for(k = 0; k < semaphore_count; k++){
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003a26:	e01f      	b.n	8003a68 <lora_network_cmd_ack_handle+0x74>
			if(responsed == last_lora_send_packet_buffer[k].packet_id){
 8003a28:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003a2c:	49b3      	ldr	r1, [pc, #716]	@ (8003cfc <lora_network_cmd_ack_handle+0x308>)
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	440b      	add	r3, r1
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	7efa      	ldrb	r2, [r7, #27]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d10d      	bne.n	8003a5e <lora_network_cmd_ack_handle+0x6a>
				lora_buffer = &last_lora_send_packet_buffer[k];
 8003a42:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	4aaa      	ldr	r2, [pc, #680]	@ (8003cfc <lora_network_cmd_ack_handle+0x308>)
 8003a52:	4413      	add	r3, r2
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30
				handling_last_buffer = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				break;
 8003a5c:	e00b      	b.n	8003a76 <lora_network_cmd_ack_handle+0x82>
		for(k = 0; k < semaphore_count; k++){
 8003a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003a62:	3301      	adds	r3, #1
 8003a64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003a68:	4ba5      	ldr	r3, [pc, #660]	@ (8003d00 <lora_network_cmd_ack_handle+0x30c>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d3d8      	bcc.n	8003a28 <lora_network_cmd_ack_handle+0x34>
			}
		}
	}

	STM_LOG("rp: %3d\n", responsed, 9);
 8003a76:	7efb      	ldrb	r3, [r7, #27]
 8003a78:	2209      	movs	r2, #9
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	48a1      	ldr	r0, [pc, #644]	@ (8003d04 <lora_network_cmd_ack_handle+0x310>)
 8003a7e:	f7fd fe43 	bl	8001708 <STM_LOG>

	if(lora_buffer != NULL){
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 824f 	beq.w	8003f28 <lora_network_cmd_ack_handle+0x534>
		lora_buffer->responsed = responsed;
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8c:	7efa      	ldrb	r2, [r7, #27]
 8003a8e:	711a      	strb	r2, [r3, #4]

		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	795b      	ldrb	r3, [r3, #5]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <lora_network_cmd_ack_handle+0xae>
 8003a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9a:	795b      	ldrb	r3, [r3, #5]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f040 8191 	bne.w	8003dc4 <lora_network_cmd_ack_handle+0x3d0>
			lora_node_t *lora_node;
			uint8_t index = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			for(index = 0; index < lr_nw_node_quantity; index++){
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aae:	e01d      	b.n	8003aec <lora_network_cmd_ack_handle+0xf8>
				if(NODE_DEVICE[index].id == lora_receive_packet_buffer.source_id){
 8003ab0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003ab4:	4994      	ldr	r1, [pc, #592]	@ (8003d08 <lora_network_cmd_ack_handle+0x314>)
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	015b      	lsls	r3, r3, #5
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	4b8b      	ldr	r3, [pc, #556]	@ (8003cf4 <lora_network_cmd_ack_handle+0x300>)
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d10a      	bne.n	8003ae2 <lora_network_cmd_ack_handle+0xee>
					lora_node = &NODE_DEVICE[index];
 8003acc:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	4a8b      	ldr	r2, [pc, #556]	@ (8003d08 <lora_network_cmd_ack_handle+0x314>)
 8003adc:	4413      	add	r3, r2
 8003ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
					break;
 8003ae0:	e00a      	b.n	8003af8 <lora_network_cmd_ack_handle+0x104>
			for(index = 0; index < lr_nw_node_quantity; index++){
 8003ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aec:	4b87      	ldr	r3, [pc, #540]	@ (8003d0c <lora_network_cmd_ack_handle+0x318>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3db      	bcc.n	8003ab0 <lora_network_cmd_ack_handle+0xbc>
				}
			}

			if(lora_buffer->cmd == LORA_CMD_CONNECT){
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	795b      	ldrb	r3, [r3, #5]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 8081 	bne.w	8003c04 <lora_network_cmd_ack_handle+0x210>
				xTimerStopFromISR(all_connect_timer, &pxHigherPriorityTaskWoken);
 8003b02:	4b83      	ldr	r3, [pc, #524]	@ (8003d10 <lora_network_cmd_ack_handle+0x31c>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	9200      	str	r2, [sp, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2108      	movs	r1, #8
 8003b12:	f009 fb2f 	bl	800d174 <xTimerGenericCommand>

				// confirm the node lr_nw_node_index is connected and increase lr_nw_connected_node_quantity
				lora_node->connected = 1;
 8003b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b18:	2201      	movs	r2, #1
 8003b1a:	709a      	strb	r2, [r3, #2]

				int packet_index = bsp_lora_check_cmd_in_node_send_packets(lora_node, LORA_CMD_CONNECT);
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b20:	f7fd ff89 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8003b24:	60f8      	str	r0, [r7, #12]
				if(packet_index != -1){
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d00c      	beq.n	8003b48 <lora_network_cmd_ack_handle+0x154>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 8003b2e:	4b71      	ldr	r3, [pc, #452]	@ (8003cf4 <lora_network_cmd_ack_handle+0x300>)
 8003b30:	7918      	ldrb	r0, [r3, #4]
 8003b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	3309      	adds	r3, #9
 8003b44:	4602      	mov	r2, r0
 8003b46:	701a      	strb	r2, [r3, #0]
				}
				lora_node->error = 0;
 8003b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	711a      	strb	r2, [r3, #4]
				memcpy((&CONNECTED_NODE[lr_nw_connected_node_quantity]), (lora_node), sizeof(lora_node_t));
 8003b4e:	4b71      	ldr	r3, [pc, #452]	@ (8003d14 <lora_network_cmd_ack_handle+0x320>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	015b      	lsls	r3, r3, #5
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003d18 <lora_network_cmd_ack_handle+0x324>)
 8003b60:	4413      	add	r3, r2
 8003b62:	f240 121f 	movw	r2, #287	@ 0x11f
 8003b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00a fda5 	bl	800e6b8 <memcpy>
				for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b74:	e01c      	b.n	8003bb0 <lora_network_cmd_ack_handle+0x1bc>
					memset(&CONNECTED_NODE[lr_nw_connected_node_quantity].last_lora_send_packet[i], 0, sizeof(lora_packet_t));
 8003b76:	4b67      	ldr	r3, [pc, #412]	@ (8003d14 <lora_network_cmd_ack_handle+0x320>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b80:	461a      	mov	r2, r3
 8003b82:	0052      	lsls	r2, r2, #1
 8003b84:	441a      	add	r2, r3
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	015b      	lsls	r3, r3, #5
 8003b92:	1a5b      	subs	r3, r3, r1
 8003b94:	4413      	add	r3, r2
 8003b96:	4a60      	ldr	r2, [pc, #384]	@ (8003d18 <lora_network_cmd_ack_handle+0x324>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	3305      	adds	r3, #5
 8003b9c:	222f      	movs	r2, #47	@ 0x2f
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f00a fd45 	bl	800e630 <memset>
				for(uint8_t i = 0; i < MAX_NODE_PACKET_ITEMS; i++)
 8003ba6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003baa:	3301      	adds	r3, #1
 8003bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d9de      	bls.n	8003b76 <lora_network_cmd_ack_handle+0x182>
				lr_nw_connected_node_quantity++;
 8003bb8:	4b56      	ldr	r3, [pc, #344]	@ (8003d14 <lora_network_cmd_ack_handle+0x320>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	4b54      	ldr	r3, [pc, #336]	@ (8003d14 <lora_network_cmd_ack_handle+0x320>)
 8003bc2:	701a      	strb	r2, [r3, #0]

				// notify to connection task with notification value = ACK
				NotificationValue.cmd = ACK;
 8003bc4:	2305      	movs	r3, #5
 8003bc6:	713b      	strb	r3, [r7, #4]
				NotificationValue.value = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	717b      	strb	r3, [r7, #5]
				HAL_UART_Transmit(&huart2, "notify\n", 7, 2000);
 8003bcc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	4952      	ldr	r1, [pc, #328]	@ (8003d1c <lora_network_cmd_ack_handle+0x328>)
 8003bd4:	4852      	ldr	r0, [pc, #328]	@ (8003d20 <lora_network_cmd_ack_handle+0x32c>)
 8003bd6:	f004 fd2b 	bl	8008630 <HAL_UART_Transmit>
				xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003bda:	4b52      	ldr	r3, [pc, #328]	@ (8003d24 <lora_network_cmd_ack_handle+0x330>)
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	f107 0208 	add.w	r2, r7, #8
 8003be2:	1d39      	adds	r1, r7, #4
 8003be4:	2300      	movs	r3, #0
 8003be6:	f007 fd6b 	bl	800b6c0 <xQueueGenericSendFromISR>
				portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 815e 	beq.w	8003eae <lora_network_cmd_ack_handle+0x4ba>
 8003bf2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d28 <lora_network_cmd_ack_handle+0x334>)
 8003bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	f3bf 8f6f 	isb	sy
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8003c02:	e154      	b.n	8003eae <lora_network_cmd_ack_handle+0x4ba>
			}

			else if(lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	795b      	ldrb	r3, [r3, #5]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	f040 8150 	bne.w	8003eae <lora_network_cmd_ack_handle+0x4ba>
				xTimerStopFromISR(all_disconnect_timer, &pxHigherPriorityTaskWoken);
 8003c0e:	4b47      	ldr	r3, [pc, #284]	@ (8003d2c <lora_network_cmd_ack_handle+0x338>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	2200      	movs	r2, #0
 8003c18:	9200      	str	r2, [sp, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2108      	movs	r1, #8
 8003c1e:	f009 faa9 	bl	800d174 <xTimerGenericCommand>

				lora_node->connected = 0;
 8003c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c24:	2200      	movs	r2, #0
 8003c26:	709a      	strb	r2, [r3, #2]
				int packet_index = bsp_lora_check_cmd_in_node_send_packets(lora_node, LORA_CMD_DISCONNECT);
 8003c28:	2101      	movs	r1, #1
 8003c2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c2c:	f7fd ff03 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8003c30:	6138      	str	r0, [r7, #16]
				if(packet_index != -1){
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d00c      	beq.n	8003c54 <lora_network_cmd_ack_handle+0x260>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <lora_network_cmd_ack_handle+0x300>)
 8003c3c:	7918      	ldrb	r0, [r3, #4]
 8003c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3309      	adds	r3, #9
 8003c50:	4602      	mov	r2, r0
 8003c52:	701a      	strb	r2, [r3, #0]
				}
				lora_node->error = 0;
 8003c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c56:	2200      	movs	r2, #0
 8003c58:	711a      	strb	r2, [r3, #4]
				for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8003c60:	e06b      	b.n	8003d3a <lora_network_cmd_ack_handle+0x346>
					if(CONNECTED_NODE[i].id == lora_node->id){
 8003c62:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003c66:	492c      	ldr	r1, [pc, #176]	@ (8003d18 <lora_network_cmd_ack_handle+0x324>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	015b      	lsls	r3, r3, #5
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	440b      	add	r3, r1
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d158      	bne.n	8003d30 <lora_network_cmd_ack_handle+0x33c>
						for(uint8_t j = i; j < lr_nw_connected_node_quantity - 1; j++){
 8003c7e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003c82:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003c86:	e01c      	b.n	8003cc2 <lora_network_cmd_ack_handle+0x2ce>
							memcpy(&CONNECTED_NODE[j], &CONNECTED_NODE[j + 1], sizeof(lora_node_t));
 8003c88:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	015b      	lsls	r3, r3, #5
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	4a20      	ldr	r2, [pc, #128]	@ (8003d18 <lora_network_cmd_ack_handle+0x324>)
 8003c98:	1898      	adds	r0, r3, r2
 8003c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	015b      	lsls	r3, r3, #5
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	4a1b      	ldr	r2, [pc, #108]	@ (8003d18 <lora_network_cmd_ack_handle+0x324>)
 8003cac:	4413      	add	r3, r2
 8003cae:	f240 121f 	movw	r2, #287	@ 0x11f
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f00a fd00 	bl	800e6b8 <memcpy>
						for(uint8_t j = i; j < lr_nw_connected_node_quantity - 1; j++){
 8003cb8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003cc2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003cc6:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <lora_network_cmd_ack_handle+0x320>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	dbdb      	blt.n	8003c88 <lora_network_cmd_ack_handle+0x294>
						}
						memset(&CONNECTED_NODE[lr_nw_connected_node_quantity - 1], 0, sizeof(lora_node_t));
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <lora_network_cmd_ack_handle+0x320>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	015b      	lsls	r3, r3, #5
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d18 <lora_network_cmd_ack_handle+0x324>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f240 121f 	movw	r2, #287	@ 0x11f
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f00a fca0 	bl	800e630 <memset>
						break;
 8003cf0:	e029      	b.n	8003d46 <lora_network_cmd_ack_handle+0x352>
 8003cf2:	bf00      	nop
 8003cf4:	200000d8 	.word	0x200000d8
 8003cf8:	200000a8 	.word	0x200000a8
 8003cfc:	200017ac 	.word	0x200017ac
 8003d00:	200017a8 	.word	0x200017a8
 8003d04:	0800f1d4 	.word	0x0800f1d4
 8003d08:	200007c0 	.word	0x200007c0
 8003d0c:	200007b0 	.word	0x200007b0
 8003d10:	20001788 	.word	0x20001788
 8003d14:	200007b1 	.word	0x200007b1
 8003d18:	20000f9c 	.word	0x20000f9c
 8003d1c:	0800f1e0 	.word	0x0800f1e0
 8003d20:	20001978 	.word	0x20001978
 8003d24:	20001794 	.word	0x20001794
 8003d28:	e000ed04 	.word	0xe000ed04
 8003d2c:	2000178c 	.word	0x2000178c
				for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8003d30:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003d34:	3301      	adds	r3, #1
 8003d36:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8003d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f30 <lora_network_cmd_ack_handle+0x53c>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d38d      	bcc.n	8003c62 <lora_network_cmd_ack_handle+0x26e>
					}
				}
				lr_nw_connected_node_quantity--;
 8003d46:	4b7a      	ldr	r3, [pc, #488]	@ (8003f30 <lora_network_cmd_ack_handle+0x53c>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b78      	ldr	r3, [pc, #480]	@ (8003f30 <lora_network_cmd_ack_handle+0x53c>)
 8003d50:	701a      	strb	r2, [r3, #0]
				NotificationValue.cmd = ACK;
 8003d52:	2305      	movs	r3, #5
 8003d54:	713b      	strb	r3, [r7, #4]
				NotificationValue.value = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	717b      	strb	r3, [r7, #5]

				STM_LOG("node qtt: %3d\n", lr_nw_connected_node_quantity, 14);
 8003d5a:	4b75      	ldr	r3, [pc, #468]	@ (8003f30 <lora_network_cmd_ack_handle+0x53c>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	220e      	movs	r2, #14
 8003d60:	4619      	mov	r1, r3
 8003d62:	4874      	ldr	r0, [pc, #464]	@ (8003f34 <lora_network_cmd_ack_handle+0x540>)
 8003d64:	f7fd fcd0 	bl	8001708 <STM_LOG>
				for(int i = 0; i < lr_nw_connected_node_quantity; i++){
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6c:	e010      	b.n	8003d90 <lora_network_cmd_ack_handle+0x39c>
					STM_LOG("dcn node id: %2d\n", CONNECTED_NODE[i].id, 16);
 8003d6e:	4972      	ldr	r1, [pc, #456]	@ (8003f38 <lora_network_cmd_ack_handle+0x544>)
 8003d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	015b      	lsls	r3, r3, #5
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2210      	movs	r2, #16
 8003d82:	4619      	mov	r1, r3
 8003d84:	486d      	ldr	r0, [pc, #436]	@ (8003f3c <lora_network_cmd_ack_handle+0x548>)
 8003d86:	f7fd fcbf 	bl	8001708 <STM_LOG>
				for(int i = 0; i < lr_nw_connected_node_quantity; i++){
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d90:	4b67      	ldr	r3, [pc, #412]	@ (8003f30 <lora_network_cmd_ack_handle+0x53c>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	dbe8      	blt.n	8003d6e <lora_network_cmd_ack_handle+0x37a>
				}

				xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003d9c:	4b68      	ldr	r3, [pc, #416]	@ (8003f40 <lora_network_cmd_ack_handle+0x54c>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	f107 0208 	add.w	r2, r7, #8
 8003da4:	1d39      	adds	r1, r7, #4
 8003da6:	2300      	movs	r3, #0
 8003da8:	f007 fc8a 	bl	800b6c0 <xQueueGenericSendFromISR>
				portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d07d      	beq.n	8003eae <lora_network_cmd_ack_handle+0x4ba>
 8003db2:	4b64      	ldr	r3, [pc, #400]	@ (8003f44 <lora_network_cmd_ack_handle+0x550>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8003dc2:	e074      	b.n	8003eae <lora_network_cmd_ack_handle+0x4ba>
			}
		}
		else if(lora_buffer->cmd == LORA_CMD_READ_DATA){
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	795b      	ldrb	r3, [r3, #5]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d173      	bne.n	8003eb4 <lora_network_cmd_ack_handle+0x4c0>
			xTimerStopFromISR(send_data_timer, &pxHigherPriorityTaskWoken);
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f48 <lora_network_cmd_ack_handle+0x554>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	f107 0308 	add.w	r3, r7, #8
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	9200      	str	r2, [sp, #0]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2108      	movs	r1, #8
 8003ddc:	f009 f9ca 	bl	800d174 <xTimerGenericCommand>
			for(int i = 0; i < lr_nw_connected_node_quantity; i++){
 8003de0:	2300      	movs	r3, #0
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	e05c      	b.n	8003ea0 <lora_network_cmd_ack_handle+0x4ac>
				if(CONNECTED_NODE[i].id == lora_receive_packet_buffer.source_id){
 8003de6:	4954      	ldr	r1, [pc, #336]	@ (8003f38 <lora_network_cmd_ack_handle+0x544>)
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	015b      	lsls	r3, r3, #5
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	440b      	add	r3, r1
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	4b54      	ldr	r3, [pc, #336]	@ (8003f4c <lora_network_cmd_ack_handle+0x558>)
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d14c      	bne.n	8003e9a <lora_network_cmd_ack_handle+0x4a6>
					int packet_index = bsp_lora_check_cmd_in_node_send_packets(&CONNECTED_NODE[i], LORA_CMD_READ_DATA);
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	015b      	lsls	r3, r3, #5
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f38 <lora_network_cmd_ack_handle+0x544>)
 8003e0e:	4413      	add	r3, r2
 8003e10:	2103      	movs	r1, #3
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd fe0f 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 8003e18:	6178      	str	r0, [r7, #20]
					if(packet_index != -1){
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d011      	beq.n	8003e46 <lora_network_cmd_ack_handle+0x452>
						CONNECTED_NODE[i].last_lora_send_packet[packet_index].responsed = responsed;
 8003e22:	4845      	ldr	r0, [pc, #276]	@ (8003f38 <lora_network_cmd_ack_handle+0x544>)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6a39      	ldr	r1, [r7, #32]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	0052      	lsls	r2, r2, #1
 8003e2c:	441a      	add	r2, r3
 8003e2e:	0112      	lsls	r2, r2, #4
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	460b      	mov	r3, r1
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	440b      	add	r3, r1
 8003e38:	015b      	lsls	r3, r3, #5
 8003e3a:	1a5b      	subs	r3, r3, r1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4403      	add	r3, r0
 8003e40:	3309      	adds	r3, #9
 8003e42:	7efa      	ldrb	r2, [r7, #27]
 8003e44:	701a      	strb	r2, [r3, #0]
					}

					CONNECTED_NODE[i].error = 0;
 8003e46:	493c      	ldr	r1, [pc, #240]	@ (8003f38 <lora_network_cmd_ack_handle+0x544>)
 8003e48:	6a3a      	ldr	r2, [r7, #32]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	015b      	lsls	r3, r3, #5
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	440b      	add	r3, r1
 8003e56:	3304      	adds	r3, #4
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
					NotificationValue.cmd = ACK;
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	713b      	strb	r3, [r7, #4]
					NotificationValue.value = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	717b      	strb	r3, [r7, #5]

					HAL_UART_Transmit(&huart2, "notify\n", 7, 2000);
 8003e64:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003e68:	2207      	movs	r2, #7
 8003e6a:	4939      	ldr	r1, [pc, #228]	@ (8003f50 <lora_network_cmd_ack_handle+0x55c>)
 8003e6c:	4839      	ldr	r0, [pc, #228]	@ (8003f54 <lora_network_cmd_ack_handle+0x560>)
 8003e6e:	f004 fbdf 	bl	8008630 <HAL_UART_Transmit>
					xQueueSendFromISR(send_request_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8003e72:	4b39      	ldr	r3, [pc, #228]	@ (8003f58 <lora_network_cmd_ack_handle+0x564>)
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	f107 0208 	add.w	r2, r7, #8
 8003e7a:	1d39      	adds	r1, r7, #4
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f007 fc1f 	bl	800b6c0 <xQueueGenericSendFromISR>
					portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d014      	beq.n	8003eb2 <lora_network_cmd_ack_handle+0x4be>
 8003e88:	4b2e      	ldr	r3, [pc, #184]	@ (8003f44 <lora_network_cmd_ack_handle+0x550>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
					break;
 8003e98:	e00b      	b.n	8003eb2 <lora_network_cmd_ack_handle+0x4be>
			for(int i = 0; i < lr_nw_connected_node_quantity; i++){
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	4b23      	ldr	r3, [pc, #140]	@ (8003f30 <lora_network_cmd_ack_handle+0x53c>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	db9c      	blt.n	8003de6 <lora_network_cmd_ack_handle+0x3f2>
 8003eac:	e002      	b.n	8003eb4 <lora_network_cmd_ack_handle+0x4c0>
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <lora_network_cmd_ack_handle+0x4c0>
					break;
 8003eb2:	bf00      	nop
				}
			}
		}

		if(handling_last_buffer == 1){
 8003eb4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d135      	bne.n	8003f28 <lora_network_cmd_ack_handle+0x534>
			for(int i = k; i < semaphore_count - 1; i++){
 8003ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e017      	b.n	8003ef4 <lora_network_cmd_ack_handle+0x500>
				memcpy(&last_lora_send_packet_buffer[i], &last_lora_send_packet_buffer[i + 1], sizeof(lora_packet_t));
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	4a22      	ldr	r2, [pc, #136]	@ (8003f5c <lora_network_cmd_ack_handle+0x568>)
 8003ed2:	1898      	adds	r0, r3, r2
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f5c <lora_network_cmd_ack_handle+0x568>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	222f      	movs	r2, #47	@ 0x2f
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f00a fbe5 	bl	800e6b8 <memcpy>
			for(int i = k; i < semaphore_count - 1; i++){
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <lora_network_cmd_ack_handle+0x56c>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	dbe0      	blt.n	8003ec4 <lora_network_cmd_ack_handle+0x4d0>
			}
			memset(&last_lora_send_packet_buffer[semaphore_count - 1], 0, sizeof(lora_packet_t));
 8003f02:	4b17      	ldr	r3, [pc, #92]	@ (8003f60 <lora_network_cmd_ack_handle+0x56c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	4a11      	ldr	r2, [pc, #68]	@ (8003f5c <lora_network_cmd_ack_handle+0x568>)
 8003f16:	4413      	add	r3, r2
 8003f18:	222f      	movs	r2, #47	@ 0x2f
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00a fb87 	bl	800e630 <memset>
			handling_last_buffer = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
	}
}
 8003f28:	bf00      	nop
 8003f2a:	3738      	adds	r7, #56	@ 0x38
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200007b1 	.word	0x200007b1
 8003f34:	0800f1e8 	.word	0x0800f1e8
 8003f38:	20000f9c 	.word	0x20000f9c
 8003f3c:	0800f1f8 	.word	0x0800f1f8
 8003f40:	20001798 	.word	0x20001798
 8003f44:	e000ed04 	.word	0xe000ed04
 8003f48:	20001790 	.word	0x20001790
 8003f4c:	200000d8 	.word	0x200000d8
 8003f50:	0800f1e0 	.word	0x0800f1e0
 8003f54:	20001978 	.word	0x20001978
 8003f58:	2000179c 	.word	0x2000179c
 8003f5c:	200017ac 	.word	0x200017ac
 8003f60:	200017a8 	.word	0x200017a8

08003f64 <lora_network_cmd_nack_handle>:


void lora_network_cmd_nack_handle(){
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08c      	sub	sp, #48	@ 0x30
 8003f68:	af02      	add	r7, sp, #8
	uint8_t k = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t responsed = lora_receive_packet_buffer.responsed;
 8003f70:	4bb7      	ldr	r3, [pc, #732]	@ (8004250 <lora_network_cmd_nack_handle+0x2ec>)
 8003f72:	791b      	ldrb	r3, [r3, #4]
 8003f74:	763b      	strb	r3, [r7, #24]
	uint8_t handling_last_buffer = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60bb      	str	r3, [r7, #8]
	connection_task_notification_value_t NotificationValue;
	lora_packet_t * lora_buffer;

	// check if this is ack for lora_send_buffer or last_lora_send_buffers
	// if this ack is for lora_send_buffer
	if(responsed == lora_send_packet_buffer.packet_id){
 8003f80:	4bb4      	ldr	r3, [pc, #720]	@ (8004254 <lora_network_cmd_nack_handle+0x2f0>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	7e3a      	ldrb	r2, [r7, #24]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d102      	bne.n	8003f90 <lora_network_cmd_nack_handle+0x2c>
		// get node object which the gateway received from
		lora_buffer = &lora_send_packet_buffer;
 8003f8a:	4bb2      	ldr	r3, [pc, #712]	@ (8004254 <lora_network_cmd_nack_handle+0x2f0>)
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	e02a      	b.n	8003fe6 <lora_network_cmd_nack_handle+0x82>
	}

	else{
		for(k = 0; k < semaphore_count; k++){
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f96:	e01f      	b.n	8003fd8 <lora_network_cmd_nack_handle+0x74>
			if(responsed == last_lora_send_packet_buffer[k].packet_id){
 8003f98:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003f9c:	49ae      	ldr	r1, [pc, #696]	@ (8004258 <lora_network_cmd_nack_handle+0x2f4>)
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	440b      	add	r3, r1
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	7e3a      	ldrb	r2, [r7, #24]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d10d      	bne.n	8003fce <lora_network_cmd_nack_handle+0x6a>
				lora_buffer = &last_lora_send_packet_buffer[k];
 8003fb2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	4aa5      	ldr	r2, [pc, #660]	@ (8004258 <lora_network_cmd_nack_handle+0x2f4>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	623b      	str	r3, [r7, #32]
				handling_last_buffer = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8003fcc:	e00b      	b.n	8003fe6 <lora_network_cmd_nack_handle+0x82>
		for(k = 0; k < semaphore_count; k++){
 8003fce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fd8:	4ba0      	ldr	r3, [pc, #640]	@ (800425c <lora_network_cmd_nack_handle+0x2f8>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3d8      	bcc.n	8003f98 <lora_network_cmd_nack_handle+0x34>
			}
		}
	}

	STM_LOG("rp: %3d\n", responsed, 9);
 8003fe6:	7e3b      	ldrb	r3, [r7, #24]
 8003fe8:	2209      	movs	r2, #9
 8003fea:	4619      	mov	r1, r3
 8003fec:	489c      	ldr	r0, [pc, #624]	@ (8004260 <lora_network_cmd_nack_handle+0x2fc>)
 8003fee:	f7fd fb8b 	bl	8001708 <STM_LOG>

	if(lora_buffer != NULL){
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8198 	beq.w	800432a <lora_network_cmd_nack_handle+0x3c6>
		lora_buffer->responsed = responsed;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	7e3a      	ldrb	r2, [r7, #24]
 8003ffe:	711a      	strb	r2, [r3, #4]

		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	795b      	ldrb	r3, [r3, #5]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <lora_network_cmd_nack_handle+0xae>
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	795b      	ldrb	r3, [r3, #5]
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 80b3 	bne.w	8004178 <lora_network_cmd_nack_handle+0x214>
			lora_node_t *lora_node;
			uint8_t index = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	76fb      	strb	r3, [r7, #27]
			for(index = 0; index < lr_nw_node_quantity; index++){
 8004016:	2300      	movs	r3, #0
 8004018:	76fb      	strb	r3, [r7, #27]
 800401a:	e019      	b.n	8004050 <lora_network_cmd_nack_handle+0xec>
				if(NODE_DEVICE[index].id == lora_receive_packet_buffer.source_id){
 800401c:	7efa      	ldrb	r2, [r7, #27]
 800401e:	4991      	ldr	r1, [pc, #580]	@ (8004264 <lora_network_cmd_nack_handle+0x300>)
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	015b      	lsls	r3, r3, #5
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	440b      	add	r3, r1
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	4b88      	ldr	r3, [pc, #544]	@ (8004250 <lora_network_cmd_nack_handle+0x2ec>)
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	429a      	cmp	r2, r3
 8004034:	d109      	bne.n	800404a <lora_network_cmd_nack_handle+0xe6>
					lora_node = &NODE_DEVICE[index];
 8004036:	7efa      	ldrb	r2, [r7, #27]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	4a88      	ldr	r2, [pc, #544]	@ (8004264 <lora_network_cmd_nack_handle+0x300>)
 8004044:	4413      	add	r3, r2
 8004046:	61fb      	str	r3, [r7, #28]
					break;
 8004048:	e007      	b.n	800405a <lora_network_cmd_nack_handle+0xf6>
			for(index = 0; index < lr_nw_node_quantity; index++){
 800404a:	7efb      	ldrb	r3, [r7, #27]
 800404c:	3301      	adds	r3, #1
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	4b85      	ldr	r3, [pc, #532]	@ (8004268 <lora_network_cmd_nack_handle+0x304>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	7efa      	ldrb	r2, [r7, #27]
 8004056:	429a      	cmp	r2, r3
 8004058:	d3e0      	bcc.n	800401c <lora_network_cmd_nack_handle+0xb8>
				}
			}

			if(lora_buffer->cmd == LORA_CMD_CONNECT){
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	795b      	ldrb	r3, [r3, #5]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d142      	bne.n	80040e8 <lora_network_cmd_nack_handle+0x184>
				xTimerStopFromISR(all_connect_timer, &pxHigherPriorityTaskWoken);
 8004062:	4b82      	ldr	r3, [pc, #520]	@ (800426c <lora_network_cmd_nack_handle+0x308>)
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	2200      	movs	r2, #0
 800406c:	9200      	str	r2, [sp, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	2108      	movs	r1, #8
 8004072:	f009 f87f 	bl	800d174 <xTimerGenericCommand>

				int packet_index = bsp_lora_check_cmd_in_node_send_packets(lora_node, LORA_CMD_CONNECT);
 8004076:	2100      	movs	r1, #0
 8004078:	69f8      	ldr	r0, [r7, #28]
 800407a:	f7fd fcdc 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 800407e:	60f8      	str	r0, [r7, #12]
				if(packet_index != -1){
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d00c      	beq.n	80040a2 <lora_network_cmd_nack_handle+0x13e>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 8004088:	4b71      	ldr	r3, [pc, #452]	@ (8004250 <lora_network_cmd_nack_handle+0x2ec>)
 800408a:	7918      	ldrb	r0, [r3, #4]
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	440b      	add	r3, r1
 800409c:	3309      	adds	r3, #9
 800409e:	4602      	mov	r2, r0
 80040a0:	701a      	strb	r2, [r3, #0]
				}
				lora_node->error = 1;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2201      	movs	r2, #1
 80040a6:	711a      	strb	r2, [r3, #4]

				// notify to connection task with notification value = NAK
				NotificationValue.cmd = NAK;
 80040a8:	2306      	movs	r3, #6
 80040aa:	713b      	strb	r3, [r7, #4]
				NotificationValue.value = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	717b      	strb	r3, [r7, #5]
				HAL_UART_Transmit(&huart2, "nak connect\n", 12, 2000);
 80040b0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80040b4:	220c      	movs	r2, #12
 80040b6:	496e      	ldr	r1, [pc, #440]	@ (8004270 <lora_network_cmd_nack_handle+0x30c>)
 80040b8:	486e      	ldr	r0, [pc, #440]	@ (8004274 <lora_network_cmd_nack_handle+0x310>)
 80040ba:	f004 fab9 	bl	8008630 <HAL_UART_Transmit>
				xQueueSendFromISR(all_connect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 80040be:	4b6e      	ldr	r3, [pc, #440]	@ (8004278 <lora_network_cmd_nack_handle+0x314>)
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	f107 0208 	add.w	r2, r7, #8
 80040c6:	1d39      	adds	r1, r7, #4
 80040c8:	2300      	movs	r3, #0
 80040ca:	f007 faf9 	bl	800b6c0 <xQueueGenericSendFromISR>
				portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80ed 	beq.w	80042b0 <lora_network_cmd_nack_handle+0x34c>
 80040d6:	4b69      	ldr	r3, [pc, #420]	@ (800427c <lora_network_cmd_nack_handle+0x318>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80040e6:	e0e3      	b.n	80042b0 <lora_network_cmd_nack_handle+0x34c>
			}

			else if(lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	795b      	ldrb	r3, [r3, #5]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	f040 80df 	bne.w	80042b0 <lora_network_cmd_nack_handle+0x34c>
				xTimerStopFromISR(all_disconnect_timer, &pxHigherPriorityTaskWoken);
 80040f2:	4b63      	ldr	r3, [pc, #396]	@ (8004280 <lora_network_cmd_nack_handle+0x31c>)
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	f107 0308 	add.w	r3, r7, #8
 80040fa:	2200      	movs	r2, #0
 80040fc:	9200      	str	r2, [sp, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	2108      	movs	r1, #8
 8004102:	f009 f837 	bl	800d174 <xTimerGenericCommand>

				int packet_index = bsp_lora_check_cmd_in_node_send_packets(lora_node, LORA_CMD_DISCONNECT);
 8004106:	2101      	movs	r1, #1
 8004108:	69f8      	ldr	r0, [r7, #28]
 800410a:	f7fd fc94 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 800410e:	6138      	str	r0, [r7, #16]
				if(packet_index != -1){
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d00c      	beq.n	8004132 <lora_network_cmd_nack_handle+0x1ce>
					lora_node->last_lora_send_packet[packet_index].responsed = lora_receive_packet_buffer.responsed;
 8004118:	4b4d      	ldr	r3, [pc, #308]	@ (8004250 <lora_network_cmd_nack_handle+0x2ec>)
 800411a:	7918      	ldrb	r0, [r3, #4]
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	440b      	add	r3, r1
 800412c:	3309      	adds	r3, #9
 800412e:	4602      	mov	r2, r0
 8004130:	701a      	strb	r2, [r3, #0]
				}
				lora_node->error = 1;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2201      	movs	r2, #1
 8004136:	711a      	strb	r2, [r3, #4]
				NotificationValue.cmd = NAK;
 8004138:	2306      	movs	r3, #6
 800413a:	713b      	strb	r3, [r7, #4]
				NotificationValue.value = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	717b      	strb	r3, [r7, #5]
				HAL_UART_Transmit(&huart2, "nak disconnect\n", 15, 2000);
 8004140:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004144:	220f      	movs	r2, #15
 8004146:	494f      	ldr	r1, [pc, #316]	@ (8004284 <lora_network_cmd_nack_handle+0x320>)
 8004148:	484a      	ldr	r0, [pc, #296]	@ (8004274 <lora_network_cmd_nack_handle+0x310>)
 800414a:	f004 fa71 	bl	8008630 <HAL_UART_Transmit>


				xQueueSendFromISR(all_disconnect_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 800414e:	4b4e      	ldr	r3, [pc, #312]	@ (8004288 <lora_network_cmd_nack_handle+0x324>)
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	f107 0208 	add.w	r2, r7, #8
 8004156:	1d39      	adds	r1, r7, #4
 8004158:	2300      	movs	r3, #0
 800415a:	f007 fab1 	bl	800b6c0 <xQueueGenericSendFromISR>
				portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a5 	beq.w	80042b0 <lora_network_cmd_nack_handle+0x34c>
 8004166:	4b45      	ldr	r3, [pc, #276]	@ (800427c <lora_network_cmd_nack_handle+0x318>)
 8004168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	f3bf 8f6f 	isb	sy
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 8004176:	e09b      	b.n	80042b0 <lora_network_cmd_nack_handle+0x34c>
			}
		}

		else if(lora_buffer->cmd == LORA_CMD_READ_DATA){
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	795b      	ldrb	r3, [r3, #5]
 800417c:	2b03      	cmp	r3, #3
 800417e:	f040 809a 	bne.w	80042b6 <lora_network_cmd_nack_handle+0x352>
			xTimerStopFromISR(send_data_timer, &pxHigherPriorityTaskWoken);
 8004182:	4b42      	ldr	r3, [pc, #264]	@ (800428c <lora_network_cmd_nack_handle+0x328>)
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	2200      	movs	r2, #0
 800418c:	9200      	str	r2, [sp, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	2108      	movs	r1, #8
 8004192:	f008 ffef 	bl	800d174 <xTimerGenericCommand>
			for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 8004196:	2300      	movs	r3, #0
 8004198:	76bb      	strb	r3, [r7, #26]
 800419a:	e082      	b.n	80042a2 <lora_network_cmd_nack_handle+0x33e>
				if(CONNECTED_NODE[i].id == lora_receive_packet_buffer.source_id){
 800419c:	7eba      	ldrb	r2, [r7, #26]
 800419e:	493c      	ldr	r1, [pc, #240]	@ (8004290 <lora_network_cmd_nack_handle+0x32c>)
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	015b      	lsls	r3, r3, #5
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	440b      	add	r3, r1
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	4b28      	ldr	r3, [pc, #160]	@ (8004250 <lora_network_cmd_nack_handle+0x2ec>)
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d172      	bne.n	800429c <lora_network_cmd_nack_handle+0x338>
					int packet_index = bsp_lora_check_cmd_in_node_send_packets(&CONNECTED_NODE[i], LORA_CMD_READ_DATA);
 80041b6:	7eba      	ldrb	r2, [r7, #26]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	015b      	lsls	r3, r3, #5
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	4a33      	ldr	r2, [pc, #204]	@ (8004290 <lora_network_cmd_nack_handle+0x32c>)
 80041c4:	4413      	add	r3, r2
 80041c6:	2103      	movs	r1, #3
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd fc34 	bl	8001a36 <bsp_lora_check_cmd_in_node_send_packets>
 80041ce:	6178      	str	r0, [r7, #20]
					if(packet_index != -1){
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d011      	beq.n	80041fc <lora_network_cmd_nack_handle+0x298>
						CONNECTED_NODE[i].last_lora_send_packet[packet_index].responsed = responsed;
 80041d8:	7eb9      	ldrb	r1, [r7, #26]
 80041da:	482d      	ldr	r0, [pc, #180]	@ (8004290 <lora_network_cmd_nack_handle+0x32c>)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	461a      	mov	r2, r3
 80041e0:	0052      	lsls	r2, r2, #1
 80041e2:	441a      	add	r2, r3
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	460b      	mov	r3, r1
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	440b      	add	r3, r1
 80041ee:	015b      	lsls	r3, r3, #5
 80041f0:	1a5b      	subs	r3, r3, r1
 80041f2:	4413      	add	r3, r2
 80041f4:	4403      	add	r3, r0
 80041f6:	3309      	adds	r3, #9
 80041f8:	7e3a      	ldrb	r2, [r7, #24]
 80041fa:	701a      	strb	r2, [r3, #0]
					}

					CONNECTED_NODE[i].error = 1;
 80041fc:	7eba      	ldrb	r2, [r7, #26]
 80041fe:	4924      	ldr	r1, [pc, #144]	@ (8004290 <lora_network_cmd_nack_handle+0x32c>)
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	440b      	add	r3, r1
 800420c:	3304      	adds	r3, #4
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
					NotificationValue.cmd = NAK;
 8004212:	2306      	movs	r3, #6
 8004214:	713b      	strb	r3, [r7, #4]
					NotificationValue.value = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	717b      	strb	r3, [r7, #5]

					HAL_UART_Transmit(&huart2, "nak send\n", 9, 2000);
 800421a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800421e:	2209      	movs	r2, #9
 8004220:	491c      	ldr	r1, [pc, #112]	@ (8004294 <lora_network_cmd_nack_handle+0x330>)
 8004222:	4814      	ldr	r0, [pc, #80]	@ (8004274 <lora_network_cmd_nack_handle+0x310>)
 8004224:	f004 fa04 	bl	8008630 <HAL_UART_Transmit>
					xQueueSendFromISR(send_request_queue, &NotificationValue, &pxHigherPriorityTaskWoken);
 8004228:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <lora_network_cmd_nack_handle+0x334>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	f107 0208 	add.w	r2, r7, #8
 8004230:	1d39      	adds	r1, r7, #4
 8004232:	2300      	movs	r3, #0
 8004234:	f007 fa44 	bl	800b6c0 <xQueueGenericSendFromISR>
					portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03a      	beq.n	80042b4 <lora_network_cmd_nack_handle+0x350>
 800423e:	4b0f      	ldr	r3, [pc, #60]	@ (800427c <lora_network_cmd_nack_handle+0x318>)
 8004240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	f3bf 8f6f 	isb	sy
					break;
 800424e:	e031      	b.n	80042b4 <lora_network_cmd_nack_handle+0x350>
 8004250:	200000d8 	.word	0x200000d8
 8004254:	200000a8 	.word	0x200000a8
 8004258:	200017ac 	.word	0x200017ac
 800425c:	200017a8 	.word	0x200017a8
 8004260:	0800f1d4 	.word	0x0800f1d4
 8004264:	200007c0 	.word	0x200007c0
 8004268:	200007b0 	.word	0x200007b0
 800426c:	20001788 	.word	0x20001788
 8004270:	0800f20c 	.word	0x0800f20c
 8004274:	20001978 	.word	0x20001978
 8004278:	20001794 	.word	0x20001794
 800427c:	e000ed04 	.word	0xe000ed04
 8004280:	2000178c 	.word	0x2000178c
 8004284:	0800f21c 	.word	0x0800f21c
 8004288:	20001798 	.word	0x20001798
 800428c:	20001790 	.word	0x20001790
 8004290:	20000f9c 	.word	0x20000f9c
 8004294:	0800f22c 	.word	0x0800f22c
 8004298:	2000179c 	.word	0x2000179c
			for(uint8_t i = 0; i < lr_nw_connected_node_quantity; i++){
 800429c:	7ebb      	ldrb	r3, [r7, #26]
 800429e:	3301      	adds	r3, #1
 80042a0:	76bb      	strb	r3, [r7, #26]
 80042a2:	4b24      	ldr	r3, [pc, #144]	@ (8004334 <lora_network_cmd_nack_handle+0x3d0>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	7eba      	ldrb	r2, [r7, #26]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f4ff af77 	bcc.w	800419c <lora_network_cmd_nack_handle+0x238>
 80042ae:	e002      	b.n	80042b6 <lora_network_cmd_nack_handle+0x352>
		if(lora_buffer->cmd == LORA_CMD_CONNECT || lora_buffer->cmd == LORA_CMD_DISCONNECT){
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <lora_network_cmd_nack_handle+0x352>
					break;
 80042b4:	bf00      	nop
				}
			}
		}

		if(handling_last_buffer == 1){
 80042b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d135      	bne.n	800432a <lora_network_cmd_nack_handle+0x3c6>
			for(uint8_t i = k; i < semaphore_count - 1; i++){
 80042be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042c2:	767b      	strb	r3, [r7, #25]
 80042c4:	e017      	b.n	80042f6 <lora_network_cmd_nack_handle+0x392>
				memcpy(&last_lora_send_packet_buffer[i], &last_lora_send_packet_buffer[i + 1], sizeof(lora_packet_t));
 80042c6:	7e7a      	ldrb	r2, [r7, #25]
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	4a19      	ldr	r2, [pc, #100]	@ (8004338 <lora_network_cmd_nack_handle+0x3d4>)
 80042d4:	1898      	adds	r0, r3, r2
 80042d6:	7e7b      	ldrb	r3, [r7, #25]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	4613      	mov	r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	4a14      	ldr	r2, [pc, #80]	@ (8004338 <lora_network_cmd_nack_handle+0x3d4>)
 80042e6:	4413      	add	r3, r2
 80042e8:	222f      	movs	r2, #47	@ 0x2f
 80042ea:	4619      	mov	r1, r3
 80042ec:	f00a f9e4 	bl	800e6b8 <memcpy>
			for(uint8_t i = k; i < semaphore_count - 1; i++){
 80042f0:	7e7b      	ldrb	r3, [r7, #25]
 80042f2:	3301      	adds	r3, #1
 80042f4:	767b      	strb	r3, [r7, #25]
 80042f6:	7e7a      	ldrb	r2, [r7, #25]
 80042f8:	4b10      	ldr	r3, [pc, #64]	@ (800433c <lora_network_cmd_nack_handle+0x3d8>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	429a      	cmp	r2, r3
 8004302:	dbe0      	blt.n	80042c6 <lora_network_cmd_nack_handle+0x362>
			}
			memset(&last_lora_send_packet_buffer[semaphore_count - 1], 0, sizeof(lora_packet_t));
 8004304:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <lora_network_cmd_nack_handle+0x3d8>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	1e5a      	subs	r2, r3, #1
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	4a08      	ldr	r2, [pc, #32]	@ (8004338 <lora_network_cmd_nack_handle+0x3d4>)
 8004318:	4413      	add	r3, r2
 800431a:	222f      	movs	r2, #47	@ 0x2f
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f00a f986 	bl	800e630 <memset>
			handling_last_buffer = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}
	}
}
 800432a:	bf00      	nop
 800432c:	3728      	adds	r7, #40	@ 0x28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	200007b1 	.word	0x200007b1
 8004338:	200017ac 	.word	0x200017ac
 800433c:	200017a8 	.word	0x200017a8

08004340 <lora_network_receive_packet_handle>:

/**
 * this function is used to handle packet received from lora irq handle function
 * **/
void lora_network_receive_packet_handle(){
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
	if(lora_receive_packet_buffer.cmd == LORA_CMD_ACK){
 8004344:	4b07      	ldr	r3, [pc, #28]	@ (8004364 <lora_network_receive_packet_handle+0x24>)
 8004346:	795b      	ldrb	r3, [r3, #5]
 8004348:	2b05      	cmp	r3, #5
 800434a:	d102      	bne.n	8004352 <lora_network_receive_packet_handle+0x12>
		lora_network_cmd_ack_handle();
 800434c:	f7ff fb52 	bl	80039f4 <lora_network_cmd_ack_handle>
	}
	else if(lora_receive_packet_buffer.cmd == LORA_CMD_NACK){
		lora_network_cmd_nack_handle();
	}
}
 8004350:	e005      	b.n	800435e <lora_network_receive_packet_handle+0x1e>
	else if(lora_receive_packet_buffer.cmd == LORA_CMD_NACK){
 8004352:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <lora_network_receive_packet_handle+0x24>)
 8004354:	795b      	ldrb	r3, [r3, #5]
 8004356:	2b06      	cmp	r3, #6
 8004358:	d101      	bne.n	800435e <lora_network_receive_packet_handle+0x1e>
		lora_network_cmd_nack_handle();
 800435a:	f7ff fe03 	bl	8003f64 <lora_network_cmd_nack_handle>
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200000d8 	.word	0x200000d8

08004368 <lora_network_irq_handle>:

/**
 * lora irq handle function is used to receive packet through interrupt of DIO0 pin
 * **/
void lora_network_irq_handle(){
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
	if(bsp_lora_spi_is_free()){
 800436e:	f7fd f9ef 	bl	8001750 <bsp_lora_spi_is_free>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <lora_network_irq_handle+0x2e>
		uint8_t irqFlags = LoRa_read(&myLoRa, RegIrqFlags);
 8004378:	2112      	movs	r1, #18
 800437a:	4809      	ldr	r0, [pc, #36]	@ (80043a0 <lora_network_irq_handle+0x38>)
 800437c:	f7fc ff5b 	bl	8001236 <LoRa_read>
 8004380:	4603      	mov	r3, r0
 8004382:	71fb      	strb	r3, [r7, #7]
		if(irqFlags & 0x40) {
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <lora_network_irq_handle+0x2e>
			bsp_lora_receive_packet();
 800438e:	f7fd fceb 	bl	8001d68 <bsp_lora_receive_packet>
			// All data have received and saved to lora_receive_packet_buffer
			lora_network_receive_packet_handle();
 8004392:	f7ff ffd5 	bl	8004340 <lora_network_receive_packet_handle>
		}
	}
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	2000007c 	.word	0x2000007c

080043a4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == BUTTON1_Pin)){
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d121      	bne.n	80043f8 <HAL_GPIO_EXTI_Callback+0x54>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043b4:	4a41      	ldr	r2, [pc, #260]	@ (80044bc <HAL_GPIO_EXTI_Callback+0x118>)
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 80043ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043be:	f000 fda9 	bl	8004f14 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	4619      	mov	r1, r3
 80043c6:	483e      	ldr	r0, [pc, #248]	@ (80044c0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80043c8:	f001 f82e 	bl	8005428 <HAL_GPIO_ReadPin>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d06b      	beq.n	80044aa <HAL_GPIO_EXTI_Callback+0x106>
		uint8_t test_buffer[3];
		HAL_UART_Transmit(&huart2, "Test1\n", 6, 2000);
 80043d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80043d6:	2206      	movs	r2, #6
 80043d8:	493a      	ldr	r1, [pc, #232]	@ (80044c4 <HAL_GPIO_EXTI_Callback+0x120>)
 80043da:	483b      	ldr	r0, [pc, #236]	@ (80044c8 <HAL_GPIO_EXTI_Callback+0x124>)
 80043dc:	f004 f928 	bl	8008630 <HAL_UART_Transmit>

		test_buffer[0] = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	743b      	strb	r3, [r7, #16]
		test_buffer[1] = PC_CMD_CONNECT_TO_ALL_NODES;
 80043e4:	2300      	movs	r3, #0
 80043e6:	747b      	strb	r3, [r7, #17]
		test_buffer[2] = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	74bb      	strb	r3, [r7, #18]
		pc_user_cmd_handle(test_buffer);
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fa35 	bl	8003860 <pc_user_cmd_handle>
 80043f6:	e05d      	b.n	80044b4 <HAL_GPIO_EXTI_Callback+0x110>

	}
	else if(GPIO_Pin == BUTTON2_Pin){
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d121      	bne.n	8004442 <HAL_GPIO_EXTI_Callback+0x9e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043fe:	4a2f      	ldr	r2, [pc, #188]	@ (80044bc <HAL_GPIO_EXTI_Callback+0x118>)
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 8004404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004408:	f000 fd84 	bl	8004f14 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	4619      	mov	r1, r3
 8004410:	482b      	ldr	r0, [pc, #172]	@ (80044c0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004412:	f001 f809 	bl	8005428 <HAL_GPIO_ReadPin>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d048      	beq.n	80044ae <HAL_GPIO_EXTI_Callback+0x10a>
		HAL_UART_Transmit(&huart2, "Test2\n", 6, 2000);
 800441c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004420:	2206      	movs	r2, #6
 8004422:	492a      	ldr	r1, [pc, #168]	@ (80044cc <HAL_GPIO_EXTI_Callback+0x128>)
 8004424:	4828      	ldr	r0, [pc, #160]	@ (80044c8 <HAL_GPIO_EXTI_Callback+0x124>)
 8004426:	f004 f903 	bl	8008630 <HAL_UART_Transmit>
		uint8_t test_buffer[3];
		test_buffer[0] = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	733b      	strb	r3, [r7, #12]
		test_buffer[1] = PC_CMD_CONNECT_TO_SPECIFIC_NODE;
 800442e:	2301      	movs	r3, #1
 8004430:	737b      	strb	r3, [r7, #13]
		test_buffer[2] = 4;
 8004432:	2304      	movs	r3, #4
 8004434:	73bb      	strb	r3, [r7, #14]
		pc_user_cmd_handle(test_buffer);
 8004436:	f107 030c 	add.w	r3, r7, #12
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fa10 	bl	8003860 <pc_user_cmd_handle>
 8004440:	e038      	b.n	80044b4 <HAL_GPIO_EXTI_Callback+0x110>

	}

	else if(GPIO_Pin == BUTTON3_Pin){
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d121      	bne.n	800448c <HAL_GPIO_EXTI_Callback+0xe8>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004448:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <HAL_GPIO_EXTI_Callback+0x118>)
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	6153      	str	r3, [r2, #20]
		HAL_Delay(1000);
 800444e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004452:	f000 fd5f 	bl	8004f14 <HAL_Delay>
		if(HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, GPIO_Pin) == GPIO_PIN_RESET) return;
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	4619      	mov	r1, r3
 800445a:	4819      	ldr	r0, [pc, #100]	@ (80044c0 <HAL_GPIO_EXTI_Callback+0x11c>)
 800445c:	f000 ffe4 	bl	8005428 <HAL_GPIO_ReadPin>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d025      	beq.n	80044b2 <HAL_GPIO_EXTI_Callback+0x10e>
		HAL_UART_Transmit(&huart2, "Test3\n", 6, 2000);
 8004466:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800446a:	2206      	movs	r2, #6
 800446c:	4918      	ldr	r1, [pc, #96]	@ (80044d0 <HAL_GPIO_EXTI_Callback+0x12c>)
 800446e:	4816      	ldr	r0, [pc, #88]	@ (80044c8 <HAL_GPIO_EXTI_Callback+0x124>)
 8004470:	f004 f8de 	bl	8008630 <HAL_UART_Transmit>
		uint8_t test_buffer[3];

		test_buffer[0] = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	723b      	strb	r3, [r7, #8]
		test_buffer[1] = PC_CMD_DISCONNECT_TO_ALL_NODES;
 8004478:	2302      	movs	r3, #2
 800447a:	727b      	strb	r3, [r7, #9]
		test_buffer[2] = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	72bb      	strb	r3, [r7, #10]
		pc_user_cmd_handle(test_buffer);
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff f9eb 	bl	8003860 <pc_user_cmd_handle>
 800448a:	e013      	b.n	80044b4 <HAL_GPIO_EXTI_Callback+0x110>
	}

	else if(GPIO_Pin == LORA_DIO0_Pin){
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d110      	bne.n	80044b4 <HAL_GPIO_EXTI_Callback+0x110>
		int buf = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, "DIO0\n", 5, 2000);
 8004496:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800449a:	2205      	movs	r2, #5
 800449c:	490d      	ldr	r1, [pc, #52]	@ (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 800449e:	480a      	ldr	r0, [pc, #40]	@ (80044c8 <HAL_GPIO_EXTI_Callback+0x124>)
 80044a0:	f004 f8c6 	bl	8008630 <HAL_UART_Transmit>
		lora_network_irq_handle();
 80044a4:	f7ff ff60 	bl	8004368 <lora_network_irq_handle>
 80044a8:	e004      	b.n	80044b4 <HAL_GPIO_EXTI_Callback+0x110>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_GPIO_EXTI_Callback+0x110>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET) return;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_GPIO_EXTI_Callback+0x110>
		if(HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, GPIO_Pin) == GPIO_PIN_RESET) return;
 80044b2:	bf00      	nop
	}
}
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40013c00 	.word	0x40013c00
 80044c0:	40020400 	.word	0x40020400
 80044c4:	0800f238 	.word	0x0800f238
 80044c8:	20001978 	.word	0x20001978
 80044cc:	0800f240 	.word	0x0800f240
 80044d0:	0800f248 	.word	0x0800f248
 80044d4:	0800f250 	.word	0x0800f250

080044d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044dc:	f000 fcd8 	bl	8004e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044e0:	f000 f814 	bl	800450c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044e4:	f000 f980 	bl	80047e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80044e8:	f000 f92a 	bl	8004740 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80044ec:	f000 f8a4 	bl	8004638 <MX_SPI1_Init>
  MX_I2C1_Init();
 80044f0:	f000 f874 	bl	80045dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80044f4:	f000 f94e 	bl	8004794 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80044f8:	f000 f8d4 	bl	80046a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  lora_network_init(5);
 80044fc:	2005      	movs	r0, #5
 80044fe:	f7fd fc8f 	bl	8001e20 <lora_network_init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8004502:	f007 ff1b 	bl	800c33c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <main+0x2e>
	...

0800450c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b094      	sub	sp, #80	@ 0x50
 8004510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004512:	f107 0320 	add.w	r3, r7, #32
 8004516:	2230      	movs	r2, #48	@ 0x30
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f00a f888 	bl	800e630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004520:	f107 030c 	add.w	r3, r7, #12
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <SystemClock_Config+0xc8>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <SystemClock_Config+0xc8>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800453e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004540:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <SystemClock_Config+0xc8>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800454c:	2300      	movs	r3, #0
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	4b21      	ldr	r3, [pc, #132]	@ (80045d8 <SystemClock_Config+0xcc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a20      	ldr	r2, [pc, #128]	@ (80045d8 <SystemClock_Config+0xcc>)
 8004556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b1e      	ldr	r3, [pc, #120]	@ (80045d8 <SystemClock_Config+0xcc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004568:	2301      	movs	r3, #1
 800456a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800456c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004572:	2302      	movs	r3, #2
 8004574:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004576:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800457a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800457c:	230f      	movs	r3, #15
 800457e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8004580:	2390      	movs	r3, #144	@ 0x90
 8004582:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004584:	2306      	movs	r3, #6
 8004586:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8004588:	2305      	movs	r3, #5
 800458a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800458c:	f107 0320 	add.w	r3, r7, #32
 8004590:	4618      	mov	r0, r3
 8004592:	f002 f92b 	bl	80067ec <HAL_RCC_OscConfig>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800459c:	f000 f9d0 	bl	8004940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045a0:	230f      	movs	r3, #15
 80045a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045a4:	2302      	movs	r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80045b4:	f107 030c 	add.w	r3, r7, #12
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f002 fb8e 	bl	8006cdc <HAL_RCC_ClockConfig>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80045c6:	f000 f9bb 	bl	8004940 <Error_Handler>
  }
}
 80045ca:	bf00      	nop
 80045cc:	3750      	adds	r7, #80	@ 0x50
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000

080045dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045e0:	4b12      	ldr	r3, [pc, #72]	@ (800462c <MX_I2C1_Init+0x50>)
 80045e2:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <MX_I2C1_Init+0x54>)
 80045e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80045e6:	4b11      	ldr	r3, [pc, #68]	@ (800462c <MX_I2C1_Init+0x50>)
 80045e8:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <MX_I2C1_Init+0x58>)
 80045ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045ec:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <MX_I2C1_Init+0x50>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80045f2:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <MX_I2C1_Init+0x50>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045f8:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <MX_I2C1_Init+0x50>)
 80045fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80045fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <MX_I2C1_Init+0x50>)
 8004602:	2200      	movs	r2, #0
 8004604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004606:	4b09      	ldr	r3, [pc, #36]	@ (800462c <MX_I2C1_Init+0x50>)
 8004608:	2200      	movs	r2, #0
 800460a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <MX_I2C1_Init+0x50>)
 800460e:	2200      	movs	r2, #0
 8004610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004612:	4b06      	ldr	r3, [pc, #24]	@ (800462c <MX_I2C1_Init+0x50>)
 8004614:	2200      	movs	r2, #0
 8004616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004618:	4804      	ldr	r0, [pc, #16]	@ (800462c <MX_I2C1_Init+0x50>)
 800461a:	f000 ff4f 	bl	80054bc <HAL_I2C_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004624:	f000 f98c 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	2000183c 	.word	0x2000183c
 8004630:	40005400 	.word	0x40005400
 8004634:	000186a0 	.word	0x000186a0

08004638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800463c:	4b17      	ldr	r3, [pc, #92]	@ (800469c <MX_SPI1_Init+0x64>)
 800463e:	4a18      	ldr	r2, [pc, #96]	@ (80046a0 <MX_SPI1_Init+0x68>)
 8004640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004642:	4b16      	ldr	r3, [pc, #88]	@ (800469c <MX_SPI1_Init+0x64>)
 8004644:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800464a:	4b14      	ldr	r3, [pc, #80]	@ (800469c <MX_SPI1_Init+0x64>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <MX_SPI1_Init+0x64>)
 8004652:	2200      	movs	r2, #0
 8004654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004656:	4b11      	ldr	r3, [pc, #68]	@ (800469c <MX_SPI1_Init+0x64>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <MX_SPI1_Init+0x64>)
 800465e:	2200      	movs	r2, #0
 8004660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004662:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <MX_SPI1_Init+0x64>)
 8004664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800466a:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <MX_SPI1_Init+0x64>)
 800466c:	2228      	movs	r2, #40	@ 0x28
 800466e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004670:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <MX_SPI1_Init+0x64>)
 8004672:	2200      	movs	r2, #0
 8004674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004676:	4b09      	ldr	r3, [pc, #36]	@ (800469c <MX_SPI1_Init+0x64>)
 8004678:	2200      	movs	r2, #0
 800467a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467c:	4b07      	ldr	r3, [pc, #28]	@ (800469c <MX_SPI1_Init+0x64>)
 800467e:	2200      	movs	r2, #0
 8004680:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <MX_SPI1_Init+0x64>)
 8004684:	220a      	movs	r2, #10
 8004686:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004688:	4804      	ldr	r0, [pc, #16]	@ (800469c <MX_SPI1_Init+0x64>)
 800468a:	f002 fd39 	bl	8007100 <HAL_SPI_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004694:	f000 f954 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004698:	bf00      	nop
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20001890 	.word	0x20001890
 80046a0:	40013000 	.word	0x40013000

080046a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046b8:	463b      	mov	r3, r7
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80046c0:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <MX_TIM2_Init+0x98>)
 80046c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80046c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 80046c8:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <MX_TIM2_Init+0x98>)
 80046ca:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80046ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d0:	4b1a      	ldr	r3, [pc, #104]	@ (800473c <MX_TIM2_Init+0x98>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80046d6:	4b19      	ldr	r3, [pc, #100]	@ (800473c <MX_TIM2_Init+0x98>)
 80046d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80046dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046de:	4b17      	ldr	r3, [pc, #92]	@ (800473c <MX_TIM2_Init+0x98>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e4:	4b15      	ldr	r3, [pc, #84]	@ (800473c <MX_TIM2_Init+0x98>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80046ea:	4814      	ldr	r0, [pc, #80]	@ (800473c <MX_TIM2_Init+0x98>)
 80046ec:	f003 fae8 	bl	8007cc0 <HAL_TIM_Base_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80046f6:	f000 f923 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	4619      	mov	r1, r3
 8004706:	480d      	ldr	r0, [pc, #52]	@ (800473c <MX_TIM2_Init+0x98>)
 8004708:	f003 fcab 	bl	8008062 <HAL_TIM_ConfigClockSource>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004712:	f000 f915 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800471e:	463b      	mov	r3, r7
 8004720:	4619      	mov	r1, r3
 8004722:	4806      	ldr	r0, [pc, #24]	@ (800473c <MX_TIM2_Init+0x98>)
 8004724:	f003 feb2 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800472e:	f000 f907 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004732:	bf00      	nop
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200018e8 	.word	0x200018e8

08004740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004744:	4b11      	ldr	r3, [pc, #68]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 8004746:	4a12      	ldr	r2, [pc, #72]	@ (8004790 <MX_USART1_UART_Init+0x50>)
 8004748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 800474c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004752:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004758:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800475e:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004764:	4b09      	ldr	r3, [pc, #36]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 8004766:	220c      	movs	r2, #12
 8004768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800476a:	4b08      	ldr	r3, [pc, #32]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 800476c:	2200      	movs	r2, #0
 800476e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 8004772:	2200      	movs	r2, #0
 8004774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004776:	4805      	ldr	r0, [pc, #20]	@ (800478c <MX_USART1_UART_Init+0x4c>)
 8004778:	f003 ff0a 	bl	8008590 <HAL_UART_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004782:	f000 f8dd 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004786:	bf00      	nop
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20001930 	.word	0x20001930
 8004790:	40011000 	.word	0x40011000

08004794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 800479a:	4a12      	ldr	r2, [pc, #72]	@ (80047e4 <MX_USART2_UART_Init+0x50>)
 800479c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047a6:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047ac:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047b2:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047ba:	220c      	movs	r2, #12
 80047bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047be:	4b08      	ldr	r3, [pc, #32]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047c4:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047ca:	4805      	ldr	r0, [pc, #20]	@ (80047e0 <MX_USART2_UART_Init+0x4c>)
 80047cc:	f003 fee0 	bl	8008590 <HAL_UART_Init>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80047d6:	f000 f8b3 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20001978 	.word	0x20001978
 80047e4:	40004400 	.word	0x40004400

080047e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	609a      	str	r2, [r3, #8]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	4b3d      	ldr	r3, [pc, #244]	@ (80048f8 <MX_GPIO_Init+0x110>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	4a3c      	ldr	r2, [pc, #240]	@ (80048f8 <MX_GPIO_Init+0x110>)
 8004808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800480c:	6313      	str	r3, [r2, #48]	@ 0x30
 800480e:	4b3a      	ldr	r3, [pc, #232]	@ (80048f8 <MX_GPIO_Init+0x110>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	4b36      	ldr	r3, [pc, #216]	@ (80048f8 <MX_GPIO_Init+0x110>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004822:	4a35      	ldr	r2, [pc, #212]	@ (80048f8 <MX_GPIO_Init+0x110>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6313      	str	r3, [r2, #48]	@ 0x30
 800482a:	4b33      	ldr	r3, [pc, #204]	@ (80048f8 <MX_GPIO_Init+0x110>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4b2f      	ldr	r3, [pc, #188]	@ (80048f8 <MX_GPIO_Init+0x110>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	4a2e      	ldr	r2, [pc, #184]	@ (80048f8 <MX_GPIO_Init+0x110>)
 8004840:	f043 0302 	orr.w	r3, r3, #2
 8004844:	6313      	str	r3, [r2, #48]	@ 0x30
 8004846:	4b2c      	ldr	r3, [pc, #176]	@ (80048f8 <MX_GPIO_Init+0x110>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8004852:	2200      	movs	r2, #0
 8004854:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004858:	4828      	ldr	r0, [pc, #160]	@ (80048fc <MX_GPIO_Init+0x114>)
 800485a:	f000 fdfd 	bl	8005458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_RST_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|SPI1_NSS_Pin;
 800485e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8004862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004864:	2301      	movs	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800486c:	2301      	movs	r3, #1
 800486e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	4619      	mov	r1, r3
 8004876:	4821      	ldr	r0, [pc, #132]	@ (80048fc <MX_GPIO_Init+0x114>)
 8004878:	f000 fc52 	bl	8005120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 800487c:	2301      	movs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004880:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 800488a:	f107 030c 	add.w	r3, r7, #12
 800488e:	4619      	mov	r1, r3
 8004890:	481b      	ldr	r0, [pc, #108]	@ (8004900 <MX_GPIO_Init+0x118>)
 8004892:	f000 fc45 	bl	8005120 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8004896:	230e      	movs	r3, #14
 8004898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800489a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800489e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048a0:	2302      	movs	r3, #2
 80048a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	4619      	mov	r1, r3
 80048aa:	4815      	ldr	r0, [pc, #84]	@ (8004900 <MX_GPIO_Init+0x118>)
 80048ac:	f000 fc38 	bl	8005120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 80048b0:	2200      	movs	r2, #0
 80048b2:	2107      	movs	r1, #7
 80048b4:	2006      	movs	r0, #6
 80048b6:	f000 fc09 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048ba:	2006      	movs	r0, #6
 80048bc:	f000 fc22 	bl	8005104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 80048c0:	2200      	movs	r2, #0
 80048c2:	2108      	movs	r1, #8
 80048c4:	2007      	movs	r0, #7
 80048c6:	f000 fc01 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80048ca:	2007      	movs	r0, #7
 80048cc:	f000 fc1a 	bl	8005104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 8, 0);
 80048d0:	2200      	movs	r2, #0
 80048d2:	2108      	movs	r1, #8
 80048d4:	2008      	movs	r0, #8
 80048d6:	f000 fbf9 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80048da:	2008      	movs	r0, #8
 80048dc:	f000 fc12 	bl	8005104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 8, 0);
 80048e0:	2200      	movs	r2, #0
 80048e2:	2108      	movs	r1, #8
 80048e4:	2009      	movs	r0, #9
 80048e6:	f000 fbf1 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80048ea:	2009      	movs	r0, #9
 80048ec:	f000 fc0a 	bl	8005104 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80048f0:	bf00      	nop
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020400 	.word	0x40020400

08004904 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void){
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
	while(1){
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <vApplicationIdleHook+0x4>

0800490c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a08      	ldr	r2, [pc, #32]	@ (800493c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d102      	bne.n	8004924 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800491e:	f000 fad9 	bl	8004ed4 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM2){
	  lora_network_send_request_scheduler();
  }
  /* USER CODE END Callback 1 */
}
 8004922:	e006      	b.n	8004932 <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM2){
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492c:	d101      	bne.n	8004932 <HAL_TIM_PeriodElapsedCallback+0x26>
	  lora_network_send_request_scheduler();
 800492e:	f7fe fb45 	bl	8002fbc <lora_network_send_request_scheduler>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40000400 	.word	0x40000400

08004940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004944:	b672      	cpsid	i
}
 8004946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <Error_Handler+0x8>

0800494c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <HAL_MspInit+0x54>)
 8004958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495a:	4a11      	ldr	r2, [pc, #68]	@ (80049a0 <HAL_MspInit+0x54>)
 800495c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004960:	6453      	str	r3, [r2, #68]	@ 0x44
 8004962:	4b0f      	ldr	r3, [pc, #60]	@ (80049a0 <HAL_MspInit+0x54>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800496a:	607b      	str	r3, [r7, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <HAL_MspInit+0x54>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	4a0a      	ldr	r2, [pc, #40]	@ (80049a0 <HAL_MspInit+0x54>)
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800497c:	6413      	str	r3, [r2, #64]	@ 0x40
 800497e:	4b08      	ldr	r3, [pc, #32]	@ (80049a0 <HAL_MspInit+0x54>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800498a:	2200      	movs	r2, #0
 800498c:	210f      	movs	r1, #15
 800498e:	f06f 0001 	mvn.w	r0, #1
 8004992:	f000 fb9b 	bl	80050cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	@ 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	@ (8004a28 <HAL_I2C_MspInit+0x84>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d12b      	bne.n	8004a1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <HAL_I2C_MspInit+0x88>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <HAL_I2C_MspInit+0x88>)
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <HAL_I2C_MspInit+0x88>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_EEPROM_Pin|I2C1_SDA_EEPROM_Pin;
 80049e2:	23c0      	movs	r3, #192	@ 0xc0
 80049e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049e6:	2312      	movs	r3, #18
 80049e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ee:	2303      	movs	r3, #3
 80049f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049f2:	2304      	movs	r3, #4
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	4619      	mov	r1, r3
 80049fc:	480c      	ldr	r0, [pc, #48]	@ (8004a30 <HAL_I2C_MspInit+0x8c>)
 80049fe:	f000 fb8f 	bl	8005120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <HAL_I2C_MspInit+0x88>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	4a08      	ldr	r2, [pc, #32]	@ (8004a2c <HAL_I2C_MspInit+0x88>)
 8004a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_I2C_MspInit+0x88>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004a1e:	bf00      	nop
 8004a20:	3728      	adds	r7, #40	@ 0x28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40005400 	.word	0x40005400
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020400 	.word	0x40020400

08004a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	@ 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a19      	ldr	r2, [pc, #100]	@ (8004ab8 <HAL_SPI_MspInit+0x84>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d12b      	bne.n	8004aae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	4b18      	ldr	r3, [pc, #96]	@ (8004abc <HAL_SPI_MspInit+0x88>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	4a17      	ldr	r2, [pc, #92]	@ (8004abc <HAL_SPI_MspInit+0x88>)
 8004a60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a66:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <HAL_SPI_MspInit+0x88>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <HAL_SPI_MspInit+0x88>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	4a10      	ldr	r2, [pc, #64]	@ (8004abc <HAL_SPI_MspInit+0x88>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a82:	4b0e      	ldr	r3, [pc, #56]	@ (8004abc <HAL_SPI_MspInit+0x88>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_LORA_Pin|SPI1_MISO_LORA_Pin|SPI1_MOSI_LORA_Pin;
 8004a8e:	23e0      	movs	r3, #224	@ 0xe0
 8004a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	2302      	movs	r3, #2
 8004a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a9e:	2305      	movs	r3, #5
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa2:	f107 0314 	add.w	r3, r7, #20
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4805      	ldr	r0, [pc, #20]	@ (8004ac0 <HAL_SPI_MspInit+0x8c>)
 8004aaa:	f000 fb39 	bl	8005120 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004aae:	bf00      	nop
 8004ab0:	3728      	adds	r7, #40	@ 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40013000 	.word	0x40013000
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40020000 	.word	0x40020000

08004ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad4:	d115      	bne.n	8004b02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <HAL_TIM_Base_MspInit+0x48>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	4a0b      	ldr	r2, [pc, #44]	@ (8004b0c <HAL_TIM_Base_MspInit+0x48>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae6:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <HAL_TIM_Base_MspInit+0x48>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004af2:	2200      	movs	r2, #0
 8004af4:	2106      	movs	r1, #6
 8004af6:	201c      	movs	r0, #28
 8004af8:	f000 fae8 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004afc:	201c      	movs	r0, #28
 8004afe:	f000 fb01 	bl	8005104 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08c      	sub	sp, #48	@ 0x30
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 031c 	add.w	r3, r7, #28
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a32      	ldr	r2, [pc, #200]	@ (8004bf8 <HAL_UART_MspInit+0xe8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d12d      	bne.n	8004b8e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	4b31      	ldr	r3, [pc, #196]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	4a30      	ldr	r2, [pc, #192]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004b3c:	f043 0310 	orr.w	r3, r3, #16
 8004b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b42:	4b2e      	ldr	r3, [pc, #184]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	4b2a      	ldr	r3, [pc, #168]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	4a29      	ldr	r2, [pc, #164]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b5e:	4b27      	ldr	r3, [pc, #156]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin|USART1_RX_ESP_Pin;
 8004b6a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b70:	2302      	movs	r3, #2
 8004b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b7c:	2307      	movs	r3, #7
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b80:	f107 031c 	add.w	r3, r7, #28
 8004b84:	4619      	mov	r1, r3
 8004b86:	481e      	ldr	r0, [pc, #120]	@ (8004c00 <HAL_UART_MspInit+0xf0>)
 8004b88:	f000 faca 	bl	8005120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b8c:	e030      	b.n	8004bf0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1c      	ldr	r2, [pc, #112]	@ (8004c04 <HAL_UART_MspInit+0xf4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d12b      	bne.n	8004bf0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ba8:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <HAL_UART_MspInit+0xec>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_SIM_Pin|USART2_RX_SIM_Pin;
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004be0:	2307      	movs	r3, #7
 8004be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be4:	f107 031c 	add.w	r3, r7, #28
 8004be8:	4619      	mov	r1, r3
 8004bea:	4805      	ldr	r0, [pc, #20]	@ (8004c00 <HAL_UART_MspInit+0xf0>)
 8004bec:	f000 fa98 	bl	8005120 <HAL_GPIO_Init>
}
 8004bf0:	bf00      	nop
 8004bf2:	3730      	adds	r7, #48	@ 0x30
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40011000 	.word	0x40011000
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40020000 	.word	0x40020000
 8004c04:	40004400 	.word	0x40004400

08004c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08e      	sub	sp, #56	@ 0x38
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	4b33      	ldr	r3, [pc, #204]	@ (8004cec <HAL_InitTick+0xe4>)
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c20:	4a32      	ldr	r2, [pc, #200]	@ (8004cec <HAL_InitTick+0xe4>)
 8004c22:	f043 0302 	orr.w	r3, r3, #2
 8004c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c28:	4b30      	ldr	r3, [pc, #192]	@ (8004cec <HAL_InitTick+0xe4>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c34:	f107 0210 	add.w	r2, r7, #16
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f002 fa2c 	bl	800709c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c4e:	f002 f9fd 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 8004c52:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c54:	e004      	b.n	8004c60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c56:	f002 f9f9 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c62:	4a23      	ldr	r2, [pc, #140]	@ (8004cf0 <HAL_InitTick+0xe8>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	0c9b      	lsrs	r3, r3, #18
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8004c6e:	4b21      	ldr	r3, [pc, #132]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004c70:	4a21      	ldr	r2, [pc, #132]	@ (8004cf8 <HAL_InitTick+0xf0>)
 8004c72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8004c74:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004c76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c80:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8004c82:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c88:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c8e:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8004c94:	4817      	ldr	r0, [pc, #92]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004c96:	f003 f813 	bl	8007cc0 <HAL_TIM_Base_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004ca0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8004ca8:	4812      	ldr	r0, [pc, #72]	@ (8004cf4 <HAL_InitTick+0xec>)
 8004caa:	f003 f859 	bl	8007d60 <HAL_TIM_Base_Start_IT>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d111      	bne.n	8004ce0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cbc:	201d      	movs	r0, #29
 8004cbe:	f000 fa21 	bl	8005104 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b0f      	cmp	r3, #15
 8004cc6:	d808      	bhi.n	8004cda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	201d      	movs	r0, #29
 8004cce:	f000 f9fd 	bl	80050cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cfc <HAL_InitTick+0xf4>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e002      	b.n	8004ce0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3738      	adds	r7, #56	@ 0x38
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	431bde83 	.word	0x431bde83
 8004cf4:	200019c0 	.word	0x200019c0
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	20000004 	.word	0x20000004

08004d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <NMI_Handler+0x4>

08004d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <HardFault_Handler+0x4>

08004d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <MemManage_Handler+0x4>

08004d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <BusFault_Handler+0x4>

08004d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <UsageFault_Handler+0x4>

08004d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	f000 fba6 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d40:	bf00      	nop
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8004d48:	2002      	movs	r0, #2
 8004d4a:	f000 fb9f 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8004d56:	2004      	movs	r0, #4
 8004d58:	f000 fb98 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004d5c:	bf00      	nop
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8004d64:	2008      	movs	r0, #8
 8004d66:	f000 fb91 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d74:	4802      	ldr	r0, [pc, #8]	@ (8004d80 <TIM2_IRQHandler+0x10>)
 8004d76:	f003 f884 	bl	8007e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	200018e8 	.word	0x200018e8

08004d84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d88:	4802      	ldr	r0, [pc, #8]	@ (8004d94 <TIM3_IRQHandler+0x10>)
 8004d8a:	f003 f87a 	bl	8007e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200019c0 	.word	0x200019c0

08004d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004d9c:	4802      	ldr	r0, [pc, #8]	@ (8004da8 <OTG_FS_IRQHandler+0x10>)
 8004d9e:	f000 fcd1 	bl	8005744 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20010704 	.word	0x20010704

08004dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004db4:	4a14      	ldr	r2, [pc, #80]	@ (8004e08 <_sbrk+0x5c>)
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <_sbrk+0x60>)
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dc0:	4b13      	ldr	r3, [pc, #76]	@ (8004e10 <_sbrk+0x64>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dc8:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <_sbrk+0x64>)
 8004dca:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <_sbrk+0x68>)
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dce:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <_sbrk+0x64>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d207      	bcs.n	8004dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ddc:	f009 fc40 	bl	800e660 <__errno>
 8004de0:	4603      	mov	r3, r0
 8004de2:	220c      	movs	r2, #12
 8004de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dea:	e009      	b.n	8004e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dec:	4b08      	ldr	r3, [pc, #32]	@ (8004e10 <_sbrk+0x64>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004df2:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <_sbrk+0x64>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	4a05      	ldr	r2, [pc, #20]	@ (8004e10 <_sbrk+0x64>)
 8004dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20020000 	.word	0x20020000
 8004e0c:	00000400 	.word	0x00000400
 8004e10:	20001a08 	.word	0x20001a08
 8004e14:	20010d30 	.word	0x20010d30

08004e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <SystemInit+0x20>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e22:	4a05      	ldr	r2, [pc, #20]	@ (8004e38 <SystemInit+0x20>)
 8004e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e40:	f7ff ffea 	bl	8004e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e44:	480c      	ldr	r0, [pc, #48]	@ (8004e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e46:	490d      	ldr	r1, [pc, #52]	@ (8004e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e48:	4a0d      	ldr	r2, [pc, #52]	@ (8004e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e4c:	e002      	b.n	8004e54 <LoopCopyDataInit>

08004e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e52:	3304      	adds	r3, #4

08004e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e58:	d3f9      	bcc.n	8004e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8004e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e60:	e001      	b.n	8004e66 <LoopFillZerobss>

08004e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e64:	3204      	adds	r2, #4

08004e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e68:	d3fb      	bcc.n	8004e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e6a:	f009 fbff 	bl	800e66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e6e:	f7ff fb33 	bl	80044d8 <main>
  bx  lr    
 8004e72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004e80:	0800f2cc 	.word	0x0800f2cc
  ldr r2, =_sbss
 8004e84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004e88:	20010d30 	.word	0x20010d30

08004e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e8c:	e7fe      	b.n	8004e8c <ADC_IRQHandler>
	...

08004e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed0 <HAL_Init+0x40>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed0 <HAL_Init+0x40>)
 8004e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <HAL_Init+0x40>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <HAL_Init+0x40>)
 8004ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <HAL_Init+0x40>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a07      	ldr	r2, [pc, #28]	@ (8004ed0 <HAL_Init+0x40>)
 8004eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb8:	2003      	movs	r0, #3
 8004eba:	f000 f8fc 	bl	80050b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7ff fea2 	bl	8004c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ec4:	f7ff fd42 	bl	800494c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023c00 	.word	0x40023c00

08004ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <HAL_IncTick+0x20>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <HAL_IncTick+0x24>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	4a04      	ldr	r2, [pc, #16]	@ (8004ef8 <HAL_IncTick+0x24>)
 8004ee6:	6013      	str	r3, [r2, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000008 	.word	0x20000008
 8004ef8:	20001a0c 	.word	0x20001a0c

08004efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return uwTick;
 8004f00:	4b03      	ldr	r3, [pc, #12]	@ (8004f10 <HAL_GetTick+0x14>)
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20001a0c 	.word	0x20001a0c

08004f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f1c:	f7ff ffee 	bl	8004efc <HAL_GetTick>
 8004f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d005      	beq.n	8004f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <HAL_Delay+0x44>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f3a:	bf00      	nop
 8004f3c:	f7ff ffde 	bl	8004efc <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d8f7      	bhi.n	8004f3c <HAL_Delay+0x28>
  {
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000008 	.word	0x20000008

08004f5c <__NVIC_SetPriorityGrouping>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	@ (8004fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	60d3      	str	r3, [r2, #12]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <__NVIC_GetPriorityGrouping>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa8:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <__NVIC_GetPriorityGrouping+0x18>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	f003 0307 	and.w	r3, r3, #7
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <__NVIC_EnableIRQ>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db0b      	blt.n	8004fea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	4907      	ldr	r1, [pc, #28]	@ (8004ff8 <__NVIC_EnableIRQ+0x38>)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	e000e100 	.word	0xe000e100

08004ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500c:	2b00      	cmp	r3, #0
 800500e:	db0a      	blt.n	8005026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	490c      	ldr	r1, [pc, #48]	@ (8005048 <__NVIC_SetPriority+0x4c>)
 8005016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501a:	0112      	lsls	r2, r2, #4
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	440b      	add	r3, r1
 8005020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005024:	e00a      	b.n	800503c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	4908      	ldr	r1, [pc, #32]	@ (800504c <__NVIC_SetPriority+0x50>)
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	3b04      	subs	r3, #4
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	440b      	add	r3, r1
 800503a:	761a      	strb	r2, [r3, #24]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000e100 	.word	0xe000e100
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	@ 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f1c3 0307 	rsb	r3, r3, #7
 800506a:	2b04      	cmp	r3, #4
 800506c:	bf28      	it	cs
 800506e:	2304      	movcs	r3, #4
 8005070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3304      	adds	r3, #4
 8005076:	2b06      	cmp	r3, #6
 8005078:	d902      	bls.n	8005080 <NVIC_EncodePriority+0x30>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3b03      	subs	r3, #3
 800507e:	e000      	b.n	8005082 <NVIC_EncodePriority+0x32>
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	f04f 32ff 	mov.w	r2, #4294967295
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	401a      	ands	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005098:	f04f 31ff 	mov.w	r1, #4294967295
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	43d9      	mvns	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a8:	4313      	orrs	r3, r2
         );
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	@ 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff4c 	bl	8004f5c <__NVIC_SetPriorityGrouping>
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050de:	f7ff ff61 	bl	8004fa4 <__NVIC_GetPriorityGrouping>
 80050e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f7ff ffb1 	bl	8005050 <NVIC_EncodePriority>
 80050ee:	4602      	mov	r2, r0
 80050f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff ff80 	bl	8004ffc <__NVIC_SetPriority>
}
 80050fc:	bf00      	nop
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff ff54 	bl	8004fc0 <__NVIC_EnableIRQ>
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005120:	b480      	push	{r7}
 8005122:	b089      	sub	sp, #36	@ 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	e159      	b.n	80053f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800513c:	2201      	movs	r2, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	429a      	cmp	r2, r3
 8005156:	f040 8148 	bne.w	80053ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b01      	cmp	r3, #1
 8005164:	d005      	beq.n	8005172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800516e:	2b02      	cmp	r3, #2
 8005170:	d130      	bne.n	80051d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2203      	movs	r2, #3
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4313      	orrs	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051a8:	2201      	movs	r2, #1
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 0201 	and.w	r2, r3, #1
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d017      	beq.n	8005210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	2203      	movs	r2, #3
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d123      	bne.n	8005264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	08da      	lsrs	r2, r3, #3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3208      	adds	r2, #8
 8005224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	220f      	movs	r2, #15
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	08da      	lsrs	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3208      	adds	r2, #8
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	2203      	movs	r2, #3
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0203 	and.w	r2, r3, #3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80a2 	beq.w	80053ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	4b57      	ldr	r3, [pc, #348]	@ (8005408 <HAL_GPIO_Init+0x2e8>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	4a56      	ldr	r2, [pc, #344]	@ (8005408 <HAL_GPIO_Init+0x2e8>)
 80052b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052b6:	4b54      	ldr	r3, [pc, #336]	@ (8005408 <HAL_GPIO_Init+0x2e8>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052c2:	4a52      	ldr	r2, [pc, #328]	@ (800540c <HAL_GPIO_Init+0x2ec>)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	3302      	adds	r3, #2
 80052ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	220f      	movs	r2, #15
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4013      	ands	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a49      	ldr	r2, [pc, #292]	@ (8005410 <HAL_GPIO_Init+0x2f0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d019      	beq.n	8005322 <HAL_GPIO_Init+0x202>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a48      	ldr	r2, [pc, #288]	@ (8005414 <HAL_GPIO_Init+0x2f4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_GPIO_Init+0x1fe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a47      	ldr	r2, [pc, #284]	@ (8005418 <HAL_GPIO_Init+0x2f8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00d      	beq.n	800531a <HAL_GPIO_Init+0x1fa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a46      	ldr	r2, [pc, #280]	@ (800541c <HAL_GPIO_Init+0x2fc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <HAL_GPIO_Init+0x1f6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a45      	ldr	r2, [pc, #276]	@ (8005420 <HAL_GPIO_Init+0x300>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_GPIO_Init+0x1f2>
 800530e:	2304      	movs	r3, #4
 8005310:	e008      	b.n	8005324 <HAL_GPIO_Init+0x204>
 8005312:	2307      	movs	r3, #7
 8005314:	e006      	b.n	8005324 <HAL_GPIO_Init+0x204>
 8005316:	2303      	movs	r3, #3
 8005318:	e004      	b.n	8005324 <HAL_GPIO_Init+0x204>
 800531a:	2302      	movs	r3, #2
 800531c:	e002      	b.n	8005324 <HAL_GPIO_Init+0x204>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <HAL_GPIO_Init+0x204>
 8005322:	2300      	movs	r3, #0
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	f002 0203 	and.w	r2, r2, #3
 800532a:	0092      	lsls	r2, r2, #2
 800532c:	4093      	lsls	r3, r2
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005334:	4935      	ldr	r1, [pc, #212]	@ (800540c <HAL_GPIO_Init+0x2ec>)
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	3302      	adds	r3, #2
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005342:	4b38      	ldr	r3, [pc, #224]	@ (8005424 <HAL_GPIO_Init+0x304>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005366:	4a2f      	ldr	r2, [pc, #188]	@ (8005424 <HAL_GPIO_Init+0x304>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800536c:	4b2d      	ldr	r3, [pc, #180]	@ (8005424 <HAL_GPIO_Init+0x304>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005390:	4a24      	ldr	r2, [pc, #144]	@ (8005424 <HAL_GPIO_Init+0x304>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005396:	4b23      	ldr	r3, [pc, #140]	@ (8005424 <HAL_GPIO_Init+0x304>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	43db      	mvns	r3, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	4013      	ands	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005424 <HAL_GPIO_Init+0x304>)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053c0:	4b18      	ldr	r3, [pc, #96]	@ (8005424 <HAL_GPIO_Init+0x304>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	4013      	ands	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005424 <HAL_GPIO_Init+0x304>)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3301      	adds	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	f67f aea2 	bls.w	800513c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	3724      	adds	r7, #36	@ 0x24
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	40013800 	.word	0x40013800
 8005410:	40020000 	.word	0x40020000
 8005414:	40020400 	.word	0x40020400
 8005418:	40020800 	.word	0x40020800
 800541c:	40020c00 	.word	0x40020c00
 8005420:	40021000 	.word	0x40021000
 8005424:	40013c00 	.word	0x40013c00

08005428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e001      	b.n	800544a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	807b      	strh	r3, [r7, #2]
 8005464:	4613      	mov	r3, r2
 8005466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005468:	787b      	ldrb	r3, [r7, #1]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800546e:	887a      	ldrh	r2, [r7, #2]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005474:	e003      	b.n	800547e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005476:	887b      	ldrh	r3, [r7, #2]
 8005478:	041a      	lsls	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	619a      	str	r2, [r3, #24]
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005496:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d006      	beq.n	80054b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054a2:	4a05      	ldr	r2, [pc, #20]	@ (80054b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe ff7a 	bl	80043a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40013c00 	.word	0x40013c00

080054bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e12b      	b.n	8005726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fa5e 	bl	80049a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2224      	movs	r2, #36	@ 0x24
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800550e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800551e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005520:	f001 fd94 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 8005524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4a81      	ldr	r2, [pc, #516]	@ (8005730 <HAL_I2C_Init+0x274>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d807      	bhi.n	8005540 <HAL_I2C_Init+0x84>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a80      	ldr	r2, [pc, #512]	@ (8005734 <HAL_I2C_Init+0x278>)
 8005534:	4293      	cmp	r3, r2
 8005536:	bf94      	ite	ls
 8005538:	2301      	movls	r3, #1
 800553a:	2300      	movhi	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e006      	b.n	800554e <HAL_I2C_Init+0x92>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a7d      	ldr	r2, [pc, #500]	@ (8005738 <HAL_I2C_Init+0x27c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	bf94      	ite	ls
 8005548:	2301      	movls	r3, #1
 800554a:	2300      	movhi	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0e7      	b.n	8005726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a78      	ldr	r2, [pc, #480]	@ (800573c <HAL_I2C_Init+0x280>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	0c9b      	lsrs	r3, r3, #18
 8005560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a6a      	ldr	r2, [pc, #424]	@ (8005730 <HAL_I2C_Init+0x274>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d802      	bhi.n	8005590 <HAL_I2C_Init+0xd4>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	3301      	adds	r3, #1
 800558e:	e009      	b.n	80055a4 <HAL_I2C_Init+0xe8>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	4a69      	ldr	r2, [pc, #420]	@ (8005740 <HAL_I2C_Init+0x284>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	099b      	lsrs	r3, r3, #6
 80055a2:	3301      	adds	r3, #1
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	495c      	ldr	r1, [pc, #368]	@ (8005730 <HAL_I2C_Init+0x274>)
 80055c0:	428b      	cmp	r3, r1
 80055c2:	d819      	bhi.n	80055f8 <HAL_I2C_Init+0x13c>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1e59      	subs	r1, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055d8:	400b      	ands	r3, r1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_I2C_Init+0x138>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1e59      	subs	r1, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ec:	3301      	adds	r3, #1
 80055ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f2:	e051      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 80055f4:	2304      	movs	r3, #4
 80055f6:	e04f      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d111      	bne.n	8005624 <HAL_I2C_Init+0x168>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e58      	subs	r0, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	440b      	add	r3, r1
 800560e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e012      	b.n	800564a <HAL_I2C_Init+0x18e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	0099      	lsls	r1, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Init+0x196>
 800564e:	2301      	movs	r3, #1
 8005650:	e022      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <HAL_I2C_Init+0x1bc>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1e58      	subs	r0, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	440b      	add	r3, r1
 8005668:	fbb0 f3f3 	udiv	r3, r0, r3
 800566c:	3301      	adds	r3, #1
 800566e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005676:	e00f      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1e58      	subs	r0, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6859      	ldr	r1, [r3, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	0099      	lsls	r1, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	fbb0 f3f3 	udiv	r3, r0, r3
 800568e:	3301      	adds	r3, #1
 8005690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005694:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	6809      	ldr	r1, [r1, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6911      	ldr	r1, [r2, #16]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68d2      	ldr	r2, [r2, #12]
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	430b      	orrs	r3, r1
 80056da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	000186a0 	.word	0x000186a0
 8005734:	001e847f 	.word	0x001e847f
 8005738:	003d08ff 	.word	0x003d08ff
 800573c:	431bde83 	.word	0x431bde83
 8005740:	10624dd3 	.word	0x10624dd3

08005744 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b08d      	sub	sp, #52	@ 0x34
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f004 fa0f 	bl	8009b7e <USB_GetMode>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 848c 	bne.w	8006080 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f004 f973 	bl	8009a58 <USB_ReadInterrupts>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8482 	beq.w	800607e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f004 f960 	bl	8009a58 <USB_ReadInterrupts>
 8005798:	4603      	mov	r3, r0
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d107      	bne.n	80057b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695a      	ldr	r2, [r3, #20]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f002 0202 	and.w	r2, r2, #2
 80057b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f004 f94e 	bl	8009a58 <USB_ReadInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d161      	bne.n	800588a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0210 	bic.w	r2, r2, #16
 80057d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	f003 020f 	and.w	r2, r3, #15
 80057e2:	4613      	mov	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	3304      	adds	r3, #4
 80057f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	0c5b      	lsrs	r3, r3, #17
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d124      	bne.n	800584c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d035      	beq.n	800587a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800581c:	b29b      	uxth	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	6a38      	ldr	r0, [r7, #32]
 8005822:	f003 ffc7 	bl	80097b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005832:	441a      	add	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005844:	441a      	add	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	615a      	str	r2, [r3, #20]
 800584a:	e016      	b.n	800587a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	0c5b      	lsrs	r3, r3, #17
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	2b06      	cmp	r3, #6
 8005856:	d110      	bne.n	800587a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800585e:	2208      	movs	r2, #8
 8005860:	4619      	mov	r1, r3
 8005862:	6a38      	ldr	r0, [r7, #32]
 8005864:	f003 ffa6 	bl	80097b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005874:	441a      	add	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0210 	orr.w	r2, r2, #16
 8005888:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f004 f8e2 	bl	8009a58 <USB_ReadInterrupts>
 8005894:	4603      	mov	r3, r0
 8005896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800589a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800589e:	f040 80a7 	bne.w	80059f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f004 f8e7 	bl	8009a7e <USB_ReadDevAllOutEpInterrupt>
 80058b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80058b2:	e099      	b.n	80059e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 808e 	beq.w	80059dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	4611      	mov	r1, r2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f004 f90b 	bl	8009ae6 <USB_ReadDevOutEPInterrupt>
 80058d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e8:	461a      	mov	r2, r3
 80058ea:	2301      	movs	r3, #1
 80058ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fe41 	bl	8006578 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590c:	461a      	mov	r2, r3
 800590e:	2308      	movs	r3, #8
 8005910:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 ff17 	bl	8006748 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005930:	461a      	mov	r2, r3
 8005932:	2310      	movs	r3, #16
 8005934:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d030      	beq.n	80059a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005948:	2b80      	cmp	r3, #128	@ 0x80
 800594a:	d109      	bne.n	8005960 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800595a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800595e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	3304      	adds	r3, #4
 8005974:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	78db      	ldrb	r3, [r3, #3]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d108      	bne.n	8005990 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f008 fc14 	bl	800e1b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	461a      	mov	r2, r3
 800599e:	2302      	movs	r3, #2
 80059a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b8:	461a      	mov	r2, r3
 80059ba:	2320      	movs	r3, #32
 80059bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d4:	461a      	mov	r2, r3
 80059d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	3301      	adds	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f47f af62 	bne.w	80058b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f004 f82f 	bl	8009a58 <USB_ReadInterrupts>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a04:	f040 80db 	bne.w	8005bbe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f004 f850 	bl	8009ab2 <USB_ReadDevAllInEpInterrupt>
 8005a12:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005a18:	e0cd      	b.n	8005bb6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80c2 	beq.w	8005baa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f004 f876 	bl	8009b22 <USB_ReadDevInEPInterrupt>
 8005a36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d057      	beq.n	8005af2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	2201      	movs	r2, #1
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a62:	4013      	ands	r3, r2
 8005a64:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a72:	461a      	mov	r2, r3
 8005a74:	2301      	movs	r3, #1
 8005a76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	799b      	ldrb	r3, [r3, #6]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d132      	bne.n	8005ae6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3320      	adds	r3, #32
 8005a90:	6819      	ldr	r1, [r3, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4403      	add	r3, r0
 8005aa0:	331c      	adds	r3, #28
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4419      	add	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4403      	add	r3, r0
 8005ab4:	3320      	adds	r3, #32
 8005ab6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d113      	bne.n	8005ae6 <HAL_PCD_IRQHandler+0x3a2>
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	3324      	adds	r3, #36	@ 0x24
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d108      	bne.n	8005ae6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	f004 f87d 	bl	8009be0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f008 fae8 	bl	800e0c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b24:	461a      	mov	r2, r3
 8005b26:	2310      	movs	r3, #16
 8005b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b40:	461a      	mov	r2, r3
 8005b42:	2340      	movs	r3, #64	@ 0x40
 8005b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d023      	beq.n	8005b98 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005b50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b52:	6a38      	ldr	r0, [r7, #32]
 8005b54:	f003 f9ca 	bl	8008eec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	3310      	adds	r3, #16
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	3304      	adds	r3, #4
 8005b6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	78db      	ldrb	r3, [r3, #3]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d108      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2200      	movs	r2, #0
 8005b78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f008 fb2b 	bl	800e1dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b92:	461a      	mov	r2, r3
 8005b94:	2302      	movs	r3, #2
 8005b96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ba2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fc5b 	bl	8006460 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	3301      	adds	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f47f af2e 	bne.w	8005a1a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f003 ff48 	bl	8009a58 <USB_ReadInterrupts>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bd2:	d122      	bne.n	8005c1a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005be2:	f023 0301 	bic.w	r3, r3, #1
 8005be6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d108      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fde9 	bl	80067d4 <HAL_PCDEx_LPM_Callback>
 8005c02:	e002      	b.n	8005c0a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f008 fac9 	bl	800e19c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f003 ff1a 	bl	8009a58 <USB_ReadInterrupts>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c2e:	d112      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d102      	bne.n	8005c46 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f008 fa85 	bl	800e150 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005c54:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 fefc 	bl	8009a58 <USB_ReadInterrupts>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	f040 80b7 	bne.w	8005ddc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2110      	movs	r1, #16
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 f92f 	bl	8008eec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c92:	e046      	b.n	8005d22 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ca6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cda:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	3301      	adds	r3, #1
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	461a      	mov	r2, r3
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d3b2      	bcc.n	8005c94 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d3c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005d40:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7bdb      	ldrb	r3, [r3, #15]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d5a:	f043 030b 	orr.w	r3, r3, #11
 8005d5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d70:	f043 030b 	orr.w	r3, r3, #11
 8005d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d76:	e015      	b.n	8005da4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005d8a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005d8e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d9e:	f043 030b 	orr.w	r3, r3, #11
 8005da2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005db6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f003 ff0a 	bl	8009be0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f003 fe39 	bl	8009a58 <USB_ReadInterrupts>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df0:	d123      	bne.n	8005e3a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 fecf 	bl	8009b9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f003 f8a5 	bl	8008f50 <USB_GetDevSpeed>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681c      	ldr	r4, [r3, #0]
 8005e12:	f001 f90f 	bl	8007034 <HAL_RCC_GetHCLKFreq>
 8005e16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f002 ffc2 	bl	8008da8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f008 f974 	bl	800e112 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f003 fe0a 	bl	8009a58 <USB_ReadInterrupts>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d10a      	bne.n	8005e64 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f008 f951 	bl	800e0f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f002 0208 	and.w	r2, r2, #8
 8005e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f003 fdf5 	bl	8009a58 <USB_ReadInterrupts>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e74:	2b80      	cmp	r3, #128	@ 0x80
 8005e76:	d123      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e84:	2301      	movs	r3, #1
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e88:	e014      	b.n	8005eb4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e8e:	4613      	mov	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d105      	bne.n	8005eae <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 faa8 	bl	80063fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	791b      	ldrb	r3, [r3, #4]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d3e4      	bcc.n	8005e8a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f003 fdc7 	bl	8009a58 <USB_ReadInterrupts>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ed4:	d13c      	bne.n	8005f50 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eda:	e02b      	b.n	8005f34 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3318      	adds	r3, #24
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d115      	bne.n	8005f2e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005f02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da12      	bge.n	8005f2e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	3317      	adds	r3, #23
 8005f18:	2201      	movs	r2, #1
 8005f1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa68 	bl	80063fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	3301      	adds	r3, #1
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	791b      	ldrb	r3, [r3, #4]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d3cd      	bcc.n	8005edc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f003 fd7f 	bl	8009a58 <USB_ReadInterrupts>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f64:	d156      	bne.n	8006014 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f66:	2301      	movs	r3, #1
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6a:	e045      	b.n	8005ff8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d12e      	bne.n	8005ff2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da2b      	bge.n	8005ff2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005fa6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d121      	bne.n	8005ff2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fee:	6053      	str	r3, [r2, #4]
            break;
 8005ff0:	e008      	b.n	8006004 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	4293      	cmp	r3, r2
 8006002:	d3b3      	bcc.n	8005f6c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f003 fd1d 	bl	8009a58 <USB_ReadInterrupts>
 800601e:	4603      	mov	r3, r0
 8006020:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006028:	d10a      	bne.n	8006040 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f008 f8e8 	bl	800e200 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800603e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f003 fd07 	bl	8009a58 <USB_ReadInterrupts>
 800604a:	4603      	mov	r3, r0
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b04      	cmp	r3, #4
 8006052:	d115      	bne.n	8006080 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f008 f8d8 	bl	800e21c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	e000      	b.n	8006080 <HAL_PCD_IRQHandler+0x93c>
      return;
 800607e:	bf00      	nop
    }
  }
}
 8006080:	3734      	adds	r7, #52	@ 0x34
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}

08006086 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_PCD_SetAddress+0x1a>
 800609c:	2302      	movs	r3, #2
 800609e:	e012      	b.n	80060c6 <HAL_PCD_SetAddress+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	4611      	mov	r1, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f003 fca8 	bl	8009a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	461a      	mov	r2, r3
 80060dc:	4603      	mov	r3, r0
 80060de:	70fb      	strb	r3, [r7, #3]
 80060e0:	460b      	mov	r3, r1
 80060e2:	803b      	strh	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	da0f      	bge.n	8006114 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	3310      	adds	r3, #16
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	3304      	adds	r3, #4
 800610a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	705a      	strb	r2, [r3, #1]
 8006112:	e00f      	b.n	8006134 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	f003 020f 	and.w	r2, r3, #15
 800611a:	4613      	mov	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	4413      	add	r3, r2
 800612a:	3304      	adds	r3, #4
 800612c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006140:	883b      	ldrh	r3, [r7, #0]
 8006142:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	78ba      	ldrb	r2, [r7, #2]
 800614e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006162:	78bb      	ldrb	r3, [r7, #2]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d102      	bne.n	800616e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_PCD_EP_Open+0xae>
 8006178:	2302      	movs	r3, #2
 800617a:	e00e      	b.n	800619a <HAL_PCD_EP_Open+0xcc>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68f9      	ldr	r1, [r7, #12]
 800618a:	4618      	mov	r0, r3
 800618c:	f002 ff05 	bl	8008f9a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006198:	7afb      	ldrb	r3, [r7, #11]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	460b      	mov	r3, r1
 80061b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061b2:	7afb      	ldrb	r3, [r7, #11]
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	4613      	mov	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	3304      	adds	r3, #4
 80061ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2200      	movs	r2, #0
 80061dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	799b      	ldrb	r3, [r3, #6]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d102      	bne.n	80061fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	799b      	ldrb	r3, [r3, #6]
 8006206:	461a      	mov	r2, r3
 8006208:	6979      	ldr	r1, [r7, #20]
 800620a:	f002 ff4d 	bl	80090a8 <USB_EPStartXfer>

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	460b      	mov	r3, r1
 8006226:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006228:	7afb      	ldrb	r3, [r7, #11]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	3310      	adds	r3, #16
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	3304      	adds	r3, #4
 800623e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2200      	movs	r2, #0
 8006250:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2201      	movs	r2, #1
 8006256:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	b2da      	uxtb	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	799b      	ldrb	r3, [r3, #6]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d102      	bne.n	8006272 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	799b      	ldrb	r3, [r3, #6]
 800627a:	461a      	mov	r2, r3
 800627c:	6979      	ldr	r1, [r7, #20]
 800627e:	f002 ff13 	bl	80090a8 <USB_EPStartXfer>

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	7912      	ldrb	r2, [r2, #4]
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e04f      	b.n	800634a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da0f      	bge.n	80062d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	3310      	adds	r3, #16
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	3304      	adds	r3, #4
 80062c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	705a      	strb	r2, [r3, #1]
 80062d0:	e00d      	b.n	80062ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4413      	add	r3, r2
 80062e4:	3304      	adds	r3, #4
 80062e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_PCD_EP_SetStall+0x82>
 800630a:	2302      	movs	r3, #2
 800630c:	e01d      	b.n	800634a <HAL_PCD_EP_SetStall+0xbe>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	4618      	mov	r0, r3
 800631e:	f003 faa1 	bl	8009864 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	7999      	ldrb	r1, [r3, #6]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800633a:	461a      	mov	r2, r3
 800633c:	f003 fc50 	bl	8009be0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	7912      	ldrb	r2, [r2, #4]
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e042      	b.n	80063f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006374:	2b00      	cmp	r3, #0
 8006376:	da0f      	bge.n	8006398 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	3310      	adds	r3, #16
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4413      	add	r3, r2
 800638c:	3304      	adds	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	705a      	strb	r2, [r3, #1]
 8006396:	e00f      	b.n	80063b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 020f 	and.w	r2, r3, #15
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_PCD_EP_ClrStall+0x86>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e00e      	b.n	80063f6 <HAL_PCD_EP_ClrStall+0xa4>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68f9      	ldr	r1, [r7, #12]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f003 faaa 	bl	8009940 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800640a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da0c      	bge.n	800642c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	4613      	mov	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3310      	adds	r3, #16
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4413      	add	r3, r2
 8006426:	3304      	adds	r3, #4
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e00c      	b.n	8006446 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	4613      	mov	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	3304      	adds	r3, #4
 8006444:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68f9      	ldr	r1, [r7, #12]
 800644c:	4618      	mov	r0, r3
 800644e:	f003 f8c9 	bl	80095e4 <USB_EPStopXfer>
 8006452:	4603      	mov	r3, r0
 8006454:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006456:	7afb      	ldrb	r3, [r7, #11]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	@ 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	4613      	mov	r3, r2
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	3310      	adds	r3, #16
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	3304      	adds	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	429a      	cmp	r2, r3
 8006492:	d901      	bls.n	8006498 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e06b      	b.n	8006570 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d902      	bls.n	80064b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	3303      	adds	r3, #3
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064bc:	e02a      	b.n	8006514 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d902      	bls.n	80064da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3303      	adds	r3, #3
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68d9      	ldr	r1, [r3, #12]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	4603      	mov	r3, r0
 80064f6:	6978      	ldr	r0, [r7, #20]
 80064f8:	f003 f91e 	bl	8009738 <USB_WritePacket>

    ep->xfer_buff  += len;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	441a      	add	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	441a      	add	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	429a      	cmp	r2, r3
 8006528:	d809      	bhi.n	800653e <PCD_WriteEmptyTxFifo+0xde>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006532:	429a      	cmp	r2, r3
 8006534:	d203      	bcs.n	800653e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1bf      	bne.n	80064be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	429a      	cmp	r2, r3
 8006548:	d811      	bhi.n	800656e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	2201      	movs	r2, #1
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	43db      	mvns	r3, r3
 8006564:	6939      	ldr	r1, [r7, #16]
 8006566:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800656a:	4013      	ands	r3, r2
 800656c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	333c      	adds	r3, #60	@ 0x3c
 8006590:	3304      	adds	r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	799b      	ldrb	r3, [r3, #6]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d17b      	bne.n	80066a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	4a61      	ldr	r2, [pc, #388]	@ (8006740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	f240 80b9 	bls.w	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80b3 	beq.w	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065da:	461a      	mov	r2, r3
 80065dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e0:	6093      	str	r3, [r2, #8]
 80065e2:	e0a7      	b.n	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	2320      	movs	r3, #32
 80065fe:	6093      	str	r3, [r2, #8]
 8006600:	e098      	b.n	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 8093 	bne.w	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	4a4b      	ldr	r2, [pc, #300]	@ (8006740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d90f      	bls.n	8006636 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662c:	461a      	mov	r2, r3
 800662e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006632:	6093      	str	r3, [r2, #8]
 8006634:	e07e      	b.n	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	4413      	add	r3, r2
 8006648:	3304      	adds	r3, #4
 800664a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1a      	ldr	r2, [r3, #32]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	0159      	lsls	r1, r3, #5
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	440b      	add	r3, r1
 8006658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006662:	1ad2      	subs	r2, r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d114      	bne.n	8006698 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006680:	461a      	mov	r2, r3
 8006682:	2101      	movs	r1, #1
 8006684:	f003 faac 	bl	8009be0 <USB_EP0_OutStart>
 8006688:	e006      	b.n	8006698 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	441a      	add	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f007 fcf4 	bl	800e08c <HAL_PCD_DataOutStageCallback>
 80066a4:	e046      	b.n	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4a26      	ldr	r2, [pc, #152]	@ (8006744 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d124      	bne.n	80066f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c4:	461a      	mov	r2, r3
 80066c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ca:	6093      	str	r3, [r2, #8]
 80066cc:	e032      	b.n	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e4:	461a      	mov	r2, r3
 80066e6:	2320      	movs	r3, #32
 80066e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f007 fccb 	bl	800e08c <HAL_PCD_DataOutStageCallback>
 80066f6:	e01d      	b.n	8006734 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d114      	bne.n	8006728 <PCD_EP_OutXfrComplete_int+0x1b0>
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	4613      	mov	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	440b      	add	r3, r1
 800670c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d108      	bne.n	8006728 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006720:	461a      	mov	r2, r3
 8006722:	2100      	movs	r1, #0
 8006724:	f003 fa5c 	bl	8009be0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f007 fcac 	bl	800e08c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	4f54300a 	.word	0x4f54300a
 8006744:	4f54310a 	.word	0x4f54310a

08006748 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	333c      	adds	r3, #60	@ 0x3c
 8006760:	3304      	adds	r3, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a15      	ldr	r2, [pc, #84]	@ (80067d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d90e      	bls.n	800679c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	461a      	mov	r2, r3
 8006796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f007 fc63 	bl	800e068 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a0a      	ldr	r2, [pc, #40]	@ (80067d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d90c      	bls.n	80067c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	799b      	ldrb	r3, [r3, #6]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d108      	bne.n	80067c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067bc:	461a      	mov	r2, r3
 80067be:	2101      	movs	r1, #1
 80067c0:	f003 fa0e 	bl	8009be0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	4f54300a 	.word	0x4f54300a

080067d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e267      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d075      	beq.n	80068f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800680a:	4b88      	ldr	r3, [pc, #544]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b04      	cmp	r3, #4
 8006814:	d00c      	beq.n	8006830 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006816:	4b85      	ldr	r3, [pc, #532]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800681e:	2b08      	cmp	r3, #8
 8006820:	d112      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006822:	4b82      	ldr	r3, [pc, #520]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800682a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800682e:	d10b      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	4b7e      	ldr	r3, [pc, #504]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d05b      	beq.n	80068f4 <HAL_RCC_OscConfig+0x108>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d157      	bne.n	80068f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e242      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006850:	d106      	bne.n	8006860 <HAL_RCC_OscConfig+0x74>
 8006852:	4b76      	ldr	r3, [pc, #472]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a75      	ldr	r2, [pc, #468]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e01d      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006868:	d10c      	bne.n	8006884 <HAL_RCC_OscConfig+0x98>
 800686a:	4b70      	ldr	r3, [pc, #448]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6f      	ldr	r2, [pc, #444]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4b6d      	ldr	r3, [pc, #436]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a6c      	ldr	r2, [pc, #432]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e00b      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006884:	4b69      	ldr	r3, [pc, #420]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a68      	ldr	r2, [pc, #416]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800688a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	4b66      	ldr	r3, [pc, #408]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a65      	ldr	r2, [pc, #404]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800689a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d013      	beq.n	80068cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fe fb2a 	bl	8004efc <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068ac:	f7fe fb26 	bl	8004efc <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	@ 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e207      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	4b5b      	ldr	r3, [pc, #364]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0xc0>
 80068ca:	e014      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068cc:	f7fe fb16 	bl	8004efc <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d4:	f7fe fb12 	bl	8004efc <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	@ 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e1f3      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	4b51      	ldr	r3, [pc, #324]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0xe8>
 80068f2:	e000      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d063      	beq.n	80069ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006902:	4b4a      	ldr	r3, [pc, #296]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b47      	ldr	r3, [pc, #284]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006916:	2b08      	cmp	r3, #8
 8006918:	d11c      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691a:	4b44      	ldr	r3, [pc, #272]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006926:	4b41      	ldr	r3, [pc, #260]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e1c7      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4937      	ldr	r1, [pc, #220]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800694e:	4313      	orrs	r3, r2
 8006950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	e03a      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d020      	beq.n	800699e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800695c:	4b34      	ldr	r3, [pc, #208]	@ (8006a30 <HAL_RCC_OscConfig+0x244>)
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006962:	f7fe facb 	bl	8004efc <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800696a:	f7fe fac7 	bl	8004efc <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e1a8      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0f0      	beq.n	800696a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006988:	4b28      	ldr	r3, [pc, #160]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4925      	ldr	r1, [pc, #148]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
 800699c:	e015      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699e:	4b24      	ldr	r3, [pc, #144]	@ (8006a30 <HAL_RCC_OscConfig+0x244>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fe faaa 	bl	8004efc <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ac:	f7fe faa6 	bl	8004efc <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e187      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	4b1b      	ldr	r3, [pc, #108]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d036      	beq.n	8006a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d016      	beq.n	8006a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069de:	4b15      	ldr	r3, [pc, #84]	@ (8006a34 <HAL_RCC_OscConfig+0x248>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fe fa8a 	bl	8004efc <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ec:	f7fe fa86 	bl	8004efc <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e167      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fe:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x200>
 8006a0a:	e01b      	b.n	8006a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a0c:	4b09      	ldr	r3, [pc, #36]	@ (8006a34 <HAL_RCC_OscConfig+0x248>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a12:	f7fe fa73 	bl	8004efc <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a18:	e00e      	b.n	8006a38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1a:	f7fe fa6f 	bl	8004efc <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d907      	bls.n	8006a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e150      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	42470000 	.word	0x42470000
 8006a34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a38:	4b88      	ldr	r3, [pc, #544]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1ea      	bne.n	8006a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8097 	beq.w	8006b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a56:	4b81      	ldr	r3, [pc, #516]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	4b7d      	ldr	r3, [pc, #500]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a72:	4b7a      	ldr	r3, [pc, #488]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a82:	4b77      	ldr	r3, [pc, #476]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d118      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a8e:	4b74      	ldr	r3, [pc, #464]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a73      	ldr	r2, [pc, #460]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a9a:	f7fe fa2f 	bl	8004efc <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa2:	f7fe fa2b 	bl	8004efc <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e10c      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0f0      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d106      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x2ea>
 8006ac8:	4b64      	ldr	r3, [pc, #400]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006acc:	4a63      	ldr	r2, [pc, #396]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad4:	e01c      	b.n	8006b10 <HAL_RCC_OscConfig+0x324>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x30c>
 8006ade:	4b5f      	ldr	r3, [pc, #380]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006ae4:	f043 0304 	orr.w	r3, r3, #4
 8006ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aea:	4b5c      	ldr	r3, [pc, #368]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aee:	4a5b      	ldr	r2, [pc, #364]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af6:	e00b      	b.n	8006b10 <HAL_RCC_OscConfig+0x324>
 8006af8:	4b58      	ldr	r3, [pc, #352]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afc:	4a57      	ldr	r2, [pc, #348]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b04:	4b55      	ldr	r3, [pc, #340]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b08:	4a54      	ldr	r2, [pc, #336]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b0a:	f023 0304 	bic.w	r3, r3, #4
 8006b0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d015      	beq.n	8006b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b18:	f7fe f9f0 	bl	8004efc <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1e:	e00a      	b.n	8006b36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b20:	f7fe f9ec 	bl	8004efc <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e0cb      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b36:	4b49      	ldr	r3, [pc, #292]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0ee      	beq.n	8006b20 <HAL_RCC_OscConfig+0x334>
 8006b42:	e014      	b.n	8006b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b44:	f7fe f9da 	bl	8004efc <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4c:	f7fe f9d6 	bl	8004efc <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e0b5      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b62:	4b3e      	ldr	r3, [pc, #248]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1ee      	bne.n	8006b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d105      	bne.n	8006b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b74:	4b39      	ldr	r3, [pc, #228]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b78:	4a38      	ldr	r2, [pc, #224]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80a1 	beq.w	8006ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b8a:	4b34      	ldr	r3, [pc, #208]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d05c      	beq.n	8006c50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d141      	bne.n	8006c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b9e:	4b31      	ldr	r3, [pc, #196]	@ (8006c64 <HAL_RCC_OscConfig+0x478>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fe f9aa 	bl	8004efc <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fe f9a6 	bl	8004efc <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e087      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbe:	4b27      	ldr	r3, [pc, #156]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	019b      	lsls	r3, r3, #6
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	3b01      	subs	r3, #1
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	061b      	lsls	r3, r3, #24
 8006bee:	491b      	ldr	r1, [pc, #108]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c64 <HAL_RCC_OscConfig+0x478>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfa:	f7fe f97f 	bl	8004efc <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c02:	f7fe f97b 	bl	8004efc <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e05c      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c14:	4b11      	ldr	r3, [pc, #68]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCC_OscConfig+0x416>
 8006c20:	e054      	b.n	8006ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c22:	4b10      	ldr	r3, [pc, #64]	@ (8006c64 <HAL_RCC_OscConfig+0x478>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fe f968 	bl	8004efc <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c30:	f7fe f964 	bl	8004efc <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e045      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c42:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x444>
 8006c4e:	e03d      	b.n	8006ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e038      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40007000 	.word	0x40007000
 8006c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c68:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd8 <HAL_RCC_OscConfig+0x4ec>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d028      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d121      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d11a      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d111      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40023800 	.word	0x40023800

08006cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0cc      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf0:	4b68      	ldr	r3, [pc, #416]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d90c      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfe:	4b65      	ldr	r3, [pc, #404]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	4b63      	ldr	r3, [pc, #396]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0b8      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d020      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d30:	4b59      	ldr	r3, [pc, #356]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	4a58      	ldr	r2, [pc, #352]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d48:	4b53      	ldr	r3, [pc, #332]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4a52      	ldr	r2, [pc, #328]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d54:	4b50      	ldr	r3, [pc, #320]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	494d      	ldr	r1, [pc, #308]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d044      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d107      	bne.n	8006d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7a:	4b47      	ldr	r3, [pc, #284]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d119      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e07f      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d003      	beq.n	8006d9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e06f      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006daa:	4b3b      	ldr	r3, [pc, #236]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e067      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dba:	4b37      	ldr	r3, [pc, #220]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 0203 	bic.w	r2, r3, #3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4934      	ldr	r1, [pc, #208]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dcc:	f7fe f896 	bl	8004efc <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd2:	e00a      	b.n	8006dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd4:	f7fe f892 	bl	8004efc <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e04f      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	4b2b      	ldr	r3, [pc, #172]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 020c 	and.w	r2, r3, #12
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d1eb      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b25      	ldr	r3, [pc, #148]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d20c      	bcs.n	8006e24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b22      	ldr	r3, [pc, #136]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e12:	4b20      	ldr	r3, [pc, #128]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e032      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e30:	4b19      	ldr	r3, [pc, #100]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4916      	ldr	r1, [pc, #88]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	490e      	ldr	r1, [pc, #56]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e62:	f000 f821 	bl	8006ea8 <HAL_RCC_GetSysClockFreq>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4b0b      	ldr	r3, [pc, #44]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	490a      	ldr	r1, [pc, #40]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006e74:	5ccb      	ldrb	r3, [r1, r3]
 8006e76:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fd fec0 	bl	8004c08 <HAL_InitTick>

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40023c00 	.word	0x40023c00
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	0800f270 	.word	0x0800f270
 8006ea0:	20000000 	.word	0x20000000
 8006ea4:	20000004 	.word	0x20000004

08006ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eac:	b090      	sub	sp, #64	@ 0x40
 8006eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ec0:	4b59      	ldr	r3, [pc, #356]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 030c 	and.w	r3, r3, #12
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d00d      	beq.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	f200 80a1 	bhi.w	8007014 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x34>
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006eda:	e09b      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006edc:	4b53      	ldr	r3, [pc, #332]	@ (800702c <HAL_RCC_GetSysClockFreq+0x184>)
 8006ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ee0:	e09b      	b.n	800701a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ee2:	4b53      	ldr	r3, [pc, #332]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ee6:	e098      	b.n	800701a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d028      	beq.n	8006f50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006efe:	4b4a      	ldr	r3, [pc, #296]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	099b      	lsrs	r3, r3, #6
 8006f04:	2200      	movs	r2, #0
 8006f06:	623b      	str	r3, [r7, #32]
 8006f08:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f10:	2100      	movs	r1, #0
 8006f12:	4b47      	ldr	r3, [pc, #284]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f14:	fb03 f201 	mul.w	r2, r3, r1
 8006f18:	2300      	movs	r3, #0
 8006f1a:	fb00 f303 	mul.w	r3, r0, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	4a43      	ldr	r2, [pc, #268]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f22:	fba0 1202 	umull	r1, r2, r0, r2
 8006f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f28:	460a      	mov	r2, r1
 8006f2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f2e:	4413      	add	r3, r2
 8006f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f34:	2200      	movs	r2, #0
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	61fa      	str	r2, [r7, #28]
 8006f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006f42:	f7f9 fd9b 	bl	8000a7c <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f4e:	e053      	b.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f50:	4b35      	ldr	r3, [pc, #212]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	099b      	lsrs	r3, r3, #6
 8006f56:	2200      	movs	r2, #0
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	617a      	str	r2, [r7, #20]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f62:	f04f 0b00 	mov.w	fp, #0
 8006f66:	4652      	mov	r2, sl
 8006f68:	465b      	mov	r3, fp
 8006f6a:	f04f 0000 	mov.w	r0, #0
 8006f6e:	f04f 0100 	mov.w	r1, #0
 8006f72:	0159      	lsls	r1, r3, #5
 8006f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f78:	0150      	lsls	r0, r2, #5
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	ebb2 080a 	subs.w	r8, r2, sl
 8006f82:	eb63 090b 	sbc.w	r9, r3, fp
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006f92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006f96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006f9a:	ebb2 0408 	subs.w	r4, r2, r8
 8006f9e:	eb63 0509 	sbc.w	r5, r3, r9
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	00eb      	lsls	r3, r5, #3
 8006fac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fb0:	00e2      	lsls	r2, r4, #3
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	461d      	mov	r5, r3
 8006fb6:	eb14 030a 	adds.w	r3, r4, sl
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	eb45 030b 	adc.w	r3, r5, fp
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fce:	4629      	mov	r1, r5
 8006fd0:	028b      	lsls	r3, r1, #10
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fd8:	4621      	mov	r1, r4
 8006fda:	028a      	lsls	r2, r1, #10
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	60fa      	str	r2, [r7, #12]
 8006fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fec:	f7f9 fd46 	bl	8000a7c <__aeabi_uldivmod>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	3301      	adds	r3, #1
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007012:	e002      	b.n	800701a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007014:	4b05      	ldr	r3, [pc, #20]	@ (800702c <HAL_RCC_GetSysClockFreq+0x184>)
 8007016:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800701c:	4618      	mov	r0, r3
 800701e:	3740      	adds	r7, #64	@ 0x40
 8007020:	46bd      	mov	sp, r7
 8007022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007026:	bf00      	nop
 8007028:	40023800 	.word	0x40023800
 800702c:	00f42400 	.word	0x00f42400
 8007030:	017d7840 	.word	0x017d7840

08007034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007038:	4b03      	ldr	r3, [pc, #12]	@ (8007048 <HAL_RCC_GetHCLKFreq+0x14>)
 800703a:	681b      	ldr	r3, [r3, #0]
}
 800703c:	4618      	mov	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000000 	.word	0x20000000

0800704c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007050:	f7ff fff0 	bl	8007034 <HAL_RCC_GetHCLKFreq>
 8007054:	4602      	mov	r2, r0
 8007056:	4b05      	ldr	r3, [pc, #20]	@ (800706c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	0a9b      	lsrs	r3, r3, #10
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	4903      	ldr	r1, [pc, #12]	@ (8007070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007062:	5ccb      	ldrb	r3, [r1, r3]
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40023800 	.word	0x40023800
 8007070:	0800f280 	.word	0x0800f280

08007074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007078:	f7ff ffdc 	bl	8007034 <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b05      	ldr	r3, [pc, #20]	@ (8007094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	0b5b      	lsrs	r3, r3, #13
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4903      	ldr	r1, [pc, #12]	@ (8007098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40023800 	.word	0x40023800
 8007098:	0800f280 	.word	0x0800f280

0800709c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	220f      	movs	r2, #15
 80070aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070ac:	4b12      	ldr	r3, [pc, #72]	@ (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0203 	and.w	r2, r3, #3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070b8:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070c4:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070d0:	4b09      	ldr	r3, [pc, #36]	@ (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	08db      	lsrs	r3, r3, #3
 80070d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070de:	4b07      	ldr	r3, [pc, #28]	@ (80070fc <HAL_RCC_GetClockConfig+0x60>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0207 	and.w	r2, r3, #7
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40023800 	.word	0x40023800
 80070fc:	40023c00 	.word	0x40023c00

08007100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e07b      	b.n	800720a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007122:	d009      	beq.n	8007138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	61da      	str	r2, [r3, #28]
 800712a:	e005      	b.n	8007138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fd fc6e 	bl	8004a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800716e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071bc:	ea42 0103 	orr.w	r1, r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	0c1b      	lsrs	r3, r3, #16
 80071d6:	f003 0104 	and.w	r1, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	f003 0210 	and.w	r2, r3, #16
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b088      	sub	sp, #32
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007222:	f7fd fe6b 	bl	8004efc <HAL_GetTick>
 8007226:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b01      	cmp	r3, #1
 8007236:	d001      	beq.n	800723c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007238:	2302      	movs	r3, #2
 800723a:	e12a      	b.n	8007492 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <HAL_SPI_Transmit+0x36>
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e122      	b.n	8007492 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_SPI_Transmit+0x48>
 8007256:	2302      	movs	r3, #2
 8007258:	e11b      	b.n	8007492 <HAL_SPI_Transmit+0x280>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2203      	movs	r2, #3
 8007266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	88fa      	ldrh	r2, [r7, #6]
 800727a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a8:	d10f      	bne.n	80072ca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b40      	cmp	r3, #64	@ 0x40
 80072d6:	d007      	beq.n	80072e8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072f0:	d152      	bne.n	8007398 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_SPI_Transmit+0xee>
 80072fa:	8b7b      	ldrh	r3, [r7, #26]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d145      	bne.n	800738c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	1c9a      	adds	r2, r3, #2
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007324:	e032      	b.n	800738c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b02      	cmp	r3, #2
 8007332:	d112      	bne.n	800735a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007338:	881a      	ldrh	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007344:	1c9a      	adds	r2, r3, #2
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800734e:	b29b      	uxth	r3, r3
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007358:	e018      	b.n	800738c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800735a:	f7fd fdcf 	bl	8004efc <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d803      	bhi.n	8007372 <HAL_SPI_Transmit+0x160>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d102      	bne.n	8007378 <HAL_SPI_Transmit+0x166>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e082      	b.n	8007492 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1c7      	bne.n	8007326 <HAL_SPI_Transmit+0x114>
 8007396:	e053      	b.n	8007440 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <HAL_SPI_Transmit+0x194>
 80073a0:	8b7b      	ldrh	r3, [r7, #26]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d147      	bne.n	8007436 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073cc:	e033      	b.n	8007436 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d113      	bne.n	8007404 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007402:	e018      	b.n	8007436 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007404:	f7fd fd7a 	bl	8004efc <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d803      	bhi.n	800741c <HAL_SPI_Transmit+0x20a>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d102      	bne.n	8007422 <HAL_SPI_Transmit+0x210>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e02d      	b.n	8007492 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1c6      	bne.n	80073ce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fbe7 	bl	8007c18 <SPI_EndRxTxTransaction>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007490:	2300      	movs	r3, #0
  }
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b088      	sub	sp, #32
 800749e:	af02      	add	r7, sp, #8
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d001      	beq.n	80074ba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80074b6:	2302      	movs	r3, #2
 80074b8:	e104      	b.n	80076c4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074c2:	d112      	bne.n	80074ea <HAL_SPI_Receive+0x50>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10e      	bne.n	80074ea <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2204      	movs	r2, #4
 80074d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074d4:	88fa      	ldrh	r2, [r7, #6]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	4613      	mov	r3, r2
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 f8f3 	bl	80076cc <HAL_SPI_TransmitReceive>
 80074e6:	4603      	mov	r3, r0
 80074e8:	e0ec      	b.n	80076c4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ea:	f7fd fd07 	bl	8004efc <HAL_GetTick>
 80074ee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_Receive+0x62>
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0e1      	b.n	80076c4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_SPI_Receive+0x74>
 800750a:	2302      	movs	r3, #2
 800750c:	e0da      	b.n	80076c4 <HAL_SPI_Receive+0x22a>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2204      	movs	r2, #4
 800751a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	88fa      	ldrh	r2, [r7, #6]
 800752e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800755c:	d10f      	bne.n	800757e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800756c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800757c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007588:	2b40      	cmp	r3, #64	@ 0x40
 800758a:	d007      	beq.n	800759c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800759a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d170      	bne.n	8007686 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075a4:	e035      	b.n	8007612 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d115      	bne.n	80075e0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f103 020c 	add.w	r2, r3, #12
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c0:	7812      	ldrb	r2, [r2, #0]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075de:	e018      	b.n	8007612 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e0:	f7fd fc8c 	bl	8004efc <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d803      	bhi.n	80075f8 <HAL_SPI_Receive+0x15e>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d102      	bne.n	80075fe <HAL_SPI_Receive+0x164>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e058      	b.n	80076c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1c4      	bne.n	80075a6 <HAL_SPI_Receive+0x10c>
 800761c:	e038      	b.n	8007690 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	d113      	bne.n	8007654 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	b292      	uxth	r2, r2
 8007638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763e:	1c9a      	adds	r2, r3, #2
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007652:	e018      	b.n	8007686 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007654:	f7fd fc52 	bl	8004efc <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d803      	bhi.n	800766c <HAL_SPI_Receive+0x1d2>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d102      	bne.n	8007672 <HAL_SPI_Receive+0x1d8>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e01e      	b.n	80076c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1c6      	bne.n	800761e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fa59 	bl	8007b4c <SPI_EndRxTransaction>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80076c2:	2300      	movs	r3, #0
  }
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	@ 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076da:	2301      	movs	r3, #1
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076de:	f7fd fc0d 	bl	8004efc <HAL_GetTick>
 80076e2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076ea:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80076f2:	887b      	ldrh	r3, [r7, #2]
 80076f4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d00c      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x4a>
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007702:	d106      	bne.n	8007712 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <HAL_SPI_TransmitReceive+0x46>
 800770c:	7ffb      	ldrb	r3, [r7, #31]
 800770e:	2b04      	cmp	r3, #4
 8007710:	d001      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007712:	2302      	movs	r3, #2
 8007714:	e17f      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x5c>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x5c>
 8007722:	887b      	ldrh	r3, [r7, #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e174      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007732:	2b01      	cmp	r3, #1
 8007734:	d101      	bne.n	800773a <HAL_SPI_TransmitReceive+0x6e>
 8007736:	2302      	movs	r3, #2
 8007738:	e16d      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x34a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b04      	cmp	r3, #4
 800774c:	d003      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2205      	movs	r2, #5
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	887a      	ldrh	r2, [r7, #2]
 8007766:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	887a      	ldrh	r2, [r7, #2]
 800776c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	887a      	ldrh	r2, [r7, #2]
 8007778:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	887a      	ldrh	r2, [r7, #2]
 800777e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007796:	2b40      	cmp	r3, #64	@ 0x40
 8007798:	d007      	beq.n	80077aa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077b2:	d17e      	bne.n	80078b2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_SPI_TransmitReceive+0xf6>
 80077bc:	8afb      	ldrh	r3, [r7, #22]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d16c      	bne.n	800789c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c6:	881a      	ldrh	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d2:	1c9a      	adds	r2, r3, #2
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e6:	e059      	b.n	800789c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d11b      	bne.n	800782e <HAL_SPI_TransmitReceive+0x162>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d016      	beq.n	800782e <HAL_SPI_TransmitReceive+0x162>
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	2b01      	cmp	r3, #1
 8007804:	d113      	bne.n	800782e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780a:	881a      	ldrh	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	1c9a      	adds	r2, r3, #2
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b01      	cmp	r3, #1
 800783a:	d119      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x1a4>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d014      	beq.n	8007870 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007850:	b292      	uxth	r2, r2
 8007852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007858:	1c9a      	adds	r2, r3, #2
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800786c:	2301      	movs	r3, #1
 800786e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007870:	f7fd fb44 	bl	8004efc <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800787c:	429a      	cmp	r2, r3
 800787e:	d80d      	bhi.n	800789c <HAL_SPI_TransmitReceive+0x1d0>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d009      	beq.n	800789c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e0bc      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1a0      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x11c>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d19b      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x11c>
 80078b0:	e082      	b.n	80079b8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_SPI_TransmitReceive+0x1f4>
 80078ba:	8afb      	ldrh	r3, [r7, #22]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d171      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	330c      	adds	r3, #12
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e6:	e05d      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d11c      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x264>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d017      	beq.n	8007930 <HAL_SPI_TransmitReceive+0x264>
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	2b01      	cmp	r3, #1
 8007904:	d114      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	330c      	adds	r3, #12
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007922:	b29b      	uxth	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	d119      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x2a6>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d014      	beq.n	8007972 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800796e:	2301      	movs	r3, #1
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007972:	f7fd fac3 	bl	8004efc <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800797e:	429a      	cmp	r2, r3
 8007980:	d803      	bhi.n	800798a <HAL_SPI_TransmitReceive+0x2be>
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d102      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x2c4>
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e038      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d19c      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x21c>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d197      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079b8:	6a3a      	ldr	r2, [r7, #32]
 80079ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f92b 	bl	8007c18 <SPI_EndRxTxTransaction>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d008      	beq.n	80079da <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e01d      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079e2:	2300      	movs	r3, #0
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007a14:	2300      	movs	r3, #0
  }
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3728      	adds	r7, #40	@ 0x28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a2c:	b2db      	uxtb	r3, r3
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a4c:	f7fd fa56 	bl	8004efc <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4413      	add	r3, r2
 8007a5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a5c:	f7fd fa4e 	bl	8004efc <HAL_GetTick>
 8007a60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a62:	4b39      	ldr	r3, [pc, #228]	@ (8007b48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	015b      	lsls	r3, r3, #5
 8007a68:	0d1b      	lsrs	r3, r3, #20
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	fb02 f303 	mul.w	r3, r2, r3
 8007a70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a72:	e054      	b.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d050      	beq.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a7c:	f7fd fa3e 	bl	8004efc <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d902      	bls.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d13d      	bne.n	8007b0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aaa:	d111      	bne.n	8007ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ab4:	d004      	beq.n	8007ac0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007abe:	d107      	bne.n	8007ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ad8:	d10f      	bne.n	8007afa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e017      	b.n	8007b3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4013      	ands	r3, r2
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	bf0c      	ite	eq
 8007b2e:	2301      	moveq	r3, #1
 8007b30:	2300      	movne	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d19b      	bne.n	8007a74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000000 	.word	0x20000000

08007b4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b60:	d111      	bne.n	8007b86 <SPI_EndRxTransaction+0x3a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b6a:	d004      	beq.n	8007b76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b74:	d107      	bne.n	8007b86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b8e:	d12a      	bne.n	8007be6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b98:	d012      	beq.n	8007bc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2180      	movs	r1, #128	@ 0x80
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7ff ff49 	bl	8007a3c <SPI_WaitFlagStateUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d02d      	beq.n	8007c0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb4:	f043 0220 	orr.w	r2, r3, #32
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e026      	b.n	8007c0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2101      	movs	r1, #1
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff ff36 	bl	8007a3c <SPI_WaitFlagStateUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01a      	beq.n	8007c0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bda:	f043 0220 	orr.w	r2, r3, #32
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e013      	b.n	8007c0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	2101      	movs	r1, #1
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff ff23 	bl	8007a3c <SPI_WaitFlagStateUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d007      	beq.n	8007c0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c00:	f043 0220 	orr.w	r2, r3, #32
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e000      	b.n	8007c0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	2102      	movs	r1, #2
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff ff04 	bl	8007a3c <SPI_WaitFlagStateUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3e:	f043 0220 	orr.w	r2, r3, #32
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e032      	b.n	8007cb0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <SPI_EndRxTxTransaction+0xa0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cbc <SPI_EndRxTxTransaction+0xa4>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	0d5b      	lsrs	r3, r3, #21
 8007c56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c68:	d112      	bne.n	8007c90 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2200      	movs	r2, #0
 8007c72:	2180      	movs	r1, #128	@ 0x80
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff fee1 	bl	8007a3c <SPI_WaitFlagStateUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d016      	beq.n	8007cae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c84:	f043 0220 	orr.w	r2, r3, #32
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e00f      	b.n	8007cb0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca6:	2b80      	cmp	r3, #128	@ 0x80
 8007ca8:	d0f2      	beq.n	8007c90 <SPI_EndRxTxTransaction+0x78>
 8007caa:	e000      	b.n	8007cae <SPI_EndRxTxTransaction+0x96>
        break;
 8007cac:	bf00      	nop
  }

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	165e9f81 	.word	0x165e9f81

08007cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e041      	b.n	8007d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7fc feec 	bl	8004ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f000 fa9e 	bl	8008240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d001      	beq.n	8007d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e044      	b.n	8007e02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0201 	orr.w	r2, r2, #1
 8007d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1e      	ldr	r2, [pc, #120]	@ (8007e10 <HAL_TIM_Base_Start_IT+0xb0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d018      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x6c>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da2:	d013      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x6c>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1a      	ldr	r2, [pc, #104]	@ (8007e14 <HAL_TIM_Base_Start_IT+0xb4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00e      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x6c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a19      	ldr	r2, [pc, #100]	@ (8007e18 <HAL_TIM_Base_Start_IT+0xb8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d009      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x6c>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a17      	ldr	r2, [pc, #92]	@ (8007e1c <HAL_TIM_Base_Start_IT+0xbc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d004      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x6c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a16      	ldr	r2, [pc, #88]	@ (8007e20 <HAL_TIM_Base_Start_IT+0xc0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d111      	bne.n	8007df0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b06      	cmp	r3, #6
 8007ddc:	d010      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0201 	orr.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dee:	e007      	b.n	8007e00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40014000 	.word	0x40014000

08007e24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6a1a      	ldr	r2, [r3, #32]
 8007e42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10f      	bne.n	8007e6c <HAL_TIM_Base_Stop_IT+0x48>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a1a      	ldr	r2, [r3, #32]
 8007e52:	f240 4344 	movw	r3, #1092	@ 0x444
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d107      	bne.n	8007e6c <HAL_TIM_Base_Stop_IT+0x48>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d020      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01b      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f06f 0202 	mvn.w	r2, #2
 8007eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f999 	bl	8008204 <HAL_TIM_IC_CaptureCallback>
 8007ed2:	e005      	b.n	8007ee0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f98b 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f99c 	bl	8008218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d020      	beq.n	8007f32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01b      	beq.n	8007f32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f06f 0204 	mvn.w	r2, #4
 8007f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f973 	bl	8008204 <HAL_TIM_IC_CaptureCallback>
 8007f1e:	e005      	b.n	8007f2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f965 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f976 	bl	8008218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d020      	beq.n	8007f7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01b      	beq.n	8007f7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f06f 0208 	mvn.w	r2, #8
 8007f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	f003 0303 	and.w	r3, r3, #3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f94d 	bl	8008204 <HAL_TIM_IC_CaptureCallback>
 8007f6a:	e005      	b.n	8007f78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f93f 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f950 	bl	8008218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f003 0310 	and.w	r3, r3, #16
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d020      	beq.n	8007fca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f003 0310 	and.w	r3, r3, #16
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d01b      	beq.n	8007fca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f06f 0210 	mvn.w	r2, #16
 8007f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f927 	bl	8008204 <HAL_TIM_IC_CaptureCallback>
 8007fb6:	e005      	b.n	8007fc4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f919 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f92a 	bl	8008218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00c      	beq.n	8007fee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d007      	beq.n	8007fee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f06f 0201 	mvn.w	r2, #1
 8007fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7fc fc8f 	bl	800490c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00c      	beq.n	8008012 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800800a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fab5 	bl	800857c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00c      	beq.n	8008036 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d007      	beq.n	8008036 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800802e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f8fb 	bl	800822c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00c      	beq.n	800805a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f06f 0220 	mvn.w	r2, #32
 8008052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa87 	bl	8008568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800805a:	bf00      	nop
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008076:	2b01      	cmp	r3, #1
 8008078:	d101      	bne.n	800807e <HAL_TIM_ConfigClockSource+0x1c>
 800807a:	2302      	movs	r3, #2
 800807c:	e0b4      	b.n	80081e8 <HAL_TIM_ConfigClockSource+0x186>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800809c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080a4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080b6:	d03e      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0xd4>
 80080b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080bc:	f200 8087 	bhi.w	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080c4:	f000 8086 	beq.w	80081d4 <HAL_TIM_ConfigClockSource+0x172>
 80080c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080cc:	d87f      	bhi.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080ce:	2b70      	cmp	r3, #112	@ 0x70
 80080d0:	d01a      	beq.n	8008108 <HAL_TIM_ConfigClockSource+0xa6>
 80080d2:	2b70      	cmp	r3, #112	@ 0x70
 80080d4:	d87b      	bhi.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080d6:	2b60      	cmp	r3, #96	@ 0x60
 80080d8:	d050      	beq.n	800817c <HAL_TIM_ConfigClockSource+0x11a>
 80080da:	2b60      	cmp	r3, #96	@ 0x60
 80080dc:	d877      	bhi.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080de:	2b50      	cmp	r3, #80	@ 0x50
 80080e0:	d03c      	beq.n	800815c <HAL_TIM_ConfigClockSource+0xfa>
 80080e2:	2b50      	cmp	r3, #80	@ 0x50
 80080e4:	d873      	bhi.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080e6:	2b40      	cmp	r3, #64	@ 0x40
 80080e8:	d058      	beq.n	800819c <HAL_TIM_ConfigClockSource+0x13a>
 80080ea:	2b40      	cmp	r3, #64	@ 0x40
 80080ec:	d86f      	bhi.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080ee:	2b30      	cmp	r3, #48	@ 0x30
 80080f0:	d064      	beq.n	80081bc <HAL_TIM_ConfigClockSource+0x15a>
 80080f2:	2b30      	cmp	r3, #48	@ 0x30
 80080f4:	d86b      	bhi.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d060      	beq.n	80081bc <HAL_TIM_ConfigClockSource+0x15a>
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d867      	bhi.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d05c      	beq.n	80081bc <HAL_TIM_ConfigClockSource+0x15a>
 8008102:	2b10      	cmp	r3, #16
 8008104:	d05a      	beq.n	80081bc <HAL_TIM_ConfigClockSource+0x15a>
 8008106:	e062      	b.n	80081ce <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008118:	f000 f998 	bl	800844c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800812a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	609a      	str	r2, [r3, #8]
      break;
 8008134:	e04f      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008146:	f000 f981 	bl	800844c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008158:	609a      	str	r2, [r3, #8]
      break;
 800815a:	e03c      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008168:	461a      	mov	r2, r3
 800816a:	f000 f8f5 	bl	8008358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2150      	movs	r1, #80	@ 0x50
 8008174:	4618      	mov	r0, r3
 8008176:	f000 f94e 	bl	8008416 <TIM_ITRx_SetConfig>
      break;
 800817a:	e02c      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008188:	461a      	mov	r2, r3
 800818a:	f000 f914 	bl	80083b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2160      	movs	r1, #96	@ 0x60
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f93e 	bl	8008416 <TIM_ITRx_SetConfig>
      break;
 800819a:	e01c      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a8:	461a      	mov	r2, r3
 80081aa:	f000 f8d5 	bl	8008358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2140      	movs	r1, #64	@ 0x40
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 f92e 	bl	8008416 <TIM_ITRx_SetConfig>
      break;
 80081ba:	e00c      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f000 f925 	bl	8008416 <TIM_ITRx_SetConfig>
      break;
 80081cc:	e003      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	73fb      	strb	r3, [r7, #15]
      break;
 80081d2:	e000      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a3a      	ldr	r2, [pc, #232]	@ (800833c <TIM_Base_SetConfig+0xfc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00f      	beq.n	8008278 <TIM_Base_SetConfig+0x38>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825e:	d00b      	beq.n	8008278 <TIM_Base_SetConfig+0x38>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a37      	ldr	r2, [pc, #220]	@ (8008340 <TIM_Base_SetConfig+0x100>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d007      	beq.n	8008278 <TIM_Base_SetConfig+0x38>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a36      	ldr	r2, [pc, #216]	@ (8008344 <TIM_Base_SetConfig+0x104>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d003      	beq.n	8008278 <TIM_Base_SetConfig+0x38>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a35      	ldr	r2, [pc, #212]	@ (8008348 <TIM_Base_SetConfig+0x108>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d108      	bne.n	800828a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800827e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a2b      	ldr	r2, [pc, #172]	@ (800833c <TIM_Base_SetConfig+0xfc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d01b      	beq.n	80082ca <TIM_Base_SetConfig+0x8a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008298:	d017      	beq.n	80082ca <TIM_Base_SetConfig+0x8a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a28      	ldr	r2, [pc, #160]	@ (8008340 <TIM_Base_SetConfig+0x100>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <TIM_Base_SetConfig+0x8a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a27      	ldr	r2, [pc, #156]	@ (8008344 <TIM_Base_SetConfig+0x104>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00f      	beq.n	80082ca <TIM_Base_SetConfig+0x8a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a26      	ldr	r2, [pc, #152]	@ (8008348 <TIM_Base_SetConfig+0x108>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00b      	beq.n	80082ca <TIM_Base_SetConfig+0x8a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a25      	ldr	r2, [pc, #148]	@ (800834c <TIM_Base_SetConfig+0x10c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d007      	beq.n	80082ca <TIM_Base_SetConfig+0x8a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a24      	ldr	r2, [pc, #144]	@ (8008350 <TIM_Base_SetConfig+0x110>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_Base_SetConfig+0x8a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a23      	ldr	r2, [pc, #140]	@ (8008354 <TIM_Base_SetConfig+0x114>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d108      	bne.n	80082dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a0e      	ldr	r2, [pc, #56]	@ (800833c <TIM_Base_SetConfig+0xfc>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d103      	bne.n	8008310 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	691a      	ldr	r2, [r3, #16]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b01      	cmp	r3, #1
 8008320:	d105      	bne.n	800832e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f023 0201 	bic.w	r2, r3, #1
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	611a      	str	r2, [r3, #16]
  }
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40010000 	.word	0x40010000
 8008340:	40000400 	.word	0x40000400
 8008344:	40000800 	.word	0x40000800
 8008348:	40000c00 	.word	0x40000c00
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800

08008358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	f023 0201 	bic.w	r2, r3, #1
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f023 030a 	bic.w	r3, r3, #10
 8008394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4313      	orrs	r3, r2
 800839c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b087      	sub	sp, #28
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f023 0210 	bic.w	r2, r3, #16
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	031b      	lsls	r3, r3, #12
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80083f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800842c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	f043 0307 	orr.w	r3, r3, #7
 8008438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	609a      	str	r2, [r3, #8]
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	021a      	lsls	r2, r3, #8
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	431a      	orrs	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4313      	orrs	r3, r2
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	4313      	orrs	r3, r2
 8008478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	609a      	str	r2, [r3, #8]
}
 8008480:	bf00      	nop
 8008482:	371c      	adds	r7, #28
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e050      	b.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d018      	beq.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f0:	d013      	beq.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a18      	ldr	r2, [pc, #96]	@ (8008558 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00e      	beq.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a16      	ldr	r2, [pc, #88]	@ (800855c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d009      	beq.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a15      	ldr	r2, [pc, #84]	@ (8008560 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d004      	beq.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a13      	ldr	r2, [pc, #76]	@ (8008564 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d10c      	bne.n	8008534 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4313      	orrs	r3, r2
 800852a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40010000 	.word	0x40010000
 8008558:	40000400 	.word	0x40000400
 800855c:	40000800 	.word	0x40000800
 8008560:	40000c00 	.word	0x40000c00
 8008564:	40014000 	.word	0x40014000

08008568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e042      	b.n	8008628 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7fc faaa 	bl	8004b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2224      	movs	r2, #36	@ 0x24
 80085c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f973 	bl	80088c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695a      	ldr	r2, [r3, #20]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08a      	sub	sp, #40	@ 0x28
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	4613      	mov	r3, r2
 800863e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b20      	cmp	r3, #32
 800864e:	d175      	bne.n	800873c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <HAL_UART_Transmit+0x2c>
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e06e      	b.n	800873e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2221      	movs	r2, #33	@ 0x21
 800866a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800866e:	f7fc fc45 	bl	8004efc <HAL_GetTick>
 8008672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	88fa      	ldrh	r2, [r7, #6]
 8008678:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	88fa      	ldrh	r2, [r7, #6]
 800867e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008688:	d108      	bne.n	800869c <HAL_UART_Transmit+0x6c>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d104      	bne.n	800869c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	e003      	b.n	80086a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086a4:	e02e      	b.n	8008704 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2200      	movs	r2, #0
 80086ae:	2180      	movs	r1, #128	@ 0x80
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f848 	bl	8008746 <UART_WaitOnFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e03a      	b.n	800873e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	3302      	adds	r3, #2
 80086e2:	61bb      	str	r3, [r7, #24]
 80086e4:	e007      	b.n	80086f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	781a      	ldrb	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	3301      	adds	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1cb      	bne.n	80086a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2200      	movs	r2, #0
 8008716:	2140      	movs	r1, #64	@ 0x40
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 f814 	bl	8008746 <UART_WaitOnFlagUntilTimeout>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e006      	b.n	800873e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	e000      	b.n	800873e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800873c:	2302      	movs	r3, #2
  }
}
 800873e:	4618      	mov	r0, r3
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b086      	sub	sp, #24
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	603b      	str	r3, [r7, #0]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008756:	e03b      	b.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d037      	beq.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008760:	f7fc fbcc 	bl	8004efc <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	6a3a      	ldr	r2, [r7, #32]
 800876c:	429a      	cmp	r2, r3
 800876e:	d302      	bcc.n	8008776 <UART_WaitOnFlagUntilTimeout+0x30>
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e03a      	b.n	80087f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d023      	beq.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b80      	cmp	r3, #128	@ 0x80
 800878c:	d020      	beq.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b40      	cmp	r3, #64	@ 0x40
 8008792:	d01d      	beq.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d116      	bne.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 f81d 	bl	80087f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2208      	movs	r2, #8
 80087c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e00f      	b.n	80087f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4013      	ands	r3, r2
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	429a      	cmp	r2, r3
 80087de:	bf0c      	ite	eq
 80087e0:	2301      	moveq	r3, #1
 80087e2:	2300      	movne	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d0b4      	beq.n	8008758 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b095      	sub	sp, #84	@ 0x54
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	330c      	adds	r3, #12
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	330c      	adds	r3, #12
 800881e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008820:	643a      	str	r2, [r7, #64]	@ 0x40
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e5      	bne.n	8008800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3314      	adds	r3, #20
 800883a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	61fb      	str	r3, [r7, #28]
   return(result);
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f023 0301 	bic.w	r3, r3, #1
 800884a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3314      	adds	r3, #20
 8008852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800885a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e5      	bne.n	8008834 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	2b01      	cmp	r3, #1
 800886e:	d119      	bne.n	80088a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f023 0310 	bic.w	r3, r3, #16
 8008886:	647b      	str	r3, [r7, #68]	@ 0x44
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	330c      	adds	r3, #12
 800888e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008890:	61ba      	str	r2, [r7, #24]
 8008892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6979      	ldr	r1, [r7, #20]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	613b      	str	r3, [r7, #16]
   return(result);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e5      	bne.n	8008870 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80088b2:	bf00      	nop
 80088b4:	3754      	adds	r7, #84	@ 0x54
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088c4:	b0c0      	sub	sp, #256	@ 0x100
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088dc:	68d9      	ldr	r1, [r3, #12]
 80088de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	ea40 0301 	orr.w	r3, r0, r1
 80088e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	431a      	orrs	r2, r3
 80088f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	431a      	orrs	r2, r3
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800890c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008918:	f021 010c 	bic.w	r1, r1, #12
 800891c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008926:	430b      	orrs	r3, r1
 8008928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800892a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800893a:	6999      	ldr	r1, [r3, #24]
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	ea40 0301 	orr.w	r3, r0, r1
 8008946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	4b8f      	ldr	r3, [pc, #572]	@ (8008b8c <UART_SetConfig+0x2cc>)
 8008950:	429a      	cmp	r2, r3
 8008952:	d005      	beq.n	8008960 <UART_SetConfig+0xa0>
 8008954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b8d      	ldr	r3, [pc, #564]	@ (8008b90 <UART_SetConfig+0x2d0>)
 800895c:	429a      	cmp	r2, r3
 800895e:	d104      	bne.n	800896a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008960:	f7fe fb88 	bl	8007074 <HAL_RCC_GetPCLK2Freq>
 8008964:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008968:	e003      	b.n	8008972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800896a:	f7fe fb6f 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 800896e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800897c:	f040 810c 	bne.w	8008b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008984:	2200      	movs	r2, #0
 8008986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800898a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800898e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008992:	4622      	mov	r2, r4
 8008994:	462b      	mov	r3, r5
 8008996:	1891      	adds	r1, r2, r2
 8008998:	65b9      	str	r1, [r7, #88]	@ 0x58
 800899a:	415b      	adcs	r3, r3
 800899c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800899e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80089a2:	4621      	mov	r1, r4
 80089a4:	eb12 0801 	adds.w	r8, r2, r1
 80089a8:	4629      	mov	r1, r5
 80089aa:	eb43 0901 	adc.w	r9, r3, r1
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089c2:	4690      	mov	r8, r2
 80089c4:	4699      	mov	r9, r3
 80089c6:	4623      	mov	r3, r4
 80089c8:	eb18 0303 	adds.w	r3, r8, r3
 80089cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089d0:	462b      	mov	r3, r5
 80089d2:	eb49 0303 	adc.w	r3, r9, r3
 80089d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80089ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089ee:	460b      	mov	r3, r1
 80089f0:	18db      	adds	r3, r3, r3
 80089f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80089f4:	4613      	mov	r3, r2
 80089f6:	eb42 0303 	adc.w	r3, r2, r3
 80089fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80089fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008a04:	f7f8 f83a 	bl	8000a7c <__aeabi_uldivmod>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4b61      	ldr	r3, [pc, #388]	@ (8008b94 <UART_SetConfig+0x2d4>)
 8008a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a12:	095b      	lsrs	r3, r3, #5
 8008a14:	011c      	lsls	r4, r3, #4
 8008a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008a28:	4642      	mov	r2, r8
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	1891      	adds	r1, r2, r2
 8008a2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008a30:	415b      	adcs	r3, r3
 8008a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a38:	4641      	mov	r1, r8
 8008a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8008a3e:	4649      	mov	r1, r9
 8008a40:	eb43 0b01 	adc.w	fp, r3, r1
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a58:	4692      	mov	sl, r2
 8008a5a:	469b      	mov	fp, r3
 8008a5c:	4643      	mov	r3, r8
 8008a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8008a62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a66:	464b      	mov	r3, r9
 8008a68:	eb4b 0303 	adc.w	r3, fp, r3
 8008a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a84:	460b      	mov	r3, r1
 8008a86:	18db      	adds	r3, r3, r3
 8008a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	eb42 0303 	adc.w	r3, r2, r3
 8008a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a9a:	f7f7 ffef 	bl	8000a7c <__aeabi_uldivmod>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8008b94 <UART_SetConfig+0x2d4>)
 8008aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	2264      	movs	r2, #100	@ 0x64
 8008aae:	fb02 f303 	mul.w	r3, r2, r3
 8008ab2:	1acb      	subs	r3, r1, r3
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008aba:	4b36      	ldr	r3, [pc, #216]	@ (8008b94 <UART_SetConfig+0x2d4>)
 8008abc:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac0:	095b      	lsrs	r3, r3, #5
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008ac8:	441c      	add	r4, r3
 8008aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	1891      	adds	r1, r2, r2
 8008ae2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ae4:	415b      	adcs	r3, r3
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008aec:	4641      	mov	r1, r8
 8008aee:	1851      	adds	r1, r2, r1
 8008af0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008af2:	4649      	mov	r1, r9
 8008af4:	414b      	adcs	r3, r1
 8008af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	f04f 0300 	mov.w	r3, #0
 8008b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008b04:	4659      	mov	r1, fp
 8008b06:	00cb      	lsls	r3, r1, #3
 8008b08:	4651      	mov	r1, sl
 8008b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b0e:	4651      	mov	r1, sl
 8008b10:	00ca      	lsls	r2, r1, #3
 8008b12:	4610      	mov	r0, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	4642      	mov	r2, r8
 8008b1a:	189b      	adds	r3, r3, r2
 8008b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b20:	464b      	mov	r3, r9
 8008b22:	460a      	mov	r2, r1
 8008b24:	eb42 0303 	adc.w	r3, r2, r3
 8008b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b40:	460b      	mov	r3, r1
 8008b42:	18db      	adds	r3, r3, r3
 8008b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b46:	4613      	mov	r3, r2
 8008b48:	eb42 0303 	adc.w	r3, r2, r3
 8008b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b56:	f7f7 ff91 	bl	8000a7c <__aeabi_uldivmod>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b94 <UART_SetConfig+0x2d4>)
 8008b60:	fba3 1302 	umull	r1, r3, r3, r2
 8008b64:	095b      	lsrs	r3, r3, #5
 8008b66:	2164      	movs	r1, #100	@ 0x64
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	00db      	lsls	r3, r3, #3
 8008b70:	3332      	adds	r3, #50	@ 0x32
 8008b72:	4a08      	ldr	r2, [pc, #32]	@ (8008b94 <UART_SetConfig+0x2d4>)
 8008b74:	fba2 2303 	umull	r2, r3, r2, r3
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	f003 0207 	and.w	r2, r3, #7
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4422      	add	r2, r4
 8008b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b88:	e106      	b.n	8008d98 <UART_SetConfig+0x4d8>
 8008b8a:	bf00      	nop
 8008b8c:	40011000 	.word	0x40011000
 8008b90:	40011400 	.word	0x40011400
 8008b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008baa:	4642      	mov	r2, r8
 8008bac:	464b      	mov	r3, r9
 8008bae:	1891      	adds	r1, r2, r2
 8008bb0:	6239      	str	r1, [r7, #32]
 8008bb2:	415b      	adcs	r3, r3
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bba:	4641      	mov	r1, r8
 8008bbc:	1854      	adds	r4, r2, r1
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	eb43 0501 	adc.w	r5, r3, r1
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	00eb      	lsls	r3, r5, #3
 8008bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bd2:	00e2      	lsls	r2, r4, #3
 8008bd4:	4614      	mov	r4, r2
 8008bd6:	461d      	mov	r5, r3
 8008bd8:	4643      	mov	r3, r8
 8008bda:	18e3      	adds	r3, r4, r3
 8008bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008be0:	464b      	mov	r3, r9
 8008be2:	eb45 0303 	adc.w	r3, r5, r3
 8008be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008c06:	4629      	mov	r1, r5
 8008c08:	008b      	lsls	r3, r1, #2
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c10:	4621      	mov	r1, r4
 8008c12:	008a      	lsls	r2, r1, #2
 8008c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008c18:	f7f7 ff30 	bl	8000a7c <__aeabi_uldivmod>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4b60      	ldr	r3, [pc, #384]	@ (8008da4 <UART_SetConfig+0x4e4>)
 8008c22:	fba3 2302 	umull	r2, r3, r3, r2
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	011c      	lsls	r4, r3, #4
 8008c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	1891      	adds	r1, r2, r2
 8008c42:	61b9      	str	r1, [r7, #24]
 8008c44:	415b      	adcs	r3, r3
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	1851      	adds	r1, r2, r1
 8008c50:	6139      	str	r1, [r7, #16]
 8008c52:	4649      	mov	r1, r9
 8008c54:	414b      	adcs	r3, r1
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c64:	4659      	mov	r1, fp
 8008c66:	00cb      	lsls	r3, r1, #3
 8008c68:	4651      	mov	r1, sl
 8008c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c6e:	4651      	mov	r1, sl
 8008c70:	00ca      	lsls	r2, r1, #3
 8008c72:	4610      	mov	r0, r2
 8008c74:	4619      	mov	r1, r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	4642      	mov	r2, r8
 8008c7a:	189b      	adds	r3, r3, r2
 8008c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c80:	464b      	mov	r3, r9
 8008c82:	460a      	mov	r2, r1
 8008c84:	eb42 0303 	adc.w	r3, r2, r3
 8008c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c98:	f04f 0200 	mov.w	r2, #0
 8008c9c:	f04f 0300 	mov.w	r3, #0
 8008ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	008b      	lsls	r3, r1, #2
 8008ca8:	4641      	mov	r1, r8
 8008caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cae:	4641      	mov	r1, r8
 8008cb0:	008a      	lsls	r2, r1, #2
 8008cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008cb6:	f7f7 fee1 	bl	8000a7c <__aeabi_uldivmod>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4b38      	ldr	r3, [pc, #224]	@ (8008da4 <UART_SetConfig+0x4e4>)
 8008cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8008cc6:	095b      	lsrs	r3, r3, #5
 8008cc8:	2264      	movs	r2, #100	@ 0x64
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	1acb      	subs	r3, r1, r3
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	3332      	adds	r3, #50	@ 0x32
 8008cd4:	4a33      	ldr	r2, [pc, #204]	@ (8008da4 <UART_SetConfig+0x4e4>)
 8008cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ce0:	441c      	add	r4, r3
 8008ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cea:	677a      	str	r2, [r7, #116]	@ 0x74
 8008cec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	1891      	adds	r1, r2, r2
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	415b      	adcs	r3, r3
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d00:	4641      	mov	r1, r8
 8008d02:	1851      	adds	r1, r2, r1
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	4649      	mov	r1, r9
 8008d08:	414b      	adcs	r3, r1
 8008d0a:	607b      	str	r3, [r7, #4]
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d18:	4659      	mov	r1, fp
 8008d1a:	00cb      	lsls	r3, r1, #3
 8008d1c:	4651      	mov	r1, sl
 8008d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d22:	4651      	mov	r1, sl
 8008d24:	00ca      	lsls	r2, r1, #3
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	189b      	adds	r3, r3, r2
 8008d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d32:	464b      	mov	r3, r9
 8008d34:	460a      	mov	r2, r1
 8008d36:	eb42 0303 	adc.w	r3, r2, r3
 8008d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d46:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	f04f 0300 	mov.w	r3, #0
 8008d50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d54:	4649      	mov	r1, r9
 8008d56:	008b      	lsls	r3, r1, #2
 8008d58:	4641      	mov	r1, r8
 8008d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d5e:	4641      	mov	r1, r8
 8008d60:	008a      	lsls	r2, r1, #2
 8008d62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d66:	f7f7 fe89 	bl	8000a7c <__aeabi_uldivmod>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008da4 <UART_SetConfig+0x4e4>)
 8008d70:	fba3 1302 	umull	r1, r3, r3, r2
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	2164      	movs	r1, #100	@ 0x64
 8008d78:	fb01 f303 	mul.w	r3, r1, r3
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	3332      	adds	r3, #50	@ 0x32
 8008d82:	4a08      	ldr	r2, [pc, #32]	@ (8008da4 <UART_SetConfig+0x4e4>)
 8008d84:	fba2 2303 	umull	r2, r3, r2, r3
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	f003 020f 	and.w	r2, r3, #15
 8008d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4422      	add	r2, r4
 8008d96:	609a      	str	r2, [r3, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008da4:	51eb851f 	.word	0x51eb851f

08008da8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d165      	bne.n	8008e88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4a41      	ldr	r2, [pc, #260]	@ (8008ec4 <USB_SetTurnaroundTime+0x11c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d906      	bls.n	8008dd2 <USB_SetTurnaroundTime+0x2a>
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	4a40      	ldr	r2, [pc, #256]	@ (8008ec8 <USB_SetTurnaroundTime+0x120>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d202      	bcs.n	8008dd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008dcc:	230f      	movs	r3, #15
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e062      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8008ec8 <USB_SetTurnaroundTime+0x120>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d306      	bcc.n	8008de8 <USB_SetTurnaroundTime+0x40>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8008ecc <USB_SetTurnaroundTime+0x124>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d202      	bcs.n	8008de8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008de2:	230e      	movs	r3, #14
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	e057      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4a38      	ldr	r2, [pc, #224]	@ (8008ecc <USB_SetTurnaroundTime+0x124>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d306      	bcc.n	8008dfe <USB_SetTurnaroundTime+0x56>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4a37      	ldr	r2, [pc, #220]	@ (8008ed0 <USB_SetTurnaroundTime+0x128>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d202      	bcs.n	8008dfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008df8:	230d      	movs	r3, #13
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e04c      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	4a33      	ldr	r2, [pc, #204]	@ (8008ed0 <USB_SetTurnaroundTime+0x128>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d306      	bcc.n	8008e14 <USB_SetTurnaroundTime+0x6c>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	4a32      	ldr	r2, [pc, #200]	@ (8008ed4 <USB_SetTurnaroundTime+0x12c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d802      	bhi.n	8008e14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e0e:	230c      	movs	r3, #12
 8008e10:	617b      	str	r3, [r7, #20]
 8008e12:	e041      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4a2f      	ldr	r2, [pc, #188]	@ (8008ed4 <USB_SetTurnaroundTime+0x12c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d906      	bls.n	8008e2a <USB_SetTurnaroundTime+0x82>
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4a2e      	ldr	r2, [pc, #184]	@ (8008ed8 <USB_SetTurnaroundTime+0x130>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d802      	bhi.n	8008e2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e24:	230b      	movs	r3, #11
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e036      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8008ed8 <USB_SetTurnaroundTime+0x130>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d906      	bls.n	8008e40 <USB_SetTurnaroundTime+0x98>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4a29      	ldr	r2, [pc, #164]	@ (8008edc <USB_SetTurnaroundTime+0x134>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d802      	bhi.n	8008e40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e3a:	230a      	movs	r3, #10
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	e02b      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4a26      	ldr	r2, [pc, #152]	@ (8008edc <USB_SetTurnaroundTime+0x134>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d906      	bls.n	8008e56 <USB_SetTurnaroundTime+0xae>
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4a25      	ldr	r2, [pc, #148]	@ (8008ee0 <USB_SetTurnaroundTime+0x138>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d202      	bcs.n	8008e56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e50:	2309      	movs	r3, #9
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	e020      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	4a21      	ldr	r2, [pc, #132]	@ (8008ee0 <USB_SetTurnaroundTime+0x138>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d306      	bcc.n	8008e6c <USB_SetTurnaroundTime+0xc4>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4a20      	ldr	r2, [pc, #128]	@ (8008ee4 <USB_SetTurnaroundTime+0x13c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d802      	bhi.n	8008e6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e66:	2308      	movs	r3, #8
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	e015      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee4 <USB_SetTurnaroundTime+0x13c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d906      	bls.n	8008e82 <USB_SetTurnaroundTime+0xda>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4a1c      	ldr	r2, [pc, #112]	@ (8008ee8 <USB_SetTurnaroundTime+0x140>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d202      	bcs.n	8008e82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e7c:	2307      	movs	r3, #7
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	e00a      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e82:	2306      	movs	r3, #6
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	e007      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e8e:	2309      	movs	r3, #9
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	e001      	b.n	8008e98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e94:	2309      	movs	r3, #9
 8008e96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	029b      	lsls	r3, r3, #10
 8008eac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	00d8acbf 	.word	0x00d8acbf
 8008ec8:	00e4e1c0 	.word	0x00e4e1c0
 8008ecc:	00f42400 	.word	0x00f42400
 8008ed0:	01067380 	.word	0x01067380
 8008ed4:	011a499f 	.word	0x011a499f
 8008ed8:	01312cff 	.word	0x01312cff
 8008edc:	014ca43f 	.word	0x014ca43f
 8008ee0:	016e3600 	.word	0x016e3600
 8008ee4:	01a6ab1f 	.word	0x01a6ab1f
 8008ee8:	01e84800 	.word	0x01e84800

08008eec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f06:	d901      	bls.n	8008f0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e01b      	b.n	8008f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	daf2      	bge.n	8008efa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	019b      	lsls	r3, r3, #6
 8008f1c:	f043 0220 	orr.w	r2, r3, #32
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3301      	adds	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f30:	d901      	bls.n	8008f36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e006      	b.n	8008f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b20      	cmp	r3, #32
 8008f40:	d0f0      	beq.n	8008f24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 0306 	and.w	r3, r3, #6
 8008f68:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
 8008f74:	e00a      	b.n	8008f8c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d002      	beq.n	8008f82 <USB_GetDevSpeed+0x32>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b06      	cmp	r3, #6
 8008f80:	d102      	bne.n	8008f88 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f82:	2302      	movs	r3, #2
 8008f84:	75fb      	strb	r3, [r7, #23]
 8008f86:	e001      	b.n	8008f8c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f88:	230f      	movs	r3, #15
 8008f8a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b085      	sub	sp, #20
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d13a      	bne.n	800902c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fbc:	69da      	ldr	r2, [r3, #28]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d155      	bne.n	800909a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	791b      	ldrb	r3, [r3, #4]
 8009008:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800900a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	059b      	lsls	r3, r3, #22
 8009010:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009012:	4313      	orrs	r3, r2
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e036      	b.n	800909a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009032:	69da      	ldr	r2, [r3, #28]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	2101      	movs	r1, #1
 800903e:	fa01 f303 	lsl.w	r3, r1, r3
 8009042:	041b      	lsls	r3, r3, #16
 8009044:	68f9      	ldr	r1, [r7, #12]
 8009046:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800904a:	4313      	orrs	r3, r2
 800904c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d11a      	bne.n	800909a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009080:	430b      	orrs	r3, r1
 8009082:	4313      	orrs	r3, r2
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009098:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b08a      	sub	sp, #40	@ 0x28
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	785b      	ldrb	r3, [r3, #1]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	f040 817f 	bne.w	80093c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d132      	bne.n	8009138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	0151      	lsls	r1, r2, #5
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	440a      	add	r2, r1
 800910c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009130:	0cdb      	lsrs	r3, r3, #19
 8009132:	04db      	lsls	r3, r3, #19
 8009134:	6113      	str	r3, [r2, #16]
 8009136:	e097      	b.n	8009268 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	0151      	lsls	r1, r2, #5
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	440a      	add	r2, r1
 800914e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009152:	0cdb      	lsrs	r3, r3, #19
 8009154:	04db      	lsls	r3, r3, #19
 8009156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	0151      	lsls	r1, r2, #5
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	440a      	add	r2, r1
 800916e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009172:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009176:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800917a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d11a      	bne.n	80091b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	691a      	ldr	r2, [r3, #16]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	429a      	cmp	r2, r3
 800918c:	d903      	bls.n	8009196 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	0151      	lsls	r1, r2, #5
 80091a8:	69fa      	ldr	r2, [r7, #28]
 80091aa:	440a      	add	r2, r1
 80091ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091b4:	6113      	str	r3, [r2, #16]
 80091b6:	e044      	b.n	8009242 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	4413      	add	r3, r2
 80091c2:	1e5a      	subs	r2, r3, #1
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091da:	691a      	ldr	r2, [r3, #16]
 80091dc:	8afb      	ldrh	r3, [r7, #22]
 80091de:	04d9      	lsls	r1, r3, #19
 80091e0:	4ba4      	ldr	r3, [pc, #656]	@ (8009474 <USB_EPStartXfer+0x3cc>)
 80091e2:	400b      	ands	r3, r1
 80091e4:	69b9      	ldr	r1, [r7, #24]
 80091e6:	0148      	lsls	r0, r1, #5
 80091e8:	69f9      	ldr	r1, [r7, #28]
 80091ea:	4401      	add	r1, r0
 80091ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091f0:	4313      	orrs	r3, r2
 80091f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	791b      	ldrb	r3, [r3, #4]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d122      	bne.n	8009242 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009216:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800921a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009228:	691a      	ldr	r2, [r3, #16]
 800922a:	8afb      	ldrh	r3, [r7, #22]
 800922c:	075b      	lsls	r3, r3, #29
 800922e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009232:	69b9      	ldr	r1, [r7, #24]
 8009234:	0148      	lsls	r0, r1, #5
 8009236:	69f9      	ldr	r1, [r7, #28]
 8009238:	4401      	add	r1, r0
 800923a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800923e:	4313      	orrs	r3, r2
 8009240:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800924e:	691a      	ldr	r2, [r3, #16]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009258:	69b9      	ldr	r1, [r7, #24]
 800925a:	0148      	lsls	r0, r1, #5
 800925c:	69f9      	ldr	r1, [r7, #28]
 800925e:	4401      	add	r1, r0
 8009260:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009264:	4313      	orrs	r3, r2
 8009266:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d14b      	bne.n	8009306 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009282:	461a      	mov	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	791b      	ldrb	r3, [r3, #4]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d128      	bne.n	80092e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d110      	bne.n	80092c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	e00f      	b.n	80092e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	e166      	b.n	80095d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009320:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009324:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	791b      	ldrb	r3, [r3, #4]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d015      	beq.n	800935a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 814e 	beq.w	80095d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	2101      	movs	r1, #1
 800934a:	fa01 f303 	lsl.w	r3, r1, r3
 800934e:	69f9      	ldr	r1, [r7, #28]
 8009350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009354:	4313      	orrs	r3, r2
 8009356:	634b      	str	r3, [r1, #52]	@ 0x34
 8009358:	e13c      	b.n	80095d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009366:	2b00      	cmp	r3, #0
 8009368:	d110      	bne.n	800938c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	e00f      	b.n	80093ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	68d9      	ldr	r1, [r3, #12]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	781a      	ldrb	r2, [r3, #0]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	b298      	uxth	r0, r3
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	4603      	mov	r3, r0
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f9b9 	bl	8009738 <USB_WritePacket>
 80093c6:	e105      	b.n	80095d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093e2:	0cdb      	lsrs	r3, r3, #19
 80093e4:	04db      	lsls	r3, r3, #19
 80093e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009402:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009406:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800940a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d132      	bne.n	8009478 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	689a      	ldr	r2, [r3, #8]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009436:	691a      	ldr	r2, [r3, #16]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009440:	69b9      	ldr	r1, [r7, #24]
 8009442:	0148      	lsls	r0, r1, #5
 8009444:	69f9      	ldr	r1, [r7, #28]
 8009446:	4401      	add	r1, r0
 8009448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800944c:	4313      	orrs	r3, r2
 800944e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	440a      	add	r2, r1
 8009466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800946a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800946e:	6113      	str	r3, [r2, #16]
 8009470:	e062      	b.n	8009538 <USB_EPStartXfer+0x490>
 8009472:	bf00      	nop
 8009474:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d123      	bne.n	80094c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948c:	691a      	ldr	r2, [r3, #16]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009496:	69b9      	ldr	r1, [r7, #24]
 8009498:	0148      	lsls	r0, r1, #5
 800949a:	69f9      	ldr	r1, [r7, #28]
 800949c:	4401      	add	r1, r0
 800949e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80094a2:	4313      	orrs	r3, r2
 80094a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	69fa      	ldr	r2, [r7, #28]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094c4:	6113      	str	r3, [r2, #16]
 80094c6:	e037      	b.n	8009538 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	4413      	add	r3, r2
 80094d2:	1e5a      	subs	r2, r3, #1
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	8afa      	ldrh	r2, [r7, #22]
 80094e4:	fb03 f202 	mul.w	r2, r3, r2
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f8:	691a      	ldr	r2, [r3, #16]
 80094fa:	8afb      	ldrh	r3, [r7, #22]
 80094fc:	04d9      	lsls	r1, r3, #19
 80094fe:	4b38      	ldr	r3, [pc, #224]	@ (80095e0 <USB_EPStartXfer+0x538>)
 8009500:	400b      	ands	r3, r1
 8009502:	69b9      	ldr	r1, [r7, #24]
 8009504:	0148      	lsls	r0, r1, #5
 8009506:	69f9      	ldr	r1, [r7, #28]
 8009508:	4401      	add	r1, r0
 800950a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800950e:	4313      	orrs	r3, r2
 8009510:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800951e:	691a      	ldr	r2, [r3, #16]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009528:	69b9      	ldr	r1, [r7, #24]
 800952a:	0148      	lsls	r0, r1, #5
 800952c:	69f9      	ldr	r1, [r7, #28]
 800952e:	4401      	add	r1, r0
 8009530:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009534:	4313      	orrs	r3, r2
 8009536:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d10d      	bne.n	800955a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	68d9      	ldr	r1, [r3, #12]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	4413      	add	r3, r2
 8009552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009556:	460a      	mov	r2, r1
 8009558:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d128      	bne.n	80095b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800956e:	2b00      	cmp	r3, #0
 8009570:	d110      	bne.n	8009594 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	0151      	lsls	r1, r2, #5
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	440a      	add	r2, r1
 8009588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800958c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	e00f      	b.n	80095b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	0151      	lsls	r1, r2, #5
 80095a6:	69fa      	ldr	r2, [r7, #28]
 80095a8:	440a      	add	r2, r1
 80095aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	0151      	lsls	r1, r2, #5
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	440a      	add	r2, r1
 80095ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80095d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	1ff80000 	.word	0x1ff80000

080095e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d14a      	bne.n	8009698 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800961a:	f040 8086 	bne.w	800972a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	7812      	ldrb	r2, [r2, #0]
 8009632:	0151      	lsls	r1, r2, #5
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	440a      	add	r2, r1
 8009638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800963c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009640:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	7812      	ldrb	r2, [r2, #0]
 8009656:	0151      	lsls	r1, r2, #5
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	440a      	add	r2, r1
 800965c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009664:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009672:	4293      	cmp	r3, r2
 8009674:	d902      	bls.n	800967c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	75fb      	strb	r3, [r7, #23]
          break;
 800967a:	e056      	b.n	800972a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009694:	d0e7      	beq.n	8009666 <USB_EPStopXfer+0x82>
 8009696:	e048      	b.n	800972a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096b0:	d13b      	bne.n	800972a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	7812      	ldrb	r2, [r2, #0]
 80096c6:	0151      	lsls	r1, r2, #5
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	440a      	add	r2, r1
 80096cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	7812      	ldrb	r2, [r2, #0]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3301      	adds	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009706:	4293      	cmp	r3, r2
 8009708:	d902      	bls.n	8009710 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	75fb      	strb	r3, [r7, #23]
          break;
 800970e:	e00c      	b.n	800972a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009728:	d0e7      	beq.n	80096fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800972a:	7dfb      	ldrb	r3, [r7, #23]
}
 800972c:	4618      	mov	r0, r3
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009738:	b480      	push	{r7}
 800973a:	b089      	sub	sp, #36	@ 0x24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4611      	mov	r1, r2
 8009744:	461a      	mov	r2, r3
 8009746:	460b      	mov	r3, r1
 8009748:	71fb      	strb	r3, [r7, #7]
 800974a:	4613      	mov	r3, r2
 800974c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009756:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800975a:	2b00      	cmp	r3, #0
 800975c:	d123      	bne.n	80097a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800975e:	88bb      	ldrh	r3, [r7, #4]
 8009760:	3303      	adds	r3, #3
 8009762:	089b      	lsrs	r3, r3, #2
 8009764:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009766:	2300      	movs	r3, #0
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	e018      	b.n	800979e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	031a      	lsls	r2, r3, #12
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	4413      	add	r3, r2
 8009774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009778:	461a      	mov	r2, r3
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	3301      	adds	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	3301      	adds	r3, #1
 800978a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	3301      	adds	r3, #1
 8009790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	3301      	adds	r3, #1
 8009796:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	3301      	adds	r3, #1
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d3e2      	bcc.n	800976c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3724      	adds	r7, #36	@ 0x24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b08b      	sub	sp, #44	@ 0x2c
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80097ca:	88fb      	ldrh	r3, [r7, #6]
 80097cc:	089b      	lsrs	r3, r3, #2
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80097da:	2300      	movs	r3, #0
 80097dc:	623b      	str	r3, [r7, #32]
 80097de:	e014      	b.n	800980a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	3301      	adds	r3, #1
 80097f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	3301      	adds	r3, #1
 80097f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80097f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fa:	3301      	adds	r3, #1
 80097fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80097fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009800:	3301      	adds	r3, #1
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	3301      	adds	r3, #1
 8009808:	623b      	str	r3, [r7, #32]
 800980a:	6a3a      	ldr	r2, [r7, #32]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	429a      	cmp	r2, r3
 8009810:	d3e6      	bcc.n	80097e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009812:	8bfb      	ldrh	r3, [r7, #30]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01e      	beq.n	8009856 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009822:	461a      	mov	r2, r3
 8009824:	f107 0310 	add.w	r3, r7, #16
 8009828:	6812      	ldr	r2, [r2, #0]
 800982a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	fa22 f303 	lsr.w	r3, r2, r3
 8009838:	b2da      	uxtb	r2, r3
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	701a      	strb	r2, [r3, #0]
      i++;
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	3301      	adds	r3, #1
 8009842:	623b      	str	r3, [r7, #32]
      pDest++;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	3301      	adds	r3, #1
 8009848:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800984a:	8bfb      	ldrh	r3, [r7, #30]
 800984c:	3b01      	subs	r3, #1
 800984e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009850:	8bfb      	ldrh	r3, [r7, #30]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1ea      	bne.n	800982c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009858:	4618      	mov	r0, r3
 800985a:	372c      	adds	r7, #44	@ 0x2c
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	785b      	ldrb	r3, [r3, #1]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d12c      	bne.n	80098da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	db12      	blt.n	80098b8 <USB_EPSetStall+0x54>
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00f      	beq.n	80098b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	0151      	lsls	r1, r2, #5
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	440a      	add	r2, r1
 80098ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80098b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	e02b      	b.n	8009932 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	db12      	blt.n	8009912 <USB_EPSetStall+0xae>
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00f      	beq.n	8009912 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	0151      	lsls	r1, r2, #5
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	440a      	add	r2, r1
 8009908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800990c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009910:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	0151      	lsls	r1, r2, #5
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	440a      	add	r2, r1
 8009928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800992c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009930:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d128      	bne.n	80099ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	0151      	lsls	r1, r2, #5
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	440a      	add	r2, r1
 8009972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800997a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	791b      	ldrb	r3, [r3, #4]
 8009980:	2b03      	cmp	r3, #3
 8009982:	d003      	beq.n	800998c <USB_EPClearStall+0x4c>
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	791b      	ldrb	r3, [r3, #4]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d138      	bne.n	80099fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	0151      	lsls	r1, r2, #5
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	440a      	add	r2, r1
 80099a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	e027      	b.n	80099fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	0151      	lsls	r1, r2, #5
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	440a      	add	r2, r1
 80099c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	791b      	ldrb	r3, [r3, #4]
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d003      	beq.n	80099de <USB_EPClearStall+0x9e>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	791b      	ldrb	r3, [r3, #4]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d10f      	bne.n	80099fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009a2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009a40:	68f9      	ldr	r1, [r7, #12]
 8009a42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a46:	4313      	orrs	r3, r2
 8009a48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a70:	68fb      	ldr	r3, [r7, #12]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	0c1b      	lsrs	r3, r3, #16
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b085      	sub	sp, #20
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	b29b      	uxth	r3, r3
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	460b      	mov	r3, r1
 8009af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	4013      	ands	r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b14:	68bb      	ldr	r3, [r7, #8]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b087      	sub	sp, #28
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	f003 030f 	and.w	r3, r3, #15
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b52:	01db      	lsls	r3, r3, #7
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b70:	68bb      	ldr	r3, [r7, #8]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b085      	sub	sp, #20
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009bb8:	f023 0307 	bic.w	r3, r3, #7
 8009bbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	460b      	mov	r3, r1
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	333c      	adds	r3, #60	@ 0x3c
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	4a26      	ldr	r2, [pc, #152]	@ (8009c98 <USB_EP0_OutStart+0xb8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d90a      	bls.n	8009c1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c14:	d101      	bne.n	8009c1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	e037      	b.n	8009c8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c20:	461a      	mov	r2, r3
 8009c22:	2300      	movs	r3, #0
 8009c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c48:	f043 0318 	orr.w	r3, r3, #24
 8009c4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009c60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c62:	7afb      	ldrb	r3, [r7, #11]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d10f      	bne.n	8009c88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c6e:	461a      	mov	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009c86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	4f54300a 	.word	0x4f54300a

08009c9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ca4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d009      	beq.n	8009ce0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	78fa      	ldrb	r2, [r7, #3]
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	4798      	blx	r3
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	78fa      	ldrb	r2, [r7, #3]
 8009d04:	4611      	mov	r1, r2
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d10:	2303      	movs	r3, #3
 8009d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 f8b8 	bl	800aea6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009d44:	461a      	mov	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009d52:	f003 031f 	and.w	r3, r3, #31
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d01a      	beq.n	8009d90 <USBD_LL_SetupStage+0x72>
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d822      	bhi.n	8009da4 <USBD_LL_SetupStage+0x86>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <USBD_LL_SetupStage+0x4a>
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d00a      	beq.n	8009d7c <USBD_LL_SetupStage+0x5e>
 8009d66:	e01d      	b.n	8009da4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fb0f 	bl	800a394 <USBD_StdDevReq>
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]
      break;
 8009d7a:	e020      	b.n	8009dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fb77 	bl	800a478 <USBD_StdItfReq>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d8e:	e016      	b.n	8009dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fbd9 	bl	800a550 <USBD_StdEPReq>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
      break;
 8009da2:	e00c      	b.n	8009dbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009daa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f004 fa66 	bl	800e284 <USBD_LL_StallEP>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
      break;
 8009dbc:	bf00      	nop
  }

  return ret;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d16e      	bne.n	8009ebe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009de6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	f040 8098 	bne.w	8009f24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d913      	bls.n	8009e28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	1ad2      	subs	r2, r2, r3
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	68da      	ldr	r2, [r3, #12]
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	4293      	cmp	r3, r2
 8009e18:	bf28      	it	cs
 8009e1a:	4613      	movcs	r3, r2
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f001 f8b7 	bl	800af94 <USBD_CtlContinueRx>
 8009e26:	e07d      	b.n	8009f24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e2e:	f003 031f 	and.w	r3, r3, #31
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d014      	beq.n	8009e60 <USBD_LL_DataOutStage+0x98>
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d81d      	bhi.n	8009e76 <USBD_LL_DataOutStage+0xae>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <USBD_LL_DataOutStage+0x7c>
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d003      	beq.n	8009e4a <USBD_LL_DataOutStage+0x82>
 8009e42:	e018      	b.n	8009e76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	75bb      	strb	r3, [r7, #22]
            break;
 8009e48:	e018      	b.n	8009e7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	4619      	mov	r1, r3
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fa64 	bl	800a322 <USBD_CoreFindIF>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75bb      	strb	r3, [r7, #22]
            break;
 8009e5e:	e00d      	b.n	8009e7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	4619      	mov	r1, r3
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 fa66 	bl	800a33c <USBD_CoreFindEP>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75bb      	strb	r3, [r7, #22]
            break;
 8009e74:	e002      	b.n	8009e7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75bb      	strb	r3, [r7, #22]
            break;
 8009e7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e7c:	7dbb      	ldrb	r3, [r7, #22]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d119      	bne.n	8009eb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d113      	bne.n	8009eb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e8e:	7dba      	ldrb	r2, [r7, #22]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	32ae      	adds	r2, #174	@ 0xae
 8009e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e9e:	7dba      	ldrb	r2, [r7, #22]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ea6:	7dba      	ldrb	r2, [r7, #22]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	32ae      	adds	r2, #174	@ 0xae
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f001 f87d 	bl	800afb6 <USBD_CtlSendStatus>
 8009ebc:	e032      	b.n	8009f24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009ebe:	7afb      	ldrb	r3, [r7, #11]
 8009ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fa37 	bl	800a33c <USBD_CoreFindEP>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ed2:	7dbb      	ldrb	r3, [r7, #22]
 8009ed4:	2bff      	cmp	r3, #255	@ 0xff
 8009ed6:	d025      	beq.n	8009f24 <USBD_LL_DataOutStage+0x15c>
 8009ed8:	7dbb      	ldrb	r3, [r7, #22]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d122      	bne.n	8009f24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d117      	bne.n	8009f1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009eea:	7dba      	ldrb	r2, [r7, #22]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	32ae      	adds	r2, #174	@ 0xae
 8009ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00f      	beq.n	8009f1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009efa:	7dba      	ldrb	r2, [r7, #22]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f02:	7dba      	ldrb	r2, [r7, #22]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	32ae      	adds	r2, #174	@ 0xae
 8009f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	7afa      	ldrb	r2, [r7, #11]
 8009f10:	4611      	mov	r1, r2
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	4798      	blx	r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	e000      	b.n	8009f26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b086      	sub	sp, #24
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	460b      	mov	r3, r1
 8009f38:	607a      	str	r2, [r7, #4]
 8009f3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f3c:	7afb      	ldrb	r3, [r7, #11]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d16f      	bne.n	800a022 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3314      	adds	r3, #20
 8009f46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d15a      	bne.n	800a008 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	689a      	ldr	r2, [r3, #8]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d914      	bls.n	8009f88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	1ad2      	subs	r2, r2, r3
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 fffc 	bl	800af72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2100      	movs	r1, #0
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f004 fa29 	bl	800e3d8 <USBD_LL_PrepareReceive>
 8009f86:	e03f      	b.n	800a008 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d11c      	bne.n	8009fce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d316      	bcc.n	8009fce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d20f      	bcs.n	8009fce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 ffdd 	bl	800af72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f004 fa06 	bl	800e3d8 <USBD_LL_PrepareReceive>
 8009fcc:	e01c      	b.n	800a008 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d10f      	bne.n	8009ffa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ffa:	2180      	movs	r1, #128	@ 0x80
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f004 f941 	bl	800e284 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 ffea 	bl	800afdc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d03a      	beq.n	800a088 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7ff fe42 	bl	8009c9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a020:	e032      	b.n	800a088 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a022:	7afb      	ldrb	r3, [r7, #11]
 800a024:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	4619      	mov	r1, r3
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f985 	bl	800a33c <USBD_CoreFindEP>
 800a032:	4603      	mov	r3, r0
 800a034:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2bff      	cmp	r3, #255	@ 0xff
 800a03a:	d025      	beq.n	800a088 <USBD_LL_DataInStage+0x15a>
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d122      	bne.n	800a088 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d11c      	bne.n	800a088 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a04e:	7dfa      	ldrb	r2, [r7, #23]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	32ae      	adds	r2, #174	@ 0xae
 800a054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d014      	beq.n	800a088 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a05e:	7dfa      	ldrb	r2, [r7, #23]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a066:	7dfa      	ldrb	r2, [r7, #23]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	32ae      	adds	r2, #174	@ 0xae
 800a06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	7afa      	ldrb	r2, [r7, #11]
 800a074:	4611      	mov	r1, r2
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	4798      	blx	r3
 800a07a:	4603      	mov	r3, r0
 800a07c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a07e:	7dbb      	ldrb	r3, [r7, #22]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a084:	7dbb      	ldrb	r3, [r7, #22]
 800a086:	e000      	b.n	800a08a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d014      	beq.n	800a0f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00e      	beq.n	800a0f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	6852      	ldr	r2, [r2, #4]
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0f8:	2340      	movs	r3, #64	@ 0x40
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f004 f89a 	bl	800e238 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2240      	movs	r2, #64	@ 0x40
 800a110:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a114:	2340      	movs	r3, #64	@ 0x40
 800a116:	2200      	movs	r2, #0
 800a118:	2180      	movs	r1, #128	@ 0x80
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f004 f88c 	bl	800e238 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2240      	movs	r2, #64	@ 0x40
 800a12a:	621a      	str	r2, [r3, #32]

  return ret;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a136:	b480      	push	{r7}
 800a138:	b083      	sub	sp, #12
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	460b      	mov	r3, r1
 800a140:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	78fa      	ldrb	r2, [r7, #3]
 800a146:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a156:	b480      	push	{r7}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b04      	cmp	r3, #4
 800a168:	d006      	beq.n	800a178 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a170:	b2da      	uxtb	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2204      	movs	r2, #4
 800a17c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a18e:	b480      	push	{r7}
 800a190:	b083      	sub	sp, #12
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d106      	bne.n	800a1b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d110      	bne.n	800a1f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00b      	beq.n	800a1f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b082      	sub	sp, #8
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	460b      	mov	r3, r1
 800a208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	32ae      	adds	r2, #174	@ 0xae
 800a214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e01c      	b.n	800a25a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b03      	cmp	r3, #3
 800a22a:	d115      	bne.n	800a258 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	32ae      	adds	r2, #174	@ 0xae
 800a236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00b      	beq.n	800a258 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	32ae      	adds	r2, #174	@ 0xae
 800a24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	78fa      	ldrb	r2, [r7, #3]
 800a252:	4611      	mov	r1, r2
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b082      	sub	sp, #8
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	32ae      	adds	r2, #174	@ 0xae
 800a278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	e01c      	b.n	800a2be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d115      	bne.n	800a2bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	32ae      	adds	r2, #174	@ 0xae
 800a29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	32ae      	adds	r2, #174	@ 0xae
 800a2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b4:	78fa      	ldrb	r2, [r7, #3]
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b083      	sub	sp, #12
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00e      	beq.n	800a318 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6852      	ldr	r2, [r2, #4]
 800a306:	b2d2      	uxtb	r2, r2
 800a308:	4611      	mov	r1, r2
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	4798      	blx	r3
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a314:	2303      	movs	r3, #3
 800a316:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	460b      	mov	r3, r1
 800a32c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a32e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a348:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a356:	b480      	push	{r7}
 800a358:	b087      	sub	sp, #28
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	3301      	adds	r3, #1
 800a36c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a374:	8a3b      	ldrh	r3, [r7, #16]
 800a376:	021b      	lsls	r3, r3, #8
 800a378:	b21a      	sxth	r2, r3
 800a37a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a37e:	4313      	orrs	r3, r2
 800a380:	b21b      	sxth	r3, r3
 800a382:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a384:	89fb      	ldrh	r3, [r7, #14]
}
 800a386:	4618      	mov	r0, r3
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
	...

0800a394 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3aa:	2b40      	cmp	r3, #64	@ 0x40
 800a3ac:	d005      	beq.n	800a3ba <USBD_StdDevReq+0x26>
 800a3ae:	2b40      	cmp	r3, #64	@ 0x40
 800a3b0:	d857      	bhi.n	800a462 <USBD_StdDevReq+0xce>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00f      	beq.n	800a3d6 <USBD_StdDevReq+0x42>
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	d153      	bne.n	800a462 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	32ae      	adds	r2, #174	@ 0xae
 800a3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	4798      	blx	r3
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d4:	e04a      	b.n	800a46c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	785b      	ldrb	r3, [r3, #1]
 800a3da:	2b09      	cmp	r3, #9
 800a3dc:	d83b      	bhi.n	800a456 <USBD_StdDevReq+0xc2>
 800a3de:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e4 <USBD_StdDevReq+0x50>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a439 	.word	0x0800a439
 800a3e8:	0800a44d 	.word	0x0800a44d
 800a3ec:	0800a457 	.word	0x0800a457
 800a3f0:	0800a443 	.word	0x0800a443
 800a3f4:	0800a457 	.word	0x0800a457
 800a3f8:	0800a417 	.word	0x0800a417
 800a3fc:	0800a40d 	.word	0x0800a40d
 800a400:	0800a457 	.word	0x0800a457
 800a404:	0800a42f 	.word	0x0800a42f
 800a408:	0800a421 	.word	0x0800a421
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa3c 	bl	800a88c <USBD_GetDescriptor>
          break;
 800a414:	e024      	b.n	800a460 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fba1 	bl	800ab60 <USBD_SetAddress>
          break;
 800a41e:	e01f      	b.n	800a460 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fbe0 	bl	800abe8 <USBD_SetConfig>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]
          break;
 800a42c:	e018      	b.n	800a460 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fc83 	bl	800ad3c <USBD_GetConfig>
          break;
 800a436:	e013      	b.n	800a460 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fcb4 	bl	800ada8 <USBD_GetStatus>
          break;
 800a440:	e00e      	b.n	800a460 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fce3 	bl	800ae10 <USBD_SetFeature>
          break;
 800a44a:	e009      	b.n	800a460 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fd07 	bl	800ae62 <USBD_ClrFeature>
          break;
 800a454:	e004      	b.n	800a460 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fd5e 	bl	800af1a <USBD_CtlError>
          break;
 800a45e:	bf00      	nop
      }
      break;
 800a460:	e004      	b.n	800a46c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fd58 	bl	800af1a <USBD_CtlError>
      break;
 800a46a:	bf00      	nop
  }

  return ret;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop

0800a478 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a48e:	2b40      	cmp	r3, #64	@ 0x40
 800a490:	d005      	beq.n	800a49e <USBD_StdItfReq+0x26>
 800a492:	2b40      	cmp	r3, #64	@ 0x40
 800a494:	d852      	bhi.n	800a53c <USBD_StdItfReq+0xc4>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <USBD_StdItfReq+0x26>
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d14e      	bne.n	800a53c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d840      	bhi.n	800a52e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	889b      	ldrh	r3, [r3, #4]
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d836      	bhi.n	800a524 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	889b      	ldrh	r3, [r3, #4]
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff ff2f 	bl	800a322 <USBD_CoreFindIF>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	2bff      	cmp	r3, #255	@ 0xff
 800a4cc:	d01d      	beq.n	800a50a <USBD_StdItfReq+0x92>
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11a      	bne.n	800a50a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a4d4:	7bba      	ldrb	r2, [r7, #14]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	32ae      	adds	r2, #174	@ 0xae
 800a4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00f      	beq.n	800a504 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a4e4:	7bba      	ldrb	r2, [r7, #14]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4ec:	7bba      	ldrb	r2, [r7, #14]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	32ae      	adds	r2, #174	@ 0xae
 800a4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	4798      	blx	r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a502:	e004      	b.n	800a50e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a504:	2303      	movs	r3, #3
 800a506:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a508:	e001      	b.n	800a50e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a50a:	2303      	movs	r3, #3
 800a50c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	88db      	ldrh	r3, [r3, #6]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d110      	bne.n	800a538 <USBD_StdItfReq+0xc0>
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10d      	bne.n	800a538 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fd4a 	bl	800afb6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a522:	e009      	b.n	800a538 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fcf7 	bl	800af1a <USBD_CtlError>
          break;
 800a52c:	e004      	b.n	800a538 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fcf2 	bl	800af1a <USBD_CtlError>
          break;
 800a536:	e000      	b.n	800a53a <USBD_StdItfReq+0xc2>
          break;
 800a538:	bf00      	nop
      }
      break;
 800a53a:	e004      	b.n	800a546 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fceb 	bl	800af1a <USBD_CtlError>
      break;
 800a544:	bf00      	nop
  }

  return ret;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	889b      	ldrh	r3, [r3, #4]
 800a562:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a56c:	2b40      	cmp	r3, #64	@ 0x40
 800a56e:	d007      	beq.n	800a580 <USBD_StdEPReq+0x30>
 800a570:	2b40      	cmp	r3, #64	@ 0x40
 800a572:	f200 817f 	bhi.w	800a874 <USBD_StdEPReq+0x324>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d02a      	beq.n	800a5d0 <USBD_StdEPReq+0x80>
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	f040 817a 	bne.w	800a874 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff fed9 	bl	800a33c <USBD_CoreFindEP>
 800a58a:	4603      	mov	r3, r0
 800a58c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a58e:	7b7b      	ldrb	r3, [r7, #13]
 800a590:	2bff      	cmp	r3, #255	@ 0xff
 800a592:	f000 8174 	beq.w	800a87e <USBD_StdEPReq+0x32e>
 800a596:	7b7b      	ldrb	r3, [r7, #13]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f040 8170 	bne.w	800a87e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a59e:	7b7a      	ldrb	r2, [r7, #13]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a5a6:	7b7a      	ldrb	r2, [r7, #13]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	32ae      	adds	r2, #174	@ 0xae
 800a5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 8163 	beq.w	800a87e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a5b8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32ae      	adds	r2, #174	@ 0xae
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5ce:	e156      	b.n	800a87e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	785b      	ldrb	r3, [r3, #1]
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d008      	beq.n	800a5ea <USBD_StdEPReq+0x9a>
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	f300 8145 	bgt.w	800a868 <USBD_StdEPReq+0x318>
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 809b 	beq.w	800a71a <USBD_StdEPReq+0x1ca>
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d03c      	beq.n	800a662 <USBD_StdEPReq+0x112>
 800a5e8:	e13e      	b.n	800a868 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d002      	beq.n	800a5fc <USBD_StdEPReq+0xac>
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d016      	beq.n	800a628 <USBD_StdEPReq+0xd8>
 800a5fa:	e02c      	b.n	800a656 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <USBD_StdEPReq+0xce>
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b80      	cmp	r3, #128	@ 0x80
 800a606:	d00a      	beq.n	800a61e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f003 fe39 	bl	800e284 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a612:	2180      	movs	r1, #128	@ 0x80
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f003 fe35 	bl	800e284 <USBD_LL_StallEP>
 800a61a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a61c:	e020      	b.n	800a660 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fc7a 	bl	800af1a <USBD_CtlError>
              break;
 800a626:	e01b      	b.n	800a660 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10e      	bne.n	800a64e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00b      	beq.n	800a64e <USBD_StdEPReq+0xfe>
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b80      	cmp	r3, #128	@ 0x80
 800a63a:	d008      	beq.n	800a64e <USBD_StdEPReq+0xfe>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	88db      	ldrh	r3, [r3, #6]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d104      	bne.n	800a64e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f003 fe1b 	bl	800e284 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fcb1 	bl	800afb6 <USBD_CtlSendStatus>

              break;
 800a654:	e004      	b.n	800a660 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fc5e 	bl	800af1a <USBD_CtlError>
              break;
 800a65e:	bf00      	nop
          }
          break;
 800a660:	e107      	b.n	800a872 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d002      	beq.n	800a674 <USBD_StdEPReq+0x124>
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d016      	beq.n	800a6a0 <USBD_StdEPReq+0x150>
 800a672:	e04b      	b.n	800a70c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a674:	7bbb      	ldrb	r3, [r7, #14]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00d      	beq.n	800a696 <USBD_StdEPReq+0x146>
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
 800a67c:	2b80      	cmp	r3, #128	@ 0x80
 800a67e:	d00a      	beq.n	800a696 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f003 fdfd 	bl	800e284 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a68a:	2180      	movs	r1, #128	@ 0x80
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f003 fdf9 	bl	800e284 <USBD_LL_StallEP>
 800a692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a694:	e040      	b.n	800a718 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fc3e 	bl	800af1a <USBD_CtlError>
              break;
 800a69e:	e03b      	b.n	800a718 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	885b      	ldrh	r3, [r3, #2]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d136      	bne.n	800a716 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
 800a6aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f003 fe03 	bl	800e2c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fc7a 	bl	800afb6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff fe38 	bl	800a33c <USBD_CoreFindEP>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6d0:	7b7b      	ldrb	r3, [r7, #13]
 800a6d2:	2bff      	cmp	r3, #255	@ 0xff
 800a6d4:	d01f      	beq.n	800a716 <USBD_StdEPReq+0x1c6>
 800a6d6:	7b7b      	ldrb	r3, [r7, #13]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d11c      	bne.n	800a716 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a6dc:	7b7a      	ldrb	r2, [r7, #13]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a6e4:	7b7a      	ldrb	r2, [r7, #13]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	32ae      	adds	r2, #174	@ 0xae
 800a6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d010      	beq.n	800a716 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a6f4:	7b7a      	ldrb	r2, [r7, #13]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	32ae      	adds	r2, #174	@ 0xae
 800a6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	4798      	blx	r3
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a70a:	e004      	b.n	800a716 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fc03 	bl	800af1a <USBD_CtlError>
              break;
 800a714:	e000      	b.n	800a718 <USBD_StdEPReq+0x1c8>
              break;
 800a716:	bf00      	nop
          }
          break;
 800a718:	e0ab      	b.n	800a872 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b02      	cmp	r3, #2
 800a724:	d002      	beq.n	800a72c <USBD_StdEPReq+0x1dc>
 800a726:	2b03      	cmp	r3, #3
 800a728:	d032      	beq.n	800a790 <USBD_StdEPReq+0x240>
 800a72a:	e097      	b.n	800a85c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d007      	beq.n	800a742 <USBD_StdEPReq+0x1f2>
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b80      	cmp	r3, #128	@ 0x80
 800a736:	d004      	beq.n	800a742 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fbed 	bl	800af1a <USBD_CtlError>
                break;
 800a740:	e091      	b.n	800a866 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a746:	2b00      	cmp	r3, #0
 800a748:	da0b      	bge.n	800a762 <USBD_StdEPReq+0x212>
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	3310      	adds	r3, #16
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	3304      	adds	r3, #4
 800a760:	e00b      	b.n	800a77a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	4413      	add	r3, r2
 800a778:	3304      	adds	r3, #4
 800a77a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2202      	movs	r2, #2
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fbd7 	bl	800af3c <USBD_CtlSendData>
              break;
 800a78e:	e06a      	b.n	800a866 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a794:	2b00      	cmp	r3, #0
 800a796:	da11      	bge.n	800a7bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	f003 020f 	and.w	r2, r3, #15
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	3324      	adds	r3, #36	@ 0x24
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d117      	bne.n	800a7e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fbb0 	bl	800af1a <USBD_CtlError>
                  break;
 800a7ba:	e054      	b.n	800a866 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	f003 020f 	and.w	r2, r3, #15
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	440b      	add	r3, r1
 800a7ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7d2:	881b      	ldrh	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fb9d 	bl	800af1a <USBD_CtlError>
                  break;
 800a7e0:	e041      	b.n	800a866 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	da0b      	bge.n	800a802 <USBD_StdEPReq+0x2b2>
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	3310      	adds	r3, #16
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	3304      	adds	r3, #4
 800a800:	e00b      	b.n	800a81a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a808:	4613      	mov	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	4413      	add	r3, r2
 800a818:	3304      	adds	r3, #4
 800a81a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <USBD_StdEPReq+0x2d8>
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	2b80      	cmp	r3, #128	@ 0x80
 800a826:	d103      	bne.n	800a830 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e00e      	b.n	800a84e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a830:	7bbb      	ldrb	r3, [r7, #14]
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f003 fd63 	bl	800e300 <USBD_LL_IsStallEP>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2201      	movs	r2, #1
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	e002      	b.n	800a84e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2202      	movs	r2, #2
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fb71 	bl	800af3c <USBD_CtlSendData>
              break;
 800a85a:	e004      	b.n	800a866 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fb5b 	bl	800af1a <USBD_CtlError>
              break;
 800a864:	bf00      	nop
          }
          break;
 800a866:	e004      	b.n	800a872 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fb55 	bl	800af1a <USBD_CtlError>
          break;
 800a870:	bf00      	nop
      }
      break;
 800a872:	e005      	b.n	800a880 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fb4f 	bl	800af1a <USBD_CtlError>
      break;
 800a87c:	e000      	b.n	800a880 <USBD_StdEPReq+0x330>
      break;
 800a87e:	bf00      	nop
  }

  return ret;
 800a880:	7bfb      	ldrb	r3, [r7, #15]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	885b      	ldrh	r3, [r3, #2]
 800a8a6:	0a1b      	lsrs	r3, r3, #8
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	2b06      	cmp	r3, #6
 800a8ae:	f200 8128 	bhi.w	800ab02 <USBD_GetDescriptor+0x276>
 800a8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b8 <USBD_GetDescriptor+0x2c>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a8d5 	.word	0x0800a8d5
 800a8bc:	0800a8ed 	.word	0x0800a8ed
 800a8c0:	0800a92d 	.word	0x0800a92d
 800a8c4:	0800ab03 	.word	0x0800ab03
 800a8c8:	0800ab03 	.word	0x0800ab03
 800a8cc:	0800aaa3 	.word	0x0800aaa3
 800a8d0:	0800aacf 	.word	0x0800aacf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	7c12      	ldrb	r2, [r2, #16]
 800a8e0:	f107 0108 	add.w	r1, r7, #8
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	4798      	blx	r3
 800a8e8:	60f8      	str	r0, [r7, #12]
      break;
 800a8ea:	e112      	b.n	800ab12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7c1b      	ldrb	r3, [r3, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10d      	bne.n	800a910 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fc:	f107 0208 	add.w	r2, r7, #8
 800a900:	4610      	mov	r0, r2
 800a902:	4798      	blx	r3
 800a904:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3301      	adds	r3, #1
 800a90a:	2202      	movs	r2, #2
 800a90c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a90e:	e100      	b.n	800ab12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a918:	f107 0208 	add.w	r2, r7, #8
 800a91c:	4610      	mov	r0, r2
 800a91e:	4798      	blx	r3
 800a920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3301      	adds	r3, #1
 800a926:	2202      	movs	r2, #2
 800a928:	701a      	strb	r2, [r3, #0]
      break;
 800a92a:	e0f2      	b.n	800ab12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	885b      	ldrh	r3, [r3, #2]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b05      	cmp	r3, #5
 800a934:	f200 80ac 	bhi.w	800aa90 <USBD_GetDescriptor+0x204>
 800a938:	a201      	add	r2, pc, #4	@ (adr r2, 800a940 <USBD_GetDescriptor+0xb4>)
 800a93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93e:	bf00      	nop
 800a940:	0800a959 	.word	0x0800a959
 800a944:	0800a98d 	.word	0x0800a98d
 800a948:	0800a9c1 	.word	0x0800a9c1
 800a94c:	0800a9f5 	.word	0x0800a9f5
 800a950:	0800aa29 	.word	0x0800aa29
 800a954:	0800aa5d 	.word	0x0800aa5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00b      	beq.n	800a97c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	7c12      	ldrb	r2, [r2, #16]
 800a970:	f107 0108 	add.w	r1, r7, #8
 800a974:	4610      	mov	r0, r2
 800a976:	4798      	blx	r3
 800a978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a97a:	e091      	b.n	800aaa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 facb 	bl	800af1a <USBD_CtlError>
            err++;
 800a984:	7afb      	ldrb	r3, [r7, #11]
 800a986:	3301      	adds	r3, #1
 800a988:	72fb      	strb	r3, [r7, #11]
          break;
 800a98a:	e089      	b.n	800aaa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00b      	beq.n	800a9b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	7c12      	ldrb	r2, [r2, #16]
 800a9a4:	f107 0108 	add.w	r1, r7, #8
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	4798      	blx	r3
 800a9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ae:	e077      	b.n	800aaa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fab1 	bl	800af1a <USBD_CtlError>
            err++;
 800a9b8:	7afb      	ldrb	r3, [r7, #11]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9be:	e06f      	b.n	800aaa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00b      	beq.n	800a9e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	7c12      	ldrb	r2, [r2, #16]
 800a9d8:	f107 0108 	add.w	r1, r7, #8
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9e2:	e05d      	b.n	800aaa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fa97 	bl	800af1a <USBD_CtlError>
            err++;
 800a9ec:	7afb      	ldrb	r3, [r7, #11]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9f2:	e055      	b.n	800aaa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	7c12      	ldrb	r2, [r2, #16]
 800aa0c:	f107 0108 	add.w	r1, r7, #8
 800aa10:	4610      	mov	r0, r2
 800aa12:	4798      	blx	r3
 800aa14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa16:	e043      	b.n	800aaa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa7d 	bl	800af1a <USBD_CtlError>
            err++;
 800aa20:	7afb      	ldrb	r3, [r7, #11]
 800aa22:	3301      	adds	r3, #1
 800aa24:	72fb      	strb	r3, [r7, #11]
          break;
 800aa26:	e03b      	b.n	800aaa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00b      	beq.n	800aa4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	7c12      	ldrb	r2, [r2, #16]
 800aa40:	f107 0108 	add.w	r1, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa4a:	e029      	b.n	800aaa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fa63 	bl	800af1a <USBD_CtlError>
            err++;
 800aa54:	7afb      	ldrb	r3, [r7, #11]
 800aa56:	3301      	adds	r3, #1
 800aa58:	72fb      	strb	r3, [r7, #11]
          break;
 800aa5a:	e021      	b.n	800aaa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00b      	beq.n	800aa80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	7c12      	ldrb	r2, [r2, #16]
 800aa74:	f107 0108 	add.w	r1, r7, #8
 800aa78:	4610      	mov	r0, r2
 800aa7a:	4798      	blx	r3
 800aa7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa7e:	e00f      	b.n	800aaa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa49 	bl	800af1a <USBD_CtlError>
            err++;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa8e:	e007      	b.n	800aaa0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa41 	bl	800af1a <USBD_CtlError>
          err++;
 800aa98:	7afb      	ldrb	r3, [r7, #11]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aa9e:	bf00      	nop
      }
      break;
 800aaa0:	e037      	b.n	800ab12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	7c1b      	ldrb	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aab2:	f107 0208 	add.w	r2, r7, #8
 800aab6:	4610      	mov	r0, r2
 800aab8:	4798      	blx	r3
 800aaba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aabc:	e029      	b.n	800ab12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fa2a 	bl	800af1a <USBD_CtlError>
        err++;
 800aac6:	7afb      	ldrb	r3, [r7, #11]
 800aac8:	3301      	adds	r3, #1
 800aaca:	72fb      	strb	r3, [r7, #11]
      break;
 800aacc:	e021      	b.n	800ab12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	7c1b      	ldrb	r3, [r3, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10d      	bne.n	800aaf2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aadc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aade:	f107 0208 	add.w	r2, r7, #8
 800aae2:	4610      	mov	r0, r2
 800aae4:	4798      	blx	r3
 800aae6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	2207      	movs	r2, #7
 800aaee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaf0:	e00f      	b.n	800ab12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa10 	bl	800af1a <USBD_CtlError>
        err++;
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	3301      	adds	r3, #1
 800aafe:	72fb      	strb	r3, [r7, #11]
      break;
 800ab00:	e007      	b.n	800ab12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fa08 	bl	800af1a <USBD_CtlError>
      err++;
 800ab0a:	7afb      	ldrb	r3, [r7, #11]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab10:	bf00      	nop
  }

  if (err != 0U)
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d11e      	bne.n	800ab56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	88db      	ldrh	r3, [r3, #6]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d016      	beq.n	800ab4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ab20:	893b      	ldrh	r3, [r7, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00e      	beq.n	800ab44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	88da      	ldrh	r2, [r3, #6]
 800ab2a:	893b      	ldrh	r3, [r7, #8]
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	bf28      	it	cs
 800ab30:	4613      	movcs	r3, r2
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab36:	893b      	ldrh	r3, [r7, #8]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	68f9      	ldr	r1, [r7, #12]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f9fd 	bl	800af3c <USBD_CtlSendData>
 800ab42:	e009      	b.n	800ab58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f9e7 	bl	800af1a <USBD_CtlError>
 800ab4c:	e004      	b.n	800ab58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fa31 	bl	800afb6 <USBD_CtlSendStatus>
 800ab54:	e000      	b.n	800ab58 <USBD_GetDescriptor+0x2cc>
    return;
 800ab56:	bf00      	nop
  }
}
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop

0800ab60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	889b      	ldrh	r3, [r3, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d131      	bne.n	800abd6 <USBD_SetAddress+0x76>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	88db      	ldrh	r3, [r3, #6]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d12d      	bne.n	800abd6 <USBD_SetAddress+0x76>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	885b      	ldrh	r3, [r3, #2]
 800ab7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab80:	d829      	bhi.n	800abd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	885b      	ldrh	r3, [r3, #2]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d104      	bne.n	800aba4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f9bc 	bl	800af1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba2:	e01d      	b.n	800abe0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7bfa      	ldrb	r2, [r7, #15]
 800aba8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f003 fbd1 	bl	800e358 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f9fd 	bl	800afb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2202      	movs	r2, #2
 800abc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abca:	e009      	b.n	800abe0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd4:	e004      	b.n	800abe0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f99e 	bl	800af1a <USBD_CtlError>
  }
}
 800abde:	bf00      	nop
 800abe0:	bf00      	nop
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	4b4e      	ldr	r3, [pc, #312]	@ (800ad38 <USBD_SetConfig+0x150>)
 800abfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac00:	4b4d      	ldr	r3, [pc, #308]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d905      	bls.n	800ac14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f985 	bl	800af1a <USBD_CtlError>
    return USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e08c      	b.n	800ad2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d002      	beq.n	800ac26 <USBD_SetConfig+0x3e>
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d029      	beq.n	800ac78 <USBD_SetConfig+0x90>
 800ac24:	e075      	b.n	800ad12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac26:	4b44      	ldr	r3, [pc, #272]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d020      	beq.n	800ac70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac2e:	4b42      	ldr	r3, [pc, #264]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac38:	4b3f      	ldr	r3, [pc, #252]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff f837 	bl	8009cb2 <USBD_SetClassConfig>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d008      	beq.n	800ac60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f962 	bl	800af1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2202      	movs	r2, #2
 800ac5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac5e:	e065      	b.n	800ad2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f9a8 	bl	800afb6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2203      	movs	r2, #3
 800ac6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac6e:	e05d      	b.n	800ad2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f9a0 	bl	800afb6 <USBD_CtlSendStatus>
      break;
 800ac76:	e059      	b.n	800ad2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac78:	4b2f      	ldr	r3, [pc, #188]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d112      	bne.n	800aca6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ac88:	4b2b      	ldr	r3, [pc, #172]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac92:	4b29      	ldr	r3, [pc, #164]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff f826 	bl	8009cea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f989 	bl	800afb6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aca4:	e042      	b.n	800ad2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aca6:	4b24      	ldr	r3, [pc, #144]	@ (800ad38 <USBD_SetConfig+0x150>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d02a      	beq.n	800ad0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff f814 	bl	8009cea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acc2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad38 <USBD_SetConfig+0x150>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800accc:	4b1a      	ldr	r3, [pc, #104]	@ (800ad38 <USBD_SetConfig+0x150>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7fe ffed 	bl	8009cb2 <USBD_SetClassConfig>
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00f      	beq.n	800ad02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f918 	bl	800af1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7fe fff9 	bl	8009cea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad00:	e014      	b.n	800ad2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f957 	bl	800afb6 <USBD_CtlSendStatus>
      break;
 800ad08:	e010      	b.n	800ad2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f953 	bl	800afb6 <USBD_CtlSendStatus>
      break;
 800ad10:	e00c      	b.n	800ad2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 f900 	bl	800af1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad1a:	4b07      	ldr	r3, [pc, #28]	@ (800ad38 <USBD_SetConfig+0x150>)
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7fe ffe2 	bl	8009cea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad26:	2303      	movs	r3, #3
 800ad28:	73fb      	strb	r3, [r7, #15]
      break;
 800ad2a:	bf00      	nop
  }

  return ret;
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20001a10 	.word	0x20001a10

0800ad3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	88db      	ldrh	r3, [r3, #6]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d004      	beq.n	800ad58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f8e2 	bl	800af1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad56:	e023      	b.n	800ada0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	dc02      	bgt.n	800ad6a <USBD_GetConfig+0x2e>
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	dc03      	bgt.n	800ad70 <USBD_GetConfig+0x34>
 800ad68:	e015      	b.n	800ad96 <USBD_GetConfig+0x5a>
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d00b      	beq.n	800ad86 <USBD_GetConfig+0x4a>
 800ad6e:	e012      	b.n	800ad96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3308      	adds	r3, #8
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f8dc 	bl	800af3c <USBD_CtlSendData>
        break;
 800ad84:	e00c      	b.n	800ada0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3304      	adds	r3, #4
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f8d4 	bl	800af3c <USBD_CtlSendData>
        break;
 800ad94:	e004      	b.n	800ada0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f8be 	bl	800af1a <USBD_CtlError>
        break;
 800ad9e:	bf00      	nop
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	3b01      	subs	r3, #1
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d81e      	bhi.n	800adfe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	88db      	ldrh	r3, [r3, #6]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d004      	beq.n	800add2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f8a5 	bl	800af1a <USBD_CtlError>
        break;
 800add0:	e01a      	b.n	800ae08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d005      	beq.n	800adee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f043 0202 	orr.w	r2, r3, #2
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	330c      	adds	r3, #12
 800adf2:	2202      	movs	r2, #2
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f8a0 	bl	800af3c <USBD_CtlSendData>
      break;
 800adfc:	e004      	b.n	800ae08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f88a 	bl	800af1a <USBD_CtlError>
      break;
 800ae06:	bf00      	nop
  }
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	885b      	ldrh	r3, [r3, #2]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d107      	bne.n	800ae32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f8c3 	bl	800afb6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae30:	e013      	b.n	800ae5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	885b      	ldrh	r3, [r3, #2]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d10b      	bne.n	800ae52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	889b      	ldrh	r3, [r3, #4]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f8b3 	bl	800afb6 <USBD_CtlSendStatus>
}
 800ae50:	e003      	b.n	800ae5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f860 	bl	800af1a <USBD_CtlError>
}
 800ae5a:	bf00      	nop
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	3b01      	subs	r3, #1
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d80b      	bhi.n	800ae92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	885b      	ldrh	r3, [r3, #2]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d10c      	bne.n	800ae9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f893 	bl	800afb6 <USBD_CtlSendStatus>
      }
      break;
 800ae90:	e004      	b.n	800ae9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f840 	bl	800af1a <USBD_CtlError>
      break;
 800ae9a:	e000      	b.n	800ae9e <USBD_ClrFeature+0x3c>
      break;
 800ae9c:	bf00      	nop
  }
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	781a      	ldrb	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3301      	adds	r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	781a      	ldrb	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3301      	adds	r3, #1
 800aece:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7ff fa40 	bl	800a356 <SWAPBYTE>
 800aed6:	4603      	mov	r3, r0
 800aed8:	461a      	mov	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3301      	adds	r3, #1
 800aee2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3301      	adds	r3, #1
 800aee8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff fa33 	bl	800a356 <SWAPBYTE>
 800aef0:	4603      	mov	r3, r0
 800aef2:	461a      	mov	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3301      	adds	r3, #1
 800aefc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3301      	adds	r3, #1
 800af02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fa26 	bl	800a356 <SWAPBYTE>
 800af0a:	4603      	mov	r3, r0
 800af0c:	461a      	mov	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	80da      	strh	r2, [r3, #6]
}
 800af12:	bf00      	nop
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af24:	2180      	movs	r1, #128	@ 0x80
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f003 f9ac 	bl	800e284 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af2c:	2100      	movs	r1, #0
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f003 f9a8 	bl	800e284 <USBD_LL_StallEP>
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2202      	movs	r2, #2
 800af4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	2100      	movs	r1, #0
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f003 fa17 	bl	800e396 <USBD_LL_Transmit>

  return USBD_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	2100      	movs	r1, #0
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f003 fa06 	bl	800e396 <USBD_LL_Transmit>

  return USBD_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	2100      	movs	r1, #0
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f003 fa16 	bl	800e3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2204      	movs	r2, #4
 800afc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800afc6:	2300      	movs	r3, #0
 800afc8:	2200      	movs	r2, #0
 800afca:	2100      	movs	r1, #0
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f003 f9e2 	bl	800e396 <USBD_LL_Transmit>

  return USBD_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2205      	movs	r2, #5
 800afe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afec:	2300      	movs	r3, #0
 800afee:	2200      	movs	r2, #0
 800aff0:	2100      	movs	r1, #0
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f003 f9f0 	bl	800e3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f103 0208 	add.w	r2, r3, #8
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f04f 32ff 	mov.w	r2, #4294967295
 800b01a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f103 0208 	add.w	r2, r3, #8
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f103 0208 	add.w	r2, r3, #8
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	689a      	ldr	r2, [r3, #8]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	601a      	str	r2, [r3, #0]
}
 800b098:	bf00      	nop
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ba:	d103      	bne.n	800b0c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	e00c      	b.n	800b0de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	e002      	b.n	800b0d2 <vListInsert+0x2e>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d2f6      	bcs.n	800b0cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	1c5a      	adds	r2, r3, #1
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	601a      	str	r2, [r3, #0]
}
 800b10a:	bf00      	nop
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b116:	b480      	push	{r7}
 800b118:	b085      	sub	sp, #20
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	6892      	ldr	r2, [r2, #8]
 800b12c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	6852      	ldr	r2, [r2, #4]
 800b136:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d103      	bne.n	800b14a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689a      	ldr	r2, [r3, #8]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	1e5a      	subs	r2, r3, #1
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10b      	bne.n	800b198 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b192:	bf00      	nop
 800b194:	bf00      	nop
 800b196:	e7fd      	b.n	800b194 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b198:	f002 fc56 	bl	800da48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a4:	68f9      	ldr	r1, [r7, #12]
 800b1a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b1a8:	fb01 f303 	mul.w	r3, r1, r3
 800b1ac:	441a      	add	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	68f9      	ldr	r1, [r7, #12]
 800b1cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b1ce:	fb01 f303 	mul.w	r3, r1, r3
 800b1d2:	441a      	add	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	22ff      	movs	r2, #255	@ 0xff
 800b1dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	22ff      	movs	r2, #255	@ 0xff
 800b1e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d114      	bne.n	800b218 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01a      	beq.n	800b22c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3310      	adds	r3, #16
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 fb2a 	bl	800c854 <xTaskRemoveFromEventList>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d012      	beq.n	800b22c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b206:	4b0d      	ldr	r3, [pc, #52]	@ (800b23c <xQueueGenericReset+0xd0>)
 800b208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	e009      	b.n	800b22c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3310      	adds	r3, #16
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7ff fef0 	bl	800b002 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3324      	adds	r3, #36	@ 0x24
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff feeb 	bl	800b002 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b22c:	f002 fc3e 	bl	800daac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b230:	2301      	movs	r3, #1
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	e000ed04 	.word	0xe000ed04

0800b240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08e      	sub	sp, #56	@ 0x38
 800b244:	af02      	add	r7, sp, #8
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
 800b24c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10b      	bne.n	800b26c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	e7fd      	b.n	800b268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10b      	bne.n	800b28a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b284:	bf00      	nop
 800b286:	bf00      	nop
 800b288:	e7fd      	b.n	800b286 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <xQueueGenericCreateStatic+0x56>
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <xQueueGenericCreateStatic+0x5a>
 800b296:	2301      	movs	r3, #1
 800b298:	e000      	b.n	800b29c <xQueueGenericCreateStatic+0x5c>
 800b29a:	2300      	movs	r3, #0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10b      	bne.n	800b2b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	623b      	str	r3, [r7, #32]
}
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	e7fd      	b.n	800b2b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d102      	bne.n	800b2c4 <xQueueGenericCreateStatic+0x84>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <xQueueGenericCreateStatic+0x88>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e000      	b.n	800b2ca <xQueueGenericCreateStatic+0x8a>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	61fb      	str	r3, [r7, #28]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2e6:	2348      	movs	r3, #72	@ 0x48
 800b2e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b48      	cmp	r3, #72	@ 0x48
 800b2ee:	d00b      	beq.n	800b308 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	61bb      	str	r3, [r7, #24]
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	e7fd      	b.n	800b304 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b308:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00d      	beq.n	800b330 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b31c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	4613      	mov	r3, r2
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	68b9      	ldr	r1, [r7, #8]
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 f840 	bl	800b3b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b332:	4618      	mov	r0, r3
 800b334:	3730      	adds	r7, #48	@ 0x30
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b08a      	sub	sp, #40	@ 0x28
 800b33e:	af02      	add	r7, sp, #8
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	4613      	mov	r3, r2
 800b346:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10b      	bne.n	800b366 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	613b      	str	r3, [r7, #16]
}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	fb02 f303 	mul.w	r3, r2, r3
 800b36e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	3348      	adds	r3, #72	@ 0x48
 800b374:	4618      	mov	r0, r3
 800b376:	f002 fc89 	bl	800dc8c <pvPortMalloc>
 800b37a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d011      	beq.n	800b3a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	3348      	adds	r3, #72	@ 0x48
 800b38a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b394:	79fa      	ldrb	r2, [r7, #7]
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	4613      	mov	r3, r2
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 f805 	bl	800b3b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
	}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3720      	adds	r7, #32
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
 800b3bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d103      	bne.n	800b3cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	e002      	b.n	800b3d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3de:	2101      	movs	r1, #1
 800b3e0:	69b8      	ldr	r0, [r7, #24]
 800b3e2:	f7ff fec3 	bl	800b16c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b3e6:	bf00      	nop
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b082      	sub	sp, #8
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00e      	beq.n	800b41a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b40e:	2300      	movs	r3, #0
 800b410:	2200      	movs	r2, #0
 800b412:	2100      	movs	r1, #0
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f851 	bl	800b4bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b422:	b580      	push	{r7, lr}
 800b424:	b086      	sub	sp, #24
 800b426:	af00      	add	r7, sp, #0
 800b428:	4603      	mov	r3, r0
 800b42a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b42c:	2301      	movs	r3, #1
 800b42e:	617b      	str	r3, [r7, #20]
 800b430:	2300      	movs	r3, #0
 800b432:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	461a      	mov	r2, r3
 800b438:	6939      	ldr	r1, [r7, #16]
 800b43a:	6978      	ldr	r0, [r7, #20]
 800b43c:	f7ff ff7d 	bl	800b33a <xQueueGenericCreate>
 800b440:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7ff ffd3 	bl	800b3ee <prvInitialiseMutex>

		return xNewQueue;
 800b448:	68fb      	ldr	r3, [r7, #12]
	}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10b      	bne.n	800b47a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	613b      	str	r3, [r7, #16]
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	e7fd      	b.n	800b476 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d90b      	bls.n	800b49a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	60fb      	str	r3, [r7, #12]
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop
 800b498:	e7fd      	b.n	800b496 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b49a:	2202      	movs	r2, #2
 800b49c:	2100      	movs	r1, #0
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff ff4b 	bl	800b33a <xQueueGenericCreate>
 800b4a4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b4b2:	697b      	ldr	r3, [r7, #20]
	}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08e      	sub	sp, #56	@ 0x38
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
 800b4c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <xQueueGenericSend+0x34>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d103      	bne.n	800b4fe <xQueueGenericSend+0x42>
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <xQueueGenericSend+0x46>
 800b4fe:	2301      	movs	r3, #1
 800b500:	e000      	b.n	800b504 <xQueueGenericSend+0x48>
 800b502:	2300      	movs	r3, #0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10b      	bne.n	800b520 <xQueueGenericSend+0x64>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b51a:	bf00      	nop
 800b51c:	bf00      	nop
 800b51e:	e7fd      	b.n	800b51c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d103      	bne.n	800b52e <xQueueGenericSend+0x72>
 800b526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d101      	bne.n	800b532 <xQueueGenericSend+0x76>
 800b52e:	2301      	movs	r3, #1
 800b530:	e000      	b.n	800b534 <xQueueGenericSend+0x78>
 800b532:	2300      	movs	r3, #0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10b      	bne.n	800b550 <xQueueGenericSend+0x94>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	623b      	str	r3, [r7, #32]
}
 800b54a:	bf00      	nop
 800b54c:	bf00      	nop
 800b54e:	e7fd      	b.n	800b54c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b550:	f001 fb42 	bl	800cbd8 <xTaskGetSchedulerState>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <xQueueGenericSend+0xa4>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <xQueueGenericSend+0xa8>
 800b560:	2301      	movs	r3, #1
 800b562:	e000      	b.n	800b566 <xQueueGenericSend+0xaa>
 800b564:	2300      	movs	r3, #0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10b      	bne.n	800b582 <xQueueGenericSend+0xc6>
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	61fb      	str	r3, [r7, #28]
}
 800b57c:	bf00      	nop
 800b57e:	bf00      	nop
 800b580:	e7fd      	b.n	800b57e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b582:	f002 fa61 	bl	800da48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b58e:	429a      	cmp	r2, r3
 800b590:	d302      	bcc.n	800b598 <xQueueGenericSend+0xdc>
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b02      	cmp	r3, #2
 800b596:	d129      	bne.n	800b5ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	68b9      	ldr	r1, [r7, #8]
 800b59c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b59e:	f000 fbc7 	bl	800bd30 <prvCopyDataToQueue>
 800b5a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d010      	beq.n	800b5ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	3324      	adds	r3, #36	@ 0x24
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 f94f 	bl	800c854 <xTaskRemoveFromEventList>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d013      	beq.n	800b5e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b5bc:	4b3f      	ldr	r3, [pc, #252]	@ (800b6bc <xQueueGenericSend+0x200>)
 800b5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	e00a      	b.n	800b5e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d007      	beq.n	800b5e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b5d4:	4b39      	ldr	r3, [pc, #228]	@ (800b6bc <xQueueGenericSend+0x200>)
 800b5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b5e4:	f002 fa62 	bl	800daac <vPortExitCritical>
				return pdPASS;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e063      	b.n	800b6b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d103      	bne.n	800b5fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5f2:	f002 fa5b 	bl	800daac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e05c      	b.n	800b6b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d106      	bne.n	800b60e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b600:	f107 0314 	add.w	r3, r7, #20
 800b604:	4618      	mov	r0, r3
 800b606:	f001 f989 	bl	800c91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b60a:	2301      	movs	r3, #1
 800b60c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b60e:	f002 fa4d 	bl	800daac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b612:	f000 fefb 	bl	800c40c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b616:	f002 fa17 	bl	800da48 <vPortEnterCritical>
 800b61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b620:	b25b      	sxtb	r3, r3
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b626:	d103      	bne.n	800b630 <xQueueGenericSend+0x174>
 800b628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b636:	b25b      	sxtb	r3, r3
 800b638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63c:	d103      	bne.n	800b646 <xQueueGenericSend+0x18a>
 800b63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b646:	f002 fa31 	bl	800daac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b64a:	1d3a      	adds	r2, r7, #4
 800b64c:	f107 0314 	add.w	r3, r7, #20
 800b650:	4611      	mov	r1, r2
 800b652:	4618      	mov	r0, r3
 800b654:	f001 f978 	bl	800c948 <xTaskCheckForTimeOut>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d124      	bne.n	800b6a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b65e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b660:	f000 fc5e 	bl	800bf20 <prvIsQueueFull>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d018      	beq.n	800b69c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66c:	3310      	adds	r3, #16
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f001 f89c 	bl	800c7b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b67a:	f000 fbe9 	bl	800be50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b67e:	f000 fed3 	bl	800c428 <xTaskResumeAll>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	f47f af7c 	bne.w	800b582 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b68a:	4b0c      	ldr	r3, [pc, #48]	@ (800b6bc <xQueueGenericSend+0x200>)
 800b68c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	e772      	b.n	800b582 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b69c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b69e:	f000 fbd7 	bl	800be50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6a2:	f000 fec1 	bl	800c428 <xTaskResumeAll>
 800b6a6:	e76c      	b.n	800b582 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b6a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6aa:	f000 fbd1 	bl	800be50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6ae:	f000 febb 	bl	800c428 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b6b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3738      	adds	r7, #56	@ 0x38
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b090      	sub	sp, #64	@ 0x40
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10b      	bne.n	800b6f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6ea:	bf00      	nop
 800b6ec:	bf00      	nop
 800b6ee:	e7fd      	b.n	800b6ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d103      	bne.n	800b6fe <xQueueGenericSendFromISR+0x3e>
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <xQueueGenericSendFromISR+0x42>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e000      	b.n	800b704 <xQueueGenericSendFromISR+0x44>
 800b702:	2300      	movs	r3, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10b      	bne.n	800b720 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b71a:	bf00      	nop
 800b71c:	bf00      	nop
 800b71e:	e7fd      	b.n	800b71c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d103      	bne.n	800b72e <xQueueGenericSendFromISR+0x6e>
 800b726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d101      	bne.n	800b732 <xQueueGenericSendFromISR+0x72>
 800b72e:	2301      	movs	r3, #1
 800b730:	e000      	b.n	800b734 <xQueueGenericSendFromISR+0x74>
 800b732:	2300      	movs	r3, #0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10b      	bne.n	800b750 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	623b      	str	r3, [r7, #32]
}
 800b74a:	bf00      	nop
 800b74c:	bf00      	nop
 800b74e:	e7fd      	b.n	800b74c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b750:	f002 fa5a 	bl	800dc08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b754:	f3ef 8211 	mrs	r2, BASEPRI
 800b758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	61fa      	str	r2, [r7, #28]
 800b76a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b76c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b76e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b778:	429a      	cmp	r2, r3
 800b77a:	d302      	bcc.n	800b782 <xQueueGenericSendFromISR+0xc2>
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d12f      	bne.n	800b7e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b788:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b790:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	68b9      	ldr	r1, [r7, #8]
 800b796:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b798:	f000 faca 	bl	800bd30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b79c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a4:	d112      	bne.n	800b7cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d016      	beq.n	800b7dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b0:	3324      	adds	r3, #36	@ 0x24
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f001 f84e 	bl	800c854 <xTaskRemoveFromEventList>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00e      	beq.n	800b7dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00b      	beq.n	800b7dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]
 800b7ca:	e007      	b.n	800b7dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b7cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	b25a      	sxtb	r2, r3
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b7e0:	e001      	b.n	800b7e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b7f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3740      	adds	r7, #64	@ 0x40
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08e      	sub	sp, #56	@ 0x38
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	623b      	str	r3, [r7, #32]
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00b      	beq.n	800b848 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	61fb      	str	r3, [r7, #28]
}
 800b842:	bf00      	nop
 800b844:	bf00      	nop
 800b846:	e7fd      	b.n	800b844 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d103      	bne.n	800b858 <xQueueGiveFromISR+0x5c>
 800b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <xQueueGiveFromISR+0x60>
 800b858:	2301      	movs	r3, #1
 800b85a:	e000      	b.n	800b85e <xQueueGiveFromISR+0x62>
 800b85c:	2300      	movs	r3, #0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10b      	bne.n	800b87a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	61bb      	str	r3, [r7, #24]
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop
 800b878:	e7fd      	b.n	800b876 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b87a:	f002 f9c5 	bl	800dc08 <vPortValidateInterruptPriority>
	__asm volatile
 800b87e:	f3ef 8211 	mrs	r2, BASEPRI
 800b882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	617a      	str	r2, [r7, #20]
 800b894:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b896:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b898:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b89e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d22b      	bcs.n	800b902 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b6:	1c5a      	adds	r2, r3, #1
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c4:	d112      	bne.n	800b8ec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d016      	beq.n	800b8fc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	3324      	adds	r3, #36	@ 0x24
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 ffbe 	bl	800c854 <xTaskRemoveFromEventList>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00e      	beq.n	800b8fc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00b      	beq.n	800b8fc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	e007      	b.n	800b8fc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	b25a      	sxtb	r2, r3
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b900:	e001      	b.n	800b906 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b902:	2300      	movs	r3, #0
 800b904:	637b      	str	r3, [r7, #52]	@ 0x34
 800b906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b908:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f383 8811 	msr	BASEPRI, r3
}
 800b910:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b914:	4618      	mov	r0, r3
 800b916:	3738      	adds	r7, #56	@ 0x38
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08c      	sub	sp, #48	@ 0x30
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b928:	2300      	movs	r3, #0
 800b92a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10b      	bne.n	800b94e <xQueueReceive+0x32>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	623b      	str	r3, [r7, #32]
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	e7fd      	b.n	800b94a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d103      	bne.n	800b95c <xQueueReceive+0x40>
 800b954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <xQueueReceive+0x44>
 800b95c:	2301      	movs	r3, #1
 800b95e:	e000      	b.n	800b962 <xQueueReceive+0x46>
 800b960:	2300      	movs	r3, #0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10b      	bne.n	800b97e <xQueueReceive+0x62>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	61fb      	str	r3, [r7, #28]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b97e:	f001 f92b 	bl	800cbd8 <xTaskGetSchedulerState>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d102      	bne.n	800b98e <xQueueReceive+0x72>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <xQueueReceive+0x76>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <xQueueReceive+0x78>
 800b992:	2300      	movs	r3, #0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10b      	bne.n	800b9b0 <xQueueReceive+0x94>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	61bb      	str	r3, [r7, #24]
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	e7fd      	b.n	800b9ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9b0:	f002 f84a 	bl	800da48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01f      	beq.n	800ba00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9c0:	68b9      	ldr	r1, [r7, #8]
 800b9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9c4:	f000 fa1e 	bl	800be04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	1e5a      	subs	r2, r3, #1
 800b9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00f      	beq.n	800b9f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	3310      	adds	r3, #16
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 ff39 	bl	800c854 <xTaskRemoveFromEventList>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9e8:	4b3c      	ldr	r3, [pc, #240]	@ (800badc <xQueueReceive+0x1c0>)
 800b9ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9f8:	f002 f858 	bl	800daac <vPortExitCritical>
				return pdPASS;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e069      	b.n	800bad4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d103      	bne.n	800ba0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba06:	f002 f851 	bl	800daac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e062      	b.n	800bad4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d106      	bne.n	800ba22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba14:	f107 0310 	add.w	r3, r7, #16
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 ff7f 	bl	800c91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba22:	f002 f843 	bl	800daac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba26:	f000 fcf1 	bl	800c40c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba2a:	f002 f80d 	bl	800da48 <vPortEnterCritical>
 800ba2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba34:	b25b      	sxtb	r3, r3
 800ba36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3a:	d103      	bne.n	800ba44 <xQueueReceive+0x128>
 800ba3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba4a:	b25b      	sxtb	r3, r3
 800ba4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba50:	d103      	bne.n	800ba5a <xQueueReceive+0x13e>
 800ba52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba5a:	f002 f827 	bl	800daac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba5e:	1d3a      	adds	r2, r7, #4
 800ba60:	f107 0310 	add.w	r3, r7, #16
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 ff6e 	bl	800c948 <xTaskCheckForTimeOut>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d123      	bne.n	800baba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba74:	f000 fa3e 	bl	800bef4 <prvIsQueueEmpty>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d017      	beq.n	800baae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba80:	3324      	adds	r3, #36	@ 0x24
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	4611      	mov	r1, r2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 fe92 	bl	800c7b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba8e:	f000 f9df 	bl	800be50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba92:	f000 fcc9 	bl	800c428 <xTaskResumeAll>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d189      	bne.n	800b9b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ba9c:	4b0f      	ldr	r3, [pc, #60]	@ (800badc <xQueueReceive+0x1c0>)
 800ba9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	e780      	b.n	800b9b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800baae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bab0:	f000 f9ce 	bl	800be50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bab4:	f000 fcb8 	bl	800c428 <xTaskResumeAll>
 800bab8:	e77a      	b.n	800b9b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800baba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800babc:	f000 f9c8 	bl	800be50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bac0:	f000 fcb2 	bl	800c428 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bac6:	f000 fa15 	bl	800bef4 <prvIsQueueEmpty>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f43f af6f 	beq.w	800b9b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bad2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3730      	adds	r7, #48	@ 0x30
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	e000ed04 	.word	0xe000ed04

0800bae0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08e      	sub	sp, #56	@ 0x38
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800baea:	2300      	movs	r3, #0
 800baec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800baf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10b      	bne.n	800bb14 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	623b      	str	r3, [r7, #32]
}
 800bb0e:	bf00      	nop
 800bb10:	bf00      	nop
 800bb12:	e7fd      	b.n	800bb10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	61fb      	str	r3, [r7, #28]
}
 800bb2e:	bf00      	nop
 800bb30:	bf00      	nop
 800bb32:	e7fd      	b.n	800bb30 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb34:	f001 f850 	bl	800cbd8 <xTaskGetSchedulerState>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <xQueueSemaphoreTake+0x64>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <xQueueSemaphoreTake+0x68>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e000      	b.n	800bb4a <xQueueSemaphoreTake+0x6a>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10b      	bne.n	800bb66 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	61bb      	str	r3, [r7, #24]
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	e7fd      	b.n	800bb62 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb66:	f001 ff6f 	bl	800da48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb6e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d024      	beq.n	800bbc0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb78:	1e5a      	subs	r2, r3, #1
 800bb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d104      	bne.n	800bb90 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb86:	f001 f9d3 	bl	800cf30 <pvTaskIncrementMutexHeldCount>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00f      	beq.n	800bbb8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9a:	3310      	adds	r3, #16
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 fe59 	bl	800c854 <xTaskRemoveFromEventList>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d007      	beq.n	800bbb8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bba8:	4b54      	ldr	r3, [pc, #336]	@ (800bcfc <xQueueSemaphoreTake+0x21c>)
 800bbaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbb8:	f001 ff78 	bl	800daac <vPortExitCritical>
				return pdPASS;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e098      	b.n	800bcf2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d112      	bne.n	800bbec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00b      	beq.n	800bbe4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	617b      	str	r3, [r7, #20]
}
 800bbde:	bf00      	nop
 800bbe0:	bf00      	nop
 800bbe2:	e7fd      	b.n	800bbe0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bbe4:	f001 ff62 	bl	800daac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e082      	b.n	800bcf2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d106      	bne.n	800bc00 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbf2:	f107 030c 	add.w	r3, r7, #12
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 fe90 	bl	800c91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc00:	f001 ff54 	bl	800daac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc04:	f000 fc02 	bl	800c40c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc08:	f001 ff1e 	bl	800da48 <vPortEnterCritical>
 800bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc12:	b25b      	sxtb	r3, r3
 800bc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc18:	d103      	bne.n	800bc22 <xQueueSemaphoreTake+0x142>
 800bc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc28:	b25b      	sxtb	r3, r3
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d103      	bne.n	800bc38 <xQueueSemaphoreTake+0x158>
 800bc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc38:	f001 ff38 	bl	800daac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc3c:	463a      	mov	r2, r7
 800bc3e:	f107 030c 	add.w	r3, r7, #12
 800bc42:	4611      	mov	r1, r2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 fe7f 	bl	800c948 <xTaskCheckForTimeOut>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d132      	bne.n	800bcb6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc52:	f000 f94f 	bl	800bef4 <prvIsQueueEmpty>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d026      	beq.n	800bcaa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bc64:	f001 fef0 	bl	800da48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 ffd1 	bl	800cc14 <xTaskPriorityInherit>
 800bc72:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bc74:	f001 ff1a 	bl	800daac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7a:	3324      	adds	r3, #36	@ 0x24
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	4611      	mov	r1, r2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f000 fd95 	bl	800c7b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc88:	f000 f8e2 	bl	800be50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc8c:	f000 fbcc 	bl	800c428 <xTaskResumeAll>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f47f af67 	bne.w	800bb66 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bc98:	4b18      	ldr	r3, [pc, #96]	@ (800bcfc <xQueueSemaphoreTake+0x21c>)
 800bc9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	e75d      	b.n	800bb66 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bcaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcac:	f000 f8d0 	bl	800be50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcb0:	f000 fbba 	bl	800c428 <xTaskResumeAll>
 800bcb4:	e757      	b.n	800bb66 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bcb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcb8:	f000 f8ca 	bl	800be50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcbc:	f000 fbb4 	bl	800c428 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcc2:	f000 f917 	bl	800bef4 <prvIsQueueEmpty>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f43f af4c 	beq.w	800bb66 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00d      	beq.n	800bcf0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bcd4:	f001 feb8 	bl	800da48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bcd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcda:	f000 f811 	bl	800bd00 <prvGetDisinheritPriorityAfterTimeout>
 800bcde:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bce6:	4618      	mov	r0, r3
 800bce8:	f001 f892 	bl	800ce10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bcec:	f001 fede 	bl	800daac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bcf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3738      	adds	r7, #56	@ 0x38
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	e000ed04 	.word	0xe000ed04

0800bd00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d006      	beq.n	800bd1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f1c3 0307 	rsb	r3, r3, #7
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	e001      	b.n	800bd22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bd22:	68fb      	ldr	r3, [r7, #12]
	}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10d      	bne.n	800bd6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d14d      	bne.n	800bdf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 ffd0 	bl	800cd00 <xTaskPriorityDisinherit>
 800bd60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	609a      	str	r2, [r3, #8]
 800bd68:	e043      	b.n	800bdf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d119      	bne.n	800bda4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6858      	ldr	r0, [r3, #4]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68b9      	ldr	r1, [r7, #8]
 800bd7c:	f002 fc9c 	bl	800e6b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd88:	441a      	add	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d32b      	bcc.n	800bdf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	605a      	str	r2, [r3, #4]
 800bda2:	e026      	b.n	800bdf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	68d8      	ldr	r0, [r3, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdac:	461a      	mov	r2, r3
 800bdae:	68b9      	ldr	r1, [r7, #8]
 800bdb0:	f002 fc82 	bl	800e6b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	68da      	ldr	r2, [r3, #12]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdbc:	425b      	negs	r3, r3
 800bdbe:	441a      	add	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d207      	bcs.n	800bde0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd8:	425b      	negs	r3, r3
 800bdda:	441a      	add	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d105      	bne.n	800bdf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bdfa:	697b      	ldr	r3, [r7, #20]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be12:	2b00      	cmp	r3, #0
 800be14:	d018      	beq.n	800be48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68da      	ldr	r2, [r3, #12]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be1e:	441a      	add	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68da      	ldr	r2, [r3, #12]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d303      	bcc.n	800be38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68d9      	ldr	r1, [r3, #12]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be40:	461a      	mov	r2, r3
 800be42:	6838      	ldr	r0, [r7, #0]
 800be44:	f002 fc38 	bl	800e6b8 <memcpy>
	}
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be58:	f001 fdf6 	bl	800da48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be64:	e011      	b.n	800be8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d012      	beq.n	800be94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3324      	adds	r3, #36	@ 0x24
 800be72:	4618      	mov	r0, r3
 800be74:	f000 fcee 	bl	800c854 <xTaskRemoveFromEventList>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be7e:	f000 fdc7 	bl	800ca10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	3b01      	subs	r3, #1
 800be86:	b2db      	uxtb	r3, r3
 800be88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dce9      	bgt.n	800be66 <prvUnlockQueue+0x16>
 800be92:	e000      	b.n	800be96 <prvUnlockQueue+0x46>
					break;
 800be94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	22ff      	movs	r2, #255	@ 0xff
 800be9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800be9e:	f001 fe05 	bl	800daac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bea2:	f001 fdd1 	bl	800da48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800beac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800beae:	e011      	b.n	800bed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d012      	beq.n	800bede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3310      	adds	r3, #16
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 fcc9 	bl	800c854 <xTaskRemoveFromEventList>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bec8:	f000 fda2 	bl	800ca10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	3b01      	subs	r3, #1
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	dce9      	bgt.n	800beb0 <prvUnlockQueue+0x60>
 800bedc:	e000      	b.n	800bee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	22ff      	movs	r2, #255	@ 0xff
 800bee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bee8:	f001 fde0 	bl	800daac <vPortExitCritical>
}
 800beec:	bf00      	nop
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800befc:	f001 fda4 	bl	800da48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	e001      	b.n	800bf12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf12:	f001 fdcb 	bl	800daac <vPortExitCritical>

	return xReturn;
 800bf16:	68fb      	ldr	r3, [r7, #12]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf28:	f001 fd8e 	bl	800da48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d102      	bne.n	800bf3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	60fb      	str	r3, [r7, #12]
 800bf3c:	e001      	b.n	800bf42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf42:	f001 fdb3 	bl	800daac <vPortExitCritical>

	return xReturn;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e014      	b.n	800bf8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf60:	4a0f      	ldr	r2, [pc, #60]	@ (800bfa0 <vQueueAddToRegistry+0x50>)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10b      	bne.n	800bf84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf6c:	490c      	ldr	r1, [pc, #48]	@ (800bfa0 <vQueueAddToRegistry+0x50>)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf76:	4a0a      	ldr	r2, [pc, #40]	@ (800bfa0 <vQueueAddToRegistry+0x50>)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	4413      	add	r3, r2
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf82:	e006      	b.n	800bf92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	3301      	adds	r3, #1
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b07      	cmp	r3, #7
 800bf8e:	d9e7      	bls.n	800bf60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf90:	bf00      	nop
 800bf92:	bf00      	nop
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	20001a14 	.word	0x20001a14

0800bfa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bfb4:	f001 fd48 	bl	800da48 <vPortEnterCritical>
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d103      	bne.n	800bfce <vQueueWaitForMessageRestricted+0x2a>
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfd4:	b25b      	sxtb	r3, r3
 800bfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfda:	d103      	bne.n	800bfe4 <vQueueWaitForMessageRestricted+0x40>
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bfe4:	f001 fd62 	bl	800daac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	3324      	adds	r3, #36	@ 0x24
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 fbff 	bl	800c7fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	f7ff ff26 	bl	800be50 <prvUnlockQueue>
	}
 800c004:	bf00      	nop
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08e      	sub	sp, #56	@ 0x38
 800c010:	af04      	add	r7, sp, #16
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10b      	bne.n	800c038 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	623b      	str	r3, [r7, #32]
}
 800c032:	bf00      	nop
 800c034:	bf00      	nop
 800c036:	e7fd      	b.n	800c034 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10b      	bne.n	800c056 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	61fb      	str	r3, [r7, #28]
}
 800c050:	bf00      	nop
 800c052:	bf00      	nop
 800c054:	e7fd      	b.n	800c052 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c056:	2354      	movs	r3, #84	@ 0x54
 800c058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2b54      	cmp	r3, #84	@ 0x54
 800c05e:	d00b      	beq.n	800c078 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	61bb      	str	r3, [r7, #24]
}
 800c072:	bf00      	nop
 800c074:	bf00      	nop
 800c076:	e7fd      	b.n	800c074 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c078:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d01e      	beq.n	800c0be <xTaskCreateStatic+0xb2>
 800c080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c082:	2b00      	cmp	r3, #0
 800c084:	d01b      	beq.n	800c0be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c088:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c08e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	2202      	movs	r2, #2
 800c094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c098:	2300      	movs	r3, #0
 800c09a:	9303      	str	r3, [sp, #12]
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09e:	9302      	str	r3, [sp, #8]
 800c0a0:	f107 0314 	add.w	r3, r7, #20
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	68b9      	ldr	r1, [r7, #8]
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 f850 	bl	800c156 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c0b8:	f000 f8d6 	bl	800c268 <prvAddNewTaskToReadyList>
 800c0bc:	e001      	b.n	800c0c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c0c2:	697b      	ldr	r3, [r7, #20]
	}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3728      	adds	r7, #40	@ 0x28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08c      	sub	sp, #48	@ 0x30
 800c0d0:	af04      	add	r7, sp, #16
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	603b      	str	r3, [r7, #0]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0dc:	88fb      	ldrh	r3, [r7, #6]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f001 fdd3 	bl	800dc8c <pvPortMalloc>
 800c0e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00e      	beq.n	800c10c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0ee:	2054      	movs	r0, #84	@ 0x54
 800c0f0:	f001 fdcc 	bl	800dc8c <pvPortMalloc>
 800c0f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d003      	beq.n	800c104 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	631a      	str	r2, [r3, #48]	@ 0x30
 800c102:	e005      	b.n	800c110 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c104:	6978      	ldr	r0, [r7, #20]
 800c106:	f001 fe8f 	bl	800de28 <vPortFree>
 800c10a:	e001      	b.n	800c110 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d017      	beq.n	800c146 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c11e:	88fa      	ldrh	r2, [r7, #6]
 800c120:	2300      	movs	r3, #0
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	9302      	str	r3, [sp, #8]
 800c128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 f80e 	bl	800c156 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c13a:	69f8      	ldr	r0, [r7, #28]
 800c13c:	f000 f894 	bl	800c268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c140:	2301      	movs	r3, #1
 800c142:	61bb      	str	r3, [r7, #24]
 800c144:	e002      	b.n	800c14c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c146:	f04f 33ff 	mov.w	r3, #4294967295
 800c14a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c14c:	69bb      	ldr	r3, [r7, #24]
	}
 800c14e:	4618      	mov	r0, r3
 800c150:	3720      	adds	r7, #32
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b088      	sub	sp, #32
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
 800c162:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c16e:	3b01      	subs	r3, #1
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	f023 0307 	bic.w	r3, r3, #7
 800c17c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	f003 0307 	and.w	r3, r3, #7
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00b      	beq.n	800c1a0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	617b      	str	r3, [r7, #20]
}
 800c19a:	bf00      	nop
 800c19c:	bf00      	nop
 800c19e:	e7fd      	b.n	800c19c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d01f      	beq.n	800c1e6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	61fb      	str	r3, [r7, #28]
 800c1aa:	e012      	b.n	800c1d2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	7819      	ldrb	r1, [r3, #0]
 800c1b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	3334      	adds	r3, #52	@ 0x34
 800c1bc:	460a      	mov	r2, r1
 800c1be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d006      	beq.n	800c1da <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	61fb      	str	r3, [r7, #28]
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	2b0f      	cmp	r3, #15
 800c1d6:	d9e9      	bls.n	800c1ac <prvInitialiseNewTask+0x56>
 800c1d8:	e000      	b.n	800c1dc <prvInitialiseNewTask+0x86>
			{
				break;
 800c1da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1e4:	e003      	b.n	800c1ee <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f0:	2b06      	cmp	r3, #6
 800c1f2:	d901      	bls.n	800c1f8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1f4:	2306      	movs	r3, #6
 800c1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c202:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c206:	2200      	movs	r2, #0
 800c208:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20c:	3304      	adds	r3, #4
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe ff17 	bl	800b042 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c216:	3318      	adds	r3, #24
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fe ff12 	bl	800b042 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c222:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c226:	f1c3 0207 	rsb	r2, r3, #7
 800c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c232:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c236:	2200      	movs	r2, #0
 800c238:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	68f9      	ldr	r1, [r7, #12]
 800c246:	69b8      	ldr	r0, [r7, #24]
 800c248:	f001 faca 	bl	800d7e0 <pxPortInitialiseStack>
 800c24c:	4602      	mov	r2, r0
 800c24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c250:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c25c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c25e:	bf00      	nop
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c270:	f001 fbea 	bl	800da48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c274:	4b2a      	ldr	r3, [pc, #168]	@ (800c320 <prvAddNewTaskToReadyList+0xb8>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3301      	adds	r3, #1
 800c27a:	4a29      	ldr	r2, [pc, #164]	@ (800c320 <prvAddNewTaskToReadyList+0xb8>)
 800c27c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c27e:	4b29      	ldr	r3, [pc, #164]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d109      	bne.n	800c29a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c286:	4a27      	ldr	r2, [pc, #156]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c28c:	4b24      	ldr	r3, [pc, #144]	@ (800c320 <prvAddNewTaskToReadyList+0xb8>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d110      	bne.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c294:	f000 fbe2 	bl	800ca5c <prvInitialiseTaskLists>
 800c298:	e00d      	b.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c29a:	4b23      	ldr	r3, [pc, #140]	@ (800c328 <prvAddNewTaskToReadyList+0xc0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d109      	bne.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2a2:	4b20      	ldr	r3, [pc, #128]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d802      	bhi.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <prvAddNewTaskToReadyList+0xc4>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c32c <prvAddNewTaskToReadyList+0xc4>)
 800c2be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	409a      	lsls	r2, r3
 800c2c8:	4b19      	ldr	r3, [pc, #100]	@ (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	4a18      	ldr	r2, [pc, #96]	@ (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4a15      	ldr	r2, [pc, #84]	@ (800c334 <prvAddNewTaskToReadyList+0xcc>)
 800c2e0:	441a      	add	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7fe feb7 	bl	800b05c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2ee:	f001 fbdd 	bl	800daac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c328 <prvAddNewTaskToReadyList+0xc0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00e      	beq.n	800c318 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c304:	429a      	cmp	r2, r3
 800c306:	d207      	bcs.n	800c318 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c308:	4b0b      	ldr	r3, [pc, #44]	@ (800c338 <prvAddNewTaskToReadyList+0xd0>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c318:	bf00      	nop
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20001b54 	.word	0x20001b54
 800c324:	20001a54 	.word	0x20001a54
 800c328:	20001b60 	.word	0x20001b60
 800c32c:	20001b70 	.word	0x20001b70
 800c330:	20001b5c 	.word	0x20001b5c
 800c334:	20001a58 	.word	0x20001a58
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08a      	sub	sp, #40	@ 0x28
 800c340:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c346:	2300      	movs	r3, #0
 800c348:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c34a:	463a      	mov	r2, r7
 800c34c:	1d39      	adds	r1, r7, #4
 800c34e:	f107 0308 	add.w	r3, r7, #8
 800c352:	4618      	mov	r0, r3
 800c354:	f7f5 fd30 	bl	8001db8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	9202      	str	r2, [sp, #8]
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	2300      	movs	r3, #0
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	2300      	movs	r3, #0
 800c368:	460a      	mov	r2, r1
 800c36a:	4922      	ldr	r1, [pc, #136]	@ (800c3f4 <vTaskStartScheduler+0xb8>)
 800c36c:	4822      	ldr	r0, [pc, #136]	@ (800c3f8 <vTaskStartScheduler+0xbc>)
 800c36e:	f7ff fe4d 	bl	800c00c <xTaskCreateStatic>
 800c372:	4603      	mov	r3, r0
 800c374:	4a21      	ldr	r2, [pc, #132]	@ (800c3fc <vTaskStartScheduler+0xc0>)
 800c376:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c378:	4b20      	ldr	r3, [pc, #128]	@ (800c3fc <vTaskStartScheduler+0xc0>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c380:	2301      	movs	r3, #1
 800c382:	617b      	str	r3, [r7, #20]
 800c384:	e001      	b.n	800c38a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c386:	2300      	movs	r3, #0
 800c388:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d102      	bne.n	800c396 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c390:	f000 fe48 	bl	800d024 <xTimerCreateTimerTask>
 800c394:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d116      	bne.n	800c3ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	613b      	str	r3, [r7, #16]
}
 800c3ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3b0:	4b13      	ldr	r3, [pc, #76]	@ (800c400 <vTaskStartScheduler+0xc4>)
 800c3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3b8:	4b12      	ldr	r3, [pc, #72]	@ (800c404 <vTaskStartScheduler+0xc8>)
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3be:	4b12      	ldr	r3, [pc, #72]	@ (800c408 <vTaskStartScheduler+0xcc>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3c4:	f001 fa9c 	bl	800d900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3c8:	e00f      	b.n	800c3ea <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d0:	d10b      	bne.n	800c3ea <vTaskStartScheduler+0xae>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	60fb      	str	r3, [r7, #12]
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	e7fd      	b.n	800c3e6 <vTaskStartScheduler+0xaa>
}
 800c3ea:	bf00      	nop
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	0800f258 	.word	0x0800f258
 800c3f8:	0800ca29 	.word	0x0800ca29
 800c3fc:	20001b78 	.word	0x20001b78
 800c400:	20001b74 	.word	0x20001b74
 800c404:	20001b60 	.word	0x20001b60
 800c408:	20001b58 	.word	0x20001b58

0800c40c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c410:	4b04      	ldr	r3, [pc, #16]	@ (800c424 <vTaskSuspendAll+0x18>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	4a03      	ldr	r2, [pc, #12]	@ (800c424 <vTaskSuspendAll+0x18>)
 800c418:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c41a:	bf00      	nop
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	20001b7c 	.word	0x20001b7c

0800c428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c432:	2300      	movs	r3, #0
 800c434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c436:	4b42      	ldr	r3, [pc, #264]	@ (800c540 <xTaskResumeAll+0x118>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10b      	bne.n	800c456 <xTaskResumeAll+0x2e>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	603b      	str	r3, [r7, #0]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c456:	f001 faf7 	bl	800da48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c45a:	4b39      	ldr	r3, [pc, #228]	@ (800c540 <xTaskResumeAll+0x118>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3b01      	subs	r3, #1
 800c460:	4a37      	ldr	r2, [pc, #220]	@ (800c540 <xTaskResumeAll+0x118>)
 800c462:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c464:	4b36      	ldr	r3, [pc, #216]	@ (800c540 <xTaskResumeAll+0x118>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d161      	bne.n	800c530 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c46c:	4b35      	ldr	r3, [pc, #212]	@ (800c544 <xTaskResumeAll+0x11c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d05d      	beq.n	800c530 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c474:	e02e      	b.n	800c4d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c476:	4b34      	ldr	r3, [pc, #208]	@ (800c548 <xTaskResumeAll+0x120>)
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3318      	adds	r3, #24
 800c482:	4618      	mov	r0, r3
 800c484:	f7fe fe47 	bl	800b116 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fe fe42 	bl	800b116 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c496:	2201      	movs	r2, #1
 800c498:	409a      	lsls	r2, r3
 800c49a:	4b2c      	ldr	r3, [pc, #176]	@ (800c54c <xTaskResumeAll+0x124>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c54c <xTaskResumeAll+0x124>)
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4a27      	ldr	r2, [pc, #156]	@ (800c550 <xTaskResumeAll+0x128>)
 800c4b2:	441a      	add	r2, r3
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f7fe fdce 	bl	800b05c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c4:	4b23      	ldr	r3, [pc, #140]	@ (800c554 <xTaskResumeAll+0x12c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d302      	bcc.n	800c4d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c4ce:	4b22      	ldr	r3, [pc, #136]	@ (800c558 <xTaskResumeAll+0x130>)
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4d4:	4b1c      	ldr	r3, [pc, #112]	@ (800c548 <xTaskResumeAll+0x120>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1cc      	bne.n	800c476 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4e2:	f000 fb59 	bl	800cb98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c4e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c55c <xTaskResumeAll+0x134>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d010      	beq.n	800c514 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c4f2:	f000 f847 	bl	800c584 <xTaskIncrementTick>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c4fc:	4b16      	ldr	r3, [pc, #88]	@ (800c558 <xTaskResumeAll+0x130>)
 800c4fe:	2201      	movs	r2, #1
 800c500:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3b01      	subs	r3, #1
 800c506:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1f1      	bne.n	800c4f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c50e:	4b13      	ldr	r3, [pc, #76]	@ (800c55c <xTaskResumeAll+0x134>)
 800c510:	2200      	movs	r2, #0
 800c512:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c514:	4b10      	ldr	r3, [pc, #64]	@ (800c558 <xTaskResumeAll+0x130>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d009      	beq.n	800c530 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c51c:	2301      	movs	r3, #1
 800c51e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c520:	4b0f      	ldr	r3, [pc, #60]	@ (800c560 <xTaskResumeAll+0x138>)
 800c522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c530:	f001 fabc 	bl	800daac <vPortExitCritical>

	return xAlreadyYielded;
 800c534:	68bb      	ldr	r3, [r7, #8]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20001b7c 	.word	0x20001b7c
 800c544:	20001b54 	.word	0x20001b54
 800c548:	20001b14 	.word	0x20001b14
 800c54c:	20001b5c 	.word	0x20001b5c
 800c550:	20001a58 	.word	0x20001a58
 800c554:	20001a54 	.word	0x20001a54
 800c558:	20001b68 	.word	0x20001b68
 800c55c:	20001b64 	.word	0x20001b64
 800c560:	e000ed04 	.word	0xe000ed04

0800c564 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c56a:	4b05      	ldr	r3, [pc, #20]	@ (800c580 <xTaskGetTickCount+0x1c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c570:	687b      	ldr	r3, [r7, #4]
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	20001b58 	.word	0x20001b58

0800c584 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c58e:	4b4f      	ldr	r3, [pc, #316]	@ (800c6cc <xTaskIncrementTick+0x148>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f040 808f 	bne.w	800c6b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c598:	4b4d      	ldr	r3, [pc, #308]	@ (800c6d0 <xTaskIncrementTick+0x14c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5a0:	4a4b      	ldr	r2, [pc, #300]	@ (800c6d0 <xTaskIncrementTick+0x14c>)
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d121      	bne.n	800c5f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5ac:	4b49      	ldr	r3, [pc, #292]	@ (800c6d4 <xTaskIncrementTick+0x150>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00b      	beq.n	800c5ce <xTaskIncrementTick+0x4a>
	__asm volatile
 800c5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	603b      	str	r3, [r7, #0]
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	e7fd      	b.n	800c5ca <xTaskIncrementTick+0x46>
 800c5ce:	4b41      	ldr	r3, [pc, #260]	@ (800c6d4 <xTaskIncrementTick+0x150>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	4b40      	ldr	r3, [pc, #256]	@ (800c6d8 <xTaskIncrementTick+0x154>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a3e      	ldr	r2, [pc, #248]	@ (800c6d4 <xTaskIncrementTick+0x150>)
 800c5da:	6013      	str	r3, [r2, #0]
 800c5dc:	4a3e      	ldr	r2, [pc, #248]	@ (800c6d8 <xTaskIncrementTick+0x154>)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6013      	str	r3, [r2, #0]
 800c5e2:	4b3e      	ldr	r3, [pc, #248]	@ (800c6dc <xTaskIncrementTick+0x158>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	4a3c      	ldr	r2, [pc, #240]	@ (800c6dc <xTaskIncrementTick+0x158>)
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	f000 fad4 	bl	800cb98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5f0:	4b3b      	ldr	r3, [pc, #236]	@ (800c6e0 <xTaskIncrementTick+0x15c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	693a      	ldr	r2, [r7, #16]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d348      	bcc.n	800c68c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5fa:	4b36      	ldr	r3, [pc, #216]	@ (800c6d4 <xTaskIncrementTick+0x150>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c604:	4b36      	ldr	r3, [pc, #216]	@ (800c6e0 <xTaskIncrementTick+0x15c>)
 800c606:	f04f 32ff 	mov.w	r2, #4294967295
 800c60a:	601a      	str	r2, [r3, #0]
					break;
 800c60c:	e03e      	b.n	800c68c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60e:	4b31      	ldr	r3, [pc, #196]	@ (800c6d4 <xTaskIncrementTick+0x150>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	429a      	cmp	r2, r3
 800c624:	d203      	bcs.n	800c62e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c626:	4a2e      	ldr	r2, [pc, #184]	@ (800c6e0 <xTaskIncrementTick+0x15c>)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c62c:	e02e      	b.n	800c68c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	3304      	adds	r3, #4
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fd6f 	bl	800b116 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	3318      	adds	r3, #24
 800c644:	4618      	mov	r0, r3
 800c646:	f7fe fd66 	bl	800b116 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c64e:	2201      	movs	r2, #1
 800c650:	409a      	lsls	r2, r3
 800c652:	4b24      	ldr	r3, [pc, #144]	@ (800c6e4 <xTaskIncrementTick+0x160>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4313      	orrs	r3, r2
 800c658:	4a22      	ldr	r2, [pc, #136]	@ (800c6e4 <xTaskIncrementTick+0x160>)
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c660:	4613      	mov	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4a1f      	ldr	r2, [pc, #124]	@ (800c6e8 <xTaskIncrementTick+0x164>)
 800c66a:	441a      	add	r2, r3
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	3304      	adds	r3, #4
 800c670:	4619      	mov	r1, r3
 800c672:	4610      	mov	r0, r2
 800c674:	f7fe fcf2 	bl	800b05c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c67c:	4b1b      	ldr	r3, [pc, #108]	@ (800c6ec <xTaskIncrementTick+0x168>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c682:	429a      	cmp	r2, r3
 800c684:	d3b9      	bcc.n	800c5fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c686:	2301      	movs	r3, #1
 800c688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c68a:	e7b6      	b.n	800c5fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c68c:	4b17      	ldr	r3, [pc, #92]	@ (800c6ec <xTaskIncrementTick+0x168>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c692:	4915      	ldr	r1, [pc, #84]	@ (800c6e8 <xTaskIncrementTick+0x164>)
 800c694:	4613      	mov	r3, r2
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	440b      	add	r3, r1
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d901      	bls.n	800c6a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c6a8:	4b11      	ldr	r3, [pc, #68]	@ (800c6f0 <xTaskIncrementTick+0x16c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d007      	beq.n	800c6c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	617b      	str	r3, [r7, #20]
 800c6b4:	e004      	b.n	800c6c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c6f4 <xTaskIncrementTick+0x170>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c6f4 <xTaskIncrementTick+0x170>)
 800c6be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c6c0:	697b      	ldr	r3, [r7, #20]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20001b7c 	.word	0x20001b7c
 800c6d0:	20001b58 	.word	0x20001b58
 800c6d4:	20001b0c 	.word	0x20001b0c
 800c6d8:	20001b10 	.word	0x20001b10
 800c6dc:	20001b6c 	.word	0x20001b6c
 800c6e0:	20001b74 	.word	0x20001b74
 800c6e4:	20001b5c 	.word	0x20001b5c
 800c6e8:	20001a58 	.word	0x20001a58
 800c6ec:	20001a54 	.word	0x20001a54
 800c6f0:	20001b68 	.word	0x20001b68
 800c6f4:	20001b64 	.word	0x20001b64

0800c6f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6fe:	4b27      	ldr	r3, [pc, #156]	@ (800c79c <vTaskSwitchContext+0xa4>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c706:	4b26      	ldr	r3, [pc, #152]	@ (800c7a0 <vTaskSwitchContext+0xa8>)
 800c708:	2201      	movs	r2, #1
 800c70a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c70c:	e040      	b.n	800c790 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c70e:	4b24      	ldr	r3, [pc, #144]	@ (800c7a0 <vTaskSwitchContext+0xa8>)
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c714:	4b23      	ldr	r3, [pc, #140]	@ (800c7a4 <vTaskSwitchContext+0xac>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	fab3 f383 	clz	r3, r3
 800c720:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c722:	7afb      	ldrb	r3, [r7, #11]
 800c724:	f1c3 031f 	rsb	r3, r3, #31
 800c728:	617b      	str	r3, [r7, #20]
 800c72a:	491f      	ldr	r1, [pc, #124]	@ (800c7a8 <vTaskSwitchContext+0xb0>)
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	4613      	mov	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	440b      	add	r3, r1
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10b      	bne.n	800c756 <vTaskSwitchContext+0x5e>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	e7fd      	b.n	800c752 <vTaskSwitchContext+0x5a>
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	4613      	mov	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4a11      	ldr	r2, [pc, #68]	@ (800c7a8 <vTaskSwitchContext+0xb0>)
 800c762:	4413      	add	r3, r2
 800c764:	613b      	str	r3, [r7, #16]
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	605a      	str	r2, [r3, #4]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	3308      	adds	r3, #8
 800c778:	429a      	cmp	r2, r3
 800c77a:	d104      	bne.n	800c786 <vTaskSwitchContext+0x8e>
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	685a      	ldr	r2, [r3, #4]
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	605a      	str	r2, [r3, #4]
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	4a07      	ldr	r2, [pc, #28]	@ (800c7ac <vTaskSwitchContext+0xb4>)
 800c78e:	6013      	str	r3, [r2, #0]
}
 800c790:	bf00      	nop
 800c792:	371c      	adds	r7, #28
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	20001b7c 	.word	0x20001b7c
 800c7a0:	20001b68 	.word	0x20001b68
 800c7a4:	20001b5c 	.word	0x20001b5c
 800c7a8:	20001a58 	.word	0x20001a58
 800c7ac:	20001a54 	.word	0x20001a54

0800c7b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10b      	bne.n	800c7d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	60fb      	str	r3, [r7, #12]
}
 800c7d2:	bf00      	nop
 800c7d4:	bf00      	nop
 800c7d6:	e7fd      	b.n	800c7d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7d8:	4b07      	ldr	r3, [pc, #28]	@ (800c7f8 <vTaskPlaceOnEventList+0x48>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3318      	adds	r3, #24
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7fe fc5f 	bl	800b0a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	6838      	ldr	r0, [r7, #0]
 800c7ea:	f000 fbb5 	bl	800cf58 <prvAddCurrentTaskToDelayedList>
}
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20001a54 	.word	0x20001a54

0800c7fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10b      	bne.n	800c826 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	617b      	str	r3, [r7, #20]
}
 800c820:	bf00      	nop
 800c822:	bf00      	nop
 800c824:	e7fd      	b.n	800c822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c826:	4b0a      	ldr	r3, [pc, #40]	@ (800c850 <vTaskPlaceOnEventListRestricted+0x54>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	3318      	adds	r3, #24
 800c82c:	4619      	mov	r1, r3
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7fe fc14 	bl	800b05c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c83a:	f04f 33ff 	mov.w	r3, #4294967295
 800c83e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	68b8      	ldr	r0, [r7, #8]
 800c844:	f000 fb88 	bl	800cf58 <prvAddCurrentTaskToDelayedList>
	}
 800c848:	bf00      	nop
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	20001a54 	.word	0x20001a54

0800c854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b086      	sub	sp, #24
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10b      	bne.n	800c882 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	60fb      	str	r3, [r7, #12]
}
 800c87c:	bf00      	nop
 800c87e:	bf00      	nop
 800c880:	e7fd      	b.n	800c87e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	3318      	adds	r3, #24
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fc45 	bl	800b116 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c88c:	4b1d      	ldr	r3, [pc, #116]	@ (800c904 <xTaskRemoveFromEventList+0xb0>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d11c      	bne.n	800c8ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	3304      	adds	r3, #4
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe fc3c 	bl	800b116 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	409a      	lsls	r2, r3
 800c8a6:	4b18      	ldr	r3, [pc, #96]	@ (800c908 <xTaskRemoveFromEventList+0xb4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	4a16      	ldr	r2, [pc, #88]	@ (800c908 <xTaskRemoveFromEventList+0xb4>)
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4a13      	ldr	r2, [pc, #76]	@ (800c90c <xTaskRemoveFromEventList+0xb8>)
 800c8be:	441a      	add	r2, r3
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7fe fbc8 	bl	800b05c <vListInsertEnd>
 800c8cc:	e005      	b.n	800c8da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	3318      	adds	r3, #24
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	480e      	ldr	r0, [pc, #56]	@ (800c910 <xTaskRemoveFromEventList+0xbc>)
 800c8d6:	f7fe fbc1 	bl	800b05c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8de:	4b0d      	ldr	r3, [pc, #52]	@ (800c914 <xTaskRemoveFromEventList+0xc0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d905      	bls.n	800c8f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c918 <xTaskRemoveFromEventList+0xc4>)
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	e001      	b.n	800c8f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8f8:	697b      	ldr	r3, [r7, #20]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20001b7c 	.word	0x20001b7c
 800c908:	20001b5c 	.word	0x20001b5c
 800c90c:	20001a58 	.word	0x20001a58
 800c910:	20001b14 	.word	0x20001b14
 800c914:	20001a54 	.word	0x20001a54
 800c918:	20001b68 	.word	0x20001b68

0800c91c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c924:	4b06      	ldr	r3, [pc, #24]	@ (800c940 <vTaskInternalSetTimeOutState+0x24>)
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c92c:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <vTaskInternalSetTimeOutState+0x28>)
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	605a      	str	r2, [r3, #4]
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	20001b6c 	.word	0x20001b6c
 800c944:	20001b58 	.word	0x20001b58

0800c948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b088      	sub	sp, #32
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10b      	bne.n	800c970 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	613b      	str	r3, [r7, #16]
}
 800c96a:	bf00      	nop
 800c96c:	bf00      	nop
 800c96e:	e7fd      	b.n	800c96c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10b      	bne.n	800c98e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	e7fd      	b.n	800c98a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c98e:	f001 f85b 	bl	800da48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c992:	4b1d      	ldr	r3, [pc, #116]	@ (800ca08 <xTaskCheckForTimeOut+0xc0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	69ba      	ldr	r2, [r7, #24]
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d102      	bne.n	800c9b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	61fb      	str	r3, [r7, #28]
 800c9b0:	e023      	b.n	800c9fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ca0c <xTaskCheckForTimeOut+0xc4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d007      	beq.n	800c9ce <xTaskCheckForTimeOut+0x86>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	69ba      	ldr	r2, [r7, #24]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d302      	bcc.n	800c9ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	61fb      	str	r3, [r7, #28]
 800c9cc:	e015      	b.n	800c9fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d20b      	bcs.n	800c9f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	1ad2      	subs	r2, r2, r3
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7ff ff99 	bl	800c91c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	61fb      	str	r3, [r7, #28]
 800c9ee:	e004      	b.n	800c9fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9fa:	f001 f857 	bl	800daac <vPortExitCritical>

	return xReturn;
 800c9fe:	69fb      	ldr	r3, [r7, #28]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3720      	adds	r7, #32
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20001b58 	.word	0x20001b58
 800ca0c:	20001b6c 	.word	0x20001b6c

0800ca10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca14:	4b03      	ldr	r3, [pc, #12]	@ (800ca24 <vTaskMissedYield+0x14>)
 800ca16:	2201      	movs	r2, #1
 800ca18:	601a      	str	r2, [r3, #0]
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	20001b68 	.word	0x20001b68

0800ca28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca30:	f000 f854 	bl	800cadc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca34:	4b07      	ldr	r3, [pc, #28]	@ (800ca54 <prvIdleTask+0x2c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d907      	bls.n	800ca4c <prvIdleTask+0x24>
			{
				taskYIELD();
 800ca3c:	4b06      	ldr	r3, [pc, #24]	@ (800ca58 <prvIdleTask+0x30>)
 800ca3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca42:	601a      	str	r2, [r3, #0]
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ca4c:	f7f7 ff5a 	bl	8004904 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ca50:	e7ee      	b.n	800ca30 <prvIdleTask+0x8>
 800ca52:	bf00      	nop
 800ca54:	20001a58 	.word	0x20001a58
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca62:	2300      	movs	r3, #0
 800ca64:	607b      	str	r3, [r7, #4]
 800ca66:	e00c      	b.n	800ca82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4a12      	ldr	r2, [pc, #72]	@ (800cabc <prvInitialiseTaskLists+0x60>)
 800ca74:	4413      	add	r3, r2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe fac3 	bl	800b002 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	607b      	str	r3, [r7, #4]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b06      	cmp	r3, #6
 800ca86:	d9ef      	bls.n	800ca68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca88:	480d      	ldr	r0, [pc, #52]	@ (800cac0 <prvInitialiseTaskLists+0x64>)
 800ca8a:	f7fe faba 	bl	800b002 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca8e:	480d      	ldr	r0, [pc, #52]	@ (800cac4 <prvInitialiseTaskLists+0x68>)
 800ca90:	f7fe fab7 	bl	800b002 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca94:	480c      	ldr	r0, [pc, #48]	@ (800cac8 <prvInitialiseTaskLists+0x6c>)
 800ca96:	f7fe fab4 	bl	800b002 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca9a:	480c      	ldr	r0, [pc, #48]	@ (800cacc <prvInitialiseTaskLists+0x70>)
 800ca9c:	f7fe fab1 	bl	800b002 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800caa0:	480b      	ldr	r0, [pc, #44]	@ (800cad0 <prvInitialiseTaskLists+0x74>)
 800caa2:	f7fe faae 	bl	800b002 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800caa6:	4b0b      	ldr	r3, [pc, #44]	@ (800cad4 <prvInitialiseTaskLists+0x78>)
 800caa8:	4a05      	ldr	r2, [pc, #20]	@ (800cac0 <prvInitialiseTaskLists+0x64>)
 800caaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800caac:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <prvInitialiseTaskLists+0x7c>)
 800caae:	4a05      	ldr	r2, [pc, #20]	@ (800cac4 <prvInitialiseTaskLists+0x68>)
 800cab0:	601a      	str	r2, [r3, #0]
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	20001a58 	.word	0x20001a58
 800cac0:	20001ae4 	.word	0x20001ae4
 800cac4:	20001af8 	.word	0x20001af8
 800cac8:	20001b14 	.word	0x20001b14
 800cacc:	20001b28 	.word	0x20001b28
 800cad0:	20001b40 	.word	0x20001b40
 800cad4:	20001b0c 	.word	0x20001b0c
 800cad8:	20001b10 	.word	0x20001b10

0800cadc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cae2:	e019      	b.n	800cb18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cae4:	f000 ffb0 	bl	800da48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cae8:	4b10      	ldr	r3, [pc, #64]	@ (800cb2c <prvCheckTasksWaitingTermination+0x50>)
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3304      	adds	r3, #4
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fe fb0e 	bl	800b116 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cafa:	4b0d      	ldr	r3, [pc, #52]	@ (800cb30 <prvCheckTasksWaitingTermination+0x54>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3b01      	subs	r3, #1
 800cb00:	4a0b      	ldr	r2, [pc, #44]	@ (800cb30 <prvCheckTasksWaitingTermination+0x54>)
 800cb02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb04:	4b0b      	ldr	r3, [pc, #44]	@ (800cb34 <prvCheckTasksWaitingTermination+0x58>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	4a0a      	ldr	r2, [pc, #40]	@ (800cb34 <prvCheckTasksWaitingTermination+0x58>)
 800cb0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb0e:	f000 ffcd 	bl	800daac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f810 	bl	800cb38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb18:	4b06      	ldr	r3, [pc, #24]	@ (800cb34 <prvCheckTasksWaitingTermination+0x58>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1e1      	bne.n	800cae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20001b28 	.word	0x20001b28
 800cb30:	20001b54 	.word	0x20001b54
 800cb34:	20001b3c 	.word	0x20001b3c

0800cb38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d108      	bne.n	800cb5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 f96a 	bl	800de28 <vPortFree>
				vPortFree( pxTCB );
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f001 f967 	bl	800de28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb5a:	e019      	b.n	800cb90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d103      	bne.n	800cb6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f001 f95e 	bl	800de28 <vPortFree>
	}
 800cb6c:	e010      	b.n	800cb90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d00b      	beq.n	800cb90 <prvDeleteTCB+0x58>
	__asm volatile
 800cb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7c:	f383 8811 	msr	BASEPRI, r3
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	60fb      	str	r3, [r7, #12]
}
 800cb8a:	bf00      	nop
 800cb8c:	bf00      	nop
 800cb8e:	e7fd      	b.n	800cb8c <prvDeleteTCB+0x54>
	}
 800cb90:	bf00      	nop
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb9e:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd0 <prvResetNextTaskUnblockTime+0x38>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d104      	bne.n	800cbb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cba8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd4 <prvResetNextTaskUnblockTime+0x3c>)
 800cbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cbb0:	e008      	b.n	800cbc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb2:	4b07      	ldr	r3, [pc, #28]	@ (800cbd0 <prvResetNextTaskUnblockTime+0x38>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	4a04      	ldr	r2, [pc, #16]	@ (800cbd4 <prvResetNextTaskUnblockTime+0x3c>)
 800cbc2:	6013      	str	r3, [r2, #0]
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	20001b0c 	.word	0x20001b0c
 800cbd4:	20001b74 	.word	0x20001b74

0800cbd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbde:	4b0b      	ldr	r3, [pc, #44]	@ (800cc0c <xTaskGetSchedulerState+0x34>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d102      	bne.n	800cbec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	607b      	str	r3, [r7, #4]
 800cbea:	e008      	b.n	800cbfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbec:	4b08      	ldr	r3, [pc, #32]	@ (800cc10 <xTaskGetSchedulerState+0x38>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d102      	bne.n	800cbfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	607b      	str	r3, [r7, #4]
 800cbf8:	e001      	b.n	800cbfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbfe:	687b      	ldr	r3, [r7, #4]
	}
 800cc00:	4618      	mov	r0, r3
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	20001b60 	.word	0x20001b60
 800cc10:	20001b7c 	.word	0x20001b7c

0800cc14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cc20:	2300      	movs	r3, #0
 800cc22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d05e      	beq.n	800cce8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc2e:	4b31      	ldr	r3, [pc, #196]	@ (800ccf4 <xTaskPriorityInherit+0xe0>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d24e      	bcs.n	800ccd6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	db06      	blt.n	800cc4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc40:	4b2c      	ldr	r3, [pc, #176]	@ (800ccf4 <xTaskPriorityInherit+0xe0>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc46:	f1c3 0207 	rsb	r2, r3, #7
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	6959      	ldr	r1, [r3, #20]
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc56:	4613      	mov	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	4a26      	ldr	r2, [pc, #152]	@ (800ccf8 <xTaskPriorityInherit+0xe4>)
 800cc60:	4413      	add	r3, r2
 800cc62:	4299      	cmp	r1, r3
 800cc64:	d12f      	bne.n	800ccc6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fa53 	bl	800b116 <uxListRemove>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10a      	bne.n	800cc8c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc80:	43da      	mvns	r2, r3
 800cc82:	4b1e      	ldr	r3, [pc, #120]	@ (800ccfc <xTaskPriorityInherit+0xe8>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4013      	ands	r3, r2
 800cc88:	4a1c      	ldr	r2, [pc, #112]	@ (800ccfc <xTaskPriorityInherit+0xe8>)
 800cc8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc8c:	4b19      	ldr	r3, [pc, #100]	@ (800ccf4 <xTaskPriorityInherit+0xe0>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	409a      	lsls	r2, r3
 800cc9e:	4b17      	ldr	r3, [pc, #92]	@ (800ccfc <xTaskPriorityInherit+0xe8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	4a15      	ldr	r2, [pc, #84]	@ (800ccfc <xTaskPriorityInherit+0xe8>)
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccac:	4613      	mov	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4413      	add	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4a10      	ldr	r2, [pc, #64]	@ (800ccf8 <xTaskPriorityInherit+0xe4>)
 800ccb6:	441a      	add	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	f7fe f9cc 	bl	800b05c <vListInsertEnd>
 800ccc4:	e004      	b.n	800ccd0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf4 <xTaskPriorityInherit+0xe0>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	60fb      	str	r3, [r7, #12]
 800ccd4:	e008      	b.n	800cce8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccda:	4b06      	ldr	r3, [pc, #24]	@ (800ccf4 <xTaskPriorityInherit+0xe0>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d201      	bcs.n	800cce8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cce4:	2301      	movs	r3, #1
 800cce6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cce8:	68fb      	ldr	r3, [r7, #12]
	}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20001a54 	.word	0x20001a54
 800ccf8:	20001a58 	.word	0x20001a58
 800ccfc:	20001b5c 	.word	0x20001b5c

0800cd00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d070      	beq.n	800cdf8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd16:	4b3b      	ldr	r3, [pc, #236]	@ (800ce04 <xTaskPriorityDisinherit+0x104>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d00b      	beq.n	800cd38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	60fb      	str	r3, [r7, #12]
}
 800cd32:	bf00      	nop
 800cd34:	bf00      	nop
 800cd36:	e7fd      	b.n	800cd34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10b      	bne.n	800cd58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	60bb      	str	r3, [r7, #8]
}
 800cd52:	bf00      	nop
 800cd54:	bf00      	nop
 800cd56:	e7fd      	b.n	800cd54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd5c:	1e5a      	subs	r2, r3, #1
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d044      	beq.n	800cdf8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d140      	bne.n	800cdf8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	3304      	adds	r3, #4
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fe f9cb 	bl	800b116 <uxListRemove>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d115      	bne.n	800cdb2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd8a:	491f      	ldr	r1, [pc, #124]	@ (800ce08 <xTaskPriorityDisinherit+0x108>)
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	440b      	add	r3, r1
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10a      	bne.n	800cdb2 <xTaskPriorityDisinherit+0xb2>
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda0:	2201      	movs	r2, #1
 800cda2:	fa02 f303 	lsl.w	r3, r2, r3
 800cda6:	43da      	mvns	r2, r3
 800cda8:	4b18      	ldr	r3, [pc, #96]	@ (800ce0c <xTaskPriorityDisinherit+0x10c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4013      	ands	r3, r2
 800cdae:	4a17      	ldr	r2, [pc, #92]	@ (800ce0c <xTaskPriorityDisinherit+0x10c>)
 800cdb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdbe:	f1c3 0207 	rsb	r2, r3, #7
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdca:	2201      	movs	r2, #1
 800cdcc:	409a      	lsls	r2, r3
 800cdce:	4b0f      	ldr	r3, [pc, #60]	@ (800ce0c <xTaskPriorityDisinherit+0x10c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	4a0d      	ldr	r2, [pc, #52]	@ (800ce0c <xTaskPriorityDisinherit+0x10c>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cddc:	4613      	mov	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4a08      	ldr	r2, [pc, #32]	@ (800ce08 <xTaskPriorityDisinherit+0x108>)
 800cde6:	441a      	add	r2, r3
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f7fe f934 	bl	800b05c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdf8:	697b      	ldr	r3, [r7, #20]
	}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	20001a54 	.word	0x20001a54
 800ce08:	20001a58 	.word	0x20001a58
 800ce0c:	20001b5c 	.word	0x20001b5c

0800ce10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d079      	beq.n	800cf1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10b      	bne.n	800ce48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	60fb      	str	r3, [r7, #12]
}
 800ce42:	bf00      	nop
 800ce44:	bf00      	nop
 800ce46:	e7fd      	b.n	800ce44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d902      	bls.n	800ce58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	61fb      	str	r3, [r7, #28]
 800ce56:	e002      	b.n	800ce5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce62:	69fa      	ldr	r2, [r7, #28]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d059      	beq.n	800cf1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d154      	bne.n	800cf1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ce72:	4b2c      	ldr	r3, [pc, #176]	@ (800cf24 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	69ba      	ldr	r2, [r7, #24]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d10b      	bne.n	800ce94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ce7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	60bb      	str	r3, [r7, #8]
}
 800ce8e:	bf00      	nop
 800ce90:	bf00      	nop
 800ce92:	e7fd      	b.n	800ce90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	69fa      	ldr	r2, [r7, #28]
 800ce9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	db04      	blt.n	800ceb2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	f1c3 0207 	rsb	r2, r3, #7
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	6959      	ldr	r1, [r3, #20]
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4a19      	ldr	r2, [pc, #100]	@ (800cf28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cec2:	4413      	add	r3, r2
 800cec4:	4299      	cmp	r1, r3
 800cec6:	d129      	bne.n	800cf1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fe f922 	bl	800b116 <uxListRemove>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10a      	bne.n	800ceee <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cedc:	2201      	movs	r2, #1
 800cede:	fa02 f303 	lsl.w	r3, r2, r3
 800cee2:	43da      	mvns	r2, r3
 800cee4:	4b11      	ldr	r3, [pc, #68]	@ (800cf2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4013      	ands	r3, r2
 800ceea:	4a10      	ldr	r2, [pc, #64]	@ (800cf2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ceec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef2:	2201      	movs	r2, #1
 800cef4:	409a      	lsls	r2, r3
 800cef6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	4a0b      	ldr	r2, [pc, #44]	@ (800cf2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf04:	4613      	mov	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4a06      	ldr	r2, [pc, #24]	@ (800cf28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cf0e:	441a      	add	r2, r3
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	3304      	adds	r3, #4
 800cf14:	4619      	mov	r1, r3
 800cf16:	4610      	mov	r0, r2
 800cf18:	f7fe f8a0 	bl	800b05c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf1c:	bf00      	nop
 800cf1e:	3720      	adds	r7, #32
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20001a54 	.word	0x20001a54
 800cf28:	20001a58 	.word	0x20001a58
 800cf2c:	20001b5c 	.word	0x20001b5c

0800cf30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cf34:	4b07      	ldr	r3, [pc, #28]	@ (800cf54 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d004      	beq.n	800cf46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cf3c:	4b05      	ldr	r3, [pc, #20]	@ (800cf54 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf42:	3201      	adds	r2, #1
 800cf44:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800cf46:	4b03      	ldr	r3, [pc, #12]	@ (800cf54 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf48:	681b      	ldr	r3, [r3, #0]
	}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	20001a54 	.word	0x20001a54

0800cf58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf62:	4b29      	ldr	r3, [pc, #164]	@ (800d008 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf68:	4b28      	ldr	r3, [pc, #160]	@ (800d00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	3304      	adds	r3, #4
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe f8d1 	bl	800b116 <uxListRemove>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10b      	bne.n	800cf92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cf7a:	4b24      	ldr	r3, [pc, #144]	@ (800d00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf80:	2201      	movs	r2, #1
 800cf82:	fa02 f303 	lsl.w	r3, r2, r3
 800cf86:	43da      	mvns	r2, r3
 800cf88:	4b21      	ldr	r3, [pc, #132]	@ (800d010 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	4a20      	ldr	r2, [pc, #128]	@ (800d010 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf98:	d10a      	bne.n	800cfb0 <prvAddCurrentTaskToDelayedList+0x58>
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d007      	beq.n	800cfb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfa0:	4b1a      	ldr	r3, [pc, #104]	@ (800d00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	481a      	ldr	r0, [pc, #104]	@ (800d014 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cfaa:	f7fe f857 	bl	800b05c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfae:	e026      	b.n	800cffe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfb8:	4b14      	ldr	r3, [pc, #80]	@ (800d00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d209      	bcs.n	800cfdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfc8:	4b13      	ldr	r3, [pc, #76]	@ (800d018 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	4b0f      	ldr	r3, [pc, #60]	@ (800d00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	f7fe f865 	bl	800b0a4 <vListInsert>
}
 800cfda:	e010      	b.n	800cffe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfdc:	4b0f      	ldr	r3, [pc, #60]	@ (800d01c <prvAddCurrentTaskToDelayedList+0xc4>)
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	@ (800d00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	4610      	mov	r0, r2
 800cfea:	f7fe f85b 	bl	800b0a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfee:	4b0c      	ldr	r3, [pc, #48]	@ (800d020 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d202      	bcs.n	800cffe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cff8:	4a09      	ldr	r2, [pc, #36]	@ (800d020 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	6013      	str	r3, [r2, #0]
}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	20001b58 	.word	0x20001b58
 800d00c:	20001a54 	.word	0x20001a54
 800d010:	20001b5c 	.word	0x20001b5c
 800d014:	20001b40 	.word	0x20001b40
 800d018:	20001b10 	.word	0x20001b10
 800d01c:	20001b0c 	.word	0x20001b0c
 800d020:	20001b74 	.word	0x20001b74

0800d024 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08a      	sub	sp, #40	@ 0x28
 800d028:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d02e:	f000 fb55 	bl	800d6dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d032:	4b1d      	ldr	r3, [pc, #116]	@ (800d0a8 <xTimerCreateTimerTask+0x84>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d021      	beq.n	800d07e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d03a:	2300      	movs	r3, #0
 800d03c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d03e:	2300      	movs	r3, #0
 800d040:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d042:	1d3a      	adds	r2, r7, #4
 800d044:	f107 0108 	add.w	r1, r7, #8
 800d048:	f107 030c 	add.w	r3, r7, #12
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7f4 fecd 	bl	8001dec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d052:	6879      	ldr	r1, [r7, #4]
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	9202      	str	r2, [sp, #8]
 800d05a:	9301      	str	r3, [sp, #4]
 800d05c:	2302      	movs	r3, #2
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	2300      	movs	r3, #0
 800d062:	460a      	mov	r2, r1
 800d064:	4911      	ldr	r1, [pc, #68]	@ (800d0ac <xTimerCreateTimerTask+0x88>)
 800d066:	4812      	ldr	r0, [pc, #72]	@ (800d0b0 <xTimerCreateTimerTask+0x8c>)
 800d068:	f7fe ffd0 	bl	800c00c <xTaskCreateStatic>
 800d06c:	4603      	mov	r3, r0
 800d06e:	4a11      	ldr	r2, [pc, #68]	@ (800d0b4 <xTimerCreateTimerTask+0x90>)
 800d070:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d072:	4b10      	ldr	r3, [pc, #64]	@ (800d0b4 <xTimerCreateTimerTask+0x90>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d07a:	2301      	movs	r3, #1
 800d07c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10b      	bne.n	800d09c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	613b      	str	r3, [r7, #16]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d09c:	697b      	ldr	r3, [r7, #20]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3718      	adds	r7, #24
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20001bb0 	.word	0x20001bb0
 800d0ac:	0800f260 	.word	0x0800f260
 800d0b0:	0800d2ad 	.word	0x0800d2ad
 800d0b4:	20001bb4 	.word	0x20001bb4

0800d0b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b088      	sub	sp, #32
 800d0bc:	af02      	add	r7, sp, #8
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d0c6:	2028      	movs	r0, #40	@ 0x28
 800d0c8:	f000 fde0 	bl	800dc8c <pvPortMalloc>
 800d0cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00d      	beq.n	800d0f0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	68b9      	ldr	r1, [r7, #8]
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f000 f805 	bl	800d0fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d0f0:	697b      	ldr	r3, [r7, #20]
	}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3718      	adds	r7, #24
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b086      	sub	sp, #24
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	60f8      	str	r0, [r7, #12]
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10b      	bne.n	800d126 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	617b      	str	r3, [r7, #20]
}
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	e7fd      	b.n	800d122 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d01e      	beq.n	800d16a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d12c:	f000 fad6 	bl	800d6dc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d144:	6a3a      	ldr	r2, [r7, #32]
 800d146:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	3304      	adds	r3, #4
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fd ff78 	bl	800b042 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d008      	beq.n	800d16a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d15e:	f043 0304 	orr.w	r3, r3, #4
 800d162:	b2da      	uxtb	r2, r3
 800d164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d16a:	bf00      	nop
 800d16c:	3718      	adds	r7, #24
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08a      	sub	sp, #40	@ 0x28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d182:	2300      	movs	r3, #0
 800d184:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10b      	bne.n	800d1a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	623b      	str	r3, [r7, #32]
}
 800d19e:	bf00      	nop
 800d1a0:	bf00      	nop
 800d1a2:	e7fd      	b.n	800d1a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d1a4:	4b19      	ldr	r3, [pc, #100]	@ (800d20c <xTimerGenericCommand+0x98>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d02a      	beq.n	800d202 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2b05      	cmp	r3, #5
 800d1bc:	dc18      	bgt.n	800d1f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d1be:	f7ff fd0b 	bl	800cbd8 <xTaskGetSchedulerState>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d109      	bne.n	800d1dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d1c8:	4b10      	ldr	r3, [pc, #64]	@ (800d20c <xTimerGenericCommand+0x98>)
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	f107 0114 	add.w	r1, r7, #20
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1d4:	f7fe f972 	bl	800b4bc <xQueueGenericSend>
 800d1d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1da:	e012      	b.n	800d202 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d20c <xTimerGenericCommand+0x98>)
 800d1de:	6818      	ldr	r0, [r3, #0]
 800d1e0:	f107 0114 	add.w	r1, r7, #20
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f7fe f968 	bl	800b4bc <xQueueGenericSend>
 800d1ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1ee:	e008      	b.n	800d202 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1f0:	4b06      	ldr	r3, [pc, #24]	@ (800d20c <xTimerGenericCommand+0x98>)
 800d1f2:	6818      	ldr	r0, [r3, #0]
 800d1f4:	f107 0114 	add.w	r1, r7, #20
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	f7fe fa60 	bl	800b6c0 <xQueueGenericSendFromISR>
 800d200:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d204:	4618      	mov	r0, r3
 800d206:	3728      	adds	r7, #40	@ 0x28
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	20001bb0 	.word	0x20001bb0

0800d210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af02      	add	r7, sp, #8
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d21a:	4b23      	ldr	r3, [pc, #140]	@ (800d2a8 <prvProcessExpiredTimer+0x98>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	3304      	adds	r3, #4
 800d228:	4618      	mov	r0, r3
 800d22a:	f7fd ff74 	bl	800b116 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d023      	beq.n	800d284 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	699a      	ldr	r2, [r3, #24]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	18d1      	adds	r1, r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	6978      	ldr	r0, [r7, #20]
 800d24a:	f000 f8d5 	bl	800d3f8 <prvInsertTimerInActiveList>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d020      	beq.n	800d296 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d254:	2300      	movs	r3, #0
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	2300      	movs	r3, #0
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	2100      	movs	r1, #0
 800d25e:	6978      	ldr	r0, [r7, #20]
 800d260:	f7ff ff88 	bl	800d174 <xTimerGenericCommand>
 800d264:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d114      	bne.n	800d296 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	60fb      	str	r3, [r7, #12]
}
 800d27e:	bf00      	nop
 800d280:	bf00      	nop
 800d282:	e7fd      	b.n	800d280 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d28a:	f023 0301 	bic.w	r3, r3, #1
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	6978      	ldr	r0, [r7, #20]
 800d29c:	4798      	blx	r3
}
 800d29e:	bf00      	nop
 800d2a0:	3718      	adds	r7, #24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	20001ba8 	.word	0x20001ba8

0800d2ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2b4:	f107 0308 	add.w	r3, r7, #8
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 f859 	bl	800d370 <prvGetNextExpireTime>
 800d2be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f000 f805 	bl	800d2d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d2ca:	f000 f8d7 	bl	800d47c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2ce:	bf00      	nop
 800d2d0:	e7f0      	b.n	800d2b4 <prvTimerTask+0x8>
	...

0800d2d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d2de:	f7ff f895 	bl	800c40c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2e2:	f107 0308 	add.w	r3, r7, #8
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f000 f866 	bl	800d3b8 <prvSampleTimeNow>
 800d2ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d130      	bne.n	800d356 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10a      	bne.n	800d310 <prvProcessTimerOrBlockTask+0x3c>
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d806      	bhi.n	800d310 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d302:	f7ff f891 	bl	800c428 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d306:	68f9      	ldr	r1, [r7, #12]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff ff81 	bl	800d210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d30e:	e024      	b.n	800d35a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d008      	beq.n	800d328 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d316:	4b13      	ldr	r3, [pc, #76]	@ (800d364 <prvProcessTimerOrBlockTask+0x90>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <prvProcessTimerOrBlockTask+0x50>
 800d320:	2301      	movs	r3, #1
 800d322:	e000      	b.n	800d326 <prvProcessTimerOrBlockTask+0x52>
 800d324:	2300      	movs	r3, #0
 800d326:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d328:	4b0f      	ldr	r3, [pc, #60]	@ (800d368 <prvProcessTimerOrBlockTask+0x94>)
 800d32a:	6818      	ldr	r0, [r3, #0]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	4619      	mov	r1, r3
 800d336:	f7fe fe35 	bl	800bfa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d33a:	f7ff f875 	bl	800c428 <xTaskResumeAll>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10a      	bne.n	800d35a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d344:	4b09      	ldr	r3, [pc, #36]	@ (800d36c <prvProcessTimerOrBlockTask+0x98>)
 800d346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d34a:	601a      	str	r2, [r3, #0]
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	f3bf 8f6f 	isb	sy
}
 800d354:	e001      	b.n	800d35a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d356:	f7ff f867 	bl	800c428 <xTaskResumeAll>
}
 800d35a:	bf00      	nop
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	20001bac 	.word	0x20001bac
 800d368:	20001bb0 	.word	0x20001bb0
 800d36c:	e000ed04 	.word	0xe000ed04

0800d370 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d378:	4b0e      	ldr	r3, [pc, #56]	@ (800d3b4 <prvGetNextExpireTime+0x44>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <prvGetNextExpireTime+0x16>
 800d382:	2201      	movs	r2, #1
 800d384:	e000      	b.n	800d388 <prvGetNextExpireTime+0x18>
 800d386:	2200      	movs	r2, #0
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d105      	bne.n	800d3a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d394:	4b07      	ldr	r3, [pc, #28]	@ (800d3b4 <prvGetNextExpireTime+0x44>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e001      	b.n	800d3a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	20001ba8 	.word	0x20001ba8

0800d3b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d3c0:	f7ff f8d0 	bl	800c564 <xTaskGetTickCount>
 800d3c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d3f4 <prvSampleTimeNow+0x3c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d205      	bcs.n	800d3dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d3d0:	f000 f91e 	bl	800d610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	e002      	b.n	800d3e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d3e2:	4a04      	ldr	r2, [pc, #16]	@ (800d3f4 <prvSampleTimeNow+0x3c>)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20001bb8 	.word	0x20001bb8

0800d3f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
 800d404:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d406:	2300      	movs	r3, #0
 800d408:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d812      	bhi.n	800d444 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	1ad2      	subs	r2, r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	699b      	ldr	r3, [r3, #24]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d302      	bcc.n	800d432 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d42c:	2301      	movs	r3, #1
 800d42e:	617b      	str	r3, [r7, #20]
 800d430:	e01b      	b.n	800d46a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d432:	4b10      	ldr	r3, [pc, #64]	@ (800d474 <prvInsertTimerInActiveList+0x7c>)
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	3304      	adds	r3, #4
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fd fe31 	bl	800b0a4 <vListInsert>
 800d442:	e012      	b.n	800d46a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d206      	bcs.n	800d45a <prvInsertTimerInActiveList+0x62>
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	429a      	cmp	r2, r3
 800d452:	d302      	bcc.n	800d45a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d454:	2301      	movs	r3, #1
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	e007      	b.n	800d46a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d45a:	4b07      	ldr	r3, [pc, #28]	@ (800d478 <prvInsertTimerInActiveList+0x80>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3304      	adds	r3, #4
 800d462:	4619      	mov	r1, r3
 800d464:	4610      	mov	r0, r2
 800d466:	f7fd fe1d 	bl	800b0a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d46a:	697b      	ldr	r3, [r7, #20]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	20001bac 	.word	0x20001bac
 800d478:	20001ba8 	.word	0x20001ba8

0800d47c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b08c      	sub	sp, #48	@ 0x30
 800d480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d482:	e0b2      	b.n	800d5ea <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	f2c0 80af 	blt.w	800d5ea <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d492:	695b      	ldr	r3, [r3, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d004      	beq.n	800d4a2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49a:	3304      	adds	r3, #4
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fd fe3a 	bl	800b116 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4a2:	1d3b      	adds	r3, r7, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7ff ff87 	bl	800d3b8 <prvSampleTimeNow>
 800d4aa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	2b09      	cmp	r3, #9
 800d4b0:	f200 8098 	bhi.w	800d5e4 <prvProcessReceivedCommands+0x168>
 800d4b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d4bc <prvProcessReceivedCommands+0x40>)
 800d4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ba:	bf00      	nop
 800d4bc:	0800d4e5 	.word	0x0800d4e5
 800d4c0:	0800d4e5 	.word	0x0800d4e5
 800d4c4:	0800d4e5 	.word	0x0800d4e5
 800d4c8:	0800d55b 	.word	0x0800d55b
 800d4cc:	0800d56f 	.word	0x0800d56f
 800d4d0:	0800d5bb 	.word	0x0800d5bb
 800d4d4:	0800d4e5 	.word	0x0800d4e5
 800d4d8:	0800d4e5 	.word	0x0800d4e5
 800d4dc:	0800d55b 	.word	0x0800d55b
 800d4e0:	0800d56f 	.word	0x0800d56f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d4ea:	f043 0301 	orr.w	r3, r3, #1
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fa:	699b      	ldr	r3, [r3, #24]
 800d4fc:	18d1      	adds	r1, r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6a3a      	ldr	r2, [r7, #32]
 800d502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d504:	f7ff ff78 	bl	800d3f8 <prvInsertTimerInActiveList>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d06c      	beq.n	800d5e8 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d514:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d51c:	f003 0304 	and.w	r3, r3, #4
 800d520:	2b00      	cmp	r3, #0
 800d522:	d061      	beq.n	800d5e8 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	441a      	add	r2, r3
 800d52c:	2300      	movs	r3, #0
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	2300      	movs	r3, #0
 800d532:	2100      	movs	r1, #0
 800d534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d536:	f7ff fe1d 	bl	800d174 <xTimerGenericCommand>
 800d53a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d152      	bne.n	800d5e8 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	61bb      	str	r3, [r7, #24]
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop
 800d558:	e7fd      	b.n	800d556 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d560:	f023 0301 	bic.w	r3, r3, #1
 800d564:	b2da      	uxtb	r2, r3
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800d56c:	e03d      	b.n	800d5ea <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d574:	f043 0301 	orr.w	r3, r3, #1
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d584:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10b      	bne.n	800d5a6 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	617b      	str	r3, [r7, #20]
}
 800d5a0:	bf00      	nop
 800d5a2:	bf00      	nop
 800d5a4:	e7fd      	b.n	800d5a2 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	699a      	ldr	r2, [r3, #24]
 800d5aa:	6a3b      	ldr	r3, [r7, #32]
 800d5ac:	18d1      	adds	r1, r2, r3
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	6a3a      	ldr	r2, [r7, #32]
 800d5b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5b4:	f7ff ff20 	bl	800d3f8 <prvInsertTimerInActiveList>
					break;
 800d5b8:	e017      	b.n	800d5ea <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d5c0:	f003 0302 	and.w	r3, r3, #2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d103      	bne.n	800d5d0 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800d5c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5ca:	f000 fc2d 	bl	800de28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5ce:	e00c      	b.n	800d5ea <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d5d6:	f023 0301 	bic.w	r3, r3, #1
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800d5e2:	e002      	b.n	800d5ea <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800d5e4:	bf00      	nop
 800d5e6:	e000      	b.n	800d5ea <prvProcessReceivedCommands+0x16e>
					break;
 800d5e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5ea:	4b08      	ldr	r3, [pc, #32]	@ (800d60c <prvProcessReceivedCommands+0x190>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f107 0108 	add.w	r1, r7, #8
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe f991 	bl	800b91c <xQueueReceive>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f47f af41 	bne.w	800d484 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d602:	bf00      	nop
 800d604:	bf00      	nop
 800d606:	3728      	adds	r7, #40	@ 0x28
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20001bb0 	.word	0x20001bb0

0800d610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d616:	e049      	b.n	800d6ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d618:	4b2e      	ldr	r3, [pc, #184]	@ (800d6d4 <prvSwitchTimerLists+0xc4>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d622:	4b2c      	ldr	r3, [pc, #176]	@ (800d6d4 <prvSwitchTimerLists+0xc4>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	3304      	adds	r3, #4
 800d630:	4618      	mov	r0, r3
 800d632:	f7fd fd70 	bl	800b116 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d644:	f003 0304 	and.w	r3, r3, #4
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d02f      	beq.n	800d6ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	693a      	ldr	r2, [r7, #16]
 800d652:	4413      	add	r3, r2
 800d654:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d90e      	bls.n	800d67c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d66a:	4b1a      	ldr	r3, [pc, #104]	@ (800d6d4 <prvSwitchTimerLists+0xc4>)
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3304      	adds	r3, #4
 800d672:	4619      	mov	r1, r3
 800d674:	4610      	mov	r0, r2
 800d676:	f7fd fd15 	bl	800b0a4 <vListInsert>
 800d67a:	e017      	b.n	800d6ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d67c:	2300      	movs	r3, #0
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	2300      	movs	r3, #0
 800d682:	693a      	ldr	r2, [r7, #16]
 800d684:	2100      	movs	r1, #0
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7ff fd74 	bl	800d174 <xTimerGenericCommand>
 800d68c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10b      	bne.n	800d6ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	603b      	str	r3, [r7, #0]
}
 800d6a6:	bf00      	nop
 800d6a8:	bf00      	nop
 800d6aa:	e7fd      	b.n	800d6a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6ac:	4b09      	ldr	r3, [pc, #36]	@ (800d6d4 <prvSwitchTimerLists+0xc4>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1b0      	bne.n	800d618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d6b6:	4b07      	ldr	r3, [pc, #28]	@ (800d6d4 <prvSwitchTimerLists+0xc4>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6bc:	4b06      	ldr	r3, [pc, #24]	@ (800d6d8 <prvSwitchTimerLists+0xc8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a04      	ldr	r2, [pc, #16]	@ (800d6d4 <prvSwitchTimerLists+0xc4>)
 800d6c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d6c4:	4a04      	ldr	r2, [pc, #16]	@ (800d6d8 <prvSwitchTimerLists+0xc8>)
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	6013      	str	r3, [r2, #0]
}
 800d6ca:	bf00      	nop
 800d6cc:	3718      	adds	r7, #24
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20001ba8 	.word	0x20001ba8
 800d6d8:	20001bac 	.word	0x20001bac

0800d6dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6e2:	f000 f9b1 	bl	800da48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6e6:	4b15      	ldr	r3, [pc, #84]	@ (800d73c <prvCheckForValidListAndQueue+0x60>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d120      	bne.n	800d730 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6ee:	4814      	ldr	r0, [pc, #80]	@ (800d740 <prvCheckForValidListAndQueue+0x64>)
 800d6f0:	f7fd fc87 	bl	800b002 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6f4:	4813      	ldr	r0, [pc, #76]	@ (800d744 <prvCheckForValidListAndQueue+0x68>)
 800d6f6:	f7fd fc84 	bl	800b002 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6fa:	4b13      	ldr	r3, [pc, #76]	@ (800d748 <prvCheckForValidListAndQueue+0x6c>)
 800d6fc:	4a10      	ldr	r2, [pc, #64]	@ (800d740 <prvCheckForValidListAndQueue+0x64>)
 800d6fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d700:	4b12      	ldr	r3, [pc, #72]	@ (800d74c <prvCheckForValidListAndQueue+0x70>)
 800d702:	4a10      	ldr	r2, [pc, #64]	@ (800d744 <prvCheckForValidListAndQueue+0x68>)
 800d704:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d706:	2300      	movs	r3, #0
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	4b11      	ldr	r3, [pc, #68]	@ (800d750 <prvCheckForValidListAndQueue+0x74>)
 800d70c:	4a11      	ldr	r2, [pc, #68]	@ (800d754 <prvCheckForValidListAndQueue+0x78>)
 800d70e:	210c      	movs	r1, #12
 800d710:	200a      	movs	r0, #10
 800d712:	f7fd fd95 	bl	800b240 <xQueueGenericCreateStatic>
 800d716:	4603      	mov	r3, r0
 800d718:	4a08      	ldr	r2, [pc, #32]	@ (800d73c <prvCheckForValidListAndQueue+0x60>)
 800d71a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d71c:	4b07      	ldr	r3, [pc, #28]	@ (800d73c <prvCheckForValidListAndQueue+0x60>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d005      	beq.n	800d730 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d724:	4b05      	ldr	r3, [pc, #20]	@ (800d73c <prvCheckForValidListAndQueue+0x60>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	490b      	ldr	r1, [pc, #44]	@ (800d758 <prvCheckForValidListAndQueue+0x7c>)
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe fc10 	bl	800bf50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d730:	f000 f9bc 	bl	800daac <vPortExitCritical>
}
 800d734:	bf00      	nop
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	20001bb0 	.word	0x20001bb0
 800d740:	20001b80 	.word	0x20001b80
 800d744:	20001b94 	.word	0x20001b94
 800d748:	20001ba8 	.word	0x20001ba8
 800d74c:	20001bac 	.word	0x20001bac
 800d750:	20001c34 	.word	0x20001c34
 800d754:	20001bbc 	.word	0x20001bbc
 800d758:	0800f268 	.word	0x0800f268

0800d75c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10b      	bne.n	800d786 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	60fb      	str	r3, [r7, #12]
}
 800d780:	bf00      	nop
 800d782:	bf00      	nop
 800d784:	e7fd      	b.n	800d782 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d786:	f000 f95f 	bl	800da48 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	69db      	ldr	r3, [r3, #28]
 800d78e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d790:	f000 f98c 	bl	800daac <vPortExitCritical>

	return pvReturn;
 800d794:	693b      	ldr	r3, [r7, #16]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3718      	adds	r7, #24
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b084      	sub	sp, #16
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10b      	bne.n	800d7ca <vTimerSetTimerID+0x2c>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	60bb      	str	r3, [r7, #8]
}
 800d7c4:	bf00      	nop
 800d7c6:	bf00      	nop
 800d7c8:	e7fd      	b.n	800d7c6 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800d7ca:	f000 f93d 	bl	800da48 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	683a      	ldr	r2, [r7, #0]
 800d7d2:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800d7d4:	f000 f96a 	bl	800daac <vPortExitCritical>
}
 800d7d8:	bf00      	nop
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	3b04      	subs	r3, #4
 800d7f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d7f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3b04      	subs	r3, #4
 800d7fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	f023 0201 	bic.w	r2, r3, #1
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	3b04      	subs	r3, #4
 800d80e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d810:	4a0c      	ldr	r2, [pc, #48]	@ (800d844 <pxPortInitialiseStack+0x64>)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3b14      	subs	r3, #20
 800d81a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	3b04      	subs	r3, #4
 800d826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f06f 0202 	mvn.w	r2, #2
 800d82e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3b20      	subs	r3, #32
 800d834:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d836:	68fb      	ldr	r3, [r7, #12]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3714      	adds	r7, #20
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr
 800d844:	0800d849 	.word	0x0800d849

0800d848 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d852:	4b13      	ldr	r3, [pc, #76]	@ (800d8a0 <prvTaskExitError+0x58>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85a:	d00b      	beq.n	800d874 <prvTaskExitError+0x2c>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	60fb      	str	r3, [r7, #12]
}
 800d86e:	bf00      	nop
 800d870:	bf00      	nop
 800d872:	e7fd      	b.n	800d870 <prvTaskExitError+0x28>
	__asm volatile
 800d874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	60bb      	str	r3, [r7, #8]
}
 800d886:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d888:	bf00      	nop
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d0fc      	beq.n	800d88a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d890:	bf00      	nop
 800d892:	bf00      	nop
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	2000000c 	.word	0x2000000c
	...

0800d8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d8b0:	4b07      	ldr	r3, [pc, #28]	@ (800d8d0 <pxCurrentTCBConst2>)
 800d8b2:	6819      	ldr	r1, [r3, #0]
 800d8b4:	6808      	ldr	r0, [r1, #0]
 800d8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ba:	f380 8809 	msr	PSP, r0
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f04f 0000 	mov.w	r0, #0
 800d8c6:	f380 8811 	msr	BASEPRI, r0
 800d8ca:	4770      	bx	lr
 800d8cc:	f3af 8000 	nop.w

0800d8d0 <pxCurrentTCBConst2>:
 800d8d0:	20001a54 	.word	0x20001a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop

0800d8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d8d8:	4808      	ldr	r0, [pc, #32]	@ (800d8fc <prvPortStartFirstTask+0x24>)
 800d8da:	6800      	ldr	r0, [r0, #0]
 800d8dc:	6800      	ldr	r0, [r0, #0]
 800d8de:	f380 8808 	msr	MSP, r0
 800d8e2:	f04f 0000 	mov.w	r0, #0
 800d8e6:	f380 8814 	msr	CONTROL, r0
 800d8ea:	b662      	cpsie	i
 800d8ec:	b661      	cpsie	f
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	df00      	svc	0
 800d8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d8fa:	bf00      	nop
 800d8fc:	e000ed08 	.word	0xe000ed08

0800d900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d906:	4b47      	ldr	r3, [pc, #284]	@ (800da24 <xPortStartScheduler+0x124>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a47      	ldr	r2, [pc, #284]	@ (800da28 <xPortStartScheduler+0x128>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d10b      	bne.n	800d928 <xPortStartScheduler+0x28>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	613b      	str	r3, [r7, #16]
}
 800d922:	bf00      	nop
 800d924:	bf00      	nop
 800d926:	e7fd      	b.n	800d924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d928:	4b3e      	ldr	r3, [pc, #248]	@ (800da24 <xPortStartScheduler+0x124>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a3f      	ldr	r2, [pc, #252]	@ (800da2c <xPortStartScheduler+0x12c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d10b      	bne.n	800d94a <xPortStartScheduler+0x4a>
	__asm volatile
 800d932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	60fb      	str	r3, [r7, #12]
}
 800d944:	bf00      	nop
 800d946:	bf00      	nop
 800d948:	e7fd      	b.n	800d946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d94a:	4b39      	ldr	r3, [pc, #228]	@ (800da30 <xPortStartScheduler+0x130>)
 800d94c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	b2db      	uxtb	r3, r3
 800d954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	22ff      	movs	r2, #255	@ 0xff
 800d95a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	b2db      	uxtb	r3, r3
 800d962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d964:	78fb      	ldrb	r3, [r7, #3]
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	4b31      	ldr	r3, [pc, #196]	@ (800da34 <xPortStartScheduler+0x134>)
 800d970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d972:	4b31      	ldr	r3, [pc, #196]	@ (800da38 <xPortStartScheduler+0x138>)
 800d974:	2207      	movs	r2, #7
 800d976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d978:	e009      	b.n	800d98e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d97a:	4b2f      	ldr	r3, [pc, #188]	@ (800da38 <xPortStartScheduler+0x138>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3b01      	subs	r3, #1
 800d980:	4a2d      	ldr	r2, [pc, #180]	@ (800da38 <xPortStartScheduler+0x138>)
 800d982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	b2db      	uxtb	r3, r3
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d98e:	78fb      	ldrb	r3, [r7, #3]
 800d990:	b2db      	uxtb	r3, r3
 800d992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d996:	2b80      	cmp	r3, #128	@ 0x80
 800d998:	d0ef      	beq.n	800d97a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d99a:	4b27      	ldr	r3, [pc, #156]	@ (800da38 <xPortStartScheduler+0x138>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f1c3 0307 	rsb	r3, r3, #7
 800d9a2:	2b04      	cmp	r3, #4
 800d9a4:	d00b      	beq.n	800d9be <xPortStartScheduler+0xbe>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	60bb      	str	r3, [r7, #8]
}
 800d9b8:	bf00      	nop
 800d9ba:	bf00      	nop
 800d9bc:	e7fd      	b.n	800d9ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d9be:	4b1e      	ldr	r3, [pc, #120]	@ (800da38 <xPortStartScheduler+0x138>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	021b      	lsls	r3, r3, #8
 800d9c4:	4a1c      	ldr	r2, [pc, #112]	@ (800da38 <xPortStartScheduler+0x138>)
 800d9c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800da38 <xPortStartScheduler+0x138>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d9d0:	4a19      	ldr	r2, [pc, #100]	@ (800da38 <xPortStartScheduler+0x138>)
 800d9d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d9dc:	4b17      	ldr	r3, [pc, #92]	@ (800da3c <xPortStartScheduler+0x13c>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a16      	ldr	r2, [pc, #88]	@ (800da3c <xPortStartScheduler+0x13c>)
 800d9e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d9e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d9e8:	4b14      	ldr	r3, [pc, #80]	@ (800da3c <xPortStartScheduler+0x13c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a13      	ldr	r2, [pc, #76]	@ (800da3c <xPortStartScheduler+0x13c>)
 800d9ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d9f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d9f4:	f000 f8da 	bl	800dbac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d9f8:	4b11      	ldr	r3, [pc, #68]	@ (800da40 <xPortStartScheduler+0x140>)
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d9fe:	f000 f8f9 	bl	800dbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da02:	4b10      	ldr	r3, [pc, #64]	@ (800da44 <xPortStartScheduler+0x144>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a0f      	ldr	r2, [pc, #60]	@ (800da44 <xPortStartScheduler+0x144>)
 800da08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800da0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da0e:	f7ff ff63 	bl	800d8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da12:	f7fe fe71 	bl	800c6f8 <vTaskSwitchContext>
	prvTaskExitError();
 800da16:	f7ff ff17 	bl	800d848 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	e000ed00 	.word	0xe000ed00
 800da28:	410fc271 	.word	0x410fc271
 800da2c:	410fc270 	.word	0x410fc270
 800da30:	e000e400 	.word	0xe000e400
 800da34:	20001c7c 	.word	0x20001c7c
 800da38:	20001c80 	.word	0x20001c80
 800da3c:	e000ed20 	.word	0xe000ed20
 800da40:	2000000c 	.word	0x2000000c
 800da44:	e000ef34 	.word	0xe000ef34

0800da48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
	__asm volatile
 800da4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	607b      	str	r3, [r7, #4]
}
 800da60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800da62:	4b10      	ldr	r3, [pc, #64]	@ (800daa4 <vPortEnterCritical+0x5c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3301      	adds	r3, #1
 800da68:	4a0e      	ldr	r2, [pc, #56]	@ (800daa4 <vPortEnterCritical+0x5c>)
 800da6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800da6c:	4b0d      	ldr	r3, [pc, #52]	@ (800daa4 <vPortEnterCritical+0x5c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d110      	bne.n	800da96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da74:	4b0c      	ldr	r3, [pc, #48]	@ (800daa8 <vPortEnterCritical+0x60>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00b      	beq.n	800da96 <vPortEnterCritical+0x4e>
	__asm volatile
 800da7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	603b      	str	r3, [r7, #0]
}
 800da90:	bf00      	nop
 800da92:	bf00      	nop
 800da94:	e7fd      	b.n	800da92 <vPortEnterCritical+0x4a>
	}
}
 800da96:	bf00      	nop
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	2000000c 	.word	0x2000000c
 800daa8:	e000ed04 	.word	0xe000ed04

0800daac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dab2:	4b12      	ldr	r3, [pc, #72]	@ (800dafc <vPortExitCritical+0x50>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10b      	bne.n	800dad2 <vPortExitCritical+0x26>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	607b      	str	r3, [r7, #4]
}
 800dacc:	bf00      	nop
 800dace:	bf00      	nop
 800dad0:	e7fd      	b.n	800dace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dad2:	4b0a      	ldr	r3, [pc, #40]	@ (800dafc <vPortExitCritical+0x50>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3b01      	subs	r3, #1
 800dad8:	4a08      	ldr	r2, [pc, #32]	@ (800dafc <vPortExitCritical+0x50>)
 800dada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dadc:	4b07      	ldr	r3, [pc, #28]	@ (800dafc <vPortExitCritical+0x50>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d105      	bne.n	800daf0 <vPortExitCritical+0x44>
 800dae4:	2300      	movs	r3, #0
 800dae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	f383 8811 	msr	BASEPRI, r3
}
 800daee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr
 800dafc:	2000000c 	.word	0x2000000c

0800db00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db00:	f3ef 8009 	mrs	r0, PSP
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	4b15      	ldr	r3, [pc, #84]	@ (800db60 <pxCurrentTCBConst>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	f01e 0f10 	tst.w	lr, #16
 800db10:	bf08      	it	eq
 800db12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1a:	6010      	str	r0, [r2, #0]
 800db1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800db24:	f380 8811 	msr	BASEPRI, r0
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f7fe fde2 	bl	800c6f8 <vTaskSwitchContext>
 800db34:	f04f 0000 	mov.w	r0, #0
 800db38:	f380 8811 	msr	BASEPRI, r0
 800db3c:	bc09      	pop	{r0, r3}
 800db3e:	6819      	ldr	r1, [r3, #0]
 800db40:	6808      	ldr	r0, [r1, #0]
 800db42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db46:	f01e 0f10 	tst.w	lr, #16
 800db4a:	bf08      	it	eq
 800db4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db50:	f380 8809 	msr	PSP, r0
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	f3af 8000 	nop.w

0800db60 <pxCurrentTCBConst>:
 800db60:	20001a54 	.word	0x20001a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop

0800db68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	607b      	str	r3, [r7, #4]
}
 800db80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db82:	f7fe fcff 	bl	800c584 <xTaskIncrementTick>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db8c:	4b06      	ldr	r3, [pc, #24]	@ (800dba8 <SysTick_Handler+0x40>)
 800db8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	2300      	movs	r3, #0
 800db96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	f383 8811 	msr	BASEPRI, r3
}
 800db9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dba0:	bf00      	nop
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	e000ed04 	.word	0xe000ed04

0800dbac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dbac:	b480      	push	{r7}
 800dbae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dbb0:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe0 <vPortSetupTimerInterrupt+0x34>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe4 <vPortSetupTimerInterrupt+0x38>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe8 <vPortSetupTimerInterrupt+0x3c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a0a      	ldr	r2, [pc, #40]	@ (800dbec <vPortSetupTimerInterrupt+0x40>)
 800dbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc6:	099b      	lsrs	r3, r3, #6
 800dbc8:	4a09      	ldr	r2, [pc, #36]	@ (800dbf0 <vPortSetupTimerInterrupt+0x44>)
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dbce:	4b04      	ldr	r3, [pc, #16]	@ (800dbe0 <vPortSetupTimerInterrupt+0x34>)
 800dbd0:	2207      	movs	r2, #7
 800dbd2:	601a      	str	r2, [r3, #0]
}
 800dbd4:	bf00      	nop
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	e000e010 	.word	0xe000e010
 800dbe4:	e000e018 	.word	0xe000e018
 800dbe8:	20000000 	.word	0x20000000
 800dbec:	10624dd3 	.word	0x10624dd3
 800dbf0:	e000e014 	.word	0xe000e014

0800dbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dc04 <vPortEnableVFP+0x10>
 800dbf8:	6801      	ldr	r1, [r0, #0]
 800dbfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dbfe:	6001      	str	r1, [r0, #0]
 800dc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc02:	bf00      	nop
 800dc04:	e000ed88 	.word	0xe000ed88

0800dc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc0e:	f3ef 8305 	mrs	r3, IPSR
 800dc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b0f      	cmp	r3, #15
 800dc18:	d915      	bls.n	800dc46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc1a:	4a18      	ldr	r2, [pc, #96]	@ (800dc7c <vPortValidateInterruptPriority+0x74>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	4413      	add	r3, r2
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc24:	4b16      	ldr	r3, [pc, #88]	@ (800dc80 <vPortValidateInterruptPriority+0x78>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	7afa      	ldrb	r2, [r7, #11]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d20b      	bcs.n	800dc46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	607b      	str	r3, [r7, #4]
}
 800dc40:	bf00      	nop
 800dc42:	bf00      	nop
 800dc44:	e7fd      	b.n	800dc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc46:	4b0f      	ldr	r3, [pc, #60]	@ (800dc84 <vPortValidateInterruptPriority+0x7c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dc4e:	4b0e      	ldr	r3, [pc, #56]	@ (800dc88 <vPortValidateInterruptPriority+0x80>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d90b      	bls.n	800dc6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	603b      	str	r3, [r7, #0]
}
 800dc68:	bf00      	nop
 800dc6a:	bf00      	nop
 800dc6c:	e7fd      	b.n	800dc6a <vPortValidateInterruptPriority+0x62>
	}
 800dc6e:	bf00      	nop
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	e000e3f0 	.word	0xe000e3f0
 800dc80:	20001c7c 	.word	0x20001c7c
 800dc84:	e000ed0c 	.word	0xe000ed0c
 800dc88:	20001c80 	.word	0x20001c80

0800dc8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08a      	sub	sp, #40	@ 0x28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc94:	2300      	movs	r3, #0
 800dc96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc98:	f7fe fbb8 	bl	800c40c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc9c:	4b5c      	ldr	r3, [pc, #368]	@ (800de10 <pvPortMalloc+0x184>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dca4:	f000 f924 	bl	800def0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dca8:	4b5a      	ldr	r3, [pc, #360]	@ (800de14 <pvPortMalloc+0x188>)
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4013      	ands	r3, r2
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f040 8095 	bne.w	800dde0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d01e      	beq.n	800dcfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dcbc:	2208      	movs	r2, #8
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d015      	beq.n	800dcfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f023 0307 	bic.w	r3, r3, #7
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f003 0307 	and.w	r3, r3, #7
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00b      	beq.n	800dcfa <pvPortMalloc+0x6e>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	617b      	str	r3, [r7, #20]
}
 800dcf4:	bf00      	nop
 800dcf6:	bf00      	nop
 800dcf8:	e7fd      	b.n	800dcf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d06f      	beq.n	800dde0 <pvPortMalloc+0x154>
 800dd00:	4b45      	ldr	r3, [pc, #276]	@ (800de18 <pvPortMalloc+0x18c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d86a      	bhi.n	800dde0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dd0a:	4b44      	ldr	r3, [pc, #272]	@ (800de1c <pvPortMalloc+0x190>)
 800dd0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dd0e:	4b43      	ldr	r3, [pc, #268]	@ (800de1c <pvPortMalloc+0x190>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd14:	e004      	b.n	800dd20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d903      	bls.n	800dd32 <pvPortMalloc+0xa6>
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1f1      	bne.n	800dd16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dd32:	4b37      	ldr	r3, [pc, #220]	@ (800de10 <pvPortMalloc+0x184>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d051      	beq.n	800dde0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2208      	movs	r2, #8
 800dd42:	4413      	add	r3, r2
 800dd44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd50:	685a      	ldr	r2, [r3, #4]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	1ad2      	subs	r2, r2, r3
 800dd56:	2308      	movs	r3, #8
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d920      	bls.n	800dda0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dd5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4413      	add	r3, r2
 800dd64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	f003 0307 	and.w	r3, r3, #7
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00b      	beq.n	800dd88 <pvPortMalloc+0xfc>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	613b      	str	r3, [r7, #16]
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	e7fd      	b.n	800dd84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	1ad2      	subs	r2, r2, r3
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd9a:	69b8      	ldr	r0, [r7, #24]
 800dd9c:	f000 f90a 	bl	800dfb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dda0:	4b1d      	ldr	r3, [pc, #116]	@ (800de18 <pvPortMalloc+0x18c>)
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	4a1b      	ldr	r2, [pc, #108]	@ (800de18 <pvPortMalloc+0x18c>)
 800ddac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ddae:	4b1a      	ldr	r3, [pc, #104]	@ (800de18 <pvPortMalloc+0x18c>)
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	4b1b      	ldr	r3, [pc, #108]	@ (800de20 <pvPortMalloc+0x194>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d203      	bcs.n	800ddc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ddba:	4b17      	ldr	r3, [pc, #92]	@ (800de18 <pvPortMalloc+0x18c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a18      	ldr	r2, [pc, #96]	@ (800de20 <pvPortMalloc+0x194>)
 800ddc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	4b13      	ldr	r3, [pc, #76]	@ (800de14 <pvPortMalloc+0x188>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	431a      	orrs	r2, r3
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ddd6:	4b13      	ldr	r3, [pc, #76]	@ (800de24 <pvPortMalloc+0x198>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3301      	adds	r3, #1
 800dddc:	4a11      	ldr	r2, [pc, #68]	@ (800de24 <pvPortMalloc+0x198>)
 800ddde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dde0:	f7fe fb22 	bl	800c428 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f003 0307 	and.w	r3, r3, #7
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00b      	beq.n	800de06 <pvPortMalloc+0x17a>
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	60fb      	str	r3, [r7, #12]
}
 800de00:	bf00      	nop
 800de02:	bf00      	nop
 800de04:	e7fd      	b.n	800de02 <pvPortMalloc+0x176>
	return pvReturn;
 800de06:	69fb      	ldr	r3, [r7, #28]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3728      	adds	r7, #40	@ 0x28
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	200106ec 	.word	0x200106ec
 800de14:	20010700 	.word	0x20010700
 800de18:	200106f0 	.word	0x200106f0
 800de1c:	200106e4 	.word	0x200106e4
 800de20:	200106f4 	.word	0x200106f4
 800de24:	200106f8 	.word	0x200106f8

0800de28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d04f      	beq.n	800deda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800de3a:	2308      	movs	r3, #8
 800de3c:	425b      	negs	r3, r3
 800de3e:	697a      	ldr	r2, [r7, #20]
 800de40:	4413      	add	r3, r2
 800de42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	4b25      	ldr	r3, [pc, #148]	@ (800dee4 <vPortFree+0xbc>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4013      	ands	r3, r2
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10b      	bne.n	800de6e <vPortFree+0x46>
	__asm volatile
 800de56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	60fb      	str	r3, [r7, #12]
}
 800de68:	bf00      	nop
 800de6a:	bf00      	nop
 800de6c:	e7fd      	b.n	800de6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00b      	beq.n	800de8e <vPortFree+0x66>
	__asm volatile
 800de76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7a:	f383 8811 	msr	BASEPRI, r3
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	60bb      	str	r3, [r7, #8]
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	e7fd      	b.n	800de8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	4b14      	ldr	r3, [pc, #80]	@ (800dee4 <vPortFree+0xbc>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4013      	ands	r3, r2
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d01e      	beq.n	800deda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d11a      	bne.n	800deda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	4b0e      	ldr	r3, [pc, #56]	@ (800dee4 <vPortFree+0xbc>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	43db      	mvns	r3, r3
 800deae:	401a      	ands	r2, r3
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800deb4:	f7fe faaa 	bl	800c40c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	685a      	ldr	r2, [r3, #4]
 800debc:	4b0a      	ldr	r3, [pc, #40]	@ (800dee8 <vPortFree+0xc0>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4413      	add	r3, r2
 800dec2:	4a09      	ldr	r2, [pc, #36]	@ (800dee8 <vPortFree+0xc0>)
 800dec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dec6:	6938      	ldr	r0, [r7, #16]
 800dec8:	f000 f874 	bl	800dfb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800decc:	4b07      	ldr	r3, [pc, #28]	@ (800deec <vPortFree+0xc4>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3301      	adds	r3, #1
 800ded2:	4a06      	ldr	r2, [pc, #24]	@ (800deec <vPortFree+0xc4>)
 800ded4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ded6:	f7fe faa7 	bl	800c428 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800deda:	bf00      	nop
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	20010700 	.word	0x20010700
 800dee8:	200106f0 	.word	0x200106f0
 800deec:	200106fc 	.word	0x200106fc

0800def0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800def6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800defa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800defc:	4b27      	ldr	r3, [pc, #156]	@ (800df9c <prvHeapInit+0xac>)
 800defe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00c      	beq.n	800df24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	3307      	adds	r3, #7
 800df0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f023 0307 	bic.w	r3, r3, #7
 800df16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	4a1f      	ldr	r2, [pc, #124]	@ (800df9c <prvHeapInit+0xac>)
 800df20:	4413      	add	r3, r2
 800df22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800df28:	4a1d      	ldr	r2, [pc, #116]	@ (800dfa0 <prvHeapInit+0xb0>)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800df2e:	4b1c      	ldr	r3, [pc, #112]	@ (800dfa0 <prvHeapInit+0xb0>)
 800df30:	2200      	movs	r2, #0
 800df32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	4413      	add	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800df3c:	2208      	movs	r2, #8
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	1a9b      	subs	r3, r3, r2
 800df42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f023 0307 	bic.w	r3, r3, #7
 800df4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	4a15      	ldr	r2, [pc, #84]	@ (800dfa4 <prvHeapInit+0xb4>)
 800df50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800df52:	4b14      	ldr	r3, [pc, #80]	@ (800dfa4 <prvHeapInit+0xb4>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2200      	movs	r2, #0
 800df58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800df5a:	4b12      	ldr	r3, [pc, #72]	@ (800dfa4 <prvHeapInit+0xb4>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2200      	movs	r2, #0
 800df60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	1ad2      	subs	r2, r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800df70:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa4 <prvHeapInit+0xb4>)
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	4a0a      	ldr	r2, [pc, #40]	@ (800dfa8 <prvHeapInit+0xb8>)
 800df7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	4a09      	ldr	r2, [pc, #36]	@ (800dfac <prvHeapInit+0xbc>)
 800df86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800df88:	4b09      	ldr	r3, [pc, #36]	@ (800dfb0 <prvHeapInit+0xc0>)
 800df8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800df8e:	601a      	str	r2, [r3, #0]
}
 800df90:	bf00      	nop
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr
 800df9c:	20001c84 	.word	0x20001c84
 800dfa0:	200106e4 	.word	0x200106e4
 800dfa4:	200106ec 	.word	0x200106ec
 800dfa8:	200106f4 	.word	0x200106f4
 800dfac:	200106f0 	.word	0x200106f0
 800dfb0:	20010700 	.word	0x20010700

0800dfb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dfbc:	4b28      	ldr	r3, [pc, #160]	@ (800e060 <prvInsertBlockIntoFreeList+0xac>)
 800dfbe:	60fb      	str	r3, [r7, #12]
 800dfc0:	e002      	b.n	800dfc8 <prvInsertBlockIntoFreeList+0x14>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	60fb      	str	r3, [r7, #12]
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d8f7      	bhi.n	800dfc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	4413      	add	r3, r2
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d108      	bne.n	800dff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	441a      	add	r2, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	441a      	add	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	429a      	cmp	r2, r3
 800e008:	d118      	bne.n	800e03c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	4b15      	ldr	r3, [pc, #84]	@ (800e064 <prvInsertBlockIntoFreeList+0xb0>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	429a      	cmp	r2, r3
 800e014:	d00d      	beq.n	800e032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	685a      	ldr	r2, [r3, #4]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	441a      	add	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	e008      	b.n	800e044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e032:	4b0c      	ldr	r3, [pc, #48]	@ (800e064 <prvInsertBlockIntoFreeList+0xb0>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	e003      	b.n	800e044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d002      	beq.n	800e052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e052:	bf00      	nop
 800e054:	3714      	adds	r7, #20
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop
 800e060:	200106e4 	.word	0x200106e4
 800e064:	200106ec 	.word	0x200106ec

0800e068 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e07c:	4619      	mov	r1, r3
 800e07e:	4610      	mov	r0, r2
 800e080:	f7fb fe4d 	bl	8009d1e <USBD_LL_SetupStage>
}
 800e084:	bf00      	nop
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e09e:	78fa      	ldrb	r2, [r7, #3]
 800e0a0:	6879      	ldr	r1, [r7, #4]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	00db      	lsls	r3, r3, #3
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	440b      	add	r3, r1
 800e0ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	78fb      	ldrb	r3, [r7, #3]
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	f7fb fe87 	bl	8009dc8 <USBD_LL_DataOutStage>
}
 800e0ba:	bf00      	nop
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b082      	sub	sp, #8
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e0d4:	78fa      	ldrb	r2, [r7, #3]
 800e0d6:	6879      	ldr	r1, [r7, #4]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	4413      	add	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	440b      	add	r3, r1
 800e0e2:	3320      	adds	r3, #32
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	78fb      	ldrb	r3, [r7, #3]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	f7fb ff20 	bl	8009f2e <USBD_LL_DataInStage>
}
 800e0ee:	bf00      	nop
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b082      	sub	sp, #8
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e104:	4618      	mov	r0, r3
 800e106:	f7fc f85a 	bl	800a1be <USBD_LL_SOF>
}
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b084      	sub	sp, #16
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e11a:	2301      	movs	r3, #1
 800e11c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	79db      	ldrb	r3, [r3, #7]
 800e122:	2b02      	cmp	r3, #2
 800e124:	d001      	beq.n	800e12a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e126:	f7f6 fc0b 	bl	8004940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e130:	7bfa      	ldrb	r2, [r7, #15]
 800e132:	4611      	mov	r1, r2
 800e134:	4618      	mov	r0, r3
 800e136:	f7fb fffe 	bl	800a136 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e140:	4618      	mov	r0, r3
 800e142:	f7fb ffa6 	bl	800a092 <USBD_LL_Reset>
}
 800e146:	bf00      	nop
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
	...

0800e150 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fb fff9 	bl	800a156 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e176:	f043 0301 	orr.w	r3, r3, #1
 800e17a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	7adb      	ldrb	r3, [r3, #11]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d005      	beq.n	800e190 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e184:	4b04      	ldr	r3, [pc, #16]	@ (800e198 <HAL_PCD_SuspendCallback+0x48>)
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	4a03      	ldr	r2, [pc, #12]	@ (800e198 <HAL_PCD_SuspendCallback+0x48>)
 800e18a:	f043 0306 	orr.w	r3, r3, #6
 800e18e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e190:	bf00      	nop
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	e000ed00 	.word	0xe000ed00

0800e19c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fb ffef 	bl	800a18e <USBD_LL_Resume>
}
 800e1b0:	bf00      	nop
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fc f847 	bl	800a262 <USBD_LL_IsoOUTIncomplete>
}
 800e1d4:	bf00      	nop
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1ee:	78fa      	ldrb	r2, [r7, #3]
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fc f803 	bl	800a1fe <USBD_LL_IsoINIncomplete>
}
 800e1f8:	bf00      	nop
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fc f859 	bl	800a2c6 <USBD_LL_DevConnected>
}
 800e214:	bf00      	nop
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fc f856 	bl	800a2dc <USBD_LL_DevDisconnected>
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	4608      	mov	r0, r1
 800e242:	4611      	mov	r1, r2
 800e244:	461a      	mov	r2, r3
 800e246:	4603      	mov	r3, r0
 800e248:	70fb      	strb	r3, [r7, #3]
 800e24a:	460b      	mov	r3, r1
 800e24c:	70bb      	strb	r3, [r7, #2]
 800e24e:	4613      	mov	r3, r2
 800e250:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e252:	2300      	movs	r3, #0
 800e254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e256:	2300      	movs	r3, #0
 800e258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e260:	78bb      	ldrb	r3, [r7, #2]
 800e262:	883a      	ldrh	r2, [r7, #0]
 800e264:	78f9      	ldrb	r1, [r7, #3]
 800e266:	f7f7 ff32 	bl	80060ce <HAL_PCD_EP_Open>
 800e26a:	4603      	mov	r3, r0
 800e26c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e26e:	7bfb      	ldrb	r3, [r7, #15]
 800e270:	4618      	mov	r0, r3
 800e272:	f000 f8d3 	bl	800e41c <USBD_Get_USB_Status>
 800e276:	4603      	mov	r3, r0
 800e278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	460b      	mov	r3, r1
 800e28e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e29e:	78fa      	ldrb	r2, [r7, #3]
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7f7 fff2 	bl	800628c <HAL_PCD_EP_SetStall>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 f8b4 	bl	800e41c <USBD_Get_USB_Status>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b084      	sub	sp, #16
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2dc:	78fa      	ldrb	r2, [r7, #3]
 800e2de:	4611      	mov	r1, r2
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f8 f836 	bl	8006352 <HAL_PCD_EP_ClrStall>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f000 f895 	bl	800e41c <USBD_Get_USB_Status>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	460b      	mov	r3, r1
 800e30a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e312:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	da0b      	bge.n	800e334 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e31c:	78fb      	ldrb	r3, [r7, #3]
 800e31e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e322:	68f9      	ldr	r1, [r7, #12]
 800e324:	4613      	mov	r3, r2
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	4413      	add	r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	440b      	add	r3, r1
 800e32e:	3316      	adds	r3, #22
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	e00b      	b.n	800e34c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e334:	78fb      	ldrb	r3, [r7, #3]
 800e336:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e33a:	68f9      	ldr	r1, [r7, #12]
 800e33c:	4613      	mov	r3, r2
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	440b      	add	r3, r1
 800e346:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e34a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	460b      	mov	r3, r1
 800e362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e368:	2300      	movs	r3, #0
 800e36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e372:	78fa      	ldrb	r2, [r7, #3]
 800e374:	4611      	mov	r1, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f7f7 fe85 	bl	8006086 <HAL_PCD_SetAddress>
 800e37c:	4603      	mov	r3, r0
 800e37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 f84a 	bl	800e41c <USBD_Get_USB_Status>
 800e388:	4603      	mov	r3, r0
 800e38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b086      	sub	sp, #24
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	60f8      	str	r0, [r7, #12]
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	603b      	str	r3, [r7, #0]
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3b4:	7af9      	ldrb	r1, [r7, #11]
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	f7f7 ff2d 	bl	8006218 <HAL_PCD_EP_Transmit>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 f829 	bl	800e41c <USBD_Get_USB_Status>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	607a      	str	r2, [r7, #4]
 800e3e2:	603b      	str	r3, [r7, #0]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3f6:	7af9      	ldrb	r1, [r7, #11]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	f7f7 fed1 	bl	80061a2 <HAL_PCD_EP_Receive>
 800e400:	4603      	mov	r3, r0
 800e402:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	4618      	mov	r0, r3
 800e408:	f000 f808 	bl	800e41c <USBD_Get_USB_Status>
 800e40c:	4603      	mov	r3, r0
 800e40e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e410:	7dbb      	ldrb	r3, [r7, #22]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3718      	adds	r7, #24
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
	...

0800e41c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b085      	sub	sp, #20
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	2b03      	cmp	r3, #3
 800e42e:	d817      	bhi.n	800e460 <USBD_Get_USB_Status+0x44>
 800e430:	a201      	add	r2, pc, #4	@ (adr r2, 800e438 <USBD_Get_USB_Status+0x1c>)
 800e432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e436:	bf00      	nop
 800e438:	0800e449 	.word	0x0800e449
 800e43c:	0800e44f 	.word	0x0800e44f
 800e440:	0800e455 	.word	0x0800e455
 800e444:	0800e45b 	.word	0x0800e45b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e448:	2300      	movs	r3, #0
 800e44a:	73fb      	strb	r3, [r7, #15]
    break;
 800e44c:	e00b      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e44e:	2303      	movs	r3, #3
 800e450:	73fb      	strb	r3, [r7, #15]
    break;
 800e452:	e008      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e454:	2301      	movs	r3, #1
 800e456:	73fb      	strb	r3, [r7, #15]
    break;
 800e458:	e005      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e45a:	2303      	movs	r3, #3
 800e45c:	73fb      	strb	r3, [r7, #15]
    break;
 800e45e:	e002      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e460:	2303      	movs	r3, #3
 800e462:	73fb      	strb	r3, [r7, #15]
    break;
 800e464:	bf00      	nop
  }
  return usb_status;
 800e466:	7bfb      	ldrb	r3, [r7, #15]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <malloc>:
 800e474:	4b02      	ldr	r3, [pc, #8]	@ (800e480 <malloc+0xc>)
 800e476:	4601      	mov	r1, r0
 800e478:	6818      	ldr	r0, [r3, #0]
 800e47a:	f000 b82d 	b.w	800e4d8 <_malloc_r>
 800e47e:	bf00      	nop
 800e480:	20000010 	.word	0x20000010

0800e484 <free>:
 800e484:	4b02      	ldr	r3, [pc, #8]	@ (800e490 <free+0xc>)
 800e486:	4601      	mov	r1, r0
 800e488:	6818      	ldr	r0, [r3, #0]
 800e48a:	f000 b923 	b.w	800e6d4 <_free_r>
 800e48e:	bf00      	nop
 800e490:	20000010 	.word	0x20000010

0800e494 <sbrk_aligned>:
 800e494:	b570      	push	{r4, r5, r6, lr}
 800e496:	4e0f      	ldr	r6, [pc, #60]	@ (800e4d4 <sbrk_aligned+0x40>)
 800e498:	460c      	mov	r4, r1
 800e49a:	6831      	ldr	r1, [r6, #0]
 800e49c:	4605      	mov	r5, r0
 800e49e:	b911      	cbnz	r1, 800e4a6 <sbrk_aligned+0x12>
 800e4a0:	f000 f8ce 	bl	800e640 <_sbrk_r>
 800e4a4:	6030      	str	r0, [r6, #0]
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	f000 f8c9 	bl	800e640 <_sbrk_r>
 800e4ae:	1c43      	adds	r3, r0, #1
 800e4b0:	d103      	bne.n	800e4ba <sbrk_aligned+0x26>
 800e4b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ba:	1cc4      	adds	r4, r0, #3
 800e4bc:	f024 0403 	bic.w	r4, r4, #3
 800e4c0:	42a0      	cmp	r0, r4
 800e4c2:	d0f8      	beq.n	800e4b6 <sbrk_aligned+0x22>
 800e4c4:	1a21      	subs	r1, r4, r0
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 f8ba 	bl	800e640 <_sbrk_r>
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	d1f2      	bne.n	800e4b6 <sbrk_aligned+0x22>
 800e4d0:	e7ef      	b.n	800e4b2 <sbrk_aligned+0x1e>
 800e4d2:	bf00      	nop
 800e4d4:	20010be8 	.word	0x20010be8

0800e4d8 <_malloc_r>:
 800e4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4dc:	1ccd      	adds	r5, r1, #3
 800e4de:	f025 0503 	bic.w	r5, r5, #3
 800e4e2:	3508      	adds	r5, #8
 800e4e4:	2d0c      	cmp	r5, #12
 800e4e6:	bf38      	it	cc
 800e4e8:	250c      	movcc	r5, #12
 800e4ea:	2d00      	cmp	r5, #0
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	db01      	blt.n	800e4f4 <_malloc_r+0x1c>
 800e4f0:	42a9      	cmp	r1, r5
 800e4f2:	d904      	bls.n	800e4fe <_malloc_r+0x26>
 800e4f4:	230c      	movs	r3, #12
 800e4f6:	6033      	str	r3, [r6, #0]
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e5d4 <_malloc_r+0xfc>
 800e502:	f000 f869 	bl	800e5d8 <__malloc_lock>
 800e506:	f8d8 3000 	ldr.w	r3, [r8]
 800e50a:	461c      	mov	r4, r3
 800e50c:	bb44      	cbnz	r4, 800e560 <_malloc_r+0x88>
 800e50e:	4629      	mov	r1, r5
 800e510:	4630      	mov	r0, r6
 800e512:	f7ff ffbf 	bl	800e494 <sbrk_aligned>
 800e516:	1c43      	adds	r3, r0, #1
 800e518:	4604      	mov	r4, r0
 800e51a:	d158      	bne.n	800e5ce <_malloc_r+0xf6>
 800e51c:	f8d8 4000 	ldr.w	r4, [r8]
 800e520:	4627      	mov	r7, r4
 800e522:	2f00      	cmp	r7, #0
 800e524:	d143      	bne.n	800e5ae <_malloc_r+0xd6>
 800e526:	2c00      	cmp	r4, #0
 800e528:	d04b      	beq.n	800e5c2 <_malloc_r+0xea>
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	4639      	mov	r1, r7
 800e52e:	4630      	mov	r0, r6
 800e530:	eb04 0903 	add.w	r9, r4, r3
 800e534:	f000 f884 	bl	800e640 <_sbrk_r>
 800e538:	4581      	cmp	r9, r0
 800e53a:	d142      	bne.n	800e5c2 <_malloc_r+0xea>
 800e53c:	6821      	ldr	r1, [r4, #0]
 800e53e:	1a6d      	subs	r5, r5, r1
 800e540:	4629      	mov	r1, r5
 800e542:	4630      	mov	r0, r6
 800e544:	f7ff ffa6 	bl	800e494 <sbrk_aligned>
 800e548:	3001      	adds	r0, #1
 800e54a:	d03a      	beq.n	800e5c2 <_malloc_r+0xea>
 800e54c:	6823      	ldr	r3, [r4, #0]
 800e54e:	442b      	add	r3, r5
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	f8d8 3000 	ldr.w	r3, [r8]
 800e556:	685a      	ldr	r2, [r3, #4]
 800e558:	bb62      	cbnz	r2, 800e5b4 <_malloc_r+0xdc>
 800e55a:	f8c8 7000 	str.w	r7, [r8]
 800e55e:	e00f      	b.n	800e580 <_malloc_r+0xa8>
 800e560:	6822      	ldr	r2, [r4, #0]
 800e562:	1b52      	subs	r2, r2, r5
 800e564:	d420      	bmi.n	800e5a8 <_malloc_r+0xd0>
 800e566:	2a0b      	cmp	r2, #11
 800e568:	d917      	bls.n	800e59a <_malloc_r+0xc2>
 800e56a:	1961      	adds	r1, r4, r5
 800e56c:	42a3      	cmp	r3, r4
 800e56e:	6025      	str	r5, [r4, #0]
 800e570:	bf18      	it	ne
 800e572:	6059      	strne	r1, [r3, #4]
 800e574:	6863      	ldr	r3, [r4, #4]
 800e576:	bf08      	it	eq
 800e578:	f8c8 1000 	streq.w	r1, [r8]
 800e57c:	5162      	str	r2, [r4, r5]
 800e57e:	604b      	str	r3, [r1, #4]
 800e580:	4630      	mov	r0, r6
 800e582:	f000 f82f 	bl	800e5e4 <__malloc_unlock>
 800e586:	f104 000b 	add.w	r0, r4, #11
 800e58a:	1d23      	adds	r3, r4, #4
 800e58c:	f020 0007 	bic.w	r0, r0, #7
 800e590:	1ac2      	subs	r2, r0, r3
 800e592:	bf1c      	itt	ne
 800e594:	1a1b      	subne	r3, r3, r0
 800e596:	50a3      	strne	r3, [r4, r2]
 800e598:	e7af      	b.n	800e4fa <_malloc_r+0x22>
 800e59a:	6862      	ldr	r2, [r4, #4]
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	bf0c      	ite	eq
 800e5a0:	f8c8 2000 	streq.w	r2, [r8]
 800e5a4:	605a      	strne	r2, [r3, #4]
 800e5a6:	e7eb      	b.n	800e580 <_malloc_r+0xa8>
 800e5a8:	4623      	mov	r3, r4
 800e5aa:	6864      	ldr	r4, [r4, #4]
 800e5ac:	e7ae      	b.n	800e50c <_malloc_r+0x34>
 800e5ae:	463c      	mov	r4, r7
 800e5b0:	687f      	ldr	r7, [r7, #4]
 800e5b2:	e7b6      	b.n	800e522 <_malloc_r+0x4a>
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	42a3      	cmp	r3, r4
 800e5ba:	d1fb      	bne.n	800e5b4 <_malloc_r+0xdc>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	6053      	str	r3, [r2, #4]
 800e5c0:	e7de      	b.n	800e580 <_malloc_r+0xa8>
 800e5c2:	230c      	movs	r3, #12
 800e5c4:	6033      	str	r3, [r6, #0]
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f000 f80c 	bl	800e5e4 <__malloc_unlock>
 800e5cc:	e794      	b.n	800e4f8 <_malloc_r+0x20>
 800e5ce:	6005      	str	r5, [r0, #0]
 800e5d0:	e7d6      	b.n	800e580 <_malloc_r+0xa8>
 800e5d2:	bf00      	nop
 800e5d4:	20010bec 	.word	0x20010bec

0800e5d8 <__malloc_lock>:
 800e5d8:	4801      	ldr	r0, [pc, #4]	@ (800e5e0 <__malloc_lock+0x8>)
 800e5da:	f000 b86b 	b.w	800e6b4 <__retarget_lock_acquire_recursive>
 800e5de:	bf00      	nop
 800e5e0:	20010d2c 	.word	0x20010d2c

0800e5e4 <__malloc_unlock>:
 800e5e4:	4801      	ldr	r0, [pc, #4]	@ (800e5ec <__malloc_unlock+0x8>)
 800e5e6:	f000 b866 	b.w	800e6b6 <__retarget_lock_release_recursive>
 800e5ea:	bf00      	nop
 800e5ec:	20010d2c 	.word	0x20010d2c

0800e5f0 <siprintf>:
 800e5f0:	b40e      	push	{r1, r2, r3}
 800e5f2:	b500      	push	{lr}
 800e5f4:	b09c      	sub	sp, #112	@ 0x70
 800e5f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e5f8:	9002      	str	r0, [sp, #8]
 800e5fa:	9006      	str	r0, [sp, #24]
 800e5fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e600:	4809      	ldr	r0, [pc, #36]	@ (800e628 <siprintf+0x38>)
 800e602:	9107      	str	r1, [sp, #28]
 800e604:	9104      	str	r1, [sp, #16]
 800e606:	4909      	ldr	r1, [pc, #36]	@ (800e62c <siprintf+0x3c>)
 800e608:	f853 2b04 	ldr.w	r2, [r3], #4
 800e60c:	9105      	str	r1, [sp, #20]
 800e60e:	6800      	ldr	r0, [r0, #0]
 800e610:	9301      	str	r3, [sp, #4]
 800e612:	a902      	add	r1, sp, #8
 800e614:	f000 f904 	bl	800e820 <_svfiprintf_r>
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	2200      	movs	r2, #0
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	b01c      	add	sp, #112	@ 0x70
 800e620:	f85d eb04 	ldr.w	lr, [sp], #4
 800e624:	b003      	add	sp, #12
 800e626:	4770      	bx	lr
 800e628:	20000010 	.word	0x20000010
 800e62c:	ffff0208 	.word	0xffff0208

0800e630 <memset>:
 800e630:	4402      	add	r2, r0
 800e632:	4603      	mov	r3, r0
 800e634:	4293      	cmp	r3, r2
 800e636:	d100      	bne.n	800e63a <memset+0xa>
 800e638:	4770      	bx	lr
 800e63a:	f803 1b01 	strb.w	r1, [r3], #1
 800e63e:	e7f9      	b.n	800e634 <memset+0x4>

0800e640 <_sbrk_r>:
 800e640:	b538      	push	{r3, r4, r5, lr}
 800e642:	4d06      	ldr	r5, [pc, #24]	@ (800e65c <_sbrk_r+0x1c>)
 800e644:	2300      	movs	r3, #0
 800e646:	4604      	mov	r4, r0
 800e648:	4608      	mov	r0, r1
 800e64a:	602b      	str	r3, [r5, #0]
 800e64c:	f7f6 fbae 	bl	8004dac <_sbrk>
 800e650:	1c43      	adds	r3, r0, #1
 800e652:	d102      	bne.n	800e65a <_sbrk_r+0x1a>
 800e654:	682b      	ldr	r3, [r5, #0]
 800e656:	b103      	cbz	r3, 800e65a <_sbrk_r+0x1a>
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	bd38      	pop	{r3, r4, r5, pc}
 800e65c:	20010d28 	.word	0x20010d28

0800e660 <__errno>:
 800e660:	4b01      	ldr	r3, [pc, #4]	@ (800e668 <__errno+0x8>)
 800e662:	6818      	ldr	r0, [r3, #0]
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	20000010 	.word	0x20000010

0800e66c <__libc_init_array>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	4d0d      	ldr	r5, [pc, #52]	@ (800e6a4 <__libc_init_array+0x38>)
 800e670:	4c0d      	ldr	r4, [pc, #52]	@ (800e6a8 <__libc_init_array+0x3c>)
 800e672:	1b64      	subs	r4, r4, r5
 800e674:	10a4      	asrs	r4, r4, #2
 800e676:	2600      	movs	r6, #0
 800e678:	42a6      	cmp	r6, r4
 800e67a:	d109      	bne.n	800e690 <__libc_init_array+0x24>
 800e67c:	4d0b      	ldr	r5, [pc, #44]	@ (800e6ac <__libc_init_array+0x40>)
 800e67e:	4c0c      	ldr	r4, [pc, #48]	@ (800e6b0 <__libc_init_array+0x44>)
 800e680:	f000 fba8 	bl	800edd4 <_init>
 800e684:	1b64      	subs	r4, r4, r5
 800e686:	10a4      	asrs	r4, r4, #2
 800e688:	2600      	movs	r6, #0
 800e68a:	42a6      	cmp	r6, r4
 800e68c:	d105      	bne.n	800e69a <__libc_init_array+0x2e>
 800e68e:	bd70      	pop	{r4, r5, r6, pc}
 800e690:	f855 3b04 	ldr.w	r3, [r5], #4
 800e694:	4798      	blx	r3
 800e696:	3601      	adds	r6, #1
 800e698:	e7ee      	b.n	800e678 <__libc_init_array+0xc>
 800e69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e69e:	4798      	blx	r3
 800e6a0:	3601      	adds	r6, #1
 800e6a2:	e7f2      	b.n	800e68a <__libc_init_array+0x1e>
 800e6a4:	0800f2c4 	.word	0x0800f2c4
 800e6a8:	0800f2c4 	.word	0x0800f2c4
 800e6ac:	0800f2c4 	.word	0x0800f2c4
 800e6b0:	0800f2c8 	.word	0x0800f2c8

0800e6b4 <__retarget_lock_acquire_recursive>:
 800e6b4:	4770      	bx	lr

0800e6b6 <__retarget_lock_release_recursive>:
 800e6b6:	4770      	bx	lr

0800e6b8 <memcpy>:
 800e6b8:	440a      	add	r2, r1
 800e6ba:	4291      	cmp	r1, r2
 800e6bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6c0:	d100      	bne.n	800e6c4 <memcpy+0xc>
 800e6c2:	4770      	bx	lr
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6ce:	4291      	cmp	r1, r2
 800e6d0:	d1f9      	bne.n	800e6c6 <memcpy+0xe>
 800e6d2:	bd10      	pop	{r4, pc}

0800e6d4 <_free_r>:
 800e6d4:	b538      	push	{r3, r4, r5, lr}
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	2900      	cmp	r1, #0
 800e6da:	d041      	beq.n	800e760 <_free_r+0x8c>
 800e6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6e0:	1f0c      	subs	r4, r1, #4
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	bfb8      	it	lt
 800e6e6:	18e4      	addlt	r4, r4, r3
 800e6e8:	f7ff ff76 	bl	800e5d8 <__malloc_lock>
 800e6ec:	4a1d      	ldr	r2, [pc, #116]	@ (800e764 <_free_r+0x90>)
 800e6ee:	6813      	ldr	r3, [r2, #0]
 800e6f0:	b933      	cbnz	r3, 800e700 <_free_r+0x2c>
 800e6f2:	6063      	str	r3, [r4, #4]
 800e6f4:	6014      	str	r4, [r2, #0]
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6fc:	f7ff bf72 	b.w	800e5e4 <__malloc_unlock>
 800e700:	42a3      	cmp	r3, r4
 800e702:	d908      	bls.n	800e716 <_free_r+0x42>
 800e704:	6820      	ldr	r0, [r4, #0]
 800e706:	1821      	adds	r1, r4, r0
 800e708:	428b      	cmp	r3, r1
 800e70a:	bf01      	itttt	eq
 800e70c:	6819      	ldreq	r1, [r3, #0]
 800e70e:	685b      	ldreq	r3, [r3, #4]
 800e710:	1809      	addeq	r1, r1, r0
 800e712:	6021      	streq	r1, [r4, #0]
 800e714:	e7ed      	b.n	800e6f2 <_free_r+0x1e>
 800e716:	461a      	mov	r2, r3
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	b10b      	cbz	r3, 800e720 <_free_r+0x4c>
 800e71c:	42a3      	cmp	r3, r4
 800e71e:	d9fa      	bls.n	800e716 <_free_r+0x42>
 800e720:	6811      	ldr	r1, [r2, #0]
 800e722:	1850      	adds	r0, r2, r1
 800e724:	42a0      	cmp	r0, r4
 800e726:	d10b      	bne.n	800e740 <_free_r+0x6c>
 800e728:	6820      	ldr	r0, [r4, #0]
 800e72a:	4401      	add	r1, r0
 800e72c:	1850      	adds	r0, r2, r1
 800e72e:	4283      	cmp	r3, r0
 800e730:	6011      	str	r1, [r2, #0]
 800e732:	d1e0      	bne.n	800e6f6 <_free_r+0x22>
 800e734:	6818      	ldr	r0, [r3, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	6053      	str	r3, [r2, #4]
 800e73a:	4408      	add	r0, r1
 800e73c:	6010      	str	r0, [r2, #0]
 800e73e:	e7da      	b.n	800e6f6 <_free_r+0x22>
 800e740:	d902      	bls.n	800e748 <_free_r+0x74>
 800e742:	230c      	movs	r3, #12
 800e744:	602b      	str	r3, [r5, #0]
 800e746:	e7d6      	b.n	800e6f6 <_free_r+0x22>
 800e748:	6820      	ldr	r0, [r4, #0]
 800e74a:	1821      	adds	r1, r4, r0
 800e74c:	428b      	cmp	r3, r1
 800e74e:	bf04      	itt	eq
 800e750:	6819      	ldreq	r1, [r3, #0]
 800e752:	685b      	ldreq	r3, [r3, #4]
 800e754:	6063      	str	r3, [r4, #4]
 800e756:	bf04      	itt	eq
 800e758:	1809      	addeq	r1, r1, r0
 800e75a:	6021      	streq	r1, [r4, #0]
 800e75c:	6054      	str	r4, [r2, #4]
 800e75e:	e7ca      	b.n	800e6f6 <_free_r+0x22>
 800e760:	bd38      	pop	{r3, r4, r5, pc}
 800e762:	bf00      	nop
 800e764:	20010bec 	.word	0x20010bec

0800e768 <__ssputs_r>:
 800e768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e76c:	688e      	ldr	r6, [r1, #8]
 800e76e:	461f      	mov	r7, r3
 800e770:	42be      	cmp	r6, r7
 800e772:	680b      	ldr	r3, [r1, #0]
 800e774:	4682      	mov	sl, r0
 800e776:	460c      	mov	r4, r1
 800e778:	4690      	mov	r8, r2
 800e77a:	d82d      	bhi.n	800e7d8 <__ssputs_r+0x70>
 800e77c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e784:	d026      	beq.n	800e7d4 <__ssputs_r+0x6c>
 800e786:	6965      	ldr	r5, [r4, #20]
 800e788:	6909      	ldr	r1, [r1, #16]
 800e78a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e78e:	eba3 0901 	sub.w	r9, r3, r1
 800e792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e796:	1c7b      	adds	r3, r7, #1
 800e798:	444b      	add	r3, r9
 800e79a:	106d      	asrs	r5, r5, #1
 800e79c:	429d      	cmp	r5, r3
 800e79e:	bf38      	it	cc
 800e7a0:	461d      	movcc	r5, r3
 800e7a2:	0553      	lsls	r3, r2, #21
 800e7a4:	d527      	bpl.n	800e7f6 <__ssputs_r+0x8e>
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f7ff fe96 	bl	800e4d8 <_malloc_r>
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	b360      	cbz	r0, 800e80a <__ssputs_r+0xa2>
 800e7b0:	6921      	ldr	r1, [r4, #16]
 800e7b2:	464a      	mov	r2, r9
 800e7b4:	f7ff ff80 	bl	800e6b8 <memcpy>
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c2:	81a3      	strh	r3, [r4, #12]
 800e7c4:	6126      	str	r6, [r4, #16]
 800e7c6:	6165      	str	r5, [r4, #20]
 800e7c8:	444e      	add	r6, r9
 800e7ca:	eba5 0509 	sub.w	r5, r5, r9
 800e7ce:	6026      	str	r6, [r4, #0]
 800e7d0:	60a5      	str	r5, [r4, #8]
 800e7d2:	463e      	mov	r6, r7
 800e7d4:	42be      	cmp	r6, r7
 800e7d6:	d900      	bls.n	800e7da <__ssputs_r+0x72>
 800e7d8:	463e      	mov	r6, r7
 800e7da:	6820      	ldr	r0, [r4, #0]
 800e7dc:	4632      	mov	r2, r6
 800e7de:	4641      	mov	r1, r8
 800e7e0:	f000 faa8 	bl	800ed34 <memmove>
 800e7e4:	68a3      	ldr	r3, [r4, #8]
 800e7e6:	1b9b      	subs	r3, r3, r6
 800e7e8:	60a3      	str	r3, [r4, #8]
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	4433      	add	r3, r6
 800e7ee:	6023      	str	r3, [r4, #0]
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f6:	462a      	mov	r2, r5
 800e7f8:	f000 fab6 	bl	800ed68 <_realloc_r>
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	2800      	cmp	r0, #0
 800e800:	d1e0      	bne.n	800e7c4 <__ssputs_r+0x5c>
 800e802:	6921      	ldr	r1, [r4, #16]
 800e804:	4650      	mov	r0, sl
 800e806:	f7ff ff65 	bl	800e6d4 <_free_r>
 800e80a:	230c      	movs	r3, #12
 800e80c:	f8ca 3000 	str.w	r3, [sl]
 800e810:	89a3      	ldrh	r3, [r4, #12]
 800e812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e816:	81a3      	strh	r3, [r4, #12]
 800e818:	f04f 30ff 	mov.w	r0, #4294967295
 800e81c:	e7e9      	b.n	800e7f2 <__ssputs_r+0x8a>
	...

0800e820 <_svfiprintf_r>:
 800e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	4698      	mov	r8, r3
 800e826:	898b      	ldrh	r3, [r1, #12]
 800e828:	061b      	lsls	r3, r3, #24
 800e82a:	b09d      	sub	sp, #116	@ 0x74
 800e82c:	4607      	mov	r7, r0
 800e82e:	460d      	mov	r5, r1
 800e830:	4614      	mov	r4, r2
 800e832:	d510      	bpl.n	800e856 <_svfiprintf_r+0x36>
 800e834:	690b      	ldr	r3, [r1, #16]
 800e836:	b973      	cbnz	r3, 800e856 <_svfiprintf_r+0x36>
 800e838:	2140      	movs	r1, #64	@ 0x40
 800e83a:	f7ff fe4d 	bl	800e4d8 <_malloc_r>
 800e83e:	6028      	str	r0, [r5, #0]
 800e840:	6128      	str	r0, [r5, #16]
 800e842:	b930      	cbnz	r0, 800e852 <_svfiprintf_r+0x32>
 800e844:	230c      	movs	r3, #12
 800e846:	603b      	str	r3, [r7, #0]
 800e848:	f04f 30ff 	mov.w	r0, #4294967295
 800e84c:	b01d      	add	sp, #116	@ 0x74
 800e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e852:	2340      	movs	r3, #64	@ 0x40
 800e854:	616b      	str	r3, [r5, #20]
 800e856:	2300      	movs	r3, #0
 800e858:	9309      	str	r3, [sp, #36]	@ 0x24
 800e85a:	2320      	movs	r3, #32
 800e85c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e860:	f8cd 800c 	str.w	r8, [sp, #12]
 800e864:	2330      	movs	r3, #48	@ 0x30
 800e866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea04 <_svfiprintf_r+0x1e4>
 800e86a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e86e:	f04f 0901 	mov.w	r9, #1
 800e872:	4623      	mov	r3, r4
 800e874:	469a      	mov	sl, r3
 800e876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e87a:	b10a      	cbz	r2, 800e880 <_svfiprintf_r+0x60>
 800e87c:	2a25      	cmp	r2, #37	@ 0x25
 800e87e:	d1f9      	bne.n	800e874 <_svfiprintf_r+0x54>
 800e880:	ebba 0b04 	subs.w	fp, sl, r4
 800e884:	d00b      	beq.n	800e89e <_svfiprintf_r+0x7e>
 800e886:	465b      	mov	r3, fp
 800e888:	4622      	mov	r2, r4
 800e88a:	4629      	mov	r1, r5
 800e88c:	4638      	mov	r0, r7
 800e88e:	f7ff ff6b 	bl	800e768 <__ssputs_r>
 800e892:	3001      	adds	r0, #1
 800e894:	f000 80a7 	beq.w	800e9e6 <_svfiprintf_r+0x1c6>
 800e898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e89a:	445a      	add	r2, fp
 800e89c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e89e:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 809f 	beq.w	800e9e6 <_svfiprintf_r+0x1c6>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b2:	f10a 0a01 	add.w	sl, sl, #1
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	9307      	str	r3, [sp, #28]
 800e8ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8be:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8c0:	4654      	mov	r4, sl
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c8:	484e      	ldr	r0, [pc, #312]	@ (800ea04 <_svfiprintf_r+0x1e4>)
 800e8ca:	f7f1 fc91 	bl	80001f0 <memchr>
 800e8ce:	9a04      	ldr	r2, [sp, #16]
 800e8d0:	b9d8      	cbnz	r0, 800e90a <_svfiprintf_r+0xea>
 800e8d2:	06d0      	lsls	r0, r2, #27
 800e8d4:	bf44      	itt	mi
 800e8d6:	2320      	movmi	r3, #32
 800e8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8dc:	0711      	lsls	r1, r2, #28
 800e8de:	bf44      	itt	mi
 800e8e0:	232b      	movmi	r3, #43	@ 0x2b
 800e8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8ec:	d015      	beq.n	800e91a <_svfiprintf_r+0xfa>
 800e8ee:	9a07      	ldr	r2, [sp, #28]
 800e8f0:	4654      	mov	r4, sl
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	f04f 0c0a 	mov.w	ip, #10
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8fe:	3b30      	subs	r3, #48	@ 0x30
 800e900:	2b09      	cmp	r3, #9
 800e902:	d94b      	bls.n	800e99c <_svfiprintf_r+0x17c>
 800e904:	b1b0      	cbz	r0, 800e934 <_svfiprintf_r+0x114>
 800e906:	9207      	str	r2, [sp, #28]
 800e908:	e014      	b.n	800e934 <_svfiprintf_r+0x114>
 800e90a:	eba0 0308 	sub.w	r3, r0, r8
 800e90e:	fa09 f303 	lsl.w	r3, r9, r3
 800e912:	4313      	orrs	r3, r2
 800e914:	9304      	str	r3, [sp, #16]
 800e916:	46a2      	mov	sl, r4
 800e918:	e7d2      	b.n	800e8c0 <_svfiprintf_r+0xa0>
 800e91a:	9b03      	ldr	r3, [sp, #12]
 800e91c:	1d19      	adds	r1, r3, #4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	9103      	str	r1, [sp, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	bfbb      	ittet	lt
 800e926:	425b      	neglt	r3, r3
 800e928:	f042 0202 	orrlt.w	r2, r2, #2
 800e92c:	9307      	strge	r3, [sp, #28]
 800e92e:	9307      	strlt	r3, [sp, #28]
 800e930:	bfb8      	it	lt
 800e932:	9204      	strlt	r2, [sp, #16]
 800e934:	7823      	ldrb	r3, [r4, #0]
 800e936:	2b2e      	cmp	r3, #46	@ 0x2e
 800e938:	d10a      	bne.n	800e950 <_svfiprintf_r+0x130>
 800e93a:	7863      	ldrb	r3, [r4, #1]
 800e93c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e93e:	d132      	bne.n	800e9a6 <_svfiprintf_r+0x186>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	1d1a      	adds	r2, r3, #4
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	9203      	str	r2, [sp, #12]
 800e948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e94c:	3402      	adds	r4, #2
 800e94e:	9305      	str	r3, [sp, #20]
 800e950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea14 <_svfiprintf_r+0x1f4>
 800e954:	7821      	ldrb	r1, [r4, #0]
 800e956:	2203      	movs	r2, #3
 800e958:	4650      	mov	r0, sl
 800e95a:	f7f1 fc49 	bl	80001f0 <memchr>
 800e95e:	b138      	cbz	r0, 800e970 <_svfiprintf_r+0x150>
 800e960:	9b04      	ldr	r3, [sp, #16]
 800e962:	eba0 000a 	sub.w	r0, r0, sl
 800e966:	2240      	movs	r2, #64	@ 0x40
 800e968:	4082      	lsls	r2, r0
 800e96a:	4313      	orrs	r3, r2
 800e96c:	3401      	adds	r4, #1
 800e96e:	9304      	str	r3, [sp, #16]
 800e970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e974:	4824      	ldr	r0, [pc, #144]	@ (800ea08 <_svfiprintf_r+0x1e8>)
 800e976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e97a:	2206      	movs	r2, #6
 800e97c:	f7f1 fc38 	bl	80001f0 <memchr>
 800e980:	2800      	cmp	r0, #0
 800e982:	d036      	beq.n	800e9f2 <_svfiprintf_r+0x1d2>
 800e984:	4b21      	ldr	r3, [pc, #132]	@ (800ea0c <_svfiprintf_r+0x1ec>)
 800e986:	bb1b      	cbnz	r3, 800e9d0 <_svfiprintf_r+0x1b0>
 800e988:	9b03      	ldr	r3, [sp, #12]
 800e98a:	3307      	adds	r3, #7
 800e98c:	f023 0307 	bic.w	r3, r3, #7
 800e990:	3308      	adds	r3, #8
 800e992:	9303      	str	r3, [sp, #12]
 800e994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e996:	4433      	add	r3, r6
 800e998:	9309      	str	r3, [sp, #36]	@ 0x24
 800e99a:	e76a      	b.n	800e872 <_svfiprintf_r+0x52>
 800e99c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	2001      	movs	r0, #1
 800e9a4:	e7a8      	b.n	800e8f8 <_svfiprintf_r+0xd8>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	3401      	adds	r4, #1
 800e9aa:	9305      	str	r3, [sp, #20]
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	f04f 0c0a 	mov.w	ip, #10
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9b8:	3a30      	subs	r2, #48	@ 0x30
 800e9ba:	2a09      	cmp	r2, #9
 800e9bc:	d903      	bls.n	800e9c6 <_svfiprintf_r+0x1a6>
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d0c6      	beq.n	800e950 <_svfiprintf_r+0x130>
 800e9c2:	9105      	str	r1, [sp, #20]
 800e9c4:	e7c4      	b.n	800e950 <_svfiprintf_r+0x130>
 800e9c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e7f0      	b.n	800e9b2 <_svfiprintf_r+0x192>
 800e9d0:	ab03      	add	r3, sp, #12
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	462a      	mov	r2, r5
 800e9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800ea10 <_svfiprintf_r+0x1f0>)
 800e9d8:	a904      	add	r1, sp, #16
 800e9da:	4638      	mov	r0, r7
 800e9dc:	f3af 8000 	nop.w
 800e9e0:	1c42      	adds	r2, r0, #1
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	d1d6      	bne.n	800e994 <_svfiprintf_r+0x174>
 800e9e6:	89ab      	ldrh	r3, [r5, #12]
 800e9e8:	065b      	lsls	r3, r3, #25
 800e9ea:	f53f af2d 	bmi.w	800e848 <_svfiprintf_r+0x28>
 800e9ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9f0:	e72c      	b.n	800e84c <_svfiprintf_r+0x2c>
 800e9f2:	ab03      	add	r3, sp, #12
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	4b05      	ldr	r3, [pc, #20]	@ (800ea10 <_svfiprintf_r+0x1f0>)
 800e9fa:	a904      	add	r1, sp, #16
 800e9fc:	4638      	mov	r0, r7
 800e9fe:	f000 f879 	bl	800eaf4 <_printf_i>
 800ea02:	e7ed      	b.n	800e9e0 <_svfiprintf_r+0x1c0>
 800ea04:	0800f288 	.word	0x0800f288
 800ea08:	0800f292 	.word	0x0800f292
 800ea0c:	00000000 	.word	0x00000000
 800ea10:	0800e769 	.word	0x0800e769
 800ea14:	0800f28e 	.word	0x0800f28e

0800ea18 <_printf_common>:
 800ea18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea1c:	4616      	mov	r6, r2
 800ea1e:	4698      	mov	r8, r3
 800ea20:	688a      	ldr	r2, [r1, #8]
 800ea22:	690b      	ldr	r3, [r1, #16]
 800ea24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	bfb8      	it	lt
 800ea2c:	4613      	movlt	r3, r2
 800ea2e:	6033      	str	r3, [r6, #0]
 800ea30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea34:	4607      	mov	r7, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	b10a      	cbz	r2, 800ea3e <_printf_common+0x26>
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	6033      	str	r3, [r6, #0]
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	0699      	lsls	r1, r3, #26
 800ea42:	bf42      	ittt	mi
 800ea44:	6833      	ldrmi	r3, [r6, #0]
 800ea46:	3302      	addmi	r3, #2
 800ea48:	6033      	strmi	r3, [r6, #0]
 800ea4a:	6825      	ldr	r5, [r4, #0]
 800ea4c:	f015 0506 	ands.w	r5, r5, #6
 800ea50:	d106      	bne.n	800ea60 <_printf_common+0x48>
 800ea52:	f104 0a19 	add.w	sl, r4, #25
 800ea56:	68e3      	ldr	r3, [r4, #12]
 800ea58:	6832      	ldr	r2, [r6, #0]
 800ea5a:	1a9b      	subs	r3, r3, r2
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	dc26      	bgt.n	800eaae <_printf_common+0x96>
 800ea60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea64:	6822      	ldr	r2, [r4, #0]
 800ea66:	3b00      	subs	r3, #0
 800ea68:	bf18      	it	ne
 800ea6a:	2301      	movne	r3, #1
 800ea6c:	0692      	lsls	r2, r2, #26
 800ea6e:	d42b      	bmi.n	800eac8 <_printf_common+0xb0>
 800ea70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea74:	4641      	mov	r1, r8
 800ea76:	4638      	mov	r0, r7
 800ea78:	47c8      	blx	r9
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	d01e      	beq.n	800eabc <_printf_common+0xa4>
 800ea7e:	6823      	ldr	r3, [r4, #0]
 800ea80:	6922      	ldr	r2, [r4, #16]
 800ea82:	f003 0306 	and.w	r3, r3, #6
 800ea86:	2b04      	cmp	r3, #4
 800ea88:	bf02      	ittt	eq
 800ea8a:	68e5      	ldreq	r5, [r4, #12]
 800ea8c:	6833      	ldreq	r3, [r6, #0]
 800ea8e:	1aed      	subeq	r5, r5, r3
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	bf0c      	ite	eq
 800ea94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea98:	2500      	movne	r5, #0
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	bfc4      	itt	gt
 800ea9e:	1a9b      	subgt	r3, r3, r2
 800eaa0:	18ed      	addgt	r5, r5, r3
 800eaa2:	2600      	movs	r6, #0
 800eaa4:	341a      	adds	r4, #26
 800eaa6:	42b5      	cmp	r5, r6
 800eaa8:	d11a      	bne.n	800eae0 <_printf_common+0xc8>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e008      	b.n	800eac0 <_printf_common+0xa8>
 800eaae:	2301      	movs	r3, #1
 800eab0:	4652      	mov	r2, sl
 800eab2:	4641      	mov	r1, r8
 800eab4:	4638      	mov	r0, r7
 800eab6:	47c8      	blx	r9
 800eab8:	3001      	adds	r0, #1
 800eaba:	d103      	bne.n	800eac4 <_printf_common+0xac>
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295
 800eac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac4:	3501      	adds	r5, #1
 800eac6:	e7c6      	b.n	800ea56 <_printf_common+0x3e>
 800eac8:	18e1      	adds	r1, r4, r3
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	2030      	movs	r0, #48	@ 0x30
 800eace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ead2:	4422      	add	r2, r4
 800ead4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ead8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eadc:	3302      	adds	r3, #2
 800eade:	e7c7      	b.n	800ea70 <_printf_common+0x58>
 800eae0:	2301      	movs	r3, #1
 800eae2:	4622      	mov	r2, r4
 800eae4:	4641      	mov	r1, r8
 800eae6:	4638      	mov	r0, r7
 800eae8:	47c8      	blx	r9
 800eaea:	3001      	adds	r0, #1
 800eaec:	d0e6      	beq.n	800eabc <_printf_common+0xa4>
 800eaee:	3601      	adds	r6, #1
 800eaf0:	e7d9      	b.n	800eaa6 <_printf_common+0x8e>
	...

0800eaf4 <_printf_i>:
 800eaf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf8:	7e0f      	ldrb	r7, [r1, #24]
 800eafa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eafc:	2f78      	cmp	r7, #120	@ 0x78
 800eafe:	4691      	mov	r9, r2
 800eb00:	4680      	mov	r8, r0
 800eb02:	460c      	mov	r4, r1
 800eb04:	469a      	mov	sl, r3
 800eb06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb0a:	d807      	bhi.n	800eb1c <_printf_i+0x28>
 800eb0c:	2f62      	cmp	r7, #98	@ 0x62
 800eb0e:	d80a      	bhi.n	800eb26 <_printf_i+0x32>
 800eb10:	2f00      	cmp	r7, #0
 800eb12:	f000 80d2 	beq.w	800ecba <_printf_i+0x1c6>
 800eb16:	2f58      	cmp	r7, #88	@ 0x58
 800eb18:	f000 80b9 	beq.w	800ec8e <_printf_i+0x19a>
 800eb1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb24:	e03a      	b.n	800eb9c <_printf_i+0xa8>
 800eb26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb2a:	2b15      	cmp	r3, #21
 800eb2c:	d8f6      	bhi.n	800eb1c <_printf_i+0x28>
 800eb2e:	a101      	add	r1, pc, #4	@ (adr r1, 800eb34 <_printf_i+0x40>)
 800eb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb34:	0800eb8d 	.word	0x0800eb8d
 800eb38:	0800eba1 	.word	0x0800eba1
 800eb3c:	0800eb1d 	.word	0x0800eb1d
 800eb40:	0800eb1d 	.word	0x0800eb1d
 800eb44:	0800eb1d 	.word	0x0800eb1d
 800eb48:	0800eb1d 	.word	0x0800eb1d
 800eb4c:	0800eba1 	.word	0x0800eba1
 800eb50:	0800eb1d 	.word	0x0800eb1d
 800eb54:	0800eb1d 	.word	0x0800eb1d
 800eb58:	0800eb1d 	.word	0x0800eb1d
 800eb5c:	0800eb1d 	.word	0x0800eb1d
 800eb60:	0800eca1 	.word	0x0800eca1
 800eb64:	0800ebcb 	.word	0x0800ebcb
 800eb68:	0800ec5b 	.word	0x0800ec5b
 800eb6c:	0800eb1d 	.word	0x0800eb1d
 800eb70:	0800eb1d 	.word	0x0800eb1d
 800eb74:	0800ecc3 	.word	0x0800ecc3
 800eb78:	0800eb1d 	.word	0x0800eb1d
 800eb7c:	0800ebcb 	.word	0x0800ebcb
 800eb80:	0800eb1d 	.word	0x0800eb1d
 800eb84:	0800eb1d 	.word	0x0800eb1d
 800eb88:	0800ec63 	.word	0x0800ec63
 800eb8c:	6833      	ldr	r3, [r6, #0]
 800eb8e:	1d1a      	adds	r2, r3, #4
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6032      	str	r2, [r6, #0]
 800eb94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e09d      	b.n	800ecdc <_printf_i+0x1e8>
 800eba0:	6833      	ldr	r3, [r6, #0]
 800eba2:	6820      	ldr	r0, [r4, #0]
 800eba4:	1d19      	adds	r1, r3, #4
 800eba6:	6031      	str	r1, [r6, #0]
 800eba8:	0606      	lsls	r6, r0, #24
 800ebaa:	d501      	bpl.n	800ebb0 <_printf_i+0xbc>
 800ebac:	681d      	ldr	r5, [r3, #0]
 800ebae:	e003      	b.n	800ebb8 <_printf_i+0xc4>
 800ebb0:	0645      	lsls	r5, r0, #25
 800ebb2:	d5fb      	bpl.n	800ebac <_printf_i+0xb8>
 800ebb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebb8:	2d00      	cmp	r5, #0
 800ebba:	da03      	bge.n	800ebc4 <_printf_i+0xd0>
 800ebbc:	232d      	movs	r3, #45	@ 0x2d
 800ebbe:	426d      	negs	r5, r5
 800ebc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebc4:	4859      	ldr	r0, [pc, #356]	@ (800ed2c <_printf_i+0x238>)
 800ebc6:	230a      	movs	r3, #10
 800ebc8:	e011      	b.n	800ebee <_printf_i+0xfa>
 800ebca:	6821      	ldr	r1, [r4, #0]
 800ebcc:	6833      	ldr	r3, [r6, #0]
 800ebce:	0608      	lsls	r0, r1, #24
 800ebd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebd4:	d402      	bmi.n	800ebdc <_printf_i+0xe8>
 800ebd6:	0649      	lsls	r1, r1, #25
 800ebd8:	bf48      	it	mi
 800ebda:	b2ad      	uxthmi	r5, r5
 800ebdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebde:	4853      	ldr	r0, [pc, #332]	@ (800ed2c <_printf_i+0x238>)
 800ebe0:	6033      	str	r3, [r6, #0]
 800ebe2:	bf14      	ite	ne
 800ebe4:	230a      	movne	r3, #10
 800ebe6:	2308      	moveq	r3, #8
 800ebe8:	2100      	movs	r1, #0
 800ebea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebee:	6866      	ldr	r6, [r4, #4]
 800ebf0:	60a6      	str	r6, [r4, #8]
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	bfa2      	ittt	ge
 800ebf6:	6821      	ldrge	r1, [r4, #0]
 800ebf8:	f021 0104 	bicge.w	r1, r1, #4
 800ebfc:	6021      	strge	r1, [r4, #0]
 800ebfe:	b90d      	cbnz	r5, 800ec04 <_printf_i+0x110>
 800ec00:	2e00      	cmp	r6, #0
 800ec02:	d04b      	beq.n	800ec9c <_printf_i+0x1a8>
 800ec04:	4616      	mov	r6, r2
 800ec06:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec0a:	fb03 5711 	mls	r7, r3, r1, r5
 800ec0e:	5dc7      	ldrb	r7, [r0, r7]
 800ec10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec14:	462f      	mov	r7, r5
 800ec16:	42bb      	cmp	r3, r7
 800ec18:	460d      	mov	r5, r1
 800ec1a:	d9f4      	bls.n	800ec06 <_printf_i+0x112>
 800ec1c:	2b08      	cmp	r3, #8
 800ec1e:	d10b      	bne.n	800ec38 <_printf_i+0x144>
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	07df      	lsls	r7, r3, #31
 800ec24:	d508      	bpl.n	800ec38 <_printf_i+0x144>
 800ec26:	6923      	ldr	r3, [r4, #16]
 800ec28:	6861      	ldr	r1, [r4, #4]
 800ec2a:	4299      	cmp	r1, r3
 800ec2c:	bfde      	ittt	le
 800ec2e:	2330      	movle	r3, #48	@ 0x30
 800ec30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec38:	1b92      	subs	r2, r2, r6
 800ec3a:	6122      	str	r2, [r4, #16]
 800ec3c:	f8cd a000 	str.w	sl, [sp]
 800ec40:	464b      	mov	r3, r9
 800ec42:	aa03      	add	r2, sp, #12
 800ec44:	4621      	mov	r1, r4
 800ec46:	4640      	mov	r0, r8
 800ec48:	f7ff fee6 	bl	800ea18 <_printf_common>
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d14a      	bne.n	800ece6 <_printf_i+0x1f2>
 800ec50:	f04f 30ff 	mov.w	r0, #4294967295
 800ec54:	b004      	add	sp, #16
 800ec56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	f043 0320 	orr.w	r3, r3, #32
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	4833      	ldr	r0, [pc, #204]	@ (800ed30 <_printf_i+0x23c>)
 800ec64:	2778      	movs	r7, #120	@ 0x78
 800ec66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec6a:	6823      	ldr	r3, [r4, #0]
 800ec6c:	6831      	ldr	r1, [r6, #0]
 800ec6e:	061f      	lsls	r7, r3, #24
 800ec70:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec74:	d402      	bmi.n	800ec7c <_printf_i+0x188>
 800ec76:	065f      	lsls	r7, r3, #25
 800ec78:	bf48      	it	mi
 800ec7a:	b2ad      	uxthmi	r5, r5
 800ec7c:	6031      	str	r1, [r6, #0]
 800ec7e:	07d9      	lsls	r1, r3, #31
 800ec80:	bf44      	itt	mi
 800ec82:	f043 0320 	orrmi.w	r3, r3, #32
 800ec86:	6023      	strmi	r3, [r4, #0]
 800ec88:	b11d      	cbz	r5, 800ec92 <_printf_i+0x19e>
 800ec8a:	2310      	movs	r3, #16
 800ec8c:	e7ac      	b.n	800ebe8 <_printf_i+0xf4>
 800ec8e:	4827      	ldr	r0, [pc, #156]	@ (800ed2c <_printf_i+0x238>)
 800ec90:	e7e9      	b.n	800ec66 <_printf_i+0x172>
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	f023 0320 	bic.w	r3, r3, #32
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	e7f6      	b.n	800ec8a <_printf_i+0x196>
 800ec9c:	4616      	mov	r6, r2
 800ec9e:	e7bd      	b.n	800ec1c <_printf_i+0x128>
 800eca0:	6833      	ldr	r3, [r6, #0]
 800eca2:	6825      	ldr	r5, [r4, #0]
 800eca4:	6961      	ldr	r1, [r4, #20]
 800eca6:	1d18      	adds	r0, r3, #4
 800eca8:	6030      	str	r0, [r6, #0]
 800ecaa:	062e      	lsls	r6, r5, #24
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	d501      	bpl.n	800ecb4 <_printf_i+0x1c0>
 800ecb0:	6019      	str	r1, [r3, #0]
 800ecb2:	e002      	b.n	800ecba <_printf_i+0x1c6>
 800ecb4:	0668      	lsls	r0, r5, #25
 800ecb6:	d5fb      	bpl.n	800ecb0 <_printf_i+0x1bc>
 800ecb8:	8019      	strh	r1, [r3, #0]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	6123      	str	r3, [r4, #16]
 800ecbe:	4616      	mov	r6, r2
 800ecc0:	e7bc      	b.n	800ec3c <_printf_i+0x148>
 800ecc2:	6833      	ldr	r3, [r6, #0]
 800ecc4:	1d1a      	adds	r2, r3, #4
 800ecc6:	6032      	str	r2, [r6, #0]
 800ecc8:	681e      	ldr	r6, [r3, #0]
 800ecca:	6862      	ldr	r2, [r4, #4]
 800eccc:	2100      	movs	r1, #0
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f7f1 fa8e 	bl	80001f0 <memchr>
 800ecd4:	b108      	cbz	r0, 800ecda <_printf_i+0x1e6>
 800ecd6:	1b80      	subs	r0, r0, r6
 800ecd8:	6060      	str	r0, [r4, #4]
 800ecda:	6863      	ldr	r3, [r4, #4]
 800ecdc:	6123      	str	r3, [r4, #16]
 800ecde:	2300      	movs	r3, #0
 800ece0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece4:	e7aa      	b.n	800ec3c <_printf_i+0x148>
 800ece6:	6923      	ldr	r3, [r4, #16]
 800ece8:	4632      	mov	r2, r6
 800ecea:	4649      	mov	r1, r9
 800ecec:	4640      	mov	r0, r8
 800ecee:	47d0      	blx	sl
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d0ad      	beq.n	800ec50 <_printf_i+0x15c>
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	079b      	lsls	r3, r3, #30
 800ecf8:	d413      	bmi.n	800ed22 <_printf_i+0x22e>
 800ecfa:	68e0      	ldr	r0, [r4, #12]
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	4298      	cmp	r0, r3
 800ed00:	bfb8      	it	lt
 800ed02:	4618      	movlt	r0, r3
 800ed04:	e7a6      	b.n	800ec54 <_printf_i+0x160>
 800ed06:	2301      	movs	r3, #1
 800ed08:	4632      	mov	r2, r6
 800ed0a:	4649      	mov	r1, r9
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	47d0      	blx	sl
 800ed10:	3001      	adds	r0, #1
 800ed12:	d09d      	beq.n	800ec50 <_printf_i+0x15c>
 800ed14:	3501      	adds	r5, #1
 800ed16:	68e3      	ldr	r3, [r4, #12]
 800ed18:	9903      	ldr	r1, [sp, #12]
 800ed1a:	1a5b      	subs	r3, r3, r1
 800ed1c:	42ab      	cmp	r3, r5
 800ed1e:	dcf2      	bgt.n	800ed06 <_printf_i+0x212>
 800ed20:	e7eb      	b.n	800ecfa <_printf_i+0x206>
 800ed22:	2500      	movs	r5, #0
 800ed24:	f104 0619 	add.w	r6, r4, #25
 800ed28:	e7f5      	b.n	800ed16 <_printf_i+0x222>
 800ed2a:	bf00      	nop
 800ed2c:	0800f299 	.word	0x0800f299
 800ed30:	0800f2aa 	.word	0x0800f2aa

0800ed34 <memmove>:
 800ed34:	4288      	cmp	r0, r1
 800ed36:	b510      	push	{r4, lr}
 800ed38:	eb01 0402 	add.w	r4, r1, r2
 800ed3c:	d902      	bls.n	800ed44 <memmove+0x10>
 800ed3e:	4284      	cmp	r4, r0
 800ed40:	4623      	mov	r3, r4
 800ed42:	d807      	bhi.n	800ed54 <memmove+0x20>
 800ed44:	1e43      	subs	r3, r0, #1
 800ed46:	42a1      	cmp	r1, r4
 800ed48:	d008      	beq.n	800ed5c <memmove+0x28>
 800ed4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed52:	e7f8      	b.n	800ed46 <memmove+0x12>
 800ed54:	4402      	add	r2, r0
 800ed56:	4601      	mov	r1, r0
 800ed58:	428a      	cmp	r2, r1
 800ed5a:	d100      	bne.n	800ed5e <memmove+0x2a>
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed66:	e7f7      	b.n	800ed58 <memmove+0x24>

0800ed68 <_realloc_r>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	4615      	mov	r5, r2
 800ed70:	460c      	mov	r4, r1
 800ed72:	b921      	cbnz	r1, 800ed7e <_realloc_r+0x16>
 800ed74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed78:	4611      	mov	r1, r2
 800ed7a:	f7ff bbad 	b.w	800e4d8 <_malloc_r>
 800ed7e:	b92a      	cbnz	r2, 800ed8c <_realloc_r+0x24>
 800ed80:	f7ff fca8 	bl	800e6d4 <_free_r>
 800ed84:	2400      	movs	r4, #0
 800ed86:	4620      	mov	r0, r4
 800ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed8c:	f000 f81a 	bl	800edc4 <_malloc_usable_size_r>
 800ed90:	4285      	cmp	r5, r0
 800ed92:	4606      	mov	r6, r0
 800ed94:	d802      	bhi.n	800ed9c <_realloc_r+0x34>
 800ed96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed9a:	d8f4      	bhi.n	800ed86 <_realloc_r+0x1e>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4640      	mov	r0, r8
 800eda0:	f7ff fb9a 	bl	800e4d8 <_malloc_r>
 800eda4:	4607      	mov	r7, r0
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d0ec      	beq.n	800ed84 <_realloc_r+0x1c>
 800edaa:	42b5      	cmp	r5, r6
 800edac:	462a      	mov	r2, r5
 800edae:	4621      	mov	r1, r4
 800edb0:	bf28      	it	cs
 800edb2:	4632      	movcs	r2, r6
 800edb4:	f7ff fc80 	bl	800e6b8 <memcpy>
 800edb8:	4621      	mov	r1, r4
 800edba:	4640      	mov	r0, r8
 800edbc:	f7ff fc8a 	bl	800e6d4 <_free_r>
 800edc0:	463c      	mov	r4, r7
 800edc2:	e7e0      	b.n	800ed86 <_realloc_r+0x1e>

0800edc4 <_malloc_usable_size_r>:
 800edc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edc8:	1f18      	subs	r0, r3, #4
 800edca:	2b00      	cmp	r3, #0
 800edcc:	bfbc      	itt	lt
 800edce:	580b      	ldrlt	r3, [r1, r0]
 800edd0:	18c0      	addlt	r0, r0, r3
 800edd2:	4770      	bx	lr

0800edd4 <_init>:
 800edd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd6:	bf00      	nop
 800edd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edda:	bc08      	pop	{r3}
 800eddc:	469e      	mov	lr, r3
 800edde:	4770      	bx	lr

0800ede0 <_fini>:
 800ede0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede2:	bf00      	nop
 800ede4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ede6:	bc08      	pop	{r3}
 800ede8:	469e      	mov	lr, r3
 800edea:	4770      	bx	lr
